
WakeOnRemote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c04  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08009d14  08009d14  00019d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009db0  08009db0  00020168  2**0
                  CONTENTS
  4 .ARM          00000000  08009db0  08009db0  00020168  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009db0  08009db0  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009db0  08009db0  00019db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009db4  08009db4  00019db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08009db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001828  20000168  08009f20  00020168  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001990  08009f20  00021990  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018bff  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f6  00000000  00000000  00038dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003ced0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116b  00000000  00000000  0003e580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bba1  00000000  00000000  0003f6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd3f  00000000  00000000  0005b28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097320  00000000  00000000  00076fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005dc0  00000000  00000000  0010e2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001140ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000168 	.word	0x20000168
 800012c:	00000000 	.word	0x00000000
 8000130:	08009cfc 	.word	0x08009cfc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000016c 	.word	0x2000016c
 800014c:	08009cfc 	.word	0x08009cfc

08000150 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;
/* USER CODE END Variables */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a07      	ldr	r2, [pc, #28]	; (800017c <HAL_UART_RxCpltCallback+0x2c>)
 800015e:	4293      	cmp	r3, r2
 8000160:	d102      	bne.n	8000168 <HAL_UART_RxCpltCallback+0x18>
		received_msg_flag = 1;
 8000162:	4b07      	ldr	r3, [pc, #28]	; (8000180 <HAL_UART_RxCpltCallback+0x30>)
 8000164:	2201      	movs	r2, #1
 8000166:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) UART1_rxBuffer, 3);
 8000168:	2203      	movs	r2, #3
 800016a:	4906      	ldr	r1, [pc, #24]	; (8000184 <HAL_UART_RxCpltCallback+0x34>)
 800016c:	4806      	ldr	r0, [pc, #24]	; (8000188 <HAL_UART_RxCpltCallback+0x38>)
 800016e:	f003 fce3 	bl	8003b38 <HAL_UART_Receive_IT>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40013800 	.word	0x40013800
 8000180:	2000046c 	.word	0x2000046c
 8000184:	20000470 	.word	0x20000470
 8000188:	20000420 	.word	0x20000420

0800018c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <vApplicationGetIdleTaskMemory+0x28>)
 800019c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	4a05      	ldr	r2, [pc, #20]	; (80001b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80001a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2280      	movs	r2, #128	; 0x80
 80001a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001aa:	bf00      	nop
 80001ac:	3714      	adds	r7, #20
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000184 	.word	0x20000184
 80001b8:	200001d8 	.word	0x200001d8

080001bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001bc:	b5b0      	push	{r4, r5, r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c2:	f000 fb33 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c6:	f000 f81f 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ca:	f000 f8f9 	bl	80003c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001ce:	f000 f875 	bl	80002bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001d2:	f000 f8cb 	bl	800036c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartMainTask, osPriorityNormal, 0, 512);
 80001d6:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <main+0x44>)
 80001d8:	1d3c      	adds	r4, r7, #4
 80001da:	461d      	mov	r5, r3
 80001dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f007 ffca 	bl	8008186 <osThreadCreate>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a03      	ldr	r2, [pc, #12]	; (8000204 <main+0x48>)
 80001f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001f8:	f007 ffbe 	bl	8008178 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <main+0x40>
 80001fe:	bf00      	nop
 8000200:	08009d20 	.word	0x08009d20
 8000204:	20000468 	.word	0x20000468

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b094      	sub	sp, #80	; 0x50
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f009 fd44 	bl	8009ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000258:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fbfa 	bl	8002a58 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026a:	f000 f99f 	bl	80005ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fe66 	bl	8002f5c <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000296:	f000 f989 	bl	80005ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800029a:	2310      	movs	r3, #16
 800029c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 ffe7 	bl	8003278 <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002b0:	f000 f97c 	bl	80005ac <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3750      	adds	r7, #80	; 0x50
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08a      	sub	sp, #40	; 0x28
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c2:	f107 0320 	add.w	r3, r7, #32
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]
 80002da:	615a      	str	r2, [r3, #20]
 80002dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002de:	4b22      	ldr	r3, [pc, #136]	; (8000368 <MX_TIM2_Init+0xac>)
 80002e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002e6:	4b20      	ldr	r3, [pc, #128]	; (8000368 <MX_TIM2_Init+0xac>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ec:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <MX_TIM2_Init+0xac>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002f2:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <MX_TIM2_Init+0xac>)
 80002f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002fa:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_TIM2_Init+0xac>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000300:	4b19      	ldr	r3, [pc, #100]	; (8000368 <MX_TIM2_Init+0xac>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000306:	4818      	ldr	r0, [pc, #96]	; (8000368 <MX_TIM2_Init+0xac>)
 8000308:	f003 f86c 	bl	80033e4 <HAL_TIM_PWM_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000312:	f000 f94b 	bl	80005ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000316:	2300      	movs	r3, #0
 8000318:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800031e:	f107 0320 	add.w	r3, r7, #32
 8000322:	4619      	mov	r1, r3
 8000324:	4810      	ldr	r0, [pc, #64]	; (8000368 <MX_TIM2_Init+0xac>)
 8000326:	f003 fb59 	bl	80039dc <HAL_TIMEx_MasterConfigSynchronization>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000330:	f000 f93c 	bl	80005ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000334:	2360      	movs	r3, #96	; 0x60
 8000336:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	4619      	mov	r1, r3
 800034a:	4807      	ldr	r0, [pc, #28]	; (8000368 <MX_TIM2_Init+0xac>)
 800034c:	f003 f89a 	bl	8003484 <HAL_TIM_PWM_ConfigChannel>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000356:	f000 f929 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800035a:	4803      	ldr	r0, [pc, #12]	; (8000368 <MX_TIM2_Init+0xac>)
 800035c:	f000 f980 	bl	8000660 <HAL_TIM_MspPostInit>

}
 8000360:	bf00      	nop
 8000362:	3728      	adds	r7, #40	; 0x28
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	200003d8 	.word	0x200003d8

0800036c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <MX_USART1_UART_Init+0x50>)
 8000374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800037c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 80003a4:	f003 fb78 	bl	8003a98 <HAL_UART_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ae:	f000 f8fd 	bl	80005ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000420 	.word	0x20000420
 80003bc:	40013800 	.word	0x40013800

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d4:	4b1e      	ldr	r3, [pc, #120]	; (8000450 <MX_GPIO_Init+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a1d      	ldr	r2, [pc, #116]	; (8000450 <MX_GPIO_Init+0x90>)
 80003da:	f043 0310 	orr.w	r3, r3, #16
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <MX_GPIO_Init+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0310 	and.w	r3, r3, #16
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_GPIO_Init+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a17      	ldr	r2, [pc, #92]	; (8000450 <MX_GPIO_Init+0x90>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <MX_GPIO_Init+0x90>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0320 	and.w	r3, r3, #32
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_GPIO_Init+0x90>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a11      	ldr	r2, [pc, #68]	; (8000450 <MX_GPIO_Init+0x90>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_GPIO_Init+0x90>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000422:	480c      	ldr	r0, [pc, #48]	; (8000454 <MX_GPIO_Init+0x94>)
 8000424:	f000 fda8 	bl	8000f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	2301      	movs	r3, #1
 8000430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	2302      	movs	r3, #2
 8000438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800043a:	f107 0310 	add.w	r3, r7, #16
 800043e:	4619      	mov	r1, r3
 8000440:	4804      	ldr	r0, [pc, #16]	; (8000454 <MX_GPIO_Init+0x94>)
 8000442:	f000 fc15 	bl	8000c70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000446:	bf00      	nop
 8000448:	3720      	adds	r7, #32
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000
 8000454:	40011000 	.word	0x40011000

08000458 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000460:	f009 f866 	bl	8009530 <MX_USB_DEVICE_Init>
	  uint8_t KEYCODE4;
	  uint8_t KEYCODE5;
	  uint8_t KEYCODE6;
  } keyboardHID;

  keyboardHID keyboardhid = {0,0,0,0,0,0,0,0};
 8000464:	f107 0308 	add.w	r3, r7, #8
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]

  HAL_UART_Receive_IT(&huart1, (uint8_t*) UART1_rxBuffer, 3);
 800046e:	2203      	movs	r2, #3
 8000470:	4949      	ldr	r1, [pc, #292]	; (8000598 <StartMainTask+0x140>)
 8000472:	484a      	ldr	r0, [pc, #296]	; (800059c <StartMainTask+0x144>)
 8000474:	f003 fb60 	bl	8003b38 <HAL_UART_Receive_IT>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047e:	4848      	ldr	r0, [pc, #288]	; (80005a0 <StartMainTask+0x148>)
 8000480:	f000 fd7a 	bl	8000f78 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000484:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000488:	f007 fec9 	bl	800821e <osDelay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000492:	4843      	ldr	r0, [pc, #268]	; (80005a0 <StartMainTask+0x148>)
 8000494:	f000 fd70 	bl	8000f78 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049c:	f007 febf 	bl	800821e <osDelay>
	  // If a new message has arrived
	  if((received_msg_flag == 1) && (UART1_rxBuffer[0] == 0xA1) && (UART1_rxBuffer[3] == 0xB1)){
 80004a0:	4b40      	ldr	r3, [pc, #256]	; (80005a4 <StartMainTask+0x14c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d173      	bne.n	8000590 <StartMainTask+0x138>
 80004a8:	4b3b      	ldr	r3, [pc, #236]	; (8000598 <StartMainTask+0x140>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2ba1      	cmp	r3, #161	; 0xa1
 80004ae:	d16f      	bne.n	8000590 <StartMainTask+0x138>
 80004b0:	4b39      	ldr	r3, [pc, #228]	; (8000598 <StartMainTask+0x140>)
 80004b2:	78db      	ldrb	r3, [r3, #3]
 80004b4:	2bb1      	cmp	r3, #177	; 0xb1
 80004b6:	d16b      	bne.n	8000590 <StartMainTask+0x138>
		  // Check if the user wants to go into Ubuntu
		  if(UART1_rxBuffer[1] == 0x01){
 80004b8:	4b37      	ldr	r3, [pc, #220]	; (8000598 <StartMainTask+0x140>)
 80004ba:	785b      	ldrb	r3, [r3, #1]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d118      	bne.n	80004f2 <StartMainTask+0x9a>
			  // Just sends Enter because Ubuntu is in the first boot position
			  keyboardhid.KEYCODE1 = 0x58;		// Send "Enter"
 80004c0:	2358      	movs	r3, #88	; 0x58
 80004c2:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80004c4:	f107 0308 	add.w	r3, r7, #8
 80004c8:	2208      	movs	r2, #8
 80004ca:	4619      	mov	r1, r3
 80004cc:	4836      	ldr	r0, [pc, #216]	; (80005a8 <StartMainTask+0x150>)
 80004ce:	f006 fd4d 	bl	8006f6c <USBD_HID_SendReport>
			  osDelay(50);
 80004d2:	2032      	movs	r0, #50	; 0x32
 80004d4:	f007 fea3 	bl	800821e <osDelay>
			  keyboardhid.KEYCODE1 = 0x00;		// Release key
 80004d8:	2300      	movs	r3, #0
 80004da:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	2208      	movs	r2, #8
 80004e2:	4619      	mov	r1, r3
 80004e4:	4830      	ldr	r0, [pc, #192]	; (80005a8 <StartMainTask+0x150>)
 80004e6:	f006 fd41 	bl	8006f6c <USBD_HID_SendReport>
			  osDelay(50);
 80004ea:	2032      	movs	r0, #50	; 0x32
 80004ec:	f007 fe97 	bl	800821e <osDelay>
 80004f0:	e04b      	b.n	800058a <StartMainTask+0x132>

			  // Sends the Ubuntu user password
		  }
		  // Check if the user wants to go into Windows
		  else if(UART1_rxBuffer[1] == 0x02){
 80004f2:	4b29      	ldr	r3, [pc, #164]	; (8000598 <StartMainTask+0x140>)
 80004f4:	785b      	ldrb	r3, [r3, #1]
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d147      	bne.n	800058a <StartMainTask+0x132>
			  // Sends two times Down Arrow and Enter because Windows is in the third boot position
			  keyboardhid.KEYCODE1 = 0x51;		// Send "Down arrow"
 80004fa:	2351      	movs	r3, #81	; 0x51
 80004fc:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	2208      	movs	r2, #8
 8000504:	4619      	mov	r1, r3
 8000506:	4828      	ldr	r0, [pc, #160]	; (80005a8 <StartMainTask+0x150>)
 8000508:	f006 fd30 	bl	8006f6c <USBD_HID_SendReport>
			  osDelay(50);
 800050c:	2032      	movs	r0, #50	; 0x32
 800050e:	f007 fe86 	bl	800821e <osDelay>
			  keyboardhid.KEYCODE1 = 0x00;		// Release key
 8000512:	2300      	movs	r3, #0
 8000514:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2208      	movs	r2, #8
 800051c:	4619      	mov	r1, r3
 800051e:	4822      	ldr	r0, [pc, #136]	; (80005a8 <StartMainTask+0x150>)
 8000520:	f006 fd24 	bl	8006f6c <USBD_HID_SendReport>
			  osDelay(50);
 8000524:	2032      	movs	r0, #50	; 0x32
 8000526:	f007 fe7a 	bl	800821e <osDelay>
			  keyboardhid.KEYCODE1 = 0x51;		// Send "Down arrow"
 800052a:	2351      	movs	r3, #81	; 0x51
 800052c:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	2208      	movs	r2, #8
 8000534:	4619      	mov	r1, r3
 8000536:	481c      	ldr	r0, [pc, #112]	; (80005a8 <StartMainTask+0x150>)
 8000538:	f006 fd18 	bl	8006f6c <USBD_HID_SendReport>
			  osDelay(50);
 800053c:	2032      	movs	r0, #50	; 0x32
 800053e:	f007 fe6e 	bl	800821e <osDelay>
			  keyboardhid.KEYCODE1 = 0x00;		// Release key
 8000542:	2300      	movs	r3, #0
 8000544:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	2208      	movs	r2, #8
 800054c:	4619      	mov	r1, r3
 800054e:	4816      	ldr	r0, [pc, #88]	; (80005a8 <StartMainTask+0x150>)
 8000550:	f006 fd0c 	bl	8006f6c <USBD_HID_SendReport>
			  osDelay(50);
 8000554:	2032      	movs	r0, #50	; 0x32
 8000556:	f007 fe62 	bl	800821e <osDelay>
			  keyboardhid.KEYCODE1 = 0x58;		// Send "Enter"
 800055a:	2358      	movs	r3, #88	; 0x58
 800055c:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	2208      	movs	r2, #8
 8000564:	4619      	mov	r1, r3
 8000566:	4810      	ldr	r0, [pc, #64]	; (80005a8 <StartMainTask+0x150>)
 8000568:	f006 fd00 	bl	8006f6c <USBD_HID_SendReport>
			  osDelay(50);
 800056c:	2032      	movs	r0, #50	; 0x32
 800056e:	f007 fe56 	bl	800821e <osDelay>
			  keyboardhid.KEYCODE1 = 0x00;		// Release key
 8000572:	2300      	movs	r3, #0
 8000574:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	2208      	movs	r2, #8
 800057c:	4619      	mov	r1, r3
 800057e:	480a      	ldr	r0, [pc, #40]	; (80005a8 <StartMainTask+0x150>)
 8000580:	f006 fcf4 	bl	8006f6c <USBD_HID_SendReport>
			  osDelay(50);
 8000584:	2032      	movs	r0, #50	; 0x32
 8000586:	f007 fe4a 	bl	800821e <osDelay>
		  }
		  received_msg_flag = 0;	// Resets message received flag
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <StartMainTask+0x14c>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(10);
 8000590:	200a      	movs	r0, #10
 8000592:	f007 fe44 	bl	800821e <osDelay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000596:	e76f      	b.n	8000478 <StartMainTask+0x20>
 8000598:	20000470 	.word	0x20000470
 800059c:	20000420 	.word	0x20000420
 80005a0:	40011000 	.word	0x40011000
 80005a4:	2000046c 	.word	0x2000046c
 80005a8:	200011c8 	.word	0x200011c8

080005ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b0:	b672      	cpsid	i
}
 80005b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <Error_Handler+0x8>
	...

080005b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005be:	4b18      	ldr	r3, [pc, #96]	; (8000620 <HAL_MspInit+0x68>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <HAL_MspInit+0x68>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6193      	str	r3, [r2, #24]
 80005ca:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_MspInit+0x68>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_MspInit+0x68>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <HAL_MspInit+0x68>)
 80005dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e0:	61d3      	str	r3, [r2, #28]
 80005e2:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <HAL_MspInit+0x68>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	210f      	movs	r1, #15
 80005f2:	f06f 0001 	mvn.w	r0, #1
 80005f6:	f000 fa52 	bl	8000a9e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_MspInit+0x6c>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <HAL_MspInit+0x6c>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000
 8000624:	40010000 	.word	0x40010000

08000628 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000638:	d10b      	bne.n	8000652 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <HAL_TIM_PWM_MspInit+0x34>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a07      	ldr	r2, [pc, #28]	; (800065c <HAL_TIM_PWM_MspInit+0x34>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_TIM_PWM_MspInit+0x34>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000

08000660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800067e:	d117      	bne.n	80006b0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <HAL_TIM_MspPostInit+0x58>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <HAL_TIM_MspPostInit+0x58>)
 8000686:	f043 0304 	orr.w	r3, r3, #4
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <HAL_TIM_MspPostInit+0x58>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0304 	and.w	r3, r3, #4
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000698:	2301      	movs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069c:	2302      	movs	r3, #2
 800069e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	4619      	mov	r1, r3
 80006aa:	4804      	ldr	r0, [pc, #16]	; (80006bc <HAL_TIM_MspPostInit+0x5c>)
 80006ac:	f000 fae0 	bl	8000c70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006b0:	bf00      	nop
 80006b2:	3720      	adds	r7, #32
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010800 	.word	0x40010800

080006c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a20      	ldr	r2, [pc, #128]	; (800075c <HAL_UART_MspInit+0x9c>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d139      	bne.n	8000754 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <HAL_UART_MspInit+0xa0>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a1e      	ldr	r2, [pc, #120]	; (8000760 <HAL_UART_MspInit+0xa0>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <HAL_UART_MspInit+0xa0>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <HAL_UART_MspInit+0xa0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a18      	ldr	r2, [pc, #96]	; (8000760 <HAL_UART_MspInit+0xa0>)
 80006fe:	f043 0304 	orr.w	r3, r3, #4
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <HAL_UART_MspInit+0xa0>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0304 	and.w	r3, r3, #4
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000714:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000716:	2302      	movs	r3, #2
 8000718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	4619      	mov	r1, r3
 8000724:	480f      	ldr	r0, [pc, #60]	; (8000764 <HAL_UART_MspInit+0xa4>)
 8000726:	f000 faa3 	bl	8000c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800072a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4809      	ldr	r0, [pc, #36]	; (8000764 <HAL_UART_MspInit+0xa4>)
 8000740:	f000 fa96 	bl	8000c70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2105      	movs	r1, #5
 8000748:	2025      	movs	r0, #37	; 0x25
 800074a:	f000 f9a8 	bl	8000a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800074e:	2025      	movs	r0, #37	; 0x25
 8000750:	f000 f9c1 	bl	8000ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40013800 	.word	0x40013800
 8000760:	40021000 	.word	0x40021000
 8000764:	40010800 	.word	0x40010800

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800076c:	e7fe      	b.n	800076c <NMI_Handler+0x4>

0800076e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <HardFault_Handler+0x4>

08000774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <MemManage_Handler+0x4>

0800077a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <BusFault_Handler+0x4>

08000780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <UsageFault_Handler+0x4>

08000786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000796:	f000 f88f 	bl	80008b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800079a:	f008 fabd 	bl	8008d18 <xTaskGetSchedulerState>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d001      	beq.n	80007a8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007a4:	f008 fca8 	bl	80090f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007b2:	f000 fd1e 	bl	80011f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000168c 	.word	0x2000168c

080007c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <USART1_IRQHandler+0x10>)
 80007c6:	f003 f9dd 	bl	8003b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000420 	.word	0x20000420

080007d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e0:	f7ff fff8 	bl	80007d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e4:	480b      	ldr	r0, [pc, #44]	; (8000814 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007e6:	490c      	ldr	r1, [pc, #48]	; (8000818 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a09      	ldr	r2, [pc, #36]	; (8000820 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007fc:	4c09      	ldr	r4, [pc, #36]	; (8000824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080a:	f009 fa53 	bl	8009cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080e:	f7ff fcd5 	bl	80001bc <main>
  bx lr
 8000812:	4770      	bx	lr
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 800081c:	08009db8 	.word	0x08009db8
  ldr r2, =_sbss
 8000820:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8000824:	20001990 	.word	0x20001990

08000828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_2_IRQHandler>
	...

0800082c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_Init+0x28>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <HAL_Init+0x28>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800083c:	2003      	movs	r0, #3
 800083e:	f000 f923 	bl	8000a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000842:	200f      	movs	r0, #15
 8000844:	f000 f808 	bl	8000858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000848:	f7ff feb6 	bl	80005b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40022000 	.word	0x40022000

08000858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_InitTick+0x54>)
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <HAL_InitTick+0x58>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4619      	mov	r1, r3
 800086a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000872:	fbb2 f3f3 	udiv	r3, r2, r3
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f93b 	bl	8000af2 <HAL_SYSTICK_Config>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
 8000884:	e00e      	b.n	80008a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b0f      	cmp	r3, #15
 800088a:	d80a      	bhi.n	80008a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088c:	2200      	movs	r2, #0
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000894:	f000 f903 	bl	8000a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_InitTick+0x5c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800089e:	2300      	movs	r3, #0
 80008a0:	e000      	b.n	80008a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000004 	.word	0x20000004

080008b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_IncTick+0x1c>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_IncTick+0x20>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4413      	add	r3, r2
 80008c8:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <HAL_IncTick+0x20>)
 80008ca:	6013      	str	r3, [r2, #0]
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000474 	.word	0x20000474

080008dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b02      	ldr	r3, [pc, #8]	; (80008ec <HAL_GetTick+0x10>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	20000474 	.word	0x20000474

080008f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800090c:	4013      	ands	r3, r2
 800090e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800091c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <__NVIC_SetPriorityGrouping+0x44>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	60d3      	str	r3, [r2, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <__NVIC_GetPriorityGrouping+0x18>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	0a1b      	lsrs	r3, r3, #8
 8000942:	f003 0307 	and.w	r3, r3, #7
}
 8000946:	4618      	mov	r0, r3
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	2b00      	cmp	r3, #0
 8000964:	db0b      	blt.n	800097e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	f003 021f 	and.w	r2, r3, #31
 800096c:	4906      	ldr	r1, [pc, #24]	; (8000988 <__NVIC_EnableIRQ+0x34>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	095b      	lsrs	r3, r3, #5
 8000974:	2001      	movs	r0, #1
 8000976:	fa00 f202 	lsl.w	r2, r0, r2
 800097a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	e000e100 	.word	0xe000e100

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	; (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	; (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	bf28      	it	cs
 80009fe:	2304      	movcs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3304      	adds	r3, #4
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d902      	bls.n	8000a10 <NVIC_EncodePriority+0x30>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3b03      	subs	r3, #3
 8000a0e:	e000      	b.n	8000a12 <NVIC_EncodePriority+0x32>
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43d9      	mvns	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	; 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a54:	d301      	bcc.n	8000a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00f      	b.n	8000a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <SysTick_Config+0x40>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a62:	210f      	movs	r1, #15
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a68:	f7ff ff90 	bl	800098c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <SysTick_Config+0x40>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <SysTick_Config+0x40>)
 8000a74:	2207      	movs	r2, #7
 8000a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	e000e010 	.word	0xe000e010

08000a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ff2d 	bl	80008f0 <__NVIC_SetPriorityGrouping>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b086      	sub	sp, #24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	60b9      	str	r1, [r7, #8]
 8000aa8:	607a      	str	r2, [r7, #4]
 8000aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ab0:	f7ff ff42 	bl	8000938 <__NVIC_GetPriorityGrouping>
 8000ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	6978      	ldr	r0, [r7, #20]
 8000abc:	f7ff ff90 	bl	80009e0 <NVIC_EncodePriority>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff5f 	bl	800098c <__NVIC_SetPriority>
}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff35 	bl	8000954 <__NVIC_EnableIRQ>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ffa2 	bl	8000a44 <SysTick_Config>
 8000b00:	4603      	mov	r3, r0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b085      	sub	sp, #20
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d008      	beq.n	8000b34 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2204      	movs	r2, #4
 8000b26:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e020      	b.n	8000b76 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f022 020e 	bic.w	r2, r2, #14
 8000b42:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 0201 	bic.w	r2, r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b62:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2b02      	cmp	r3, #2
 8000b96:	d005      	beq.n	8000ba4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	e051      	b.n	8000c48 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 020e 	bic.w	r2, r2, #14
 8000bb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f022 0201 	bic.w	r2, r2, #1
 8000bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a22      	ldr	r2, [pc, #136]	; (8000c54 <HAL_DMA_Abort_IT+0xd4>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d029      	beq.n	8000c22 <HAL_DMA_Abort_IT+0xa2>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <HAL_DMA_Abort_IT+0xd8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d022      	beq.n	8000c1e <HAL_DMA_Abort_IT+0x9e>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <HAL_DMA_Abort_IT+0xdc>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d01a      	beq.n	8000c18 <HAL_DMA_Abort_IT+0x98>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a1e      	ldr	r2, [pc, #120]	; (8000c60 <HAL_DMA_Abort_IT+0xe0>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d012      	beq.n	8000c12 <HAL_DMA_Abort_IT+0x92>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1c      	ldr	r2, [pc, #112]	; (8000c64 <HAL_DMA_Abort_IT+0xe4>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d00a      	beq.n	8000c0c <HAL_DMA_Abort_IT+0x8c>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <HAL_DMA_Abort_IT+0xe8>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d102      	bne.n	8000c06 <HAL_DMA_Abort_IT+0x86>
 8000c00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c04:	e00e      	b.n	8000c24 <HAL_DMA_Abort_IT+0xa4>
 8000c06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c0a:	e00b      	b.n	8000c24 <HAL_DMA_Abort_IT+0xa4>
 8000c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c10:	e008      	b.n	8000c24 <HAL_DMA_Abort_IT+0xa4>
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	e005      	b.n	8000c24 <HAL_DMA_Abort_IT+0xa4>
 8000c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1c:	e002      	b.n	8000c24 <HAL_DMA_Abort_IT+0xa4>
 8000c1e:	2310      	movs	r3, #16
 8000c20:	e000      	b.n	8000c24 <HAL_DMA_Abort_IT+0xa4>
 8000c22:	2301      	movs	r3, #1
 8000c24:	4a11      	ldr	r2, [pc, #68]	; (8000c6c <HAL_DMA_Abort_IT+0xec>)
 8000c26:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d003      	beq.n	8000c48 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	4798      	blx	r3
    } 
  }
  return status;
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40020008 	.word	0x40020008
 8000c58:	4002001c 	.word	0x4002001c
 8000c5c:	40020030 	.word	0x40020030
 8000c60:	40020044 	.word	0x40020044
 8000c64:	40020058 	.word	0x40020058
 8000c68:	4002006c 	.word	0x4002006c
 8000c6c:	40020000 	.word	0x40020000

08000c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b08b      	sub	sp, #44	; 0x2c
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c82:	e169      	b.n	8000f58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c84:	2201      	movs	r2, #1
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 8158 	bne.w	8000f52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	4a9a      	ldr	r2, [pc, #616]	; (8000f10 <HAL_GPIO_Init+0x2a0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d05e      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cac:	4a98      	ldr	r2, [pc, #608]	; (8000f10 <HAL_GPIO_Init+0x2a0>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d875      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cb2:	4a98      	ldr	r2, [pc, #608]	; (8000f14 <HAL_GPIO_Init+0x2a4>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d058      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cb8:	4a96      	ldr	r2, [pc, #600]	; (8000f14 <HAL_GPIO_Init+0x2a4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d86f      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cbe:	4a96      	ldr	r2, [pc, #600]	; (8000f18 <HAL_GPIO_Init+0x2a8>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d052      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cc4:	4a94      	ldr	r2, [pc, #592]	; (8000f18 <HAL_GPIO_Init+0x2a8>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d869      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cca:	4a94      	ldr	r2, [pc, #592]	; (8000f1c <HAL_GPIO_Init+0x2ac>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d04c      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cd0:	4a92      	ldr	r2, [pc, #584]	; (8000f1c <HAL_GPIO_Init+0x2ac>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d863      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cd6:	4a92      	ldr	r2, [pc, #584]	; (8000f20 <HAL_GPIO_Init+0x2b0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d046      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
 8000cdc:	4a90      	ldr	r2, [pc, #576]	; (8000f20 <HAL_GPIO_Init+0x2b0>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d85d      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000ce2:	2b12      	cmp	r3, #18
 8000ce4:	d82a      	bhi.n	8000d3c <HAL_GPIO_Init+0xcc>
 8000ce6:	2b12      	cmp	r3, #18
 8000ce8:	d859      	bhi.n	8000d9e <HAL_GPIO_Init+0x12e>
 8000cea:	a201      	add	r2, pc, #4	; (adr r2, 8000cf0 <HAL_GPIO_Init+0x80>)
 8000cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf0:	08000d6b 	.word	0x08000d6b
 8000cf4:	08000d45 	.word	0x08000d45
 8000cf8:	08000d57 	.word	0x08000d57
 8000cfc:	08000d99 	.word	0x08000d99
 8000d00:	08000d9f 	.word	0x08000d9f
 8000d04:	08000d9f 	.word	0x08000d9f
 8000d08:	08000d9f 	.word	0x08000d9f
 8000d0c:	08000d9f 	.word	0x08000d9f
 8000d10:	08000d9f 	.word	0x08000d9f
 8000d14:	08000d9f 	.word	0x08000d9f
 8000d18:	08000d9f 	.word	0x08000d9f
 8000d1c:	08000d9f 	.word	0x08000d9f
 8000d20:	08000d9f 	.word	0x08000d9f
 8000d24:	08000d9f 	.word	0x08000d9f
 8000d28:	08000d9f 	.word	0x08000d9f
 8000d2c:	08000d9f 	.word	0x08000d9f
 8000d30:	08000d9f 	.word	0x08000d9f
 8000d34:	08000d4d 	.word	0x08000d4d
 8000d38:	08000d61 	.word	0x08000d61
 8000d3c:	4a79      	ldr	r2, [pc, #484]	; (8000f24 <HAL_GPIO_Init+0x2b4>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d013      	beq.n	8000d6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d42:	e02c      	b.n	8000d9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	623b      	str	r3, [r7, #32]
          break;
 8000d4a:	e029      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	3304      	adds	r3, #4
 8000d52:	623b      	str	r3, [r7, #32]
          break;
 8000d54:	e024      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	3308      	adds	r3, #8
 8000d5c:	623b      	str	r3, [r7, #32]
          break;
 8000d5e:	e01f      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	330c      	adds	r3, #12
 8000d66:	623b      	str	r3, [r7, #32]
          break;
 8000d68:	e01a      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d72:	2304      	movs	r3, #4
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e013      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d105      	bne.n	8000d8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d80:	2308      	movs	r3, #8
 8000d82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	69fa      	ldr	r2, [r7, #28]
 8000d88:	611a      	str	r2, [r3, #16]
          break;
 8000d8a:	e009      	b.n	8000da0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69fa      	ldr	r2, [r7, #28]
 8000d94:	615a      	str	r2, [r3, #20]
          break;
 8000d96:	e003      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
          break;
 8000d9c:	e000      	b.n	8000da0 <HAL_GPIO_Init+0x130>
          break;
 8000d9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	2bff      	cmp	r3, #255	; 0xff
 8000da4:	d801      	bhi.n	8000daa <HAL_GPIO_Init+0x13a>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	e001      	b.n	8000dae <HAL_GPIO_Init+0x13e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3304      	adds	r3, #4
 8000dae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	2bff      	cmp	r3, #255	; 0xff
 8000db4:	d802      	bhi.n	8000dbc <HAL_GPIO_Init+0x14c>
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	e002      	b.n	8000dc2 <HAL_GPIO_Init+0x152>
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	3b08      	subs	r3, #8
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	210f      	movs	r1, #15
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	6a39      	ldr	r1, [r7, #32]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f000 80b1 	beq.w	8000f52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000df0:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <HAL_GPIO_Init+0x2b8>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a4c      	ldr	r2, [pc, #304]	; (8000f28 <HAL_GPIO_Init+0x2b8>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b4a      	ldr	r3, [pc, #296]	; (8000f28 <HAL_GPIO_Init+0x2b8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e08:	4a48      	ldr	r2, [pc, #288]	; (8000f2c <HAL_GPIO_Init+0x2bc>)
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	089b      	lsrs	r3, r3, #2
 8000e0e:	3302      	adds	r3, #2
 8000e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a40      	ldr	r2, [pc, #256]	; (8000f30 <HAL_GPIO_Init+0x2c0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d013      	beq.n	8000e5c <HAL_GPIO_Init+0x1ec>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a3f      	ldr	r2, [pc, #252]	; (8000f34 <HAL_GPIO_Init+0x2c4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d00d      	beq.n	8000e58 <HAL_GPIO_Init+0x1e8>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a3e      	ldr	r2, [pc, #248]	; (8000f38 <HAL_GPIO_Init+0x2c8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d007      	beq.n	8000e54 <HAL_GPIO_Init+0x1e4>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a3d      	ldr	r2, [pc, #244]	; (8000f3c <HAL_GPIO_Init+0x2cc>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d101      	bne.n	8000e50 <HAL_GPIO_Init+0x1e0>
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e006      	b.n	8000e5e <HAL_GPIO_Init+0x1ee>
 8000e50:	2304      	movs	r3, #4
 8000e52:	e004      	b.n	8000e5e <HAL_GPIO_Init+0x1ee>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e002      	b.n	8000e5e <HAL_GPIO_Init+0x1ee>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <HAL_GPIO_Init+0x1ee>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e60:	f002 0203 	and.w	r2, r2, #3
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	4093      	lsls	r3, r2
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e6e:	492f      	ldr	r1, [pc, #188]	; (8000f2c <HAL_GPIO_Init+0x2bc>)
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e88:	4b2d      	ldr	r3, [pc, #180]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	492c      	ldr	r1, [pc, #176]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	608b      	str	r3, [r1, #8]
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e96:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	4928      	ldr	r1, [pc, #160]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d006      	beq.n	8000ebe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	4922      	ldr	r1, [pc, #136]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	60cb      	str	r3, [r1, #12]
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	491e      	ldr	r1, [pc, #120]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ec8:	4013      	ands	r3, r2
 8000eca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d006      	beq.n	8000ee6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	4918      	ldr	r1, [pc, #96]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
 8000ee4:	e006      	b.n	8000ef4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ee6:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	4914      	ldr	r1, [pc, #80]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d021      	beq.n	8000f44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f00:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	490e      	ldr	r1, [pc, #56]	; (8000f40 <HAL_GPIO_Init+0x2d0>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	600b      	str	r3, [r1, #0]
 8000f0c:	e021      	b.n	8000f52 <HAL_GPIO_Init+0x2e2>
 8000f0e:	bf00      	nop
 8000f10:	10320000 	.word	0x10320000
 8000f14:	10310000 	.word	0x10310000
 8000f18:	10220000 	.word	0x10220000
 8000f1c:	10210000 	.word	0x10210000
 8000f20:	10120000 	.word	0x10120000
 8000f24:	10110000 	.word	0x10110000
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010000 	.word	0x40010000
 8000f30:	40010800 	.word	0x40010800
 8000f34:	40010c00 	.word	0x40010c00
 8000f38:	40011000 	.word	0x40011000
 8000f3c:	40011400 	.word	0x40011400
 8000f40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4909      	ldr	r1, [pc, #36]	; (8000f74 <HAL_GPIO_Init+0x304>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	3301      	adds	r3, #1
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f47f ae8e 	bne.w	8000c84 <HAL_GPIO_Init+0x14>
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	372c      	adds	r7, #44	; 0x2c
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40010400 	.word	0x40010400

08000f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]
 8000f84:	4613      	mov	r3, r2
 8000f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f88:	787b      	ldrb	r3, [r7, #1]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f94:	e003      	b.n	8000f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	041a      	lsls	r2, r3, #16
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	611a      	str	r2, [r3, #16]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000faa:	b08b      	sub	sp, #44	; 0x2c
 8000fac:	af06      	add	r7, sp, #24
 8000fae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0f1      	b.n	800119e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f008 fbe2 	bl	8009798 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2203      	movs	r2, #3
 8000fd8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fb07 	bl	80045f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	687e      	ldr	r6, [r7, #4]
 8000fee:	466d      	mov	r5, sp
 8000ff0:	f106 0410 	add.w	r4, r6, #16
 8000ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	602b      	str	r3, [r5, #0]
 8000ffc:	1d33      	adds	r3, r6, #4
 8000ffe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001000:	6838      	ldr	r0, [r7, #0]
 8001002:	f003 fad1 	bl	80045a8 <USB_CoreInit>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2202      	movs	r2, #2
 8001010:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e0c2      	b.n	800119e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fb02 	bl	8004628 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001024:	2300      	movs	r3, #0
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e040      	b.n	80010ac <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	3301      	adds	r3, #1
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	440b      	add	r3, r1
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	3303      	adds	r3, #3
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	440b      	add	r3, r1
 8001078:	3338      	adds	r3, #56	; 0x38
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800107e:	7bfa      	ldrb	r2, [r7, #15]
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	440b      	add	r3, r1
 800108c:	333c      	adds	r3, #60	; 0x3c
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	440b      	add	r3, r1
 80010a0:	3340      	adds	r3, #64	; 0x40
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	3301      	adds	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3b9      	bcc.n	800102a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
 80010ba:	e044      	b.n	8001146 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	4413      	add	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	440b      	add	r3, r1
 80010ca:	f203 1369 	addw	r3, r3, #361	; 0x169
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	440b      	add	r3, r1
 80010f6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	440b      	add	r3, r1
 800110c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	440b      	add	r3, r1
 8001122:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	3301      	adds	r3, #1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	d3b5      	bcc.n	80010bc <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	687e      	ldr	r6, [r7, #4]
 8001158:	466d      	mov	r5, sp
 800115a:	f106 0410 	add.w	r4, r6, #16
 800115e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	602b      	str	r3, [r5, #0]
 8001166:	1d33      	adds	r3, r6, #4
 8001168:	cb0e      	ldmia	r3, {r1, r2, r3}
 800116a:	6838      	ldr	r0, [r7, #0]
 800116c:	f003 fa68 	bl	8004640 <USB_DevInit>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d005      	beq.n	8001182 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2202      	movs	r2, #2
 800117a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00d      	b.n	800119e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f005 fce9 	bl	8006b6e <USB_DevDisconnect>

  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d101      	bne.n	80011bc <HAL_PCD_Start+0x16>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e016      	b.n	80011ea <HAL_PCD_Start+0x44>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 f9fd 	bl	80045c8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011ce:	2101      	movs	r1, #1
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f008 fd30 	bl	8009c36 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f005 fcbd 	bl	8006b5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b088      	sub	sp, #32
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f005 fcbf 	bl	8006b82 <USB_ReadInterrupts>
 8001204:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 fb04 	bl	800181e <PCD_EP_ISR_Handler>

    return;
 8001216:	e119      	b.n	800144c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800121e:	2b00      	cmp	r3, #0
 8001220:	d013      	beq.n	800124a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001234:	b292      	uxth	r2, r2
 8001236:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f008 fb27 	bl	800988e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001240:	2100      	movs	r1, #0
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 f905 	bl	8001452 <HAL_PCD_SetAddress>

    return;
 8001248:	e100      	b.n	800144c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00c      	beq.n	800126e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800125c:	b29a      	uxth	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001266:	b292      	uxth	r2, r2
 8001268:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800126c:	e0ee      	b.n	800144c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00c      	beq.n	8001292 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001280:	b29a      	uxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800128a:	b292      	uxth	r2, r2
 800128c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001290:	e0dc      	b.n	800144c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d027      	beq.n	80012ec <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 0204 	bic.w	r2, r2, #4
 80012ae:	b292      	uxth	r2, r2
 80012b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012bc:	b29a      	uxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0208 	bic.w	r2, r2, #8
 80012c6:	b292      	uxth	r2, r2
 80012c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f008 fb17 	bl	8009900 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012da:	b29a      	uxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012e4:	b292      	uxth	r2, r2
 80012e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012ea:	e0af      	b.n	800144c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f000 8083 	beq.w	80013fe <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	77fb      	strb	r3, [r7, #31]
 80012fc:	e010      	b.n	8001320 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	7ffb      	ldrb	r3, [r7, #31]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	441a      	add	r2, r3
 800130a:	7ffb      	ldrb	r3, [r7, #31]
 800130c:	8812      	ldrh	r2, [r2, #0]
 800130e:	b292      	uxth	r2, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	3320      	adds	r3, #32
 8001314:	443b      	add	r3, r7
 8001316:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800131a:	7ffb      	ldrb	r3, [r7, #31]
 800131c:	3301      	adds	r3, #1
 800131e:	77fb      	strb	r3, [r7, #31]
 8001320:	7ffb      	ldrb	r3, [r7, #31]
 8001322:	2b07      	cmp	r3, #7
 8001324:	d9eb      	bls.n	80012fe <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800132e:	b29a      	uxth	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 0201 	orr.w	r2, r2, #1
 8001338:	b292      	uxth	r2, r2
 800133a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001346:	b29a      	uxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	b292      	uxth	r2, r2
 8001352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001356:	bf00      	nop
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001360:	b29b      	uxth	r3, r3
 8001362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f6      	beq.n	8001358 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001372:	b29a      	uxth	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800137c:	b292      	uxth	r2, r2
 800137e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001382:	2300      	movs	r3, #0
 8001384:	77fb      	strb	r3, [r7, #31]
 8001386:	e00f      	b.n	80013a8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	4611      	mov	r1, r2
 8001390:	7ffa      	ldrb	r2, [r7, #31]
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	440a      	add	r2, r1
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	3320      	adds	r3, #32
 800139a:	443b      	add	r3, r7
 800139c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80013a0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80013a2:	7ffb      	ldrb	r3, [r7, #31]
 80013a4:	3301      	adds	r3, #1
 80013a6:	77fb      	strb	r3, [r7, #31]
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	2b07      	cmp	r3, #7
 80013ac:	d9ec      	bls.n	8001388 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f042 0208 	orr.w	r2, r2, #8
 80013c0:	b292      	uxth	r2, r2
 80013c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013d8:	b292      	uxth	r2, r2
 80013da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f042 0204 	orr.w	r2, r2, #4
 80013f0:	b292      	uxth	r2, r2
 80013f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f008 fa68 	bl	80098cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80013fc:	e026      	b.n	800144c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00f      	beq.n	8001428 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001410:	b29a      	uxth	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800141a:	b292      	uxth	r2, r2
 800141c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f008 fa26 	bl	8009872 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001426:	e011      	b.n	800144c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00c      	beq.n	800144c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800143a:	b29a      	uxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001444:	b292      	uxth	r2, r2
 8001446:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800144a:	bf00      	nop
  }
}
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <HAL_PCD_SetAddress+0x1a>
 8001468:	2302      	movs	r3, #2
 800146a:	e013      	b.n	8001494 <HAL_PCD_SetAddress+0x42>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	78fa      	ldrb	r2, [r7, #3]
 8001478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	78fa      	ldrb	r2, [r7, #3]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f005 fb55 	bl	8006b34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	4608      	mov	r0, r1
 80014a6:	4611      	mov	r1, r2
 80014a8:	461a      	mov	r2, r3
 80014aa:	4603      	mov	r3, r0
 80014ac:	70fb      	strb	r3, [r7, #3]
 80014ae:	460b      	mov	r3, r1
 80014b0:	803b      	strh	r3, [r7, #0]
 80014b2:	4613      	mov	r3, r2
 80014b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da0e      	bge.n	80014e0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	705a      	strb	r2, [r3, #1]
 80014de:	e00e      	b.n	80014fe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	f003 0207 	and.w	r2, r3, #7
 80014e6:	4613      	mov	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80014fe:	78fb      	ldrb	r3, [r7, #3]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	b2da      	uxtb	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800150a:	883a      	ldrh	r2, [r7, #0]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	78ba      	ldrb	r2, [r7, #2]
 8001514:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001516:	78bb      	ldrb	r3, [r7, #2]
 8001518:	2b02      	cmp	r3, #2
 800151a:	d102      	bne.n	8001522 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <HAL_PCD_EP_Open+0x94>
 800152c:	2302      	movs	r3, #2
 800152e:	e00e      	b.n	800154e <HAL_PCD_EP_Open+0xb2>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68f9      	ldr	r1, [r7, #12]
 800153e:	4618      	mov	r0, r3
 8001540:	f003 f89e 	bl	8004680 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800154c:	7afb      	ldrb	r3, [r7, #11]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b084      	sub	sp, #16
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	460b      	mov	r3, r1
 8001560:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001566:	2b00      	cmp	r3, #0
 8001568:	da0e      	bge.n	8001588 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2201      	movs	r2, #1
 8001584:	705a      	strb	r2, [r3, #1]
 8001586:	e00e      	b.n	80015a6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	f003 0207 	and.w	r2, r3, #7
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_PCD_EP_Close+0x6a>
 80015bc:	2302      	movs	r3, #2
 80015be:	e00e      	b.n	80015de <HAL_PCD_EP_Close+0x88>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68f9      	ldr	r1, [r7, #12]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fc16 	bl	8004e00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	460b      	mov	r3, r1
 80015f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015f6:	7afb      	ldrb	r3, [r7, #11]
 80015f8:	f003 0207 	and.w	r2, r3, #7
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2200      	movs	r2, #0
 8001624:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001626:	7afb      	ldrb	r3, [r7, #11]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	b2da      	uxtb	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6979      	ldr	r1, [r7, #20]
 8001638:	4618      	mov	r0, r3
 800163a:	f003 fdcd 	bl	80051d8 <USB_EPStartXfer>

  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	607a      	str	r2, [r7, #4]
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	460b      	mov	r3, r1
 8001656:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001658:	7afb      	ldrb	r3, [r7, #11]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4413      	add	r3, r2
 800166c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2201      	movs	r2, #1
 8001692:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001694:	7afb      	ldrb	r3, [r7, #11]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	b2da      	uxtb	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6979      	ldr	r1, [r7, #20]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fd96 	bl	80051d8 <USB_EPStartXfer>

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	460b      	mov	r3, r1
 80016c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	f003 0207 	and.w	r2, r3, #7
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d901      	bls.n	80016d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e04c      	b.n	800176e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	da0e      	bge.n	80016fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	705a      	strb	r2, [r3, #1]
 80016f8:	e00c      	b.n	8001714 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80016fa:	78fa      	ldrb	r2, [r7, #3]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2201      	movs	r2, #1
 8001718:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	b2da      	uxtb	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_PCD_EP_SetStall+0x7e>
 8001730:	2302      	movs	r3, #2
 8001732:	e01c      	b.n	800176e <HAL_PCD_EP_SetStall+0xb8>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	4618      	mov	r0, r3
 8001744:	f005 f8f9 	bl	800693a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	2b00      	cmp	r3, #0
 8001750:	d108      	bne.n	8001764 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800175c:	4619      	mov	r1, r3
 800175e:	4610      	mov	r0, r2
 8001760:	f005 fa1e 	bl	8006ba0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	f003 020f 	and.w	r2, r3, #15
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	429a      	cmp	r2, r3
 800178e:	d901      	bls.n	8001794 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e040      	b.n	8001816 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001798:	2b00      	cmp	r3, #0
 800179a:	da0e      	bge.n	80017ba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2201      	movs	r2, #1
 80017b6:	705a      	strb	r2, [r3, #1]
 80017b8:	e00e      	b.n	80017d8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	f003 0207 	and.w	r2, r3, #7
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_PCD_EP_ClrStall+0x82>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e00e      	b.n	8001816 <HAL_PCD_EP_ClrStall+0xa0>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68f9      	ldr	r1, [r7, #12]
 8001806:	4618      	mov	r0, r3
 8001808:	f005 f8e7 	bl	80069da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b096      	sub	sp, #88	; 0x58
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001826:	e3bf      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001830:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001834:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001842:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001846:	2b00      	cmp	r3, #0
 8001848:	f040 8179 	bne.w	8001b3e <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800184c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	2b00      	cmp	r3, #0
 8001856:	d152      	bne.n	80018fe <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001868:	81fb      	strh	r3, [r7, #14]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001874:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001878:	b29b      	uxth	r3, r3
 800187a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3328      	adds	r3, #40	; 0x28
 8001880:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800188a:	b29b      	uxth	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	3302      	adds	r3, #2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	441a      	add	r2, r3
 80018b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018bc:	2100      	movs	r1, #0
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f007 ffbd 	bl	800983e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 836b 	beq.w	8001fa8 <PCD_EP_ISR_Handler+0x78a>
 80018d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 8366 	bne.w	8001fa8 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b292      	uxth	r2, r2
 80018f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80018fc:	e354      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001904:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001910:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001918:	2b00      	cmp	r3, #0
 800191a:	d034      	beq.n	8001986 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001924:	b29b      	uxth	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4413      	add	r3, r2
 8001930:	3306      	adds	r3, #6
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	4413      	add	r3, r2
 800193a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001946:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001954:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001958:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800195a:	b29b      	uxth	r3, r3
 800195c:	f005 f970 	bl	8006c40 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	b29a      	uxth	r2, r3
 8001968:	f640 738f 	movw	r3, #3983	; 0xf8f
 800196c:	4013      	ands	r3, r2
 800196e:	823b      	strh	r3, [r7, #16]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	8a3a      	ldrh	r2, [r7, #16]
 8001976:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800197a:	b292      	uxth	r2, r2
 800197c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f007 ff30 	bl	80097e4 <HAL_PCD_SetupStageCallback>
 8001984:	e310      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001986:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800198a:	2b00      	cmp	r3, #0
 800198c:	f280 830c 	bge.w	8001fa8 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	b29a      	uxth	r2, r3
 8001998:	f640 738f 	movw	r3, #3983	; 0xf8f
 800199c:	4013      	ands	r3, r2
 800199e:	83fb      	strh	r3, [r7, #30]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	8bfa      	ldrh	r2, [r7, #30]
 80019a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019aa:	b292      	uxth	r2, r2
 80019ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	3306      	adds	r3, #6
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d019      	beq.n	8001a16 <PCD_EP_ISR_Handler+0x1f8>
 80019e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d015      	beq.n	8001a16 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f0:	6959      	ldr	r1, [r3, #20]
 80019f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80019f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f005 f920 	bl	8006c40 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	441a      	add	r2, r3
 8001a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a0e:	2100      	movs	r1, #0
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f007 fef9 	bl	8009808 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a20:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f040 82bd 	bne.w	8001fa8 <PCD_EP_ISR_Handler+0x78a>
 8001a2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a32:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a3a:	f000 82b5 	beq.w	8001fa8 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	4413      	add	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	801a      	strh	r2, [r3, #0]
 8001a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	2b3e      	cmp	r3, #62	; 0x3e
 8001a74:	d91d      	bls.n	8001ab2 <PCD_EP_ISR_Handler+0x294>
 8001a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8001a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <PCD_EP_ISR_Handler+0x272>
 8001a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	029b      	lsls	r3, r3, #10
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	801a      	strh	r2, [r3, #0]
 8001ab0:	e026      	b.n	8001b00 <PCD_EP_ISR_Handler+0x2e2>
 8001ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <PCD_EP_ISR_Handler+0x2b2>
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ac4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	801a      	strh	r2, [r3, #0]
 8001ace:	e017      	b.n	8001b00 <PCD_EP_ISR_Handler+0x2e2>
 8001ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	085b      	lsrs	r3, r3, #1
 8001ad6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <PCD_EP_ISR_Handler+0x2cc>
 8001ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	029b      	lsls	r3, r3, #10
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4313      	orrs	r3, r2
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b10:	827b      	strh	r3, [r7, #18]
 8001b12:	8a7b      	ldrh	r3, [r7, #18]
 8001b14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b18:	827b      	strh	r3, [r7, #18]
 8001b1a:	8a7b      	ldrh	r3, [r7, #18]
 8001b1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b20:	827b      	strh	r3, [r7, #18]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	8a7b      	ldrh	r3, [r7, #18]
 8001b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	8013      	strh	r3, [r2, #0]
 8001b3c:	e234      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b52:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f280 80fc 	bge.w	8001d54 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b72:	4013      	ands	r3, r2
 8001b74:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001b8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b8e:	b292      	uxth	r2, r2
 8001b90:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001b92:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001baa:	7b1b      	ldrb	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d125      	bne.n	8001bfc <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3306      	adds	r3, #6
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001bdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8092 	beq.w	8001d0a <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6818      	ldr	r0, [r3, #0]
 8001bea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bec:	6959      	ldr	r1, [r3, #20]
 8001bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf0:	88da      	ldrh	r2, [r3, #6]
 8001bf2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bf6:	f005 f823 	bl	8006c40 <USB_ReadPMA>
 8001bfa:	e086      	b.n	8001d0a <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bfe:	78db      	ldrb	r3, [r3, #3]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d10a      	bne.n	8001c1a <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c08:	461a      	mov	r2, r3
 8001c0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f9d9 	bl	8001fc4 <HAL_PCD_EP_DB_Receive>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001c18:	e077      	b.n	8001d0a <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c34:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	441a      	add	r2, r3
 8001c46:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d024      	beq.n	8001cc2 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	461a      	mov	r2, r3
 8001c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ca0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001ca4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d02e      	beq.n	8001d0a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb2:	6959      	ldr	r1, [r3, #20]
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb6:	891a      	ldrh	r2, [r3, #8]
 8001cb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cbc:	f004 ffc0 	bl	8006c40 <USB_ReadPMA>
 8001cc0:	e023      	b.n	8001d0a <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3306      	adds	r3, #6
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001cee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfc:	6959      	ldr	r1, [r3, #20]
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d00:	895a      	ldrh	r2, [r3, #10]
 8001d02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d06:	f004 ff9b 	bl	8006c40 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0c:	69da      	ldr	r2, [r3, #28]
 8001d0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d12:	441a      	add	r2, r3
 8001d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d16:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d1a:	695a      	ldr	r2, [r3, #20]
 8001d1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d20:	441a      	add	r2, r3
 8001d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d24:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <PCD_EP_ISR_Handler+0x51c>
 8001d2e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d206      	bcs.n	8001d48 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f007 fd61 	bl	8009808 <HAL_PCD_DataOutStageCallback>
 8001d46:	e005      	b.n	8001d54 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 fa42 	bl	80051d8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 8123 	beq.w	8001fa8 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	4413      	add	r3, r2
 8001d74:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	4413      	add	r3, r2
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	441a      	add	r2, r3
 8001da2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db4:	78db      	ldrb	r3, [r3, #3]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	f040 80a2 	bne.w	8001f00 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc4:	7b1b      	ldrb	r3, [r3, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8093 	beq.w	8001ef2 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dcc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d046      	beq.n	8001e66 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dda:	785b      	ldrb	r3, [r3, #1]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d126      	bne.n	8001e2e <PCD_EP_ISR_Handler+0x610>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	4413      	add	r3, r2
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
 8001df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	011a      	lsls	r2, r3, #4
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	4413      	add	r3, r2
 8001e02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e06:	623b      	str	r3, [r7, #32]
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	801a      	strh	r2, [r3, #0]
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	801a      	strh	r2, [r3, #0]
 8001e2c:	e061      	b.n	8001ef2 <PCD_EP_ISR_Handler+0x6d4>
 8001e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e30:	785b      	ldrb	r3, [r3, #1]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d15d      	bne.n	8001ef2 <PCD_EP_ISR_Handler+0x6d4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4a:	4413      	add	r3, r2
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	011a      	lsls	r2, r3, #4
 8001e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e56:	4413      	add	r3, r2
 8001e58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e60:	2200      	movs	r2, #0
 8001e62:	801a      	strh	r2, [r3, #0]
 8001e64:	e045      	b.n	8001ef2 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d126      	bne.n	8001ec2 <PCD_EP_ISR_Handler+0x6a4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	637b      	str	r3, [r7, #52]	; 0x34
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e88:	4413      	add	r3, r2
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	011a      	lsls	r2, r3, #4
 8001e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e94:	4413      	add	r3, r2
 8001e96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eaa:	801a      	strh	r2, [r3, #0]
 8001eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebe:	801a      	strh	r2, [r3, #0]
 8001ec0:	e017      	b.n	8001ef2 <PCD_EP_ISR_Handler+0x6d4>
 8001ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec4:	785b      	ldrb	r3, [r3, #1]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d113      	bne.n	8001ef2 <PCD_EP_ISR_Handler+0x6d4>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed8:	4413      	add	r3, r2
 8001eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	011a      	lsls	r2, r3, #4
 8001ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001eea:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eee:	2200      	movs	r2, #0
 8001ef0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ef2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f007 fca0 	bl	800983e <HAL_PCD_DataInStageCallback>
 8001efe:	e053      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d146      	bne.n	8001f9a <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3302      	adds	r3, #2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3a:	699a      	ldr	r2, [r3, #24]
 8001f3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d907      	bls.n	8001f54 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f4c:	1ad2      	subs	r2, r2, r3
 8001f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f50:	619a      	str	r2, [r3, #24]
 8001f52:	e002      	b.n	8001f5a <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f007 fc68 	bl	800983e <HAL_PCD_DataInStageCallback>
 8001f6e:	e01b      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f78:	441a      	add	r2, r3
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f80:	69da      	ldr	r2, [r3, #28]
 8001f82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f86:	441a      	add	r2, r3
 8001f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 f920 	bl	80051d8 <USB_EPStartXfer>
 8001f98:	e006      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f91b 	bl	80021de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f6ff ac37 	blt.w	8001828 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3758      	adds	r7, #88	; 0x58
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d07e      	beq.n	80020da <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002004:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	699a      	ldr	r2, [r3, #24]
 800200a:	8b7b      	ldrh	r3, [r7, #26]
 800200c:	429a      	cmp	r2, r3
 800200e:	d306      	bcc.n	800201e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	8b7b      	ldrh	r3, [r7, #26]
 8002016:	1ad2      	subs	r2, r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	619a      	str	r2, [r3, #24]
 800201c:	e002      	b.n	8002024 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d123      	bne.n	8002074 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b29b      	uxth	r3, r3
 800203e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002046:	833b      	strh	r3, [r7, #24]
 8002048:	8b3b      	ldrh	r3, [r7, #24]
 800204a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800204e:	833b      	strh	r3, [r7, #24]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	441a      	add	r2, r3
 800205e:	8b3b      	ldrh	r3, [r7, #24]
 8002060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	b29b      	uxth	r3, r3
 8002072:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d01f      	beq.n	80020be <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002098:	82fb      	strh	r3, [r7, #22]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	441a      	add	r2, r3
 80020a8:	8afb      	ldrh	r3, [r7, #22]
 80020aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020be:	8b7b      	ldrh	r3, [r7, #26]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8087 	beq.w	80021d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	6959      	ldr	r1, [r3, #20]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	891a      	ldrh	r2, [r3, #8]
 80020d2:	8b7b      	ldrh	r3, [r7, #26]
 80020d4:	f004 fdb4 	bl	8006c40 <USB_ReadPMA>
 80020d8:	e07c      	b.n	80021d4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4413      	add	r3, r2
 80020ee:	3306      	adds	r3, #6
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002102:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	699a      	ldr	r2, [r3, #24]
 8002108:	8b7b      	ldrh	r3, [r7, #26]
 800210a:	429a      	cmp	r2, r3
 800210c:	d306      	bcc.n	800211c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	8b7b      	ldrh	r3, [r7, #26]
 8002114:	1ad2      	subs	r2, r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	619a      	str	r2, [r3, #24]
 800211a:	e002      	b.n	8002122 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d123      	bne.n	8002172 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002144:	83fb      	strh	r3, [r7, #30]
 8002146:	8bfb      	ldrh	r3, [r7, #30]
 8002148:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800214c:	83fb      	strh	r3, [r7, #30]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	441a      	add	r2, r3
 800215c:	8bfb      	ldrh	r3, [r7, #30]
 800215e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216e:	b29b      	uxth	r3, r3
 8002170:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002172:	88fb      	ldrh	r3, [r7, #6]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d11f      	bne.n	80021bc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	881b      	ldrh	r3, [r3, #0]
 800218c:	b29b      	uxth	r3, r3
 800218e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002196:	83bb      	strh	r3, [r7, #28]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	441a      	add	r2, r3
 80021a6:	8bbb      	ldrh	r3, [r7, #28]
 80021a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021bc:	8b7b      	ldrh	r3, [r7, #26]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	6959      	ldr	r1, [r3, #20]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	895a      	ldrh	r2, [r3, #10]
 80021ce:	8b7b      	ldrh	r3, [r7, #26]
 80021d0:	f004 fd36 	bl	8006c40 <USB_ReadPMA>
    }
  }

  return count;
 80021d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b0a4      	sub	sp, #144	; 0x90
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	4613      	mov	r3, r2
 80021ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 81dd 	beq.w	80025b2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002200:	b29b      	uxth	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	3302      	adds	r3, #2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002220:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800222c:	429a      	cmp	r2, r3
 800222e:	d907      	bls.n	8002240 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002238:	1ad2      	subs	r2, r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	619a      	str	r2, [r3, #24]
 800223e:	e002      	b.n	8002246 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 80b9 	bne.w	80023c2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	785b      	ldrb	r3, [r3, #1]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d126      	bne.n	80022a6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	4413      	add	r3, r2
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	011a      	lsls	r2, r3, #4
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	4413      	add	r3, r2
 800227a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29b      	uxth	r3, r3
 8002286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800228a:	b29a      	uxth	r2, r3
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	801a      	strh	r2, [r3, #0]
 8002290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	b29b      	uxth	r3, r3
 8002296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800229a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800229e:	b29a      	uxth	r2, r3
 80022a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a2:	801a      	strh	r2, [r3, #0]
 80022a4:	e01a      	b.n	80022dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	785b      	ldrb	r3, [r3, #1]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d116      	bne.n	80022dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c2:	4413      	add	r3, r2
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	011a      	lsls	r2, r3, #4
 80022cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ce:	4413      	add	r3, r2
 80022d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	2200      	movs	r2, #0
 80022da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	785b      	ldrb	r3, [r3, #1]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d126      	bne.n	8002338 <HAL_PCD_EP_DB_Transmit+0x15a>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61fb      	str	r3, [r7, #28]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	4413      	add	r3, r2
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	011a      	lsls	r2, r3, #4
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	4413      	add	r3, r2
 800230c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231c:	b29a      	uxth	r2, r3
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	801a      	strh	r2, [r3, #0]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	b29b      	uxth	r3, r3
 8002328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800232c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002330:	b29a      	uxth	r2, r3
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	801a      	strh	r2, [r3, #0]
 8002336:	e017      	b.n	8002368 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	785b      	ldrb	r3, [r3, #1]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d113      	bne.n	8002368 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	4413      	add	r3, r2
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	011a      	lsls	r2, r3, #4
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	4413      	add	r3, r2
 800235c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002360:	623b      	str	r3, [r7, #32]
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	2200      	movs	r2, #0
 8002366:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f007 fa65 	bl	800983e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 82fc 	beq.w	8002978 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b29b      	uxth	r3, r3
 8002392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239a:	82fb      	strh	r3, [r7, #22]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	441a      	add	r2, r3
 80023aa:	8afb      	ldrh	r3, [r7, #22]
 80023ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023bc:	b29b      	uxth	r3, r3
 80023be:	8013      	strh	r3, [r2, #0]
 80023c0:	e2da      	b.n	8002978 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023c2:	88fb      	ldrh	r3, [r7, #6]
 80023c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d021      	beq.n	8002410 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	461a      	mov	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	b29b      	uxth	r3, r3
 80023de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	441a      	add	r2, r3
 80023f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80023fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002400:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002404:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240c:	b29b      	uxth	r3, r3
 800240e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002416:	2b01      	cmp	r3, #1
 8002418:	f040 82ae 	bne.w	8002978 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	695a      	ldr	r2, [r3, #20]
 8002420:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002424:	441a      	add	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	69da      	ldr	r2, [r3, #28]
 800242e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002432:	441a      	add	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	6a1a      	ldr	r2, [r3, #32]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	429a      	cmp	r2, r3
 8002442:	d30b      	bcc.n	800245c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	6a1a      	ldr	r2, [r3, #32]
 8002450:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002454:	1ad2      	subs	r2, r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	621a      	str	r2, [r3, #32]
 800245a:	e017      	b.n	800248c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d108      	bne.n	8002476 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002464:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002468:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002474:	e00a      	b.n	800248c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d165      	bne.n	8002560 <HAL_PCD_EP_DB_Transmit+0x382>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	63fb      	str	r3, [r7, #60]	; 0x3c
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a8:	4413      	add	r3, r2
 80024aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	011a      	lsls	r2, r3, #4
 80024b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024b4:	4413      	add	r3, r2
 80024b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80024bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ca:	801a      	strh	r2, [r3, #0]
 80024cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024d0:	2b3e      	cmp	r3, #62	; 0x3e
 80024d2:	d91d      	bls.n	8002510 <HAL_PCD_EP_DB_Transmit+0x332>
 80024d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	64bb      	str	r3, [r7, #72]	; 0x48
 80024dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e0:	f003 031f 	and.w	r3, r3, #31
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d102      	bne.n	80024ee <HAL_PCD_EP_DB_Transmit+0x310>
 80024e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024ea:	3b01      	subs	r3, #1
 80024ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	029b      	lsls	r3, r3, #10
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b29b      	uxth	r3, r3
 8002500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002508:	b29a      	uxth	r2, r3
 800250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800250c:	801a      	strh	r2, [r3, #0]
 800250e:	e044      	b.n	800259a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002510:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_PCD_EP_DB_Transmit+0x350>
 8002518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002526:	b29a      	uxth	r2, r3
 8002528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252a:	801a      	strh	r2, [r3, #0]
 800252c:	e035      	b.n	800259a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800252e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	64bb      	str	r3, [r7, #72]	; 0x48
 8002536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002544:	3301      	adds	r3, #1
 8002546:	64bb      	str	r3, [r7, #72]	; 0x48
 8002548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	b29a      	uxth	r2, r3
 800254e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002550:	b29b      	uxth	r3, r3
 8002552:	029b      	lsls	r3, r3, #10
 8002554:	b29b      	uxth	r3, r3
 8002556:	4313      	orrs	r3, r2
 8002558:	b29a      	uxth	r2, r3
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255c:	801a      	strh	r2, [r3, #0]
 800255e:	e01c      	b.n	800259a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	785b      	ldrb	r3, [r3, #1]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d118      	bne.n	800259a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	647b      	str	r3, [r7, #68]	; 0x44
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002576:	b29b      	uxth	r3, r3
 8002578:	461a      	mov	r2, r3
 800257a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800257c:	4413      	add	r3, r2
 800257e:	647b      	str	r3, [r7, #68]	; 0x44
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	011a      	lsls	r2, r3, #4
 8002586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002588:	4413      	add	r3, r2
 800258a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800258e:	643b      	str	r3, [r7, #64]	; 0x40
 8002590:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002594:	b29a      	uxth	r2, r3
 8002596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002598:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	6959      	ldr	r1, [r3, #20]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	891a      	ldrh	r2, [r3, #8]
 80025a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f004 fb03 	bl	8006bb6 <USB_WritePMA>
 80025b0:	e1e2      	b.n	8002978 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	3306      	adds	r3, #6
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025da:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d307      	bcc.n	80025fa <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025f2:	1ad2      	subs	r2, r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	619a      	str	r2, [r3, #24]
 80025f8:	e002      	b.n	8002600 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 80c0 	bne.w	800278a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	785b      	ldrb	r3, [r3, #1]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d126      	bne.n	8002660 <HAL_PCD_EP_DB_Transmit+0x482>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002620:	b29b      	uxth	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002626:	4413      	add	r3, r2
 8002628:	67fb      	str	r3, [r7, #124]	; 0x7c
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	011a      	lsls	r2, r3, #4
 8002630:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002632:	4413      	add	r3, r2
 8002634:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002638:	67bb      	str	r3, [r7, #120]	; 0x78
 800263a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	b29b      	uxth	r3, r3
 8002640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002644:	b29a      	uxth	r2, r3
 8002646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002648:	801a      	strh	r2, [r3, #0]
 800264a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002658:	b29a      	uxth	r2, r3
 800265a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	e01a      	b.n	8002696 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d116      	bne.n	8002696 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	667b      	str	r3, [r7, #100]	; 0x64
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002676:	b29b      	uxth	r3, r3
 8002678:	461a      	mov	r2, r3
 800267a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800267c:	4413      	add	r3, r2
 800267e:	667b      	str	r3, [r7, #100]	; 0x64
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	011a      	lsls	r2, r3, #4
 8002686:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002688:	4413      	add	r3, r2
 800268a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800268e:	663b      	str	r3, [r7, #96]	; 0x60
 8002690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002692:	2200      	movs	r2, #0
 8002694:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	677b      	str	r3, [r7, #116]	; 0x74
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	785b      	ldrb	r3, [r3, #1]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d12b      	bne.n	80026fc <HAL_PCD_EP_DB_Transmit+0x51e>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026b8:	4413      	add	r3, r2
 80026ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	011a      	lsls	r2, r3, #4
 80026c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c4:	4413      	add	r3, r2
 80026c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026da:	b29a      	uxth	r2, r3
 80026dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026e0:	801a      	strh	r2, [r3, #0]
 80026e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026f8:	801a      	strh	r2, [r3, #0]
 80026fa:	e017      	b.n	800272c <HAL_PCD_EP_DB_Transmit+0x54e>
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	785b      	ldrb	r3, [r3, #1]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d113      	bne.n	800272c <HAL_PCD_EP_DB_Transmit+0x54e>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800270c:	b29b      	uxth	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002712:	4413      	add	r3, r2
 8002714:	677b      	str	r3, [r7, #116]	; 0x74
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	011a      	lsls	r2, r3, #4
 800271c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800271e:	4413      	add	r3, r2
 8002720:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002724:	673b      	str	r3, [r7, #112]	; 0x70
 8002726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002728:	2200      	movs	r2, #0
 800272a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f007 f883 	bl	800983e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 811a 	bne.w	8002978 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	b29b      	uxth	r3, r3
 8002756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800275e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	441a      	add	r2, r3
 8002770:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002774:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002778:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800277c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002784:	b29b      	uxth	r3, r3
 8002786:	8013      	strh	r3, [r2, #0]
 8002788:	e0f6      	b.n	8002978 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d121      	bne.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	441a      	add	r2, r3
 80027c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027de:	2b01      	cmp	r3, #1
 80027e0:	f040 80ca 	bne.w	8002978 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027ec:	441a      	add	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	69da      	ldr	r2, [r3, #28]
 80027f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80027fa:	441a      	add	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	429a      	cmp	r2, r3
 800280a:	d30b      	bcc.n	8002824 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800281c:	1ad2      	subs	r2, r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	621a      	str	r2, [r3, #32]
 8002822:	e017      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d108      	bne.n	800283e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800282c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002830:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800283c:	e00a      	b.n	8002854 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	657b      	str	r3, [r7, #84]	; 0x54
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	785b      	ldrb	r3, [r3, #1]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d165      	bne.n	800292e <HAL_PCD_EP_DB_Transmit+0x750>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002870:	b29b      	uxth	r3, r3
 8002872:	461a      	mov	r2, r3
 8002874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002876:	4413      	add	r3, r2
 8002878:	65fb      	str	r3, [r7, #92]	; 0x5c
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	011a      	lsls	r2, r3, #4
 8002880:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002882:	4413      	add	r3, r2
 8002884:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002888:	65bb      	str	r3, [r7, #88]	; 0x58
 800288a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b29b      	uxth	r3, r3
 8002890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002894:	b29a      	uxth	r2, r3
 8002896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002898:	801a      	strh	r2, [r3, #0]
 800289a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800289e:	2b3e      	cmp	r3, #62	; 0x3e
 80028a0:	d91d      	bls.n	80028de <HAL_PCD_EP_DB_Transmit+0x700>
 80028a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028a6:	095b      	lsrs	r3, r3, #5
 80028a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80028aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <HAL_PCD_EP_DB_Transmit+0x6de>
 80028b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b8:	3b01      	subs	r3, #1
 80028ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80028bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	029b      	lsls	r3, r3, #10
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	4313      	orrs	r3, r2
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028da:	801a      	strh	r2, [r3, #0]
 80028dc:	e041      	b.n	8002962 <HAL_PCD_EP_DB_Transmit+0x784>
 80028de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <HAL_PCD_EP_DB_Transmit+0x71e>
 80028e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	e032      	b.n	8002962 <HAL_PCD_EP_DB_Transmit+0x784>
 80028fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	66bb      	str	r3, [r7, #104]	; 0x68
 8002904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <HAL_PCD_EP_DB_Transmit+0x738>
 8002910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002912:	3301      	adds	r3, #1
 8002914:	66bb      	str	r3, [r7, #104]	; 0x68
 8002916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	b29a      	uxth	r2, r3
 800291c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800291e:	b29b      	uxth	r3, r3
 8002920:	029b      	lsls	r3, r3, #10
 8002922:	b29b      	uxth	r3, r3
 8002924:	4313      	orrs	r3, r2
 8002926:	b29a      	uxth	r2, r3
 8002928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292a:	801a      	strh	r2, [r3, #0]
 800292c:	e019      	b.n	8002962 <HAL_PCD_EP_DB_Transmit+0x784>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	785b      	ldrb	r3, [r3, #1]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d115      	bne.n	8002962 <HAL_PCD_EP_DB_Transmit+0x784>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800293e:	b29b      	uxth	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002944:	4413      	add	r3, r2
 8002946:	657b      	str	r3, [r7, #84]	; 0x54
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	011a      	lsls	r2, r3, #4
 800294e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002950:	4413      	add	r3, r2
 8002952:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002956:	653b      	str	r3, [r7, #80]	; 0x50
 8002958:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800295c:	b29a      	uxth	r2, r3
 800295e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002960:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	6959      	ldr	r1, [r3, #20]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	895a      	ldrh	r2, [r3, #10]
 800296e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002972:	b29b      	uxth	r3, r3
 8002974:	f004 f91f 	bl	8006bb6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800298e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002992:	82bb      	strh	r3, [r7, #20]
 8002994:	8abb      	ldrh	r3, [r7, #20]
 8002996:	f083 0310 	eor.w	r3, r3, #16
 800299a:	82bb      	strh	r3, [r7, #20]
 800299c:	8abb      	ldrh	r3, [r7, #20]
 800299e:	f083 0320 	eor.w	r3, r3, #32
 80029a2:	82bb      	strh	r3, [r7, #20]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	441a      	add	r2, r3
 80029b2:	8abb      	ldrh	r3, [r7, #20]
 80029b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3790      	adds	r7, #144	; 0x90
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b087      	sub	sp, #28
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	817b      	strh	r3, [r7, #10]
 80029e0:	4613      	mov	r3, r2
 80029e2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029e4:	897b      	ldrh	r3, [r7, #10]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00b      	beq.n	8002a08 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f0:	897b      	ldrh	r3, [r7, #10]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e009      	b.n	8002a1c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a08:	897a      	ldrh	r2, [r7, #10]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4413      	add	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a1c:	893b      	ldrh	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d107      	bne.n	8002a32 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2200      	movs	r2, #0
 8002a26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	80da      	strh	r2, [r3, #6]
 8002a30:	e00b      	b.n	8002a4a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2201      	movs	r2, #1
 8002a36:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e272      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8087 	beq.w	8002b86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a78:	4b92      	ldr	r3, [pc, #584]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d00c      	beq.n	8002a9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a84:	4b8f      	ldr	r3, [pc, #572]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 030c 	and.w	r3, r3, #12
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d112      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x5e>
 8002a90:	4b8c      	ldr	r3, [pc, #560]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d10b      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a9e:	4b89      	ldr	r3, [pc, #548]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d06c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x12c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d168      	bne.n	8002b84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e24c      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x76>
 8002ac0:	4b80      	ldr	r3, [pc, #512]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a7f      	ldr	r2, [pc, #508]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	e02e      	b.n	8002b2c <HAL_RCC_OscConfig+0xd4>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x98>
 8002ad6:	4b7b      	ldr	r3, [pc, #492]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a7a      	ldr	r2, [pc, #488]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	4b78      	ldr	r3, [pc, #480]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a77      	ldr	r2, [pc, #476]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	e01d      	b.n	8002b2c <HAL_RCC_OscConfig+0xd4>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0xbc>
 8002afa:	4b72      	ldr	r3, [pc, #456]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a71      	ldr	r2, [pc, #452]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a6e      	ldr	r2, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0xd4>
 8002b14:	4b6b      	ldr	r3, [pc, #428]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6a      	ldr	r2, [pc, #424]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b68      	ldr	r3, [pc, #416]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a67      	ldr	r2, [pc, #412]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7fd fed2 	bl	80008dc <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fd fece 	bl	80008dc <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e200      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	4b5d      	ldr	r3, [pc, #372]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0xe4>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fd febe 	bl	80008dc <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fd feba 	bl	80008dc <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	; 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e1ec      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b76:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x10c>
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d063      	beq.n	8002c5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b92:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 030c 	and.w	r3, r3, #12
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b9e:	4b49      	ldr	r3, [pc, #292]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b08      	cmp	r3, #8
 8002ba8:	d11c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x18c>
 8002baa:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d116      	bne.n	8002be4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_RCC_OscConfig+0x176>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e1c0      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bce:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4939      	ldr	r1, [pc, #228]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002be2:	e03a      	b.n	8002c5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bec:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fd fe73 	bl	80008dc <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfa:	f7fd fe6f 	bl	80008dc <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e1a1      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4927      	ldr	r1, [pc, #156]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	600b      	str	r3, [r1, #0]
 8002c2c:	e015      	b.n	8002c5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <HAL_RCC_OscConfig+0x270>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c34:	f7fd fe52 	bl	80008dc <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3c:	f7fd fe4e 	bl	80008dc <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e180      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d03a      	beq.n	8002cdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d019      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fd fe32 	bl	80008dc <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fd fe2e 	bl	80008dc <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e160      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c9a:	2001      	movs	r0, #1
 8002c9c:	f000 face 	bl	800323c <RCC_Delay>
 8002ca0:	e01c      	b.n	8002cdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca8:	f7fd fe18 	bl	80008dc <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cae:	e00f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fd fe14 	bl	80008dc <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d908      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e146      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	42420000 	.word	0x42420000
 8002ccc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd0:	4b92      	ldr	r3, [pc, #584]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e9      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 80a6 	beq.w	8002e36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cee:	4b8b      	ldr	r3, [pc, #556]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10d      	bne.n	8002d16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	4b88      	ldr	r3, [pc, #544]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4a87      	ldr	r2, [pc, #540]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d04:	61d3      	str	r3, [r2, #28]
 8002d06:	4b85      	ldr	r3, [pc, #532]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d12:	2301      	movs	r3, #1
 8002d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d16:	4b82      	ldr	r3, [pc, #520]	; (8002f20 <HAL_RCC_OscConfig+0x4c8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d118      	bne.n	8002d54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d22:	4b7f      	ldr	r3, [pc, #508]	; (8002f20 <HAL_RCC_OscConfig+0x4c8>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a7e      	ldr	r2, [pc, #504]	; (8002f20 <HAL_RCC_OscConfig+0x4c8>)
 8002d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2e:	f7fd fdd5 	bl	80008dc <HAL_GetTick>
 8002d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d36:	f7fd fdd1 	bl	80008dc <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b64      	cmp	r3, #100	; 0x64
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e103      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d48:	4b75      	ldr	r3, [pc, #468]	; (8002f20 <HAL_RCC_OscConfig+0x4c8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d106      	bne.n	8002d6a <HAL_RCC_OscConfig+0x312>
 8002d5c:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4a6e      	ldr	r2, [pc, #440]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6213      	str	r3, [r2, #32]
 8002d68:	e02d      	b.n	8002dc6 <HAL_RCC_OscConfig+0x36e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x334>
 8002d72:	4b6a      	ldr	r3, [pc, #424]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4a69      	ldr	r2, [pc, #420]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	6213      	str	r3, [r2, #32]
 8002d7e:	4b67      	ldr	r3, [pc, #412]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	4a66      	ldr	r2, [pc, #408]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	f023 0304 	bic.w	r3, r3, #4
 8002d88:	6213      	str	r3, [r2, #32]
 8002d8a:	e01c      	b.n	8002dc6 <HAL_RCC_OscConfig+0x36e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d10c      	bne.n	8002dae <HAL_RCC_OscConfig+0x356>
 8002d94:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	4a60      	ldr	r2, [pc, #384]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	6213      	str	r3, [r2, #32]
 8002da0:	4b5e      	ldr	r3, [pc, #376]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4a5d      	ldr	r2, [pc, #372]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6213      	str	r3, [r2, #32]
 8002dac:	e00b      	b.n	8002dc6 <HAL_RCC_OscConfig+0x36e>
 8002dae:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	4a5a      	ldr	r2, [pc, #360]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6213      	str	r3, [r2, #32]
 8002dba:	4b58      	ldr	r3, [pc, #352]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4a57      	ldr	r2, [pc, #348]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002dc0:	f023 0304 	bic.w	r3, r3, #4
 8002dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d015      	beq.n	8002dfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7fd fd85 	bl	80008dc <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fd fd81 	bl	80008dc <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0b1      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	4b4b      	ldr	r3, [pc, #300]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0ee      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x37e>
 8002df8:	e014      	b.n	8002e24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7fd fd6f 	bl	80008dc <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e00:	e00a      	b.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e02:	f7fd fd6b 	bl	80008dc <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e09b      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e18:	4b40      	ldr	r3, [pc, #256]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ee      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 8087 	beq.w	8002f4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e40:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	2b08      	cmp	r3, #8
 8002e4a:	d061      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d146      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e54:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <HAL_RCC_OscConfig+0x4cc>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fd fd3f 	bl	80008dc <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fd fd3b 	bl	80008dc <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e06d      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f0      	bne.n	8002e62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e88:	d108      	bne.n	8002e9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e8a:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	4921      	ldr	r1, [pc, #132]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a19      	ldr	r1, [r3, #32]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	430b      	orrs	r3, r1
 8002eae:	491b      	ldr	r1, [pc, #108]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_RCC_OscConfig+0x4cc>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fd fd0f 	bl	80008dc <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fd fd0b 	bl	80008dc <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e03d      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed4:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x46a>
 8002ee0:	e035      	b.n	8002f4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HAL_RCC_OscConfig+0x4cc>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fd fcf8 	bl	80008dc <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fd fcf4 	bl	80008dc <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e026      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x498>
 8002f0e:	e01e      	b.n	8002f4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d107      	bne.n	8002f28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e019      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40007000 	.word	0x40007000
 8002f24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <HAL_RCC_OscConfig+0x500>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d106      	bne.n	8002f4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000

08002f5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0d0      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b6a      	ldr	r3, [pc, #424]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d910      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b67      	ldr	r3, [pc, #412]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 0207 	bic.w	r2, r3, #7
 8002f86:	4965      	ldr	r1, [pc, #404]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b63      	ldr	r3, [pc, #396]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0b8      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d020      	beq.n	8002fee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb8:	4b59      	ldr	r3, [pc, #356]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	4a58      	ldr	r2, [pc, #352]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd0:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a52      	ldr	r2, [pc, #328]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002fda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fdc:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	494d      	ldr	r1, [pc, #308]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d040      	beq.n	800307c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d107      	bne.n	8003012 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d115      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e07f      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b02      	cmp	r3, #2
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e073      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302a:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e06b      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f023 0203 	bic.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4936      	ldr	r1, [pc, #216]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	4313      	orrs	r3, r2
 800304a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800304c:	f7fd fc46 	bl	80008dc <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	e00a      	b.n	800306a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003054:	f7fd fc42 	bl	80008dc <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e053      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 020c 	and.w	r2, r3, #12
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	429a      	cmp	r2, r3
 800307a:	d1eb      	bne.n	8003054 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b27      	ldr	r3, [pc, #156]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d210      	bcs.n	80030ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 0207 	bic.w	r2, r3, #7
 8003092:	4922      	ldr	r1, [pc, #136]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b20      	ldr	r3, [pc, #128]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e032      	b.n	8003112 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4916      	ldr	r1, [pc, #88]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d009      	beq.n	80030ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	490e      	ldr	r1, [pc, #56]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ea:	f000 f821 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030ee:	4602      	mov	r2, r0
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_ClockConfig+0x1c4>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	490a      	ldr	r1, [pc, #40]	; (8003124 <HAL_RCC_ClockConfig+0x1c8>)
 80030fc:	5ccb      	ldrb	r3, [r1, r3]
 80030fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003102:	4a09      	ldr	r2, [pc, #36]	; (8003128 <HAL_RCC_ClockConfig+0x1cc>)
 8003104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_ClockConfig+0x1d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd fba4 	bl	8000858 <HAL_InitTick>

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40022000 	.word	0x40022000
 8003120:	40021000 	.word	0x40021000
 8003124:	08009d84 	.word	0x08009d84
 8003128:	20000000 	.word	0x20000000
 800312c:	20000004 	.word	0x20000004

08003130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b04      	cmp	r3, #4
 8003158:	d002      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0x30>
 800315a:	2b08      	cmp	r3, #8
 800315c:	d003      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0x36>
 800315e:	e027      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003162:	613b      	str	r3, [r7, #16]
      break;
 8003164:	e027      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	0c9b      	lsrs	r3, r3, #18
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	4a17      	ldr	r2, [pc, #92]	; (80031cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003170:	5cd3      	ldrb	r3, [r2, r3]
 8003172:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d010      	beq.n	80031a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0c5b      	lsrs	r3, r3, #17
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	4a11      	ldr	r2, [pc, #68]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003192:	fb03 f202 	mul.w	r2, r3, r2
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e004      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a0c      	ldr	r2, [pc, #48]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80031a4:	fb02 f303 	mul.w	r3, r2, r3
 80031a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	613b      	str	r3, [r7, #16]
      break;
 80031ae:	e002      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80031b2:	613b      	str	r3, [r7, #16]
      break;
 80031b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b6:	693b      	ldr	r3, [r7, #16]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40021000 	.word	0x40021000
 80031c8:	007a1200 	.word	0x007a1200
 80031cc:	08009d9c 	.word	0x08009d9c
 80031d0:	08009dac 	.word	0x08009dac
 80031d4:	003d0900 	.word	0x003d0900

080031d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031dc:	4b02      	ldr	r3, [pc, #8]	; (80031e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031de:	681b      	ldr	r3, [r3, #0]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	20000000 	.word	0x20000000

080031ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031f0:	f7ff fff2 	bl	80031d8 <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	0a1b      	lsrs	r3, r3, #8
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4903      	ldr	r1, [pc, #12]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	08009d94 	.word	0x08009d94

08003214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003218:	f7ff ffde 	bl	80031d8 <HAL_RCC_GetHCLKFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	0adb      	lsrs	r3, r3, #11
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4903      	ldr	r1, [pc, #12]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	08009d94 	.word	0x08009d94

0800323c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <RCC_Delay+0x34>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <RCC_Delay+0x38>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	0a5b      	lsrs	r3, r3, #9
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003258:	bf00      	nop
  }
  while (Delay --);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1e5a      	subs	r2, r3, #1
 800325e:	60fa      	str	r2, [r7, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f9      	bne.n	8003258 <RCC_Delay+0x1c>
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr
 8003270:	20000000 	.word	0x20000000
 8003274:	10624dd3 	.word	0x10624dd3

08003278 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	2300      	movs	r3, #0
 8003286:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d07d      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003294:	2300      	movs	r3, #0
 8003296:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003298:	4b4f      	ldr	r3, [pc, #316]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10d      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a4:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	61d3      	str	r3, [r2, #28]
 80032b0:	4b49      	ldr	r3, [pc, #292]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032bc:	2301      	movs	r3, #1
 80032be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	4b46      	ldr	r3, [pc, #280]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d118      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032cc:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a42      	ldr	r2, [pc, #264]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d8:	f7fd fb00 	bl	80008dc <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032de:	e008      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e0:	f7fd fafc 	bl	80008dc <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b64      	cmp	r3, #100	; 0x64
 80032ec:	d901      	bls.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e06d      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b3a      	ldr	r3, [pc, #232]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032fe:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003306:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d02e      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	429a      	cmp	r2, r3
 800331a:	d027      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800331c:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003326:	4b2e      	ldr	r3, [pc, #184]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800332c:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003332:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d014      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7fd facb 	bl	80008dc <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334a:	f7fd fac7 	bl	80008dc <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	f241 3288 	movw	r2, #5000	; 0x1388
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e036      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003360:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0ee      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800336c:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	4917      	ldr	r1, [pc, #92]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337a:	4313      	orrs	r3, r2
 800337c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800337e:	7dfb      	ldrb	r3, [r7, #23]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d105      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d008      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	490b      	ldr	r1, [pc, #44]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	4904      	ldr	r1, [pc, #16]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40007000 	.word	0x40007000
 80033e0:	42420440 	.word	0x42420440

080033e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e041      	b.n	800347a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd f90c 	bl	8000628 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3304      	adds	r3, #4
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f000 f8f0 	bl	8003608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800349e:	2302      	movs	r3, #2
 80034a0:	e0ae      	b.n	8003600 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	f200 809f 	bhi.w	80035f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034b2:	a201      	add	r2, pc, #4	; (adr r2, 80034b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b8:	080034ed 	.word	0x080034ed
 80034bc:	080035f1 	.word	0x080035f1
 80034c0:	080035f1 	.word	0x080035f1
 80034c4:	080035f1 	.word	0x080035f1
 80034c8:	0800352d 	.word	0x0800352d
 80034cc:	080035f1 	.word	0x080035f1
 80034d0:	080035f1 	.word	0x080035f1
 80034d4:	080035f1 	.word	0x080035f1
 80034d8:	0800356f 	.word	0x0800356f
 80034dc:	080035f1 	.word	0x080035f1
 80034e0:	080035f1 	.word	0x080035f1
 80034e4:	080035f1 	.word	0x080035f1
 80034e8:	080035af 	.word	0x080035af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f8ea 	bl	80036cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0208 	orr.w	r2, r2, #8
 8003506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0204 	bic.w	r2, r2, #4
 8003516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6999      	ldr	r1, [r3, #24]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	619a      	str	r2, [r3, #24]
      break;
 800352a:	e064      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f930 	bl	8003798 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6999      	ldr	r1, [r3, #24]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	021a      	lsls	r2, r3, #8
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	619a      	str	r2, [r3, #24]
      break;
 800356c:	e043      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f979 	bl	800386c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	69da      	ldr	r2, [r3, #28]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0208 	orr.w	r2, r2, #8
 8003588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0204 	bic.w	r2, r2, #4
 8003598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69d9      	ldr	r1, [r3, #28]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	61da      	str	r2, [r3, #28]
      break;
 80035ac:	e023      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 f9c3 	bl	8003940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69d9      	ldr	r1, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	021a      	lsls	r2, r3, #8
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	61da      	str	r2, [r3, #28]
      break;
 80035ee:	e002      	b.n	80035f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	75fb      	strb	r3, [r7, #23]
      break;
 80035f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a29      	ldr	r2, [pc, #164]	; (80036c0 <TIM_Base_SetConfig+0xb8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00b      	beq.n	8003638 <TIM_Base_SetConfig+0x30>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003626:	d007      	beq.n	8003638 <TIM_Base_SetConfig+0x30>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a26      	ldr	r2, [pc, #152]	; (80036c4 <TIM_Base_SetConfig+0xbc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d003      	beq.n	8003638 <TIM_Base_SetConfig+0x30>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <TIM_Base_SetConfig+0xc0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d108      	bne.n	800364a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <TIM_Base_SetConfig+0xb8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00b      	beq.n	800366a <TIM_Base_SetConfig+0x62>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003658:	d007      	beq.n	800366a <TIM_Base_SetConfig+0x62>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <TIM_Base_SetConfig+0xbc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d003      	beq.n	800366a <TIM_Base_SetConfig+0x62>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <TIM_Base_SetConfig+0xc0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d108      	bne.n	800367c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a07      	ldr	r2, [pc, #28]	; (80036c0 <TIM_Base_SetConfig+0xb8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d103      	bne.n	80036b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	615a      	str	r2, [r3, #20]
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800

080036cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f023 0201 	bic.w	r2, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f023 0302 	bic.w	r3, r3, #2
 8003714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <TIM_OC1_SetConfig+0xc8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10c      	bne.n	8003742 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 0308 	bic.w	r3, r3, #8
 800372e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a13      	ldr	r2, [pc, #76]	; (8003794 <TIM_OC1_SetConfig+0xc8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d111      	bne.n	800376e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	621a      	str	r2, [r3, #32]
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40012c00 	.word	0x40012c00

08003798 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f023 0210 	bic.w	r2, r3, #16
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f023 0320 	bic.w	r3, r3, #32
 80037e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <TIM_OC2_SetConfig+0xd0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10d      	bne.n	8003814 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a14      	ldr	r2, [pc, #80]	; (8003868 <TIM_OC2_SetConfig+0xd0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d113      	bne.n	8003844 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800382a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	40012c00 	.word	0x40012c00

0800386c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0303 	bic.w	r3, r3, #3
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1d      	ldr	r2, [pc, #116]	; (800393c <TIM_OC3_SetConfig+0xd0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d10d      	bne.n	80038e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a14      	ldr	r2, [pc, #80]	; (800393c <TIM_OC3_SetConfig+0xd0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d113      	bne.n	8003916 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	621a      	str	r2, [r3, #32]
}
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40012c00 	.word	0x40012c00

08003940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800398a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	031b      	lsls	r3, r3, #12
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a0f      	ldr	r2, [pc, #60]	; (80039d8 <TIM_OC4_SetConfig+0x98>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d109      	bne.n	80039b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	019b      	lsls	r3, r3, #6
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	40012c00 	.word	0x40012c00

080039dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e046      	b.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a16      	ldr	r2, [pc, #88]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d009      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a10      	ldr	r2, [pc, #64]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10c      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bc80      	pop	{r7}
 8003a8a:	4770      	bx	lr
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800

08003a98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e042      	b.n	8003b30 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7fc fdfe 	bl	80006c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2224      	movs	r2, #36	; 0x24
 8003ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ada:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fcd5 	bl	800448c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695a      	ldr	r2, [r3, #20]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68da      	ldr	r2, [r3, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	4613      	mov	r3, r2
 8003b44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d112      	bne.n	8003b78 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_UART_Receive_IT+0x26>
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e00b      	b.n	8003b7a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b68:	88fb      	ldrh	r3, [r7, #6]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fab7 	bl	80040e2 <UART_Start_Receive_IT>
 8003b74:	4603      	mov	r3, r0
 8003b76:	e000      	b.n	8003b7a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
  }
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b0ba      	sub	sp, #232	; 0xe8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10f      	bne.n	8003bea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_UART_IRQHandler+0x66>
 8003bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fb93 	bl	800430e <UART_Receive_IT>
      return;
 8003be8:	e25b      	b.n	80040a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80de 	beq.w	8003db0 <HAL_UART_IRQHandler+0x22c>
 8003bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d106      	bne.n	8003c0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c04:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80d1 	beq.w	8003db0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <HAL_UART_IRQHandler+0xae>
 8003c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f043 0201 	orr.w	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <HAL_UART_IRQHandler+0xd2>
 8003c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d005      	beq.n	8003c56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f043 0202 	orr.w	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00b      	beq.n	8003c7a <HAL_UART_IRQHandler+0xf6>
 8003c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f043 0204 	orr.w	r2, r3, #4
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d011      	beq.n	8003caa <HAL_UART_IRQHandler+0x126>
 8003c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d105      	bne.n	8003c9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca2:	f043 0208 	orr.w	r2, r3, #8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 81f2 	beq.w	8004098 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x14e>
 8003cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 fb1e 	bl	800430e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d103      	bne.n	8003cfe <HAL_UART_IRQHandler+0x17a>
 8003cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d04f      	beq.n	8003d9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa28 	bl	8004154 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d041      	beq.n	8003d96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3314      	adds	r3, #20
 8003d3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1d9      	bne.n	8003d12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d013      	beq.n	8003d8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6a:	4a7e      	ldr	r2, [pc, #504]	; (8003f64 <HAL_UART_IRQHandler+0x3e0>)
 8003d6c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fc ff04 	bl	8000b80 <HAL_DMA_Abort_IT>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d016      	beq.n	8003dac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d8c:	e00e      	b.n	8003dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f993 	bl	80040ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d94:	e00a      	b.n	8003dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f98f 	bl	80040ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d9c:	e006      	b.n	8003dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f98b 	bl	80040ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003daa:	e175      	b.n	8004098 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	bf00      	nop
    return;
 8003dae:	e173      	b.n	8004098 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	f040 814f 	bne.w	8004058 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8148 	beq.w	8004058 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 8141 	beq.w	8004058 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	60bb      	str	r3, [r7, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80b6 	beq.w	8003f68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8145 	beq.w	800409c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	f080 813e 	bcs.w	800409c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	f000 8088 	beq.w	8003f44 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	330c      	adds	r3, #12
 8003e3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	330c      	adds	r3, #12
 8003e5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e60:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1d9      	bne.n	8003e34 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3314      	adds	r3, #20
 8003e86:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e8a:	e853 3f00 	ldrex	r3, [r3]
 8003e8e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e92:	f023 0301 	bic.w	r3, r3, #1
 8003e96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3314      	adds	r3, #20
 8003ea0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ea4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003eac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003eb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e1      	bne.n	8003e80 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3314      	adds	r3, #20
 8003edc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ee0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ee2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ee6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ee8:	e841 2300 	strex	r3, r2, [r1]
 8003eec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003eee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e3      	bne.n	8003ebc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	330c      	adds	r3, #12
 8003f08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f14:	f023 0310 	bic.w	r3, r3, #16
 8003f18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	330c      	adds	r3, #12
 8003f22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f26:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f28:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1e3      	bne.n	8003f02 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc fde3 	bl	8000b0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	4619      	mov	r1, r3
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f8b6 	bl	80040cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f60:	e09c      	b.n	800409c <HAL_UART_IRQHandler+0x518>
 8003f62:	bf00      	nop
 8003f64:	08004219 	.word	0x08004219
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 808e 	beq.w	80040a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8089 	beq.w	80040a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fb2:	647a      	str	r2, [r7, #68]	; 0x44
 8003fb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e3      	bne.n	8003f8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3314      	adds	r3, #20
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3314      	adds	r3, #20
 8003fe6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fea:	633a      	str	r2, [r7, #48]	; 0x30
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e3      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	330c      	adds	r3, #12
 8004012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	60fb      	str	r3, [r7, #12]
   return(result);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0310 	bic.w	r3, r3, #16
 8004022:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004030:	61fa      	str	r2, [r7, #28]
 8004032:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	69b9      	ldr	r1, [r7, #24]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	617b      	str	r3, [r7, #20]
   return(result);
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e3      	bne.n	800400c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800404a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800404e:	4619      	mov	r1, r3
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f83b 	bl	80040cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004056:	e023      	b.n	80040a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <HAL_UART_IRQHandler+0x4f4>
 8004064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f8e5 	bl	8004240 <UART_Transmit_IT>
    return;
 8004076:	e014      	b.n	80040a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00e      	beq.n	80040a2 <HAL_UART_IRQHandler+0x51e>
 8004084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f924 	bl	80042de <UART_EndTransmit_IT>
    return;
 8004096:	e004      	b.n	80040a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8004098:	bf00      	nop
 800409a:	e002      	b.n	80040a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800409c:	bf00      	nop
 800409e:	e000      	b.n	80040a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80040a0:	bf00      	nop
  }
}
 80040a2:	37e8      	adds	r7, #232	; 0xe8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr

080040cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr

080040e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b085      	sub	sp, #20
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	4613      	mov	r3, r2
 80040ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	88fa      	ldrh	r2, [r7, #6]
 80040fa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2222      	movs	r2, #34	; 0x22
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d007      	beq.n	8004128 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004126:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68da      	ldr	r2, [r3, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0220 	orr.w	r2, r2, #32
 8004146:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004154:	b480      	push	{r7}
 8004156:	b095      	sub	sp, #84	; 0x54
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800417c:	643a      	str	r2, [r7, #64]	; 0x40
 800417e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004182:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800418a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3314      	adds	r3, #20
 8004196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	61fb      	str	r3, [r7, #28]
   return(result);
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3314      	adds	r3, #20
 80041ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d119      	bne.n	8004200 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	330c      	adds	r3, #12
 80041d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	60bb      	str	r3, [r7, #8]
   return(result);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f023 0310 	bic.w	r3, r3, #16
 80041e2:	647b      	str	r3, [r7, #68]	; 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ec:	61ba      	str	r2, [r7, #24]
 80041ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6979      	ldr	r1, [r7, #20]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	613b      	str	r3, [r7, #16]
   return(result);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e5      	bne.n	80041cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800420e:	bf00      	nop
 8004210:	3754      	adds	r7, #84	; 0x54
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7ff ff41 	bl	80040ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b21      	cmp	r3, #33	; 0x21
 8004252:	d13e      	bne.n	80042d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425c:	d114      	bne.n	8004288 <UART_Transmit_IT+0x48>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d110      	bne.n	8004288 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800427a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	1c9a      	adds	r2, r3, #2
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	621a      	str	r2, [r3, #32]
 8004286:	e008      	b.n	800429a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	1c59      	adds	r1, r3, #1
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6211      	str	r1, [r2, #32]
 8004292:	781a      	ldrb	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4619      	mov	r1, r3
 80042a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10f      	bne.n	80042ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68da      	ldr	r2, [r3, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042ce:	2300      	movs	r3, #0
 80042d0:	e000      	b.n	80042d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042d2:	2302      	movs	r3, #2
  }
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff fed2 	bl	80040a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3708      	adds	r7, #8
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b08c      	sub	sp, #48	; 0x30
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b22      	cmp	r3, #34	; 0x22
 8004320:	f040 80ae 	bne.w	8004480 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432c:	d117      	bne.n	800435e <UART_Receive_IT+0x50>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d113      	bne.n	800435e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004336:	2300      	movs	r3, #0
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800434c:	b29a      	uxth	r2, r3
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	1c9a      	adds	r2, r3, #2
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	629a      	str	r2, [r3, #40]	; 0x28
 800435c:	e026      	b.n	80043ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004364:	2300      	movs	r3, #0
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004370:	d007      	beq.n	8004382 <UART_Receive_IT+0x74>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <UART_Receive_IT+0x82>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	e008      	b.n	80043a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800439c:	b2da      	uxtb	r2, r3
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	4619      	mov	r1, r3
 80043ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d15d      	bne.n	800447c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0220 	bic.w	r2, r2, #32
 80043ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 0201 	bic.w	r2, r2, #1
 80043ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	2b01      	cmp	r3, #1
 8004404:	d135      	bne.n	8004472 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	330c      	adds	r3, #12
 8004412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	613b      	str	r3, [r7, #16]
   return(result);
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f023 0310 	bic.w	r3, r3, #16
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442c:	623a      	str	r2, [r7, #32]
 800442e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	69f9      	ldr	r1, [r7, #28]
 8004432:	6a3a      	ldr	r2, [r7, #32]
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	61bb      	str	r3, [r7, #24]
   return(result);
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e5      	bne.n	800440c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b10      	cmp	r3, #16
 800444c:	d10a      	bne.n	8004464 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004468:	4619      	mov	r1, r3
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f7ff fe2e 	bl	80040cc <HAL_UARTEx_RxEventCallback>
 8004470:	e002      	b.n	8004478 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fb fe6c 	bl	8000150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	e002      	b.n	8004482 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3730      	adds	r7, #48	; 0x30
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044c6:	f023 030c 	bic.w	r3, r3, #12
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6812      	ldr	r2, [r2, #0]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	430b      	orrs	r3, r1
 80044d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2c      	ldr	r2, [pc, #176]	; (80045a0 <UART_SetConfig+0x114>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d103      	bne.n	80044fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044f4:	f7fe fe8e 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	e002      	b.n	8004502 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044fc:	f7fe fe76 	bl	80031ec <HAL_RCC_GetPCLK1Freq>
 8004500:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009a      	lsls	r2, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	4a22      	ldr	r2, [pc, #136]	; (80045a4 <UART_SetConfig+0x118>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	0119      	lsls	r1, r3, #4
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4613      	mov	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	009a      	lsls	r2, r3, #2
 800452c:	441a      	add	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	fbb2 f2f3 	udiv	r2, r2, r3
 8004538:	4b1a      	ldr	r3, [pc, #104]	; (80045a4 <UART_SetConfig+0x118>)
 800453a:	fba3 0302 	umull	r0, r3, r3, r2
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2064      	movs	r0, #100	; 0x64
 8004542:	fb00 f303 	mul.w	r3, r0, r3
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	3332      	adds	r3, #50	; 0x32
 800454c:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <UART_SetConfig+0x118>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004558:	4419      	add	r1, r3
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009a      	lsls	r2, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <UART_SetConfig+0x118>)
 8004572:	fba3 0302 	umull	r0, r3, r3, r2
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2064      	movs	r0, #100	; 0x64
 800457a:	fb00 f303 	mul.w	r3, r0, r3
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	3332      	adds	r3, #50	; 0x32
 8004584:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <UART_SetConfig+0x118>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	f003 020f 	and.w	r2, r3, #15
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	440a      	add	r2, r1
 8004596:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40013800 	.word	0x40013800
 80045a4:	51eb851f 	.word	0x51eb851f

080045a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045a8:	b084      	sub	sp, #16
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	f107 0014 	add.w	r0, r7, #20
 80045b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bc80      	pop	{r7}
 80045c4:	b004      	add	sp, #16
 80045c6:	4770      	bx	lr

080045c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80045dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr

080045f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004600:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	b29b      	uxth	r3, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	b29b      	uxth	r3, r3
 8004612:	4013      	ands	r3, r2
 8004614:	b29a      	uxth	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004640:	b084      	sub	sp, #16
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	f107 0014 	add.w	r0, r7, #20
 800464e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	b004      	add	sp, #16
 800467e:	4770      	bx	lr

08004680 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004680:	b480      	push	{r7}
 8004682:	b09d      	sub	sp, #116	; 0x74
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	b29b      	uxth	r3, r3
 800469e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80046a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	78db      	ldrb	r3, [r3, #3]
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d81f      	bhi.n	80046f2 <USB_ActivateEndpoint+0x72>
 80046b2:	a201      	add	r2, pc, #4	; (adr r2, 80046b8 <USB_ActivateEndpoint+0x38>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	080046c9 	.word	0x080046c9
 80046bc:	080046e5 	.word	0x080046e5
 80046c0:	080046fb 	.word	0x080046fb
 80046c4:	080046d7 	.word	0x080046d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80046d4:	e012      	b.n	80046fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80046de:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80046e2:	e00b      	b.n	80046fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80046f0:	e004      	b.n	80046fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80046f8:	e000      	b.n	80046fc <USB_ActivateEndpoint+0x7c>
      break;
 80046fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	441a      	add	r2, r3
 8004706:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800470a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800471a:	b29b      	uxth	r3, r3
 800471c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004734:	b29a      	uxth	r2, r3
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	4313      	orrs	r3, r2
 800473e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	441a      	add	r2, r3
 800474c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004760:	b29b      	uxth	r3, r3
 8004762:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	7b1b      	ldrb	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f040 8178 	bne.w	8004a5e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 8084 	beq.w	8004880 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004782:	b29b      	uxth	r3, r3
 8004784:	461a      	mov	r2, r3
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	4413      	add	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	011a      	lsls	r2, r3, #4
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	88db      	ldrh	r3, [r3, #6]
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	827b      	strh	r3, [r7, #18]
 80047ba:	8a7b      	ldrh	r3, [r7, #18]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01b      	beq.n	80047fc <USB_ActivateEndpoint+0x17c>
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047da:	823b      	strh	r3, [r7, #16]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	441a      	add	r2, r3
 80047e6:	8a3b      	ldrh	r3, [r7, #16]
 80047e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	78db      	ldrb	r3, [r3, #3]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d020      	beq.n	8004846 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800481a:	81bb      	strh	r3, [r7, #12]
 800481c:	89bb      	ldrh	r3, [r7, #12]
 800481e:	f083 0320 	eor.w	r3, r3, #32
 8004822:	81bb      	strh	r3, [r7, #12]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	441a      	add	r2, r3
 800482e:	89bb      	ldrh	r3, [r7, #12]
 8004830:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004834:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004840:	b29b      	uxth	r3, r3
 8004842:	8013      	strh	r3, [r2, #0]
 8004844:	e2d5      	b.n	8004df2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800485c:	81fb      	strh	r3, [r7, #14]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	89fb      	ldrh	r3, [r7, #14]
 800486a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800486e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487a:	b29b      	uxth	r3, r3
 800487c:	8013      	strh	r3, [r2, #0]
 800487e:	e2b8      	b.n	8004df2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	633b      	str	r3, [r7, #48]	; 0x30
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800488a:	b29b      	uxth	r3, r3
 800488c:	461a      	mov	r2, r3
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	4413      	add	r3, r2
 8004892:	633b      	str	r3, [r7, #48]	; 0x30
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	011a      	lsls	r2, r3, #4
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	4413      	add	r3, r2
 800489e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	88db      	ldrh	r3, [r3, #6]
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	4413      	add	r3, r2
 80048c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	011a      	lsls	r2, r3, #4
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	4413      	add	r3, r2
 80048d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b3e      	cmp	r3, #62	; 0x3e
 80048ee:	d91d      	bls.n	800492c <USB_ActivateEndpoint+0x2ac>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f003 031f 	and.w	r3, r3, #31
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <USB_ActivateEndpoint+0x28a>
 8004904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004906:	3b01      	subs	r3, #1
 8004908:	66bb      	str	r3, [r7, #104]	; 0x68
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b29a      	uxth	r2, r3
 8004910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004912:	b29b      	uxth	r3, r3
 8004914:	029b      	lsls	r3, r3, #10
 8004916:	b29b      	uxth	r3, r3
 8004918:	4313      	orrs	r3, r2
 800491a:	b29b      	uxth	r3, r3
 800491c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004924:	b29a      	uxth	r2, r3
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	801a      	strh	r2, [r3, #0]
 800492a:	e026      	b.n	800497a <USB_ActivateEndpoint+0x2fa>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <USB_ActivateEndpoint+0x2ca>
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	881b      	ldrh	r3, [r3, #0]
 8004938:	b29b      	uxth	r3, r3
 800493a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800493e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004942:	b29a      	uxth	r2, r3
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	e017      	b.n	800497a <USB_ActivateEndpoint+0x2fa>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	085b      	lsrs	r3, r3, #1
 8004950:	66bb      	str	r3, [r7, #104]	; 0x68
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <USB_ActivateEndpoint+0x2e4>
 800495e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004960:	3301      	adds	r3, #1
 8004962:	66bb      	str	r3, [r7, #104]	; 0x68
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	b29a      	uxth	r2, r3
 800496a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800496c:	b29b      	uxth	r3, r3
 800496e:	029b      	lsls	r3, r3, #10
 8004970:	b29b      	uxth	r3, r3
 8004972:	4313      	orrs	r3, r2
 8004974:	b29a      	uxth	r2, r3
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	847b      	strh	r3, [r7, #34]	; 0x22
 8004988:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800498a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01b      	beq.n	80049ca <USB_ActivateEndpoint+0x34a>
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a8:	843b      	strh	r3, [r7, #32]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	441a      	add	r2, r3
 80049b4:	8c3b      	ldrh	r3, [r7, #32]
 80049b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d124      	bne.n	8004a1c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e8:	83bb      	strh	r3, [r7, #28]
 80049ea:	8bbb      	ldrh	r3, [r7, #28]
 80049ec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049f0:	83bb      	strh	r3, [r7, #28]
 80049f2:	8bbb      	ldrh	r3, [r7, #28]
 80049f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049f8:	83bb      	strh	r3, [r7, #28]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	441a      	add	r2, r3
 8004a04:	8bbb      	ldrh	r3, [r7, #28]
 8004a06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	8013      	strh	r3, [r2, #0]
 8004a1a:	e1ea      	b.n	8004df2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a32:	83fb      	strh	r3, [r7, #30]
 8004a34:	8bfb      	ldrh	r3, [r7, #30]
 8004a36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a3a:	83fb      	strh	r3, [r7, #30]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	441a      	add	r2, r3
 8004a46:	8bfb      	ldrh	r3, [r7, #30]
 8004a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	8013      	strh	r3, [r2, #0]
 8004a5c:	e1c9      	b.n	8004df2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	78db      	ldrb	r3, [r3, #3]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d11e      	bne.n	8004aa4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	8013      	strh	r3, [r2, #0]
 8004aa2:	e01d      	b.n	8004ae0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af0:	4413      	add	r3, r2
 8004af2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	011a      	lsls	r2, r3, #4
 8004afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b02:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	891b      	ldrh	r3, [r3, #8]
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b12:	801a      	strh	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	657b      	str	r3, [r7, #84]	; 0x54
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b24:	4413      	add	r3, r2
 8004b26:	657b      	str	r3, [r7, #84]	; 0x54
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	011a      	lsls	r2, r3, #4
 8004b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b36:	653b      	str	r3, [r7, #80]	; 0x50
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	895b      	ldrh	r3, [r3, #10]
 8004b3c:	085b      	lsrs	r3, r3, #1
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b46:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f040 8093 	bne.w	8004c78 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01b      	beq.n	8004ba6 <USB_ActivateEndpoint+0x526>
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b84:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	441a      	add	r2, r3
 8004b90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004bb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01b      	beq.n	8004bf6 <USB_ActivateEndpoint+0x576>
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	441a      	add	r2, r3
 8004be0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c10:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c14:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c16:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c1c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	441a      	add	r2, r3
 8004c28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c54:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	441a      	add	r2, r3
 8004c60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]
 8004c76:	e0bc      	b.n	8004df2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004c88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d01d      	beq.n	8004cd0 <USB_ActivateEndpoint+0x650>
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004caa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	441a      	add	r2, r3
 8004cb8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ce0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01d      	beq.n	8004d28 <USB_ActivateEndpoint+0x6a8>
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	441a      	add	r2, r3
 8004d10:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	78db      	ldrb	r3, [r3, #3]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d024      	beq.n	8004d7a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d4e:	f083 0320 	eor.w	r3, r3, #32
 8004d52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	441a      	add	r2, r3
 8004d60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	8013      	strh	r3, [r2, #0]
 8004d78:	e01d      	b.n	8004db6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d90:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	441a      	add	r2, r3
 8004d9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004da2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004daa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dcc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	441a      	add	r2, r3
 8004dda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004df2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3774      	adds	r7, #116	; 0x74
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr

08004e00 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b08d      	sub	sp, #52	; 0x34
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	7b1b      	ldrb	r3, [r3, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 808e 	bne.w	8004f30 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d044      	beq.n	8004ea6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	81bb      	strh	r3, [r7, #12]
 8004e2a:	89bb      	ldrh	r3, [r7, #12]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01b      	beq.n	8004e6c <USB_DeactivateEndpoint+0x6c>
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e4a:	817b      	strh	r3, [r7, #10]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	897b      	ldrh	r3, [r7, #10]
 8004e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e82:	813b      	strh	r3, [r7, #8]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	893b      	ldrh	r3, [r7, #8]
 8004e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	8013      	strh	r3, [r2, #0]
 8004ea4:	e192      	b.n	80051cc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	827b      	strh	r3, [r7, #18]
 8004eb4:	8a7b      	ldrh	r3, [r7, #18]
 8004eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01b      	beq.n	8004ef6 <USB_DeactivateEndpoint+0xf6>
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed4:	823b      	strh	r3, [r7, #16]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	441a      	add	r2, r3
 8004ee0:	8a3b      	ldrh	r3, [r7, #16]
 8004ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0c:	81fb      	strh	r3, [r7, #14]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	441a      	add	r2, r3
 8004f18:	89fb      	ldrh	r3, [r7, #14]
 8004f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	8013      	strh	r3, [r2, #0]
 8004f2e:	e14d      	b.n	80051cc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	785b      	ldrb	r3, [r3, #1]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 80a5 	bne.w	8005084 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	843b      	strh	r3, [r7, #32]
 8004f48:	8c3b      	ldrh	r3, [r7, #32]
 8004f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01b      	beq.n	8004f8a <USB_DeactivateEndpoint+0x18a>
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f68:	83fb      	strh	r3, [r7, #30]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	441a      	add	r2, r3
 8004f74:	8bfb      	ldrh	r3, [r7, #30]
 8004f76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	83bb      	strh	r3, [r7, #28]
 8004f98:	8bbb      	ldrh	r3, [r7, #28]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01b      	beq.n	8004fda <USB_DeactivateEndpoint+0x1da>
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	837b      	strh	r3, [r7, #26]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	441a      	add	r2, r3
 8004fc4:	8b7b      	ldrh	r3, [r7, #26]
 8004fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff0:	833b      	strh	r3, [r7, #24]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	441a      	add	r2, r3
 8004ffc:	8b3b      	ldrh	r3, [r7, #24]
 8004ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800500e:	b29b      	uxth	r3, r3
 8005010:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	82fb      	strh	r3, [r7, #22]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	441a      	add	r2, r3
 8005034:	8afb      	ldrh	r3, [r7, #22]
 8005036:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005042:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005046:	b29b      	uxth	r3, r3
 8005048:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005060:	82bb      	strh	r3, [r7, #20]
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	441a      	add	r2, r3
 800506c:	8abb      	ldrh	r3, [r7, #20]
 800506e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507e:	b29b      	uxth	r3, r3
 8005080:	8013      	strh	r3, [r2, #0]
 8005082:	e0a3      	b.n	80051cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005092:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01b      	beq.n	80050d4 <USB_DeactivateEndpoint+0x2d4>
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	441a      	add	r2, r3
 80050be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80050e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01b      	beq.n	8005124 <USB_DeactivateEndpoint+0x324>
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	853b      	strh	r3, [r7, #40]	; 0x28
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	441a      	add	r2, r3
 800510e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800511c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005120:	b29b      	uxth	r3, r3
 8005122:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	b29b      	uxth	r3, r3
 8005132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	441a      	add	r2, r3
 8005146:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800514c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005158:	b29b      	uxth	r3, r3
 800515a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29b      	uxth	r3, r3
 800516a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005172:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	441a      	add	r2, r3
 800517e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800518c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005190:	b29b      	uxth	r3, r3
 8005192:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	441a      	add	r2, r3
 80051b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3734      	adds	r7, #52	; 0x34
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b0c2      	sub	sp, #264	; 0x108
 80051dc:	af00      	add	r7, sp, #0
 80051de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051e6:	6018      	str	r0, [r3, #0]
 80051e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	785b      	ldrb	r3, [r3, #1]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	f040 86b7 	bne.w	8005f72 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005204:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	429a      	cmp	r2, r3
 800521e:	d908      	bls.n	8005232 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005230:	e007      	b.n	8005242 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	7b1b      	ldrb	r3, [r3, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d13a      	bne.n	80052c8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6959      	ldr	r1, [r3, #20]
 800525e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	88da      	ldrh	r2, [r3, #6]
 800526a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800526e:	b29b      	uxth	r3, r3
 8005270:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005274:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005278:	6800      	ldr	r0, [r0, #0]
 800527a:	f001 fc9c 	bl	8006bb6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800527e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	613b      	str	r3, [r7, #16]
 800528a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800528e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005298:	b29b      	uxth	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4413      	add	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	011a      	lsls	r2, r3, #4
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4413      	add	r3, r2
 80052b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	801a      	strh	r2, [r3, #0]
 80052c4:	f000 be1f 	b.w	8005f06 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80052c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	78db      	ldrb	r3, [r3, #3]
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	f040 8462 	bne.w	8005b9e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80052da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6a1a      	ldr	r2, [r3, #32]
 80052e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	f240 83df 	bls.w	8005ab6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29b      	uxth	r3, r3
 8005316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800531a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005326:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	441a      	add	r2, r3
 800533c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005348:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800534c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005350:	b29b      	uxth	r3, r3
 8005352:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a1a      	ldr	r2, [r3, #32]
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005364:	1ad2      	subs	r2, r2, r3
 8005366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800536a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 81c7 	beq.w	8005728 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800539a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800539e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	633b      	str	r3, [r7, #48]	; 0x30
 80053a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d177      	bne.n	80054a6 <USB_EPStartXfer+0x2ce>
 80053b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	4413      	add	r3, r2
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	011a      	lsls	r2, r3, #4
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	4413      	add	r3, r2
 80053ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005406:	2b3e      	cmp	r3, #62	; 0x3e
 8005408:	d921      	bls.n	800544e <USB_EPStartXfer+0x276>
 800540a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	2b00      	cmp	r3, #0
 800541e:	d104      	bne.n	800542a <USB_EPStartXfer+0x252>
 8005420:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005424:	3b01      	subs	r3, #1
 8005426:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29a      	uxth	r2, r3
 8005430:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005434:	b29b      	uxth	r3, r3
 8005436:	029b      	lsls	r3, r3, #10
 8005438:	b29b      	uxth	r3, r3
 800543a:	4313      	orrs	r3, r2
 800543c:	b29b      	uxth	r3, r3
 800543e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005446:	b29a      	uxth	r2, r3
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	801a      	strh	r2, [r3, #0]
 800544c:	e050      	b.n	80054f0 <USB_EPStartXfer+0x318>
 800544e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10a      	bne.n	800546c <USB_EPStartXfer+0x294>
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005464:	b29a      	uxth	r2, r3
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	801a      	strh	r2, [r3, #0]
 800546a:	e041      	b.n	80054f0 <USB_EPStartXfer+0x318>
 800546c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005470:	085b      	lsrs	r3, r3, #1
 8005472:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <USB_EPStartXfer+0x2b4>
 8005482:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005486:	3301      	adds	r3, #1
 8005488:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29a      	uxth	r2, r3
 8005492:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005496:	b29b      	uxth	r3, r3
 8005498:	029b      	lsls	r3, r3, #10
 800549a:	b29b      	uxth	r3, r3
 800549c:	4313      	orrs	r3, r2
 800549e:	b29a      	uxth	r2, r3
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	801a      	strh	r2, [r3, #0]
 80054a4:	e024      	b.n	80054f0 <USB_EPStartXfer+0x318>
 80054a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	785b      	ldrb	r3, [r3, #1]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d11c      	bne.n	80054f0 <USB_EPStartXfer+0x318>
 80054b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	4413      	add	r3, r2
 80054cc:	633b      	str	r3, [r7, #48]	; 0x30
 80054ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	011a      	lsls	r2, r3, #4
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	4413      	add	r3, r2
 80054e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	895b      	ldrh	r3, [r3, #10]
 80054fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6959      	ldr	r1, [r3, #20]
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005510:	b29b      	uxth	r3, r3
 8005512:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005516:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800551a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800551e:	6800      	ldr	r0, [r0, #0]
 8005520:	f001 fb49 	bl	8006bb6 <USB_WritePMA>
            ep->xfer_buff += len;
 8005524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695a      	ldr	r2, [r3, #20]
 8005530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005534:	441a      	add	r2, r3
 8005536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800553a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6a1a      	ldr	r2, [r3, #32]
 800554e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	429a      	cmp	r2, r3
 800555c:	d90f      	bls.n	800557e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800555e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6a1a      	ldr	r2, [r3, #32]
 800556a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	621a      	str	r2, [r3, #32]
 800557c:	e00e      	b.n	800559c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800557e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800558e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800559c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d177      	bne.n	800569c <USB_EPStartXfer+0x4c4>
 80055ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	61bb      	str	r3, [r7, #24]
 80055b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	4413      	add	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	011a      	lsls	r2, r3, #4
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	4413      	add	r3, r2
 80055e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	801a      	strh	r2, [r3, #0]
 80055f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fc:	2b3e      	cmp	r3, #62	; 0x3e
 80055fe:	d921      	bls.n	8005644 <USB_EPStartXfer+0x46c>
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800560a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560e:	f003 031f 	and.w	r3, r3, #31
 8005612:	2b00      	cmp	r3, #0
 8005614:	d104      	bne.n	8005620 <USB_EPStartXfer+0x448>
 8005616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800561a:	3b01      	subs	r3, #1
 800561c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	b29a      	uxth	r2, r3
 8005626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800562a:	b29b      	uxth	r3, r3
 800562c:	029b      	lsls	r3, r3, #10
 800562e:	b29b      	uxth	r3, r3
 8005630:	4313      	orrs	r3, r2
 8005632:	b29b      	uxth	r3, r3
 8005634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800563c:	b29a      	uxth	r2, r3
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	801a      	strh	r2, [r3, #0]
 8005642:	e056      	b.n	80056f2 <USB_EPStartXfer+0x51a>
 8005644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <USB_EPStartXfer+0x48a>
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565a:	b29a      	uxth	r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e047      	b.n	80056f2 <USB_EPStartXfer+0x51a>
 8005662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005666:	085b      	lsrs	r3, r3, #1
 8005668:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800566c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <USB_EPStartXfer+0x4aa>
 8005678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800567c:	3301      	adds	r3, #1
 800567e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	b29a      	uxth	r2, r3
 8005688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800568c:	b29b      	uxth	r3, r3
 800568e:	029b      	lsls	r3, r3, #10
 8005690:	b29b      	uxth	r3, r3
 8005692:	4313      	orrs	r3, r2
 8005694:	b29a      	uxth	r2, r3
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	801a      	strh	r2, [r3, #0]
 800569a:	e02a      	b.n	80056f2 <USB_EPStartXfer+0x51a>
 800569c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d122      	bne.n	80056f2 <USB_EPStartXfer+0x51a>
 80056ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	623b      	str	r3, [r7, #32]
 80056b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	461a      	mov	r2, r3
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	4413      	add	r3, r2
 80056ce:	623b      	str	r3, [r7, #32]
 80056d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	011a      	lsls	r2, r3, #4
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	4413      	add	r3, r2
 80056e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	891b      	ldrh	r3, [r3, #8]
 80056fe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6959      	ldr	r1, [r3, #20]
 800570e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005712:	b29b      	uxth	r3, r3
 8005714:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005718:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800571c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005720:	6800      	ldr	r0, [r0, #0]
 8005722:	f001 fa48 	bl	8006bb6 <USB_WritePMA>
 8005726:	e3ee      	b.n	8005f06 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800572c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d177      	bne.n	8005828 <USB_EPStartXfer+0x650>
 8005738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	64bb      	str	r3, [r7, #72]	; 0x48
 8005744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005748:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005752:	b29b      	uxth	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005758:	4413      	add	r3, r2
 800575a:	64bb      	str	r3, [r7, #72]	; 0x48
 800575c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	011a      	lsls	r2, r3, #4
 800576a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800576c:	4413      	add	r3, r2
 800576e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005772:	647b      	str	r3, [r7, #68]	; 0x44
 8005774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800577e:	b29a      	uxth	r2, r3
 8005780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005788:	2b3e      	cmp	r3, #62	; 0x3e
 800578a:	d921      	bls.n	80057d0 <USB_EPStartXfer+0x5f8>
 800578c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005790:	095b      	lsrs	r3, r3, #5
 8005792:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579a:	f003 031f 	and.w	r3, r3, #31
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d104      	bne.n	80057ac <USB_EPStartXfer+0x5d4>
 80057a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057a6:	3b01      	subs	r3, #1
 80057a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	029b      	lsls	r3, r3, #10
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	4313      	orrs	r3, r2
 80057be:	b29b      	uxth	r3, r3
 80057c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e056      	b.n	800587e <USB_EPStartXfer+0x6a6>
 80057d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <USB_EPStartXfer+0x616>
 80057d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ea:	801a      	strh	r2, [r3, #0]
 80057ec:	e047      	b.n	800587e <USB_EPStartXfer+0x6a6>
 80057ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057f2:	085b      	lsrs	r3, r3, #1
 80057f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d004      	beq.n	800580e <USB_EPStartXfer+0x636>
 8005804:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005808:	3301      	adds	r3, #1
 800580a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800580e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29a      	uxth	r2, r3
 8005814:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005818:	b29b      	uxth	r3, r3
 800581a:	029b      	lsls	r3, r3, #10
 800581c:	b29b      	uxth	r3, r3
 800581e:	4313      	orrs	r3, r2
 8005820:	b29a      	uxth	r2, r3
 8005822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	e02a      	b.n	800587e <USB_EPStartXfer+0x6a6>
 8005828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d122      	bne.n	800587e <USB_EPStartXfer+0x6a6>
 8005838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800583c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	653b      	str	r3, [r7, #80]	; 0x50
 8005844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005848:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005852:	b29b      	uxth	r3, r3
 8005854:	461a      	mov	r2, r3
 8005856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005858:	4413      	add	r3, r2
 800585a:	653b      	str	r3, [r7, #80]	; 0x50
 800585c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	011a      	lsls	r2, r3, #4
 800586a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586c:	4413      	add	r3, r2
 800586e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005878:	b29a      	uxth	r2, r3
 800587a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800587c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800587e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	891b      	ldrh	r3, [r3, #8]
 800588a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800588e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6959      	ldr	r1, [r3, #20]
 800589a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058a4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058a8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058ac:	6800      	ldr	r0, [r0, #0]
 80058ae:	f001 f982 	bl	8006bb6 <USB_WritePMA>
            ep->xfer_buff += len;
 80058b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	695a      	ldr	r2, [r3, #20]
 80058be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c2:	441a      	add	r2, r3
 80058c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a1a      	ldr	r2, [r3, #32]
 80058dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d90f      	bls.n	800590c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80058ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6a1a      	ldr	r2, [r3, #32]
 80058f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fc:	1ad2      	subs	r2, r2, r3
 80058fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	621a      	str	r2, [r3, #32]
 800590a:	e00e      	b.n	800592a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800590c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800591c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2200      	movs	r2, #0
 8005928:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800592a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	643b      	str	r3, [r7, #64]	; 0x40
 8005936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d177      	bne.n	8005a36 <USB_EPStartXfer+0x85e>
 8005946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	63bb      	str	r3, [r7, #56]	; 0x38
 8005952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005960:	b29b      	uxth	r3, r3
 8005962:	461a      	mov	r2, r3
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	4413      	add	r3, r2
 8005968:	63bb      	str	r3, [r7, #56]	; 0x38
 800596a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	011a      	lsls	r2, r3, #4
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	4413      	add	r3, r2
 800597c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800598c:	b29a      	uxth	r2, r3
 800598e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005990:	801a      	strh	r2, [r3, #0]
 8005992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005996:	2b3e      	cmp	r3, #62	; 0x3e
 8005998:	d921      	bls.n	80059de <USB_EPStartXfer+0x806>
 800599a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a8:	f003 031f 	and.w	r3, r3, #31
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d104      	bne.n	80059ba <USB_EPStartXfer+0x7e2>
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059b4:	3b01      	subs	r3, #1
 80059b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059bc:	881b      	ldrh	r3, [r3, #0]
 80059be:	b29a      	uxth	r2, r3
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	029b      	lsls	r3, r3, #10
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	4313      	orrs	r3, r2
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059da:	801a      	strh	r2, [r3, #0]
 80059dc:	e050      	b.n	8005a80 <USB_EPStartXfer+0x8a8>
 80059de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <USB_EPStartXfer+0x824>
 80059e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	801a      	strh	r2, [r3, #0]
 80059fa:	e041      	b.n	8005a80 <USB_EPStartXfer+0x8a8>
 80059fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a00:	085b      	lsrs	r3, r3, #1
 8005a02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <USB_EPStartXfer+0x844>
 8005a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a16:	3301      	adds	r3, #1
 8005a18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	029b      	lsls	r3, r3, #10
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a32:	801a      	strh	r2, [r3, #0]
 8005a34:	e024      	b.n	8005a80 <USB_EPStartXfer+0x8a8>
 8005a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	785b      	ldrb	r3, [r3, #1]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d11c      	bne.n	8005a80 <USB_EPStartXfer+0x8a8>
 8005a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a5a:	4413      	add	r3, r2
 8005a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	011a      	lsls	r2, r3, #4
 8005a6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a6e:	4413      	add	r3, r2
 8005a70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	895b      	ldrh	r3, [r3, #10]
 8005a8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6959      	ldr	r1, [r3, #20]
 8005a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005aa6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005aaa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005aae:	6800      	ldr	r0, [r0, #0]
 8005ab0:	f001 f881 	bl	8006bb6 <USB_WritePMA>
 8005ab4:	e227      	b.n	8005f06 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	881b      	ldrh	r3, [r3, #0]
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	441a      	add	r2, r3
 8005b0a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b42:	4413      	add	r3, r2
 8005b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	011a      	lsls	r2, r3, #4
 8005b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b56:	4413      	add	r3, r2
 8005b58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	891b      	ldrh	r3, [r3, #8]
 8005b74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6959      	ldr	r1, [r3, #20]
 8005b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005b8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005b92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005b96:	6800      	ldr	r0, [r0, #0]
 8005b98:	f001 f80d 	bl	8006bb6 <USB_WritePMA>
 8005b9c:	e1b3      	b.n	8005f06 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6a1a      	ldr	r2, [r3, #32]
 8005baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bae:	1ad2      	subs	r2, r2, r3
 8005bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 80c6 	beq.w	8005d70 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	673b      	str	r3, [r7, #112]	; 0x70
 8005bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d177      	bne.n	8005cf0 <USB_EPStartXfer+0xb18>
 8005c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c20:	4413      	add	r3, r2
 8005c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	011a      	lsls	r2, r3, #4
 8005c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c34:	4413      	add	r3, r2
 8005c36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c3a:	667b      	str	r3, [r7, #100]	; 0x64
 8005c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c50:	2b3e      	cmp	r3, #62	; 0x3e
 8005c52:	d921      	bls.n	8005c98 <USB_EPStartXfer+0xac0>
 8005c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c62:	f003 031f 	and.w	r3, r3, #31
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <USB_EPStartXfer+0xa9c>
 8005c6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	029b      	lsls	r3, r3, #10
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	4313      	orrs	r3, r2
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c94:	801a      	strh	r2, [r3, #0]
 8005c96:	e050      	b.n	8005d3a <USB_EPStartXfer+0xb62>
 8005c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10a      	bne.n	8005cb6 <USB_EPStartXfer+0xade>
 8005ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	e041      	b.n	8005d3a <USB_EPStartXfer+0xb62>
 8005cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <USB_EPStartXfer+0xafe>
 8005ccc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	029b      	lsls	r3, r3, #10
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	e024      	b.n	8005d3a <USB_EPStartXfer+0xb62>
 8005cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d11c      	bne.n	8005d3a <USB_EPStartXfer+0xb62>
 8005d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d14:	4413      	add	r3, r2
 8005d16:	673b      	str	r3, [r7, #112]	; 0x70
 8005d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	011a      	lsls	r2, r3, #4
 8005d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d28:	4413      	add	r3, r2
 8005d2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d38:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	895b      	ldrh	r3, [r3, #10]
 8005d46:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6959      	ldr	r1, [r3, #20]
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d60:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d64:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d68:	6800      	ldr	r0, [r0, #0]
 8005d6a:	f000 ff24 	bl	8006bb6 <USB_WritePMA>
 8005d6e:	e0ca      	b.n	8005f06 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	785b      	ldrb	r3, [r3, #1]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d177      	bne.n	8005e70 <USB_EPStartXfer+0xc98>
 8005d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005da0:	4413      	add	r3, r2
 8005da2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	011a      	lsls	r2, r3, #4
 8005db2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005db4:	4413      	add	r3, r2
 8005db6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dba:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8005dd2:	d921      	bls.n	8005e18 <USB_EPStartXfer+0xc40>
 8005dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <USB_EPStartXfer+0xc1c>
 8005dea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dee:	3b01      	subs	r3, #1
 8005df0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005df6:	881b      	ldrh	r3, [r3, #0]
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	029b      	lsls	r3, r3, #10
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e14:	801a      	strh	r2, [r3, #0]
 8005e16:	e05c      	b.n	8005ed2 <USB_EPStartXfer+0xcfa>
 8005e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <USB_EPStartXfer+0xc5e>
 8005e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	e04d      	b.n	8005ed2 <USB_EPStartXfer+0xcfa>
 8005e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d004      	beq.n	8005e56 <USB_EPStartXfer+0xc7e>
 8005e4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e50:	3301      	adds	r3, #1
 8005e52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	029b      	lsls	r3, r3, #10
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	4313      	orrs	r3, r2
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	e030      	b.n	8005ed2 <USB_EPStartXfer+0xcfa>
 8005e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d128      	bne.n	8005ed2 <USB_EPStartXfer+0xcfa>
 8005e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	011a      	lsls	r2, r3, #4
 8005eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ec2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ed0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	891b      	ldrh	r3, [r3, #8]
 8005ede:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6959      	ldr	r1, [r3, #20]
 8005eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ef8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005efc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f00:	6800      	ldr	r0, [r0, #0]
 8005f02:	f000 fe58 	bl	8006bb6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2c:	817b      	strh	r3, [r7, #10]
 8005f2e:	897b      	ldrh	r3, [r7, #10]
 8005f30:	f083 0310 	eor.w	r3, r3, #16
 8005f34:	817b      	strh	r3, [r7, #10]
 8005f36:	897b      	ldrh	r3, [r7, #10]
 8005f38:	f083 0320 	eor.w	r3, r3, #32
 8005f3c:	817b      	strh	r3, [r7, #10]
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	441a      	add	r2, r3
 8005f58:	897b      	ldrh	r3, [r7, #10]
 8005f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	8013      	strh	r3, [r2, #0]
 8005f6e:	f000 bcde 	b.w	800692e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	7b1b      	ldrb	r3, [r3, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f040 80bb 	bne.w	80060fa <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	699a      	ldr	r2, [r3, #24]
 8005f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d917      	bls.n	8005fd0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	699a      	ldr	r2, [r3, #24]
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc0:	1ad2      	subs	r2, r2, r3
 8005fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	619a      	str	r2, [r3, #24]
 8005fce:	e00e      	b.n	8005fee <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2200      	movs	r2, #0
 8005fec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006000:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800600a:	b29b      	uxth	r3, r3
 800600c:	461a      	mov	r2, r3
 800600e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006012:	4413      	add	r3, r2
 8006014:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800601c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	011a      	lsls	r2, r3, #4
 8006026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800602a:	4413      	add	r3, r2
 800602c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006030:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006034:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006040:	b29a      	uxth	r2, r3
 8006042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800604c:	2b3e      	cmp	r3, #62	; 0x3e
 800604e:	d924      	bls.n	800609a <USB_EPStartXfer+0xec2>
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800605a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800605e:	f003 031f 	and.w	r3, r3, #31
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <USB_EPStartXfer+0xe98>
 8006066:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800606a:	3b01      	subs	r3, #1
 800606c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006070:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29a      	uxth	r2, r3
 8006078:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800607c:	b29b      	uxth	r3, r3
 800607e:	029b      	lsls	r3, r3, #10
 8006080:	b29b      	uxth	r3, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	b29b      	uxth	r3, r3
 8006086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800608e:	b29a      	uxth	r2, r3
 8006090:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	f000 bc10 	b.w	80068ba <USB_EPStartXfer+0x16e2>
 800609a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10c      	bne.n	80060bc <USB_EPStartXfer+0xee4>
 80060a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060b8:	801a      	strh	r2, [r3, #0]
 80060ba:	e3fe      	b.n	80068ba <USB_EPStartXfer+0x16e2>
 80060bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c0:	085b      	lsrs	r3, r3, #1
 80060c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d004      	beq.n	80060dc <USB_EPStartXfer+0xf04>
 80060d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060d6:	3301      	adds	r3, #1
 80060d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	029b      	lsls	r3, r3, #10
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	4313      	orrs	r3, r2
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060f6:	801a      	strh	r2, [r3, #0]
 80060f8:	e3df      	b.n	80068ba <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80060fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	78db      	ldrb	r3, [r3, #3]
 8006106:	2b02      	cmp	r3, #2
 8006108:	f040 8218 	bne.w	800653c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800610c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b00      	cmp	r3, #0
 800611a:	f040 809d 	bne.w	8006258 <USB_EPStartXfer+0x1080>
 800611e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800612c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006130:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800613a:	b29b      	uxth	r3, r3
 800613c:	461a      	mov	r2, r3
 800613e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006142:	4413      	add	r3, r2
 8006144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800614c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	011a      	lsls	r2, r3, #4
 8006156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800615a:	4413      	add	r3, r2
 800615c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006170:	b29a      	uxth	r2, r3
 8006172:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006176:	801a      	strh	r2, [r3, #0]
 8006178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800617c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	2b3e      	cmp	r3, #62	; 0x3e
 8006186:	d92b      	bls.n	80061e0 <USB_EPStartXfer+0x1008>
 8006188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	095b      	lsrs	r3, r3, #5
 8006196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800619a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 031f 	and.w	r3, r3, #31
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d104      	bne.n	80061b8 <USB_EPStartXfer+0xfe0>
 80061ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b2:	3b01      	subs	r3, #1
 80061b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29a      	uxth	r2, r3
 80061c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	029b      	lsls	r3, r3, #10
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	4313      	orrs	r3, r2
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	e070      	b.n	80062c2 <USB_EPStartXfer+0x10ea>
 80061e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10c      	bne.n	800620a <USB_EPStartXfer+0x1032>
 80061f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006200:	b29a      	uxth	r2, r3
 8006202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	e05b      	b.n	80062c2 <USB_EPStartXfer+0x10ea>
 800620a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800620e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800621c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <USB_EPStartXfer+0x1062>
 8006230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006234:	3301      	adds	r3, #1
 8006236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800623a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29a      	uxth	r2, r3
 8006242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006246:	b29b      	uxth	r3, r3
 8006248:	029b      	lsls	r3, r3, #10
 800624a:	b29b      	uxth	r3, r3
 800624c:	4313      	orrs	r3, r2
 800624e:	b29a      	uxth	r2, r3
 8006250:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006254:	801a      	strh	r2, [r3, #0]
 8006256:	e034      	b.n	80062c2 <USB_EPStartXfer+0x10ea>
 8006258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800625c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d12c      	bne.n	80062c2 <USB_EPStartXfer+0x10ea>
 8006268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800627a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006284:	b29b      	uxth	r3, r3
 8006286:	461a      	mov	r2, r3
 8006288:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800628c:	4413      	add	r3, r2
 800628e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	011a      	lsls	r2, r3, #4
 80062a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062a4:	4413      	add	r3, r2
 80062a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062c0:	801a      	strh	r2, [r3, #0]
 80062c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f040 809d 	bne.w	800641c <USB_EPStartXfer+0x1244>
 80062e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80062f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062fe:	b29b      	uxth	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006306:	4413      	add	r3, r2
 8006308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800630c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	011a      	lsls	r2, r3, #4
 800631a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800631e:	4413      	add	r3, r2
 8006320:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29b      	uxth	r3, r3
 8006330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006334:	b29a      	uxth	r2, r3
 8006336:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800633a:	801a      	strh	r2, [r3, #0]
 800633c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	2b3e      	cmp	r3, #62	; 0x3e
 800634a:	d92b      	bls.n	80063a4 <USB_EPStartXfer+0x11cc>
 800634c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800635e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 031f 	and.w	r3, r3, #31
 800636e:	2b00      	cmp	r3, #0
 8006370:	d104      	bne.n	800637c <USB_EPStartXfer+0x11a4>
 8006372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006376:	3b01      	subs	r3, #1
 8006378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800637c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006380:	881b      	ldrh	r3, [r3, #0]
 8006382:	b29a      	uxth	r2, r3
 8006384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006388:	b29b      	uxth	r3, r3
 800638a:	029b      	lsls	r3, r3, #10
 800638c:	b29b      	uxth	r3, r3
 800638e:	4313      	orrs	r3, r2
 8006390:	b29b      	uxth	r3, r3
 8006392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639a:	b29a      	uxth	r2, r3
 800639c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	e069      	b.n	8006478 <USB_EPStartXfer+0x12a0>
 80063a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10c      	bne.n	80063ce <USB_EPStartXfer+0x11f6>
 80063b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063ca:	801a      	strh	r2, [r3, #0]
 80063cc:	e054      	b.n	8006478 <USB_EPStartXfer+0x12a0>
 80063ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	085b      	lsrs	r3, r3, #1
 80063dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <USB_EPStartXfer+0x1226>
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f8:	3301      	adds	r3, #1
 80063fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	b29a      	uxth	r2, r3
 8006406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800640a:	b29b      	uxth	r3, r3
 800640c:	029b      	lsls	r3, r3, #10
 800640e:	b29b      	uxth	r3, r3
 8006410:	4313      	orrs	r3, r2
 8006412:	b29a      	uxth	r2, r3
 8006414:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006418:	801a      	strh	r2, [r3, #0]
 800641a:	e02d      	b.n	8006478 <USB_EPStartXfer+0x12a0>
 800641c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	785b      	ldrb	r3, [r3, #1]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d125      	bne.n	8006478 <USB_EPStartXfer+0x12a0>
 800642c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006430:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800643a:	b29b      	uxth	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006442:	4413      	add	r3, r2
 8006444:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800644c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	011a      	lsls	r2, r3, #4
 8006456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800645a:	4413      	add	r3, r2
 800645c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006460:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	b29a      	uxth	r2, r3
 8006472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006476:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800647c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 8218 	beq.w	80068ba <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800648a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800648e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d005      	beq.n	80064c2 <USB_EPStartXfer+0x12ea>
 80064b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10d      	bne.n	80064de <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f040 81f5 	bne.w	80068ba <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f040 81ee 	bne.w	80068ba <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80064de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006504:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006516:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	441a      	add	r2, r3
 8006522:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006526:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800652a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800652e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006532:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006536:	b29b      	uxth	r3, r3
 8006538:	8013      	strh	r3, [r2, #0]
 800653a:	e1be      	b.n	80068ba <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800653c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	2b01      	cmp	r3, #1
 800654a:	f040 81b4 	bne.w	80068b6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800654e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800655e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	429a      	cmp	r2, r3
 8006568:	d917      	bls.n	800659a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800656a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800657a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800657e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658a:	1ad2      	subs	r2, r2, r3
 800658c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	619a      	str	r2, [r3, #24]
 8006598:	e00e      	b.n	80065b8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800659a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800659e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80065aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2200      	movs	r2, #0
 80065b6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f040 8085 	bne.w	80066d4 <USB_EPStartXfer+0x14fc>
 80065ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80065ee:	4413      	add	r3, r2
 80065f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	011a      	lsls	r2, r3, #4
 8006602:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006606:	4413      	add	r3, r2
 8006608:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800660c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800661c:	b29a      	uxth	r2, r3
 800661e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006622:	801a      	strh	r2, [r3, #0]
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006628:	2b3e      	cmp	r3, #62	; 0x3e
 800662a:	d923      	bls.n	8006674 <USB_EPStartXfer+0x149c>
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006630:	095b      	lsrs	r3, r3, #5
 8006632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <USB_EPStartXfer+0x1474>
 8006642:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006646:	3b01      	subs	r3, #1
 8006648:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800664c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006650:	881b      	ldrh	r3, [r3, #0]
 8006652:	b29a      	uxth	r2, r3
 8006654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006658:	b29b      	uxth	r3, r3
 800665a:	029b      	lsls	r3, r3, #10
 800665c:	b29b      	uxth	r3, r3
 800665e:	4313      	orrs	r3, r2
 8006660:	b29b      	uxth	r3, r3
 8006662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666a:	b29a      	uxth	r2, r3
 800666c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	e060      	b.n	8006736 <USB_EPStartXfer+0x155e>
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10c      	bne.n	8006696 <USB_EPStartXfer+0x14be>
 800667c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	b29b      	uxth	r3, r3
 8006684:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006688:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800668c:	b29a      	uxth	r2, r3
 800668e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006692:	801a      	strh	r2, [r3, #0]
 8006694:	e04f      	b.n	8006736 <USB_EPStartXfer+0x155e>
 8006696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800669a:	085b      	lsrs	r3, r3, #1
 800669c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d004      	beq.n	80066b6 <USB_EPStartXfer+0x14de>
 80066ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b0:	3301      	adds	r3, #1
 80066b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	b29a      	uxth	r2, r3
 80066be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	029b      	lsls	r3, r3, #10
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	4313      	orrs	r3, r2
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066d0:	801a      	strh	r2, [r3, #0]
 80066d2:	e030      	b.n	8006736 <USB_EPStartXfer+0x155e>
 80066d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d128      	bne.n	8006736 <USB_EPStartXfer+0x155e>
 80066e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006700:	b29b      	uxth	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006708:	4413      	add	r3, r2
 800670a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800670e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	011a      	lsls	r2, r3, #4
 800671c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006720:	4413      	add	r3, r2
 8006722:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006726:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800672a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672e:	b29a      	uxth	r2, r3
 8006730:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006734:	801a      	strh	r2, [r3, #0]
 8006736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	785b      	ldrb	r3, [r3, #1]
 8006750:	2b00      	cmp	r3, #0
 8006752:	f040 8085 	bne.w	8006860 <USB_EPStartXfer+0x1688>
 8006756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800675a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006772:	b29b      	uxth	r3, r3
 8006774:	461a      	mov	r2, r3
 8006776:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800677a:	4413      	add	r3, r2
 800677c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	011a      	lsls	r2, r3, #4
 800678e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006792:	4413      	add	r3, r2
 8006794:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800679c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b4:	2b3e      	cmp	r3, #62	; 0x3e
 80067b6:	d923      	bls.n	8006800 <USB_EPStartXfer+0x1628>
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d104      	bne.n	80067d8 <USB_EPStartXfer+0x1600>
 80067ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067d2:	3b01      	subs	r3, #1
 80067d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29a      	uxth	r2, r3
 80067e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	4313      	orrs	r3, r2
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067fc:	801a      	strh	r2, [r3, #0]
 80067fe:	e05c      	b.n	80068ba <USB_EPStartXfer+0x16e2>
 8006800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10c      	bne.n	8006822 <USB_EPStartXfer+0x164a>
 8006808:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	b29b      	uxth	r3, r3
 8006810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006818:	b29a      	uxth	r2, r3
 800681a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800681e:	801a      	strh	r2, [r3, #0]
 8006820:	e04b      	b.n	80068ba <USB_EPStartXfer+0x16e2>
 8006822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <USB_EPStartXfer+0x166a>
 8006838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800683c:	3301      	adds	r3, #1
 800683e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b29a      	uxth	r2, r3
 800684a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800684e:	b29b      	uxth	r3, r3
 8006850:	029b      	lsls	r3, r3, #10
 8006852:	b29b      	uxth	r3, r3
 8006854:	4313      	orrs	r3, r2
 8006856:	b29a      	uxth	r2, r3
 8006858:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800685c:	801a      	strh	r2, [r3, #0]
 800685e:	e02c      	b.n	80068ba <USB_EPStartXfer+0x16e2>
 8006860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d124      	bne.n	80068ba <USB_EPStartXfer+0x16e2>
 8006870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800687e:	b29b      	uxth	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006886:	4413      	add	r3, r2
 8006888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800688c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	011a      	lsls	r2, r3, #4
 800689a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800689e:	4413      	add	r3, r2
 80068a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068b2:	801a      	strh	r2, [r3, #0]
 80068b4:	e001      	b.n	80068ba <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e03a      	b.n	8006930 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80068e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80068e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80068f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80068f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80068fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800690a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	441a      	add	r2, r3
 8006916:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800691a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692a:	b29b      	uxth	r3, r3
 800692c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	785b      	ldrb	r3, [r3, #1]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d020      	beq.n	800698e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006962:	81bb      	strh	r3, [r7, #12]
 8006964:	89bb      	ldrh	r3, [r7, #12]
 8006966:	f083 0310 	eor.w	r3, r3, #16
 800696a:	81bb      	strh	r3, [r7, #12]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	441a      	add	r2, r3
 8006976:	89bb      	ldrh	r3, [r7, #12]
 8006978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006988:	b29b      	uxth	r3, r3
 800698a:	8013      	strh	r3, [r2, #0]
 800698c:	e01f      	b.n	80069ce <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a4:	81fb      	strh	r3, [r7, #14]
 80069a6:	89fb      	ldrh	r3, [r7, #14]
 80069a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069ac:	81fb      	strh	r3, [r7, #14]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	441a      	add	r2, r3
 80069b8:	89fb      	ldrh	r3, [r7, #14]
 80069ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr

080069da <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069da:	b480      	push	{r7}
 80069dc:	b087      	sub	sp, #28
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	7b1b      	ldrb	r3, [r3, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f040 809d 	bne.w	8006b28 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d04c      	beq.n	8006a90 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	823b      	strh	r3, [r7, #16]
 8006a04:	8a3b      	ldrh	r3, [r7, #16]
 8006a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d01b      	beq.n	8006a46 <USB_EPClearStall+0x6c>
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a24:	81fb      	strh	r3, [r7, #14]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	441a      	add	r2, r3
 8006a30:	89fb      	ldrh	r3, [r7, #14]
 8006a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	78db      	ldrb	r3, [r3, #3]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d06c      	beq.n	8006b28 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a64:	81bb      	strh	r3, [r7, #12]
 8006a66:	89bb      	ldrh	r3, [r7, #12]
 8006a68:	f083 0320 	eor.w	r3, r3, #32
 8006a6c:	81bb      	strh	r3, [r7, #12]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	441a      	add	r2, r3
 8006a78:	89bb      	ldrh	r3, [r7, #12]
 8006a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	8013      	strh	r3, [r2, #0]
 8006a8e:	e04b      	b.n	8006b28 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	82fb      	strh	r3, [r7, #22]
 8006a9e:	8afb      	ldrh	r3, [r7, #22]
 8006aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01b      	beq.n	8006ae0 <USB_EPClearStall+0x106>
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	82bb      	strh	r3, [r7, #20]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	441a      	add	r2, r3
 8006aca:	8abb      	ldrh	r3, [r7, #20]
 8006acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af6:	827b      	strh	r3, [r7, #18]
 8006af8:	8a7b      	ldrh	r3, [r7, #18]
 8006afa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006afe:	827b      	strh	r3, [r7, #18]
 8006b00:	8a7b      	ldrh	r3, [r7, #18]
 8006b02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b06:	827b      	strh	r3, [r7, #18]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	441a      	add	r2, r3
 8006b12:	8a7b      	ldrh	r3, [r7, #18]
 8006b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bc80      	pop	{r7}
 8006b32:	4770      	bx	lr

08006b34 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d103      	bne.n	8006b4e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2280      	movs	r2, #128	; 0x80
 8006b4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bc80      	pop	{r7}
 8006b58:	4770      	bx	lr

08006b5a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bc80      	pop	{r7}
 8006b6c:	4770      	bx	lr

08006b6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b083      	sub	sp, #12
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr

08006b82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b94:	68fb      	ldr	r3, [r7, #12]
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr

08006ba0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr

08006bb6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b08b      	sub	sp, #44	; 0x2c
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	80fb      	strh	r3, [r7, #6]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bcc:	88bb      	ldrh	r3, [r7, #4]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bdc:	88fb      	ldrh	r3, [r7, #6]
 8006bde:	005a      	lsls	r2, r3, #1
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006be8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
 8006bee:	e01e      	b.n	8006c2e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	b21a      	sxth	r2, r3
 8006c00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	b21b      	sxth	r3, r3
 8006c08:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	8a7a      	ldrh	r2, [r7, #18]
 8006c0e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	3302      	adds	r3, #2
 8006c14:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c16:	6a3b      	ldr	r3, [r7, #32]
 8006c18:	3302      	adds	r3, #2
 8006c1a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	3301      	adds	r3, #1
 8006c26:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1dd      	bne.n	8006bf0 <USB_WritePMA+0x3a>
  }
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	372c      	adds	r7, #44	; 0x2c
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr

08006c40 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b08b      	sub	sp, #44	; 0x2c
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	460b      	mov	r3, r1
 8006c50:	80fb      	strh	r3, [r7, #6]
 8006c52:	4613      	mov	r3, r2
 8006c54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c56:	88bb      	ldrh	r3, [r7, #4]
 8006c58:	085b      	lsrs	r3, r3, #1
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c66:	88fb      	ldrh	r3, [r7, #6]
 8006c68:	005a      	lsls	r2, r3, #1
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c72:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	627b      	str	r3, [r7, #36]	; 0x24
 8006c78:	e01b      	b.n	8006cb2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	881b      	ldrh	r3, [r3, #0]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	3302      	adds	r3, #2
 8006c86:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	3301      	adds	r3, #1
 8006c94:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	0a1b      	lsrs	r3, r3, #8
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	3302      	adds	r3, #2
 8006caa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e0      	bne.n	8006c7a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006cb8:	88bb      	ldrh	r3, [r7, #4]
 8006cba:	f003 0301 	and.w	r3, r3, #1
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	881b      	ldrh	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	701a      	strb	r2, [r3, #0]
  }
}
 8006cd4:	bf00      	nop
 8006cd6:	372c      	adds	r7, #44	; 0x2c
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bc80      	pop	{r7}
 8006cdc:	4770      	bx	lr

08006cde <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b082      	sub	sp, #8
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006cea:	2304      	movs	r3, #4
 8006cec:	2203      	movs	r2, #3
 8006cee:	2181      	movs	r1, #129	; 0x81
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f002 fe76 	bl	80099e2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006cfc:	2010      	movs	r0, #16
 8006cfe:	f002 ff85 	bl	8009c0c <USBD_static_malloc>
 8006d02:	4602      	mov	r2, r0
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006d14:	2302      	movs	r3, #2
 8006d16:	e005      	b.n	8006d24 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1e:	2200      	movs	r2, #0
 8006d20:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006d38:	2181      	movs	r1, #129	; 0x81
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f002 fe77 	bl	8009a2e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d009      	beq.n	8006d64 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d56:	4618      	mov	r0, r3
 8006d58:	f002 ff64 	bl	8009c24 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
	...

08006d70 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d80:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d045      	beq.n	8006e2a <USBD_HID_Setup+0xba>
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	f040 80d3 	bne.w	8006f4a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	785b      	ldrb	r3, [r3, #1]
 8006da8:	3b02      	subs	r3, #2
 8006daa:	2b09      	cmp	r3, #9
 8006dac:	d835      	bhi.n	8006e1a <USBD_HID_Setup+0xaa>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <USBD_HID_Setup+0x44>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006e0b 	.word	0x08006e0b
 8006db8:	08006deb 	.word	0x08006deb
 8006dbc:	08006e1b 	.word	0x08006e1b
 8006dc0:	08006e1b 	.word	0x08006e1b
 8006dc4:	08006e1b 	.word	0x08006e1b
 8006dc8:	08006e1b 	.word	0x08006e1b
 8006dcc:	08006e1b 	.word	0x08006e1b
 8006dd0:	08006e1b 	.word	0x08006e1b
 8006dd4:	08006df9 	.word	0x08006df9
 8006dd8:	08006ddd 	.word	0x08006ddd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	885b      	ldrh	r3, [r3, #2]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	461a      	mov	r2, r3
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	601a      	str	r2, [r3, #0]
          break;
 8006de8:	e01e      	b.n	8006e28 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2201      	movs	r2, #1
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f001 f944 	bl	800807e <USBD_CtlSendData>
          break;
 8006df6:	e017      	b.n	8006e28 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	885b      	ldrh	r3, [r3, #2]
 8006dfc:	0a1b      	lsrs	r3, r3, #8
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	461a      	mov	r2, r3
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	605a      	str	r2, [r3, #4]
          break;
 8006e08:	e00e      	b.n	8006e28 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	2201      	movs	r2, #1
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 f933 	bl	800807e <USBD_CtlSendData>
          break;
 8006e18:	e006      	b.n	8006e28 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 f8c4 	bl	8007faa <USBD_CtlError>
          ret = USBD_FAIL;
 8006e22:	2302      	movs	r3, #2
 8006e24:	75fb      	strb	r3, [r7, #23]
          break;
 8006e26:	bf00      	nop
      }
      break;
 8006e28:	e096      	b.n	8006f58 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	2b0b      	cmp	r3, #11
 8006e30:	f200 8083 	bhi.w	8006f3a <USBD_HID_Setup+0x1ca>
 8006e34:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <USBD_HID_Setup+0xcc>)
 8006e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3a:	bf00      	nop
 8006e3c:	08006e6d 	.word	0x08006e6d
 8006e40:	08006f3b 	.word	0x08006f3b
 8006e44:	08006f3b 	.word	0x08006f3b
 8006e48:	08006f3b 	.word	0x08006f3b
 8006e4c:	08006f3b 	.word	0x08006f3b
 8006e50:	08006f3b 	.word	0x08006f3b
 8006e54:	08006e95 	.word	0x08006e95
 8006e58:	08006f3b 	.word	0x08006f3b
 8006e5c:	08006f3b 	.word	0x08006f3b
 8006e60:	08006f3b 	.word	0x08006f3b
 8006e64:	08006eed 	.word	0x08006eed
 8006e68:	08006f15 	.word	0x08006f15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d107      	bne.n	8006e86 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e76:	f107 030e 	add.w	r3, r7, #14
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 f8fd 	bl	800807e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e84:	e060      	b.n	8006f48 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f001 f88e 	bl	8007faa <USBD_CtlError>
            ret = USBD_FAIL;
 8006e8e:	2302      	movs	r3, #2
 8006e90:	75fb      	strb	r3, [r7, #23]
          break;
 8006e92:	e059      	b.n	8006f48 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	885b      	ldrh	r3, [r3, #2]
 8006e98:	0a1b      	lsrs	r3, r3, #8
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	2b22      	cmp	r3, #34	; 0x22
 8006e9e:	d108      	bne.n	8006eb2 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	88db      	ldrh	r3, [r3, #6]
 8006ea4:	2b4a      	cmp	r3, #74	; 0x4a
 8006ea6:	bf28      	it	cs
 8006ea8:	234a      	movcs	r3, #74	; 0x4a
 8006eaa:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006eac:	4b2d      	ldr	r3, [pc, #180]	; (8006f64 <USBD_HID_Setup+0x1f4>)
 8006eae:	61bb      	str	r3, [r7, #24]
 8006eb0:	e015      	b.n	8006ede <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	885b      	ldrh	r3, [r3, #2]
 8006eb6:	0a1b      	lsrs	r3, r3, #8
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b21      	cmp	r3, #33	; 0x21
 8006ebc:	d108      	bne.n	8006ed0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006ebe:	4b2a      	ldr	r3, [pc, #168]	; (8006f68 <USBD_HID_Setup+0x1f8>)
 8006ec0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	88db      	ldrh	r3, [r3, #6]
 8006ec6:	2b09      	cmp	r3, #9
 8006ec8:	bf28      	it	cs
 8006eca:	2309      	movcs	r3, #9
 8006ecc:	83fb      	strh	r3, [r7, #30]
 8006ece:	e006      	b.n	8006ede <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f869 	bl	8007faa <USBD_CtlError>
            ret = USBD_FAIL;
 8006ed8:	2302      	movs	r3, #2
 8006eda:	75fb      	strb	r3, [r7, #23]
            break;
 8006edc:	e034      	b.n	8006f48 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006ede:	8bfb      	ldrh	r3, [r7, #30]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	69b9      	ldr	r1, [r7, #24]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 f8ca 	bl	800807e <USBD_CtlSendData>
          break;
 8006eea:	e02d      	b.n	8006f48 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ef2:	2b03      	cmp	r3, #3
 8006ef4:	d107      	bne.n	8006f06 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	3308      	adds	r3, #8
 8006efa:	2201      	movs	r2, #1
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f001 f8bd 	bl	800807e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f04:	e020      	b.n	8006f48 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f001 f84e 	bl	8007faa <USBD_CtlError>
            ret = USBD_FAIL;
 8006f0e:	2302      	movs	r3, #2
 8006f10:	75fb      	strb	r3, [r7, #23]
          break;
 8006f12:	e019      	b.n	8006f48 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d106      	bne.n	8006f2c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	885b      	ldrh	r3, [r3, #2]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f2a:	e00d      	b.n	8006f48 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006f2c:	6839      	ldr	r1, [r7, #0]
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f001 f83b 	bl	8007faa <USBD_CtlError>
            ret = USBD_FAIL;
 8006f34:	2302      	movs	r3, #2
 8006f36:	75fb      	strb	r3, [r7, #23]
          break;
 8006f38:	e006      	b.n	8006f48 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f001 f834 	bl	8007faa <USBD_CtlError>
          ret = USBD_FAIL;
 8006f42:	2302      	movs	r3, #2
 8006f44:	75fb      	strb	r3, [r7, #23]
          break;
 8006f46:	bf00      	nop
      }
      break;
 8006f48:	e006      	b.n	8006f58 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 f82c 	bl	8007faa <USBD_CtlError>
      ret = USBD_FAIL;
 8006f52:	2302      	movs	r3, #2
 8006f54:	75fb      	strb	r3, [r7, #23]
      break;
 8006f56:	bf00      	nop
  }

  return ret;
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	200000c8 	.word	0x200000c8
 8006f68:	200000b0 	.word	0x200000b0

08006f6c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	4613      	mov	r3, r2
 8006f78:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f80:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	d10c      	bne.n	8006fa6 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	7b1b      	ldrb	r3, [r3, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d108      	bne.n	8006fa6 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2201      	movs	r2, #1
 8006f98:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006f9a:	88fb      	ldrh	r3, [r7, #6]
 8006f9c:	68ba      	ldr	r2, [r7, #8]
 8006f9e:	2181      	movs	r1, #129	; 0x81
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f002 fdec 	bl	8009b7e <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2222      	movs	r2, #34	; 0x22
 8006fbc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006fbe:	4b03      	ldr	r3, [pc, #12]	; (8006fcc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	20000044 	.word	0x20000044

08006fd0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2222      	movs	r2, #34	; 0x22
 8006fdc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006fde:	4b03      	ldr	r3, [pc, #12]	; (8006fec <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	20000068 	.word	0x20000068

08006ff0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2222      	movs	r2, #34	; 0x22
 8006ffc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006ffe:	4b03      	ldr	r3, [pc, #12]	; (800700c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	bc80      	pop	{r7}
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	2000008c 	.word	0x2000008c

08007010 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007022:	2200      	movs	r2, #0
 8007024:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr
	...

08007034 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	220a      	movs	r2, #10
 8007040:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007042:	4b03      	ldr	r3, [pc, #12]	; (8007050 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	200000bc 	.word	0x200000bc

08007054 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	4613      	mov	r3, r2
 8007060:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007068:	2302      	movs	r3, #2
 800706a:	e01a      	b.n	80070a2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d003      	beq.n	800708c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	79fa      	ldrb	r2, [r7, #7]
 8007098:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f002 fc3e 	bl	800991c <USBD_LL_Init>

  return USBD_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070aa:	b480      	push	{r7}
 80070ac:	b085      	sub	sp, #20
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d006      	beq.n	80070cc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
 80070ca:	e001      	b.n	80070d0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80070cc:	2302      	movs	r3, #2
 80070ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bc80      	pop	{r7}
 80070da:	4770      	bx	lr

080070dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f002 fc61 	bl	80099ac <USBD_LL_Start>

  return USBD_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr

08007108 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007114:	2302      	movs	r3, #2
 8007116:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00c      	beq.n	800713c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	78fa      	ldrb	r2, [r7, #3]
 800712c:	4611      	mov	r1, r2
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800713c:	7bfb      	ldrb	r3, [r7, #15]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b082      	sub	sp, #8
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	460b      	mov	r3, r1
 8007150:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	4611      	mov	r1, r2
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3

  return USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fed7 	bl	8007f32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007192:	461a      	mov	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071a0:	f003 031f 	and.w	r3, r3, #31
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d016      	beq.n	80071d6 <USBD_LL_SetupStage+0x6a>
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d81c      	bhi.n	80071e6 <USBD_LL_SetupStage+0x7a>
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <USBD_LL_SetupStage+0x4a>
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d008      	beq.n	80071c6 <USBD_LL_SetupStage+0x5a>
 80071b4:	e017      	b.n	80071e6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f9ca 	bl	8007558 <USBD_StdDevReq>
      break;
 80071c4:	e01a      	b.n	80071fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071cc:	4619      	mov	r1, r3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa2c 	bl	800762c <USBD_StdItfReq>
      break;
 80071d4:	e012      	b.n	80071fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071dc:	4619      	mov	r1, r3
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa6c 	bl	80076bc <USBD_StdEPReq>
      break;
 80071e4:	e00a      	b.n	80071fc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f002 fc39 	bl	8009a6c <USBD_LL_StallEP>
      break;
 80071fa:	bf00      	nop
  }

  return USBD_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b086      	sub	sp, #24
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	460b      	mov	r3, r1
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d14b      	bne.n	80072b2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007220:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007228:	2b03      	cmp	r3, #3
 800722a:	d134      	bne.n	8007296 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	68da      	ldr	r2, [r3, #12]
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	429a      	cmp	r2, r3
 8007236:	d919      	bls.n	800726c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	1ad2      	subs	r2, r2, r3
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800724e:	429a      	cmp	r2, r3
 8007250:	d203      	bcs.n	800725a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007256:	b29b      	uxth	r3, r3
 8007258:	e002      	b.n	8007260 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800725e:	b29b      	uxth	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 ff38 	bl	80080da <USBD_CtlContinueRx>
 800726a:	e038      	b.n	80072de <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800727e:	2b03      	cmp	r3, #3
 8007280:	d105      	bne.n	800728e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 ff35 	bl	80080fe <USBD_CtlSendStatus>
 8007294:	e023      	b.n	80072de <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800729c:	2b05      	cmp	r3, #5
 800729e:	d11e      	bne.n	80072de <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80072a8:	2100      	movs	r1, #0
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f002 fbde 	bl	8009a6c <USBD_LL_StallEP>
 80072b0:	e015      	b.n	80072de <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00d      	beq.n	80072da <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d108      	bne.n	80072da <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	7afa      	ldrb	r2, [r7, #11]
 80072d2:	4611      	mov	r1, r2
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	4798      	blx	r3
 80072d8:	e001      	b.n	80072de <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072da:	2302      	movs	r3, #2
 80072dc:	e000      	b.n	80072e0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	460b      	mov	r3, r1
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072f6:	7afb      	ldrb	r3, [r7, #11]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d17f      	bne.n	80073fc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3314      	adds	r3, #20
 8007300:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007308:	2b02      	cmp	r3, #2
 800730a:	d15c      	bne.n	80073c6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	68da      	ldr	r2, [r3, #12]
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	429a      	cmp	r2, r3
 8007316:	d915      	bls.n	8007344 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	1ad2      	subs	r2, r2, r3
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	b29b      	uxth	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 fec0 	bl	80080b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007336:	2300      	movs	r3, #0
 8007338:	2200      	movs	r2, #0
 800733a:	2100      	movs	r1, #0
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f002 fc41 	bl	8009bc4 <USBD_LL_PrepareReceive>
 8007342:	e04e      	b.n	80073e2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	6912      	ldr	r2, [r2, #16]
 800734c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007350:	fb01 f202 	mul.w	r2, r1, r2
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d11c      	bne.n	8007394 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	689a      	ldr	r2, [r3, #8]
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007362:	429a      	cmp	r2, r3
 8007364:	d316      	bcc.n	8007394 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007370:	429a      	cmp	r2, r3
 8007372:	d20f      	bcs.n	8007394 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007374:	2200      	movs	r2, #0
 8007376:	2100      	movs	r1, #0
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 fe9c 	bl	80080b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007386:	2300      	movs	r3, #0
 8007388:	2200      	movs	r2, #0
 800738a:	2100      	movs	r1, #0
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f002 fc19 	bl	8009bc4 <USBD_LL_PrepareReceive>
 8007392:	e026      	b.n	80073e2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d105      	bne.n	80073b6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80073b6:	2180      	movs	r1, #128	; 0x80
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f002 fb57 	bl	8009a6c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 feb0 	bl	8008124 <USBD_CtlReceiveStatus>
 80073c4:	e00d      	b.n	80073e2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d004      	beq.n	80073da <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d103      	bne.n	80073e2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80073da:	2180      	movs	r1, #128	; 0x80
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f002 fb45 	bl	8009a6c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d11d      	bne.n	8007428 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f7ff fe81 	bl	80070f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073fa:	e015      	b.n	8007428 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00d      	beq.n	8007424 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800740e:	2b03      	cmp	r3, #3
 8007410:	d108      	bne.n	8007424 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	7afa      	ldrb	r2, [r7, #11]
 800741c:	4611      	mov	r1, r2
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	4798      	blx	r3
 8007422:	e001      	b.n	8007428 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007424:	2302      	movs	r3, #2
 8007426:	e000      	b.n	800742a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b082      	sub	sp, #8
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800743a:	2340      	movs	r3, #64	; 0x40
 800743c:	2200      	movs	r2, #0
 800743e:	2100      	movs	r1, #0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f002 face 	bl	80099e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2240      	movs	r2, #64	; 0x40
 8007452:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007456:	2340      	movs	r3, #64	; 0x40
 8007458:	2200      	movs	r2, #0
 800745a:	2180      	movs	r1, #128	; 0x80
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f002 fac0 	bl	80099e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2240      	movs	r2, #64	; 0x40
 800746c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d009      	beq.n	80074aa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6852      	ldr	r2, [r2, #4]
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	4611      	mov	r1, r2
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4798      	blx	r3
  }

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bc80      	pop	{r7}
 80074d0:	4770      	bx	lr

080074d2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2204      	movs	r2, #4
 80074ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr

080074fa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007508:	2b04      	cmp	r3, #4
 800750a:	d105      	bne.n	8007518 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	bc80      	pop	{r7}
 8007522:	4770      	bx	lr

08007524 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007532:	2b03      	cmp	r3, #3
 8007534:	d10b      	bne.n	800754e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007548:	69db      	ldr	r3, [r3, #28]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800756e:	2b40      	cmp	r3, #64	; 0x40
 8007570:	d005      	beq.n	800757e <USBD_StdDevReq+0x26>
 8007572:	2b40      	cmp	r3, #64	; 0x40
 8007574:	d84f      	bhi.n	8007616 <USBD_StdDevReq+0xbe>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <USBD_StdDevReq+0x36>
 800757a:	2b20      	cmp	r3, #32
 800757c:	d14b      	bne.n	8007616 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	4798      	blx	r3
      break;
 800758c:	e048      	b.n	8007620 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	2b09      	cmp	r3, #9
 8007594:	d839      	bhi.n	800760a <USBD_StdDevReq+0xb2>
 8007596:	a201      	add	r2, pc, #4	; (adr r2, 800759c <USBD_StdDevReq+0x44>)
 8007598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759c:	080075ed 	.word	0x080075ed
 80075a0:	08007601 	.word	0x08007601
 80075a4:	0800760b 	.word	0x0800760b
 80075a8:	080075f7 	.word	0x080075f7
 80075ac:	0800760b 	.word	0x0800760b
 80075b0:	080075cf 	.word	0x080075cf
 80075b4:	080075c5 	.word	0x080075c5
 80075b8:	0800760b 	.word	0x0800760b
 80075bc:	080075e3 	.word	0x080075e3
 80075c0:	080075d9 	.word	0x080075d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f9dc 	bl	8007984 <USBD_GetDescriptor>
          break;
 80075cc:	e022      	b.n	8007614 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fb3f 	bl	8007c54 <USBD_SetAddress>
          break;
 80075d6:	e01d      	b.n	8007614 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fb7e 	bl	8007cdc <USBD_SetConfig>
          break;
 80075e0:	e018      	b.n	8007614 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fc07 	bl	8007df8 <USBD_GetConfig>
          break;
 80075ea:	e013      	b.n	8007614 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fc37 	bl	8007e62 <USBD_GetStatus>
          break;
 80075f4:	e00e      	b.n	8007614 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fc65 	bl	8007ec8 <USBD_SetFeature>
          break;
 80075fe:	e009      	b.n	8007614 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fc74 	bl	8007ef0 <USBD_ClrFeature>
          break;
 8007608:	e004      	b.n	8007614 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fccc 	bl	8007faa <USBD_CtlError>
          break;
 8007612:	bf00      	nop
      }
      break;
 8007614:	e004      	b.n	8007620 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fcc6 	bl	8007faa <USBD_CtlError>
      break;
 800761e:	bf00      	nop
  }

  return ret;
 8007620:	7bfb      	ldrb	r3, [r7, #15]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop

0800762c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007642:	2b40      	cmp	r3, #64	; 0x40
 8007644:	d005      	beq.n	8007652 <USBD_StdItfReq+0x26>
 8007646:	2b40      	cmp	r3, #64	; 0x40
 8007648:	d82e      	bhi.n	80076a8 <USBD_StdItfReq+0x7c>
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <USBD_StdItfReq+0x26>
 800764e:	2b20      	cmp	r3, #32
 8007650:	d12a      	bne.n	80076a8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007658:	3b01      	subs	r3, #1
 800765a:	2b02      	cmp	r3, #2
 800765c:	d81d      	bhi.n	800769a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	889b      	ldrh	r3, [r3, #4]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b01      	cmp	r3, #1
 8007666:	d813      	bhi.n	8007690 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
 8007676:	4603      	mov	r3, r0
 8007678:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	88db      	ldrh	r3, [r3, #6]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d110      	bne.n	80076a4 <USBD_StdItfReq+0x78>
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10d      	bne.n	80076a4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fd38 	bl	80080fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800768e:	e009      	b.n	80076a4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fc89 	bl	8007faa <USBD_CtlError>
          break;
 8007698:	e004      	b.n	80076a4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fc84 	bl	8007faa <USBD_CtlError>
          break;
 80076a2:	e000      	b.n	80076a6 <USBD_StdItfReq+0x7a>
          break;
 80076a4:	bf00      	nop
      }
      break;
 80076a6:	e004      	b.n	80076b2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fc7d 	bl	8007faa <USBD_CtlError>
      break;
 80076b0:	bf00      	nop
  }

  return USBD_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	889b      	ldrh	r3, [r3, #4]
 80076ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076d8:	2b40      	cmp	r3, #64	; 0x40
 80076da:	d007      	beq.n	80076ec <USBD_StdEPReq+0x30>
 80076dc:	2b40      	cmp	r3, #64	; 0x40
 80076de:	f200 8146 	bhi.w	800796e <USBD_StdEPReq+0x2b2>
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <USBD_StdEPReq+0x40>
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	f040 8141 	bne.w	800796e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	4798      	blx	r3
      break;
 80076fa:	e13d      	b.n	8007978 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007704:	2b20      	cmp	r3, #32
 8007706:	d10a      	bne.n	800771e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	4798      	blx	r3
 8007716:	4603      	mov	r3, r0
 8007718:	73fb      	strb	r3, [r7, #15]

        return ret;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
 800771c:	e12d      	b.n	800797a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	2b03      	cmp	r3, #3
 8007724:	d007      	beq.n	8007736 <USBD_StdEPReq+0x7a>
 8007726:	2b03      	cmp	r3, #3
 8007728:	f300 811b 	bgt.w	8007962 <USBD_StdEPReq+0x2a6>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d072      	beq.n	8007816 <USBD_StdEPReq+0x15a>
 8007730:	2b01      	cmp	r3, #1
 8007732:	d03a      	beq.n	80077aa <USBD_StdEPReq+0xee>
 8007734:	e115      	b.n	8007962 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773c:	2b02      	cmp	r3, #2
 800773e:	d002      	beq.n	8007746 <USBD_StdEPReq+0x8a>
 8007740:	2b03      	cmp	r3, #3
 8007742:	d015      	beq.n	8007770 <USBD_StdEPReq+0xb4>
 8007744:	e02b      	b.n	800779e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00c      	beq.n	8007766 <USBD_StdEPReq+0xaa>
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	2b80      	cmp	r3, #128	; 0x80
 8007750:	d009      	beq.n	8007766 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007752:	7bbb      	ldrb	r3, [r7, #14]
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f002 f988 	bl	8009a6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800775c:	2180      	movs	r1, #128	; 0x80
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f002 f984 	bl	8009a6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007764:	e020      	b.n	80077a8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007766:	6839      	ldr	r1, [r7, #0]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fc1e 	bl	8007faa <USBD_CtlError>
              break;
 800776e:	e01b      	b.n	80077a8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	885b      	ldrh	r3, [r3, #2]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10e      	bne.n	8007796 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00b      	beq.n	8007796 <USBD_StdEPReq+0xda>
 800777e:	7bbb      	ldrb	r3, [r7, #14]
 8007780:	2b80      	cmp	r3, #128	; 0x80
 8007782:	d008      	beq.n	8007796 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	88db      	ldrh	r3, [r3, #6]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d104      	bne.n	8007796 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f002 f96b 	bl	8009a6c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fcb1 	bl	80080fe <USBD_CtlSendStatus>

              break;
 800779c:	e004      	b.n	80077a8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 fc02 	bl	8007faa <USBD_CtlError>
              break;
 80077a6:	bf00      	nop
          }
          break;
 80077a8:	e0e0      	b.n	800796c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d002      	beq.n	80077ba <USBD_StdEPReq+0xfe>
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d015      	beq.n	80077e4 <USBD_StdEPReq+0x128>
 80077b8:	e026      	b.n	8007808 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00c      	beq.n	80077da <USBD_StdEPReq+0x11e>
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d009      	beq.n	80077da <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f002 f94e 	bl	8009a6c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077d0:	2180      	movs	r1, #128	; 0x80
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f002 f94a 	bl	8009a6c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077d8:	e01c      	b.n	8007814 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fbe4 	bl	8007faa <USBD_CtlError>
              break;
 80077e2:	e017      	b.n	8007814 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	885b      	ldrh	r3, [r3, #2]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d112      	bne.n	8007812 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d004      	beq.n	8007800 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80077f6:	7bbb      	ldrb	r3, [r7, #14]
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f002 f955 	bl	8009aaa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fc7c 	bl	80080fe <USBD_CtlSendStatus>
              }
              break;
 8007806:	e004      	b.n	8007812 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fbcd 	bl	8007faa <USBD_CtlError>
              break;
 8007810:	e000      	b.n	8007814 <USBD_StdEPReq+0x158>
              break;
 8007812:	bf00      	nop
          }
          break;
 8007814:	e0aa      	b.n	800796c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800781c:	2b02      	cmp	r3, #2
 800781e:	d002      	beq.n	8007826 <USBD_StdEPReq+0x16a>
 8007820:	2b03      	cmp	r3, #3
 8007822:	d032      	beq.n	800788a <USBD_StdEPReq+0x1ce>
 8007824:	e097      	b.n	8007956 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d007      	beq.n	800783c <USBD_StdEPReq+0x180>
 800782c:	7bbb      	ldrb	r3, [r7, #14]
 800782e:	2b80      	cmp	r3, #128	; 0x80
 8007830:	d004      	beq.n	800783c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fbb8 	bl	8007faa <USBD_CtlError>
                break;
 800783a:	e091      	b.n	8007960 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800783c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	da0b      	bge.n	800785c <USBD_StdEPReq+0x1a0>
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	3310      	adds	r3, #16
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	4413      	add	r3, r2
 8007858:	3304      	adds	r3, #4
 800785a:	e00b      	b.n	8007874 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	4413      	add	r3, r2
 8007872:	3304      	adds	r3, #4
 8007874:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2202      	movs	r2, #2
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fbfb 	bl	800807e <USBD_CtlSendData>
              break;
 8007888:	e06a      	b.n	8007960 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800788a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800788e:	2b00      	cmp	r3, #0
 8007890:	da11      	bge.n	80078b6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	f003 020f 	and.w	r2, r3, #15
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	3318      	adds	r3, #24
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d117      	bne.n	80078dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fb7b 	bl	8007faa <USBD_CtlError>
                  break;
 80078b4:	e054      	b.n	8007960 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	f003 020f 	and.w	r2, r3, #15
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	4613      	mov	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	440b      	add	r3, r1
 80078c8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d104      	bne.n	80078dc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fb68 	bl	8007faa <USBD_CtlError>
                  break;
 80078da:	e041      	b.n	8007960 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	da0b      	bge.n	80078fc <USBD_StdEPReq+0x240>
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	3310      	adds	r3, #16
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	4413      	add	r3, r2
 80078f8:	3304      	adds	r3, #4
 80078fa:	e00b      	b.n	8007914 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	4413      	add	r3, r2
 8007912:	3304      	adds	r3, #4
 8007914:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <USBD_StdEPReq+0x266>
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	2b80      	cmp	r3, #128	; 0x80
 8007920:	d103      	bne.n	800792a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	e00e      	b.n	8007948 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f002 f8da 	bl	8009ae8 <USBD_LL_IsStallEP>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2201      	movs	r2, #1
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	e002      	b.n	8007948 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2202      	movs	r2, #2
 800794c:	4619      	mov	r1, r3
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fb95 	bl	800807e <USBD_CtlSendData>
              break;
 8007954:	e004      	b.n	8007960 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fb26 	bl	8007faa <USBD_CtlError>
              break;
 800795e:	bf00      	nop
          }
          break;
 8007960:	e004      	b.n	800796c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fb20 	bl	8007faa <USBD_CtlError>
          break;
 800796a:	bf00      	nop
      }
      break;
 800796c:	e004      	b.n	8007978 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fb1a 	bl	8007faa <USBD_CtlError>
      break;
 8007976:	bf00      	nop
  }

  return ret;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	885b      	ldrh	r3, [r3, #2]
 800799e:	0a1b      	lsrs	r3, r3, #8
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	2b06      	cmp	r3, #6
 80079a6:	f200 8128 	bhi.w	8007bfa <USBD_GetDescriptor+0x276>
 80079aa:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <USBD_GetDescriptor+0x2c>)
 80079ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b0:	080079cd 	.word	0x080079cd
 80079b4:	080079e5 	.word	0x080079e5
 80079b8:	08007a25 	.word	0x08007a25
 80079bc:	08007bfb 	.word	0x08007bfb
 80079c0:	08007bfb 	.word	0x08007bfb
 80079c4:	08007b9b 	.word	0x08007b9b
 80079c8:	08007bc7 	.word	0x08007bc7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	7c12      	ldrb	r2, [r2, #16]
 80079d8:	f107 0108 	add.w	r1, r7, #8
 80079dc:	4610      	mov	r0, r2
 80079de:	4798      	blx	r3
 80079e0:	60f8      	str	r0, [r7, #12]
      break;
 80079e2:	e112      	b.n	8007c0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	7c1b      	ldrb	r3, [r3, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d10d      	bne.n	8007a08 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f4:	f107 0208 	add.w	r2, r7, #8
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	3301      	adds	r3, #1
 8007a02:	2202      	movs	r2, #2
 8007a04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a06:	e100      	b.n	8007c0a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a10:	f107 0208 	add.w	r2, r7, #8
 8007a14:	4610      	mov	r0, r2
 8007a16:	4798      	blx	r3
 8007a18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	2202      	movs	r2, #2
 8007a20:	701a      	strb	r2, [r3, #0]
      break;
 8007a22:	e0f2      	b.n	8007c0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	885b      	ldrh	r3, [r3, #2]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b05      	cmp	r3, #5
 8007a2c:	f200 80ac 	bhi.w	8007b88 <USBD_GetDescriptor+0x204>
 8007a30:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <USBD_GetDescriptor+0xb4>)
 8007a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a36:	bf00      	nop
 8007a38:	08007a51 	.word	0x08007a51
 8007a3c:	08007a85 	.word	0x08007a85
 8007a40:	08007ab9 	.word	0x08007ab9
 8007a44:	08007aed 	.word	0x08007aed
 8007a48:	08007b21 	.word	0x08007b21
 8007a4c:	08007b55 	.word	0x08007b55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00b      	beq.n	8007a74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	7c12      	ldrb	r2, [r2, #16]
 8007a68:	f107 0108 	add.w	r1, r7, #8
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	4798      	blx	r3
 8007a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a72:	e091      	b.n	8007b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fa97 	bl	8007faa <USBD_CtlError>
            err++;
 8007a7c:	7afb      	ldrb	r3, [r7, #11]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	72fb      	strb	r3, [r7, #11]
          break;
 8007a82:	e089      	b.n	8007b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00b      	beq.n	8007aa8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	7c12      	ldrb	r2, [r2, #16]
 8007a9c:	f107 0108 	add.w	r1, r7, #8
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4798      	blx	r3
 8007aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aa6:	e077      	b.n	8007b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa7d 	bl	8007faa <USBD_CtlError>
            err++;
 8007ab0:	7afb      	ldrb	r3, [r7, #11]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ab6:	e06f      	b.n	8007b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	7c12      	ldrb	r2, [r2, #16]
 8007ad0:	f107 0108 	add.w	r1, r7, #8
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4798      	blx	r3
 8007ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ada:	e05d      	b.n	8007b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fa63 	bl	8007faa <USBD_CtlError>
            err++;
 8007ae4:	7afb      	ldrb	r3, [r7, #11]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aea:	e055      	b.n	8007b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00b      	beq.n	8007b10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	7c12      	ldrb	r2, [r2, #16]
 8007b04:	f107 0108 	add.w	r1, r7, #8
 8007b08:	4610      	mov	r0, r2
 8007b0a:	4798      	blx	r3
 8007b0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b0e:	e043      	b.n	8007b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fa49 	bl	8007faa <USBD_CtlError>
            err++;
 8007b18:	7afb      	ldrb	r3, [r7, #11]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b1e:	e03b      	b.n	8007b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00b      	beq.n	8007b44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	7c12      	ldrb	r2, [r2, #16]
 8007b38:	f107 0108 	add.w	r1, r7, #8
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4798      	blx	r3
 8007b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b42:	e029      	b.n	8007b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fa2f 	bl	8007faa <USBD_CtlError>
            err++;
 8007b4c:	7afb      	ldrb	r3, [r7, #11]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	72fb      	strb	r3, [r7, #11]
          break;
 8007b52:	e021      	b.n	8007b98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00b      	beq.n	8007b78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	7c12      	ldrb	r2, [r2, #16]
 8007b6c:	f107 0108 	add.w	r1, r7, #8
 8007b70:	4610      	mov	r0, r2
 8007b72:	4798      	blx	r3
 8007b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b76:	e00f      	b.n	8007b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fa15 	bl	8007faa <USBD_CtlError>
            err++;
 8007b80:	7afb      	ldrb	r3, [r7, #11]
 8007b82:	3301      	adds	r3, #1
 8007b84:	72fb      	strb	r3, [r7, #11]
          break;
 8007b86:	e007      	b.n	8007b98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fa0d 	bl	8007faa <USBD_CtlError>
          err++;
 8007b90:	7afb      	ldrb	r3, [r7, #11]
 8007b92:	3301      	adds	r3, #1
 8007b94:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007b96:	e038      	b.n	8007c0a <USBD_GetDescriptor+0x286>
 8007b98:	e037      	b.n	8007c0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	7c1b      	ldrb	r3, [r3, #16]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d109      	bne.n	8007bb6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007baa:	f107 0208 	add.w	r2, r7, #8
 8007bae:	4610      	mov	r0, r2
 8007bb0:	4798      	blx	r3
 8007bb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bb4:	e029      	b.n	8007c0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f9f6 	bl	8007faa <USBD_CtlError>
        err++;
 8007bbe:	7afb      	ldrb	r3, [r7, #11]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	72fb      	strb	r3, [r7, #11]
      break;
 8007bc4:	e021      	b.n	8007c0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	7c1b      	ldrb	r3, [r3, #16]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10d      	bne.n	8007bea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	f107 0208 	add.w	r2, r7, #8
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4798      	blx	r3
 8007bde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	2207      	movs	r2, #7
 8007be6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007be8:	e00f      	b.n	8007c0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f9dc 	bl	8007faa <USBD_CtlError>
        err++;
 8007bf2:	7afb      	ldrb	r3, [r7, #11]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	72fb      	strb	r3, [r7, #11]
      break;
 8007bf8:	e007      	b.n	8007c0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f9d4 	bl	8007faa <USBD_CtlError>
      err++;
 8007c02:	7afb      	ldrb	r3, [r7, #11]
 8007c04:	3301      	adds	r3, #1
 8007c06:	72fb      	strb	r3, [r7, #11]
      break;
 8007c08:	bf00      	nop
  }

  if (err != 0U)
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d11c      	bne.n	8007c4a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c10:	893b      	ldrh	r3, [r7, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d011      	beq.n	8007c3a <USBD_GetDescriptor+0x2b6>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	88db      	ldrh	r3, [r3, #6]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00d      	beq.n	8007c3a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	88da      	ldrh	r2, [r3, #6]
 8007c22:	893b      	ldrh	r3, [r7, #8]
 8007c24:	4293      	cmp	r3, r2
 8007c26:	bf28      	it	cs
 8007c28:	4613      	movcs	r3, r2
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c2e:	893b      	ldrh	r3, [r7, #8]
 8007c30:	461a      	mov	r2, r3
 8007c32:	68f9      	ldr	r1, [r7, #12]
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fa22 	bl	800807e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	88db      	ldrh	r3, [r3, #6]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d104      	bne.n	8007c4c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa5b 	bl	80080fe <USBD_CtlSendStatus>
 8007c48:	e000      	b.n	8007c4c <USBD_GetDescriptor+0x2c8>
    return;
 8007c4a:	bf00      	nop
    }
  }
}
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop

08007c54 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	889b      	ldrh	r3, [r3, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d130      	bne.n	8007cc8 <USBD_SetAddress+0x74>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	88db      	ldrh	r3, [r3, #6]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d12c      	bne.n	8007cc8 <USBD_SetAddress+0x74>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	885b      	ldrh	r3, [r3, #2]
 8007c72:	2b7f      	cmp	r3, #127	; 0x7f
 8007c74:	d828      	bhi.n	8007cc8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	885b      	ldrh	r3, [r3, #2]
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d104      	bne.n	8007c96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007c8c:	6839      	ldr	r1, [r7, #0]
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f98b 	bl	8007faa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c94:	e01d      	b.n	8007cd2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	7bfa      	ldrb	r2, [r7, #15]
 8007c9a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f001 ff4c 	bl	8009b40 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 fa28 	bl	80080fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d004      	beq.n	8007cbe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cbc:	e009      	b.n	8007cd2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc6:	e004      	b.n	8007cd2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cc8:	6839      	ldr	r1, [r7, #0]
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f96d 	bl	8007faa <USBD_CtlError>
  }
}
 8007cd0:	bf00      	nop
 8007cd2:	bf00      	nop
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	885b      	ldrh	r3, [r3, #2]
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	4b41      	ldr	r3, [pc, #260]	; (8007df4 <USBD_SetConfig+0x118>)
 8007cee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cf0:	4b40      	ldr	r3, [pc, #256]	; (8007df4 <USBD_SetConfig+0x118>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d904      	bls.n	8007d02 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f955 	bl	8007faa <USBD_CtlError>
 8007d00:	e075      	b.n	8007dee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d002      	beq.n	8007d12 <USBD_SetConfig+0x36>
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d023      	beq.n	8007d58 <USBD_SetConfig+0x7c>
 8007d10:	e062      	b.n	8007dd8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d12:	4b38      	ldr	r3, [pc, #224]	; (8007df4 <USBD_SetConfig+0x118>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d01a      	beq.n	8007d50 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d1a:	4b36      	ldr	r3, [pc, #216]	; (8007df4 <USBD_SetConfig+0x118>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2203      	movs	r2, #3
 8007d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d2c:	4b31      	ldr	r3, [pc, #196]	; (8007df4 <USBD_SetConfig+0x118>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff f9e8 	bl	8007108 <USBD_SetClassConfig>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d104      	bne.n	8007d48 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f932 	bl	8007faa <USBD_CtlError>
            return;
 8007d46:	e052      	b.n	8007dee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f9d8 	bl	80080fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d4e:	e04e      	b.n	8007dee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f9d4 	bl	80080fe <USBD_CtlSendStatus>
        break;
 8007d56:	e04a      	b.n	8007dee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007d58:	4b26      	ldr	r3, [pc, #152]	; (8007df4 <USBD_SetConfig+0x118>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d112      	bne.n	8007d86 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007d68:	4b22      	ldr	r3, [pc, #136]	; (8007df4 <USBD_SetConfig+0x118>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007d72:	4b20      	ldr	r3, [pc, #128]	; (8007df4 <USBD_SetConfig+0x118>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff f9e4 	bl	8007146 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f9bd 	bl	80080fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d84:	e033      	b.n	8007dee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007d86:	4b1b      	ldr	r3, [pc, #108]	; (8007df4 <USBD_SetConfig+0x118>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d01d      	beq.n	8007dd0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7ff f9d2 	bl	8007146 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007da2:	4b14      	ldr	r3, [pc, #80]	; (8007df4 <USBD_SetConfig+0x118>)
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	461a      	mov	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007dac:	4b11      	ldr	r3, [pc, #68]	; (8007df4 <USBD_SetConfig+0x118>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	4619      	mov	r1, r3
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7ff f9a8 	bl	8007108 <USBD_SetClassConfig>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d104      	bne.n	8007dc8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f8f2 	bl	8007faa <USBD_CtlError>
            return;
 8007dc6:	e012      	b.n	8007dee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f998 	bl	80080fe <USBD_CtlSendStatus>
        break;
 8007dce:	e00e      	b.n	8007dee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 f994 	bl	80080fe <USBD_CtlSendStatus>
        break;
 8007dd6:	e00a      	b.n	8007dee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f8e5 	bl	8007faa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007de0:	4b04      	ldr	r3, [pc, #16]	; (8007df4 <USBD_SetConfig+0x118>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff f9ad 	bl	8007146 <USBD_ClrClassConfig>
        break;
 8007dec:	bf00      	nop
    }
  }
}
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20000478 	.word	0x20000478

08007df8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	88db      	ldrh	r3, [r3, #6]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d004      	beq.n	8007e14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f8cc 	bl	8007faa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e12:	e022      	b.n	8007e5a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	dc02      	bgt.n	8007e24 <USBD_GetConfig+0x2c>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	dc03      	bgt.n	8007e2a <USBD_GetConfig+0x32>
 8007e22:	e015      	b.n	8007e50 <USBD_GetConfig+0x58>
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d00b      	beq.n	8007e40 <USBD_GetConfig+0x48>
 8007e28:	e012      	b.n	8007e50 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3308      	adds	r3, #8
 8007e34:	2201      	movs	r2, #1
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f920 	bl	800807e <USBD_CtlSendData>
        break;
 8007e3e:	e00c      	b.n	8007e5a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3304      	adds	r3, #4
 8007e44:	2201      	movs	r2, #1
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f918 	bl	800807e <USBD_CtlSendData>
        break;
 8007e4e:	e004      	b.n	8007e5a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f8a9 	bl	8007faa <USBD_CtlError>
        break;
 8007e58:	bf00      	nop
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b082      	sub	sp, #8
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e72:	3b01      	subs	r3, #1
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d81e      	bhi.n	8007eb6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	88db      	ldrh	r3, [r3, #6]
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d004      	beq.n	8007e8a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 f891 	bl	8007faa <USBD_CtlError>
        break;
 8007e88:	e01a      	b.n	8007ec0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	f043 0202 	orr.w	r2, r3, #2
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	330c      	adds	r3, #12
 8007eaa:	2202      	movs	r2, #2
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f8e5 	bl	800807e <USBD_CtlSendData>
      break;
 8007eb4:	e004      	b.n	8007ec0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f876 	bl	8007faa <USBD_CtlError>
      break;
 8007ebe:	bf00      	nop
  }
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	885b      	ldrh	r3, [r3, #2]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d106      	bne.n	8007ee8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f90b 	bl	80080fe <USBD_CtlSendStatus>
  }
}
 8007ee8:	bf00      	nop
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f00:	3b01      	subs	r3, #1
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d80b      	bhi.n	8007f1e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	885b      	ldrh	r3, [r3, #2]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d10c      	bne.n	8007f28 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f8f1 	bl	80080fe <USBD_CtlSendStatus>
      }
      break;
 8007f1c:	e004      	b.n	8007f28 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f842 	bl	8007faa <USBD_CtlError>
      break;
 8007f26:	e000      	b.n	8007f2a <USBD_ClrFeature+0x3a>
      break;
 8007f28:	bf00      	nop
  }
}
 8007f2a:	bf00      	nop
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	781a      	ldrb	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	785a      	ldrb	r2, [r3, #1]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	3302      	adds	r3, #2
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	3303      	adds	r3, #3
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	021b      	lsls	r3, r3, #8
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	4413      	add	r3, r2
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	3305      	adds	r3, #5
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	021b      	lsls	r3, r3, #8
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	4413      	add	r3, r2
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	3306      	adds	r3, #6
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	3307      	adds	r3, #7
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	4413      	add	r3, r2
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	80da      	strh	r2, [r3, #6]

}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bc80      	pop	{r7}
 8007fa8:	4770      	bx	lr

08007faa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007fb4:	2180      	movs	r1, #128	; 0x80
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 fd58 	bl	8009a6c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 fd54 	bl	8009a6c <USBD_LL_StallEP>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d032      	beq.n	8008048 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 f834 	bl	8008050 <USBD_GetLen>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	3301      	adds	r3, #1
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	005b      	lsls	r3, r3, #1
 8007ff0:	b29a      	uxth	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	75fa      	strb	r2, [r7, #23]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	4413      	add	r3, r2
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	7812      	ldrb	r2, [r2, #0]
 8008006:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	75fa      	strb	r2, [r7, #23]
 800800e:	461a      	mov	r2, r3
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4413      	add	r3, r2
 8008014:	2203      	movs	r2, #3
 8008016:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008018:	e012      	b.n	8008040 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	60fa      	str	r2, [r7, #12]
 8008020:	7dfa      	ldrb	r2, [r7, #23]
 8008022:	1c51      	adds	r1, r2, #1
 8008024:	75f9      	strb	r1, [r7, #23]
 8008026:	4611      	mov	r1, r2
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	440a      	add	r2, r1
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	75fa      	strb	r2, [r7, #23]
 8008036:	461a      	mov	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	4413      	add	r3, r2
 800803c:	2200      	movs	r2, #0
 800803e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e8      	bne.n	800801a <USBD_GetString+0x4e>
    }
  }
}
 8008048:	bf00      	nop
 800804a:	3718      	adds	r7, #24
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800805c:	e005      	b.n	800806a <USBD_GetLen+0x1a>
  {
    len++;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
 8008060:	3301      	adds	r3, #1
 8008062:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3301      	adds	r3, #1
 8008068:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1f5      	bne.n	800805e <USBD_GetLen+0xe>
  }

  return len;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr

0800807e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	4613      	mov	r3, r2
 800808a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2202      	movs	r2, #2
 8008090:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008094:	88fa      	ldrh	r2, [r7, #6]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800809a:	88fa      	ldrh	r2, [r7, #6]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080a0:	88fb      	ldrh	r3, [r7, #6]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	2100      	movs	r1, #0
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f001 fd69 	bl	8009b7e <USBD_LL_Transmit>

  return USBD_OK;
 80080ac:	2300      	movs	r3, #0
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	4613      	mov	r3, r2
 80080c2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	2100      	movs	r1, #0
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f001 fd57 	bl	8009b7e <USBD_LL_Transmit>

  return USBD_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	60b9      	str	r1, [r7, #8]
 80080e4:	4613      	mov	r3, r2
 80080e6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080e8:	88fb      	ldrh	r3, [r7, #6]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	2100      	movs	r1, #0
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f001 fd68 	bl	8009bc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b082      	sub	sp, #8
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2204      	movs	r2, #4
 800810a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800810e:	2300      	movs	r3, #0
 8008110:	2200      	movs	r2, #0
 8008112:	2100      	movs	r1, #0
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 fd32 	bl	8009b7e <USBD_LL_Transmit>

  return USBD_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2205      	movs	r2, #5
 8008130:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008134:	2300      	movs	r3, #0
 8008136:	2200      	movs	r2, #0
 8008138:	2100      	movs	r1, #0
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f001 fd42 	bl	8009bc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800814a:	b480      	push	{r7}
 800814c:	b085      	sub	sp, #20
 800814e:	af00      	add	r7, sp, #0
 8008150:	4603      	mov	r3, r0
 8008152:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800815c:	2b84      	cmp	r3, #132	; 0x84
 800815e:	d005      	beq.n	800816c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008160:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	4413      	add	r3, r2
 8008168:	3303      	adds	r3, #3
 800816a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800816c:	68fb      	ldr	r3, [r7, #12]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	bc80      	pop	{r7}
 8008176:	4770      	bx	lr

08008178 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800817c:	f000 fad0 	bl	8008720 <vTaskStartScheduler>
  
  return osOK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	bd80      	pop	{r7, pc}

08008186 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008186:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008188:	b089      	sub	sp, #36	; 0x24
 800818a:	af04      	add	r7, sp, #16
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	695b      	ldr	r3, [r3, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d020      	beq.n	80081da <osThreadCreate+0x54>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01c      	beq.n	80081da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685c      	ldr	r4, [r3, #4]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	691e      	ldr	r6, [r3, #16]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7ff ffc9 	bl	800814a <makeFreeRtosPriority>
 80081b8:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081c2:	9202      	str	r2, [sp, #8]
 80081c4:	9301      	str	r3, [sp, #4]
 80081c6:	9100      	str	r1, [sp, #0]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	4632      	mov	r2, r6
 80081cc:	4629      	mov	r1, r5
 80081ce:	4620      	mov	r0, r4
 80081d0:	f000 f8e8 	bl	80083a4 <xTaskCreateStatic>
 80081d4:	4603      	mov	r3, r0
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	e01c      	b.n	8008214 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685c      	ldr	r4, [r3, #4]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081e6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7ff ffab 	bl	800814a <makeFreeRtosPriority>
 80081f4:	4602      	mov	r2, r0
 80081f6:	f107 030c 	add.w	r3, r7, #12
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	9200      	str	r2, [sp, #0]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	4632      	mov	r2, r6
 8008202:	4629      	mov	r1, r5
 8008204:	4620      	mov	r0, r4
 8008206:	f000 f929 	bl	800845c <xTaskCreate>
 800820a:	4603      	mov	r3, r0
 800820c:	2b01      	cmp	r3, #1
 800820e:	d001      	beq.n	8008214 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008210:	2300      	movs	r3, #0
 8008212:	e000      	b.n	8008216 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008214:	68fb      	ldr	r3, [r7, #12]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800821e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <osDelay+0x16>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	e000      	b.n	8008236 <osDelay+0x18>
 8008234:	2301      	movs	r3, #1
 8008236:	4618      	mov	r0, r3
 8008238:	f000 fa3e 	bl	80086b8 <vTaskDelay>
  
  return osOK;
 800823c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008246:	b480      	push	{r7}
 8008248:	b083      	sub	sp, #12
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f103 0208 	add.w	r2, r3, #8
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800825e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f103 0208 	add.w	r2, r3, #8
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f103 0208 	add.w	r2, r3, #8
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800827a:	bf00      	nop
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	bc80      	pop	{r7}
 8008282:	4770      	bx	lr

08008284 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008292:	bf00      	nop
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	bc80      	pop	{r7}
 800829a:	4770      	bx	lr

0800829c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	689a      	ldr	r2, [r3, #8]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	1c5a      	adds	r2, r3, #1
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	601a      	str	r2, [r3, #0]
}
 80082d8:	bf00      	nop
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr

080082e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082e2:	b480      	push	{r7}
 80082e4:	b085      	sub	sp, #20
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f8:	d103      	bne.n	8008302 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e00c      	b.n	800831c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3308      	adds	r3, #8
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	e002      	b.n	8008310 <vListInsert+0x2e>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	429a      	cmp	r2, r3
 800831a:	d2f6      	bcs.n	800830a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	685a      	ldr	r2, [r3, #4]
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	68fa      	ldr	r2, [r7, #12]
 8008330:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	687a      	ldr	r2, [r7, #4]
 800833c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	601a      	str	r2, [r3, #0]
}
 8008348:	bf00      	nop
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	bc80      	pop	{r7}
 8008350:	4770      	bx	lr

08008352 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008352:	b480      	push	{r7}
 8008354:	b085      	sub	sp, #20
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	6892      	ldr	r2, [r2, #8]
 8008368:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	6852      	ldr	r2, [r2, #4]
 8008372:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	429a      	cmp	r2, r3
 800837c:	d103      	bne.n	8008386 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	689a      	ldr	r2, [r3, #8]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	1e5a      	subs	r2, r3, #1
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	bc80      	pop	{r7}
 80083a2:	4770      	bx	lr

080083a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08e      	sub	sp, #56	; 0x38
 80083a8:	af04      	add	r7, sp, #16
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10a      	bne.n	80083ce <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80083ca:	bf00      	nop
 80083cc:	e7fe      	b.n	80083cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10a      	bne.n	80083ea <xTaskCreateStatic+0x46>
	__asm volatile
 80083d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d8:	f383 8811 	msr	BASEPRI, r3
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	61fb      	str	r3, [r7, #28]
}
 80083e6:	bf00      	nop
 80083e8:	e7fe      	b.n	80083e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083ea:	2354      	movs	r3, #84	; 0x54
 80083ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	2b54      	cmp	r3, #84	; 0x54
 80083f2:	d00a      	beq.n	800840a <xTaskCreateStatic+0x66>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	61bb      	str	r3, [r7, #24]
}
 8008406:	bf00      	nop
 8008408:	e7fe      	b.n	8008408 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	2b00      	cmp	r3, #0
 800840e:	d01e      	beq.n	800844e <xTaskCreateStatic+0xaa>
 8008410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008412:	2b00      	cmp	r3, #0
 8008414:	d01b      	beq.n	800844e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800841e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	2202      	movs	r2, #2
 8008424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008428:	2300      	movs	r3, #0
 800842a:	9303      	str	r3, [sp, #12]
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	9302      	str	r3, [sp, #8]
 8008430:	f107 0314 	add.w	r3, r7, #20
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	68b9      	ldr	r1, [r7, #8]
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 f850 	bl	80084e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008448:	f000 f8cc 	bl	80085e4 <prvAddNewTaskToReadyList>
 800844c:	e001      	b.n	8008452 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008452:	697b      	ldr	r3, [r7, #20]
	}
 8008454:	4618      	mov	r0, r3
 8008456:	3728      	adds	r7, #40	; 0x28
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08c      	sub	sp, #48	; 0x30
 8008460:	af04      	add	r7, sp, #16
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	603b      	str	r3, [r7, #0]
 8008468:	4613      	mov	r3, r2
 800846a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800846c:	88fb      	ldrh	r3, [r7, #6]
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4618      	mov	r0, r3
 8008472:	f000 fe85 	bl	8009180 <pvPortMalloc>
 8008476:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00e      	beq.n	800849c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800847e:	2054      	movs	r0, #84	; 0x54
 8008480:	f000 fe7e 	bl	8009180 <pvPortMalloc>
 8008484:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	697a      	ldr	r2, [r7, #20]
 8008490:	631a      	str	r2, [r3, #48]	; 0x30
 8008492:	e005      	b.n	80084a0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008494:	6978      	ldr	r0, [r7, #20]
 8008496:	f000 ff37 	bl	8009308 <vPortFree>
 800849a:	e001      	b.n	80084a0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800849c:	2300      	movs	r3, #0
 800849e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d017      	beq.n	80084d6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084ae:	88fa      	ldrh	r2, [r7, #6]
 80084b0:	2300      	movs	r3, #0
 80084b2:	9303      	str	r3, [sp, #12]
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	9302      	str	r3, [sp, #8]
 80084b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	68b9      	ldr	r1, [r7, #8]
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 f80e 	bl	80084e6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084ca:	69f8      	ldr	r0, [r7, #28]
 80084cc:	f000 f88a 	bl	80085e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084d0:	2301      	movs	r3, #1
 80084d2:	61bb      	str	r3, [r7, #24]
 80084d4:	e002      	b.n	80084dc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084da:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084dc:	69bb      	ldr	r3, [r7, #24]
	}
 80084de:	4618      	mov	r0, r3
 80084e0:	3720      	adds	r7, #32
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b088      	sub	sp, #32
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	607a      	str	r2, [r7, #4]
 80084f2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80084f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084fe:	3b01      	subs	r3, #1
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	f023 0307 	bic.w	r3, r3, #7
 800850c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	f003 0307 	and.w	r3, r3, #7
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00a      	beq.n	800852e <prvInitialiseNewTask+0x48>
	__asm volatile
 8008518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	617b      	str	r3, [r7, #20]
}
 800852a:	bf00      	nop
 800852c:	e7fe      	b.n	800852c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800852e:	2300      	movs	r3, #0
 8008530:	61fb      	str	r3, [r7, #28]
 8008532:	e012      	b.n	800855a <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	4413      	add	r3, r2
 800853a:	7819      	ldrb	r1, [r3, #0]
 800853c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	3334      	adds	r3, #52	; 0x34
 8008544:	460a      	mov	r2, r1
 8008546:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	4413      	add	r3, r2
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d006      	beq.n	8008562 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	3301      	adds	r3, #1
 8008558:	61fb      	str	r3, [r7, #28]
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	2b0f      	cmp	r3, #15
 800855e:	d9e9      	bls.n	8008534 <prvInitialiseNewTask+0x4e>
 8008560:	e000      	b.n	8008564 <prvInitialiseNewTask+0x7e>
		{
			break;
 8008562:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856e:	2b06      	cmp	r3, #6
 8008570:	d901      	bls.n	8008576 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008572:	2306      	movs	r3, #6
 8008574:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800857a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008580:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	2200      	movs	r2, #0
 8008586:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	3304      	adds	r3, #4
 800858c:	4618      	mov	r0, r3
 800858e:	f7ff fe79 	bl	8008284 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	3318      	adds	r3, #24
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fe74 	bl	8008284 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800859c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	f1c3 0207 	rsb	r2, r3, #7
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	2200      	movs	r2, #0
 80085b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	68f9      	ldr	r1, [r7, #12]
 80085c4:	69b8      	ldr	r0, [r7, #24]
 80085c6:	f000 fc2b 	bl	8008e20 <pxPortInitialiseStack>
 80085ca:	4602      	mov	r2, r0
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085dc:	bf00      	nop
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085ec:	f000 fd06 	bl	8008ffc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085f0:	4b2a      	ldr	r3, [pc, #168]	; (800869c <prvAddNewTaskToReadyList+0xb8>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3301      	adds	r3, #1
 80085f6:	4a29      	ldr	r2, [pc, #164]	; (800869c <prvAddNewTaskToReadyList+0xb8>)
 80085f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085fa:	4b29      	ldr	r3, [pc, #164]	; (80086a0 <prvAddNewTaskToReadyList+0xbc>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d109      	bne.n	8008616 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008602:	4a27      	ldr	r2, [pc, #156]	; (80086a0 <prvAddNewTaskToReadyList+0xbc>)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008608:	4b24      	ldr	r3, [pc, #144]	; (800869c <prvAddNewTaskToReadyList+0xb8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d110      	bne.n	8008632 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008610:	f000 fac0 	bl	8008b94 <prvInitialiseTaskLists>
 8008614:	e00d      	b.n	8008632 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008616:	4b23      	ldr	r3, [pc, #140]	; (80086a4 <prvAddNewTaskToReadyList+0xc0>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d109      	bne.n	8008632 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800861e:	4b20      	ldr	r3, [pc, #128]	; (80086a0 <prvAddNewTaskToReadyList+0xbc>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	429a      	cmp	r2, r3
 800862a:	d802      	bhi.n	8008632 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800862c:	4a1c      	ldr	r2, [pc, #112]	; (80086a0 <prvAddNewTaskToReadyList+0xbc>)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008632:	4b1d      	ldr	r3, [pc, #116]	; (80086a8 <prvAddNewTaskToReadyList+0xc4>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3301      	adds	r3, #1
 8008638:	4a1b      	ldr	r2, [pc, #108]	; (80086a8 <prvAddNewTaskToReadyList+0xc4>)
 800863a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	2201      	movs	r2, #1
 8008642:	409a      	lsls	r2, r3
 8008644:	4b19      	ldr	r3, [pc, #100]	; (80086ac <prvAddNewTaskToReadyList+0xc8>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4313      	orrs	r3, r2
 800864a:	4a18      	ldr	r2, [pc, #96]	; (80086ac <prvAddNewTaskToReadyList+0xc8>)
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008652:	4613      	mov	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4a15      	ldr	r2, [pc, #84]	; (80086b0 <prvAddNewTaskToReadyList+0xcc>)
 800865c:	441a      	add	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3304      	adds	r3, #4
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f7ff fe19 	bl	800829c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800866a:	f000 fcf7 	bl	800905c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800866e:	4b0d      	ldr	r3, [pc, #52]	; (80086a4 <prvAddNewTaskToReadyList+0xc0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00e      	beq.n	8008694 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008676:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <prvAddNewTaskToReadyList+0xbc>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008680:	429a      	cmp	r2, r3
 8008682:	d207      	bcs.n	8008694 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008684:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <prvAddNewTaskToReadyList+0xd0>)
 8008686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868a:	601a      	str	r2, [r3, #0]
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	2000057c 	.word	0x2000057c
 80086a0:	2000047c 	.word	0x2000047c
 80086a4:	20000588 	.word	0x20000588
 80086a8:	20000598 	.word	0x20000598
 80086ac:	20000584 	.word	0x20000584
 80086b0:	20000480 	.word	0x20000480
 80086b4:	e000ed04 	.word	0xe000ed04

080086b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086c0:	2300      	movs	r3, #0
 80086c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d017      	beq.n	80086fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086ca:	4b13      	ldr	r3, [pc, #76]	; (8008718 <vTaskDelay+0x60>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00a      	beq.n	80086e8 <vTaskDelay+0x30>
	__asm volatile
 80086d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d6:	f383 8811 	msr	BASEPRI, r3
 80086da:	f3bf 8f6f 	isb	sy
 80086de:	f3bf 8f4f 	dsb	sy
 80086e2:	60bb      	str	r3, [r7, #8]
}
 80086e4:	bf00      	nop
 80086e6:	e7fe      	b.n	80086e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80086e8:	f000 f87a 	bl	80087e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086ec:	2100      	movs	r1, #0
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fb30 	bl	8008d54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086f4:	f000 f882 	bl	80087fc <xTaskResumeAll>
 80086f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d107      	bne.n	8008710 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008700:	4b06      	ldr	r3, [pc, #24]	; (800871c <vTaskDelay+0x64>)
 8008702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008710:	bf00      	nop
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	200005a4 	.word	0x200005a4
 800871c:	e000ed04 	.word	0xe000ed04

08008720 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b08a      	sub	sp, #40	; 0x28
 8008724:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008726:	2300      	movs	r3, #0
 8008728:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800872a:	2300      	movs	r3, #0
 800872c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800872e:	463a      	mov	r2, r7
 8008730:	1d39      	adds	r1, r7, #4
 8008732:	f107 0308 	add.w	r3, r7, #8
 8008736:	4618      	mov	r0, r3
 8008738:	f7f7 fd28 	bl	800018c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	9202      	str	r2, [sp, #8]
 8008744:	9301      	str	r3, [sp, #4]
 8008746:	2300      	movs	r3, #0
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	2300      	movs	r3, #0
 800874c:	460a      	mov	r2, r1
 800874e:	491e      	ldr	r1, [pc, #120]	; (80087c8 <vTaskStartScheduler+0xa8>)
 8008750:	481e      	ldr	r0, [pc, #120]	; (80087cc <vTaskStartScheduler+0xac>)
 8008752:	f7ff fe27 	bl	80083a4 <xTaskCreateStatic>
 8008756:	4603      	mov	r3, r0
 8008758:	4a1d      	ldr	r2, [pc, #116]	; (80087d0 <vTaskStartScheduler+0xb0>)
 800875a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800875c:	4b1c      	ldr	r3, [pc, #112]	; (80087d0 <vTaskStartScheduler+0xb0>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008764:	2301      	movs	r3, #1
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	e001      	b.n	800876e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800876a:	2300      	movs	r3, #0
 800876c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d116      	bne.n	80087a2 <vTaskStartScheduler+0x82>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	613b      	str	r3, [r7, #16]
}
 8008786:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008788:	4b12      	ldr	r3, [pc, #72]	; (80087d4 <vTaskStartScheduler+0xb4>)
 800878a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800878e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008790:	4b11      	ldr	r3, [pc, #68]	; (80087d8 <vTaskStartScheduler+0xb8>)
 8008792:	2201      	movs	r2, #1
 8008794:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008796:	4b11      	ldr	r3, [pc, #68]	; (80087dc <vTaskStartScheduler+0xbc>)
 8008798:	2200      	movs	r2, #0
 800879a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800879c:	f000 fbbc 	bl	8008f18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087a0:	e00e      	b.n	80087c0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087a8:	d10a      	bne.n	80087c0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ae:	f383 8811 	msr	BASEPRI, r3
 80087b2:	f3bf 8f6f 	isb	sy
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	60fb      	str	r3, [r7, #12]
}
 80087bc:	bf00      	nop
 80087be:	e7fe      	b.n	80087be <vTaskStartScheduler+0x9e>
}
 80087c0:	bf00      	nop
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	08009d3c 	.word	0x08009d3c
 80087cc:	08008b65 	.word	0x08008b65
 80087d0:	200005a0 	.word	0x200005a0
 80087d4:	2000059c 	.word	0x2000059c
 80087d8:	20000588 	.word	0x20000588
 80087dc:	20000580 	.word	0x20000580

080087e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80087e4:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <vTaskSuspendAll+0x18>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	4a03      	ldr	r2, [pc, #12]	; (80087f8 <vTaskSuspendAll+0x18>)
 80087ec:	6013      	str	r3, [r2, #0]
}
 80087ee:	bf00      	nop
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bc80      	pop	{r7}
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	200005a4 	.word	0x200005a4

080087fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008806:	2300      	movs	r3, #0
 8008808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800880a:	4b41      	ldr	r3, [pc, #260]	; (8008910 <xTaskResumeAll+0x114>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10a      	bne.n	8008828 <xTaskResumeAll+0x2c>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	603b      	str	r3, [r7, #0]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008828:	f000 fbe8 	bl	8008ffc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800882c:	4b38      	ldr	r3, [pc, #224]	; (8008910 <xTaskResumeAll+0x114>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3b01      	subs	r3, #1
 8008832:	4a37      	ldr	r2, [pc, #220]	; (8008910 <xTaskResumeAll+0x114>)
 8008834:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008836:	4b36      	ldr	r3, [pc, #216]	; (8008910 <xTaskResumeAll+0x114>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d161      	bne.n	8008902 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800883e:	4b35      	ldr	r3, [pc, #212]	; (8008914 <xTaskResumeAll+0x118>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d05d      	beq.n	8008902 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008846:	e02e      	b.n	80088a6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008848:	4b33      	ldr	r3, [pc, #204]	; (8008918 <xTaskResumeAll+0x11c>)
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3318      	adds	r3, #24
 8008854:	4618      	mov	r0, r3
 8008856:	f7ff fd7c 	bl	8008352 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3304      	adds	r3, #4
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff fd77 	bl	8008352 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008868:	2201      	movs	r2, #1
 800886a:	409a      	lsls	r2, r3
 800886c:	4b2b      	ldr	r3, [pc, #172]	; (800891c <xTaskResumeAll+0x120>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4313      	orrs	r3, r2
 8008872:	4a2a      	ldr	r2, [pc, #168]	; (800891c <xTaskResumeAll+0x120>)
 8008874:	6013      	str	r3, [r2, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4a27      	ldr	r2, [pc, #156]	; (8008920 <xTaskResumeAll+0x124>)
 8008884:	441a      	add	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3304      	adds	r3, #4
 800888a:	4619      	mov	r1, r3
 800888c:	4610      	mov	r0, r2
 800888e:	f7ff fd05 	bl	800829c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008896:	4b23      	ldr	r3, [pc, #140]	; (8008924 <xTaskResumeAll+0x128>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	429a      	cmp	r2, r3
 800889e:	d302      	bcc.n	80088a6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80088a0:	4b21      	ldr	r3, [pc, #132]	; (8008928 <xTaskResumeAll+0x12c>)
 80088a2:	2201      	movs	r2, #1
 80088a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088a6:	4b1c      	ldr	r3, [pc, #112]	; (8008918 <xTaskResumeAll+0x11c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1cc      	bne.n	8008848 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088b4:	f000 fa0c 	bl	8008cd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80088b8:	4b1c      	ldr	r3, [pc, #112]	; (800892c <xTaskResumeAll+0x130>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d010      	beq.n	80088e6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088c4:	f000 f836 	bl	8008934 <xTaskIncrementTick>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80088ce:	4b16      	ldr	r3, [pc, #88]	; (8008928 <xTaskResumeAll+0x12c>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1f1      	bne.n	80088c4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80088e0:	4b12      	ldr	r3, [pc, #72]	; (800892c <xTaskResumeAll+0x130>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088e6:	4b10      	ldr	r3, [pc, #64]	; (8008928 <xTaskResumeAll+0x12c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d009      	beq.n	8008902 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088ee:	2301      	movs	r3, #1
 80088f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088f2:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <xTaskResumeAll+0x134>)
 80088f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f8:	601a      	str	r2, [r3, #0]
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008902:	f000 fbab 	bl	800905c <vPortExitCritical>

	return xAlreadyYielded;
 8008906:	68bb      	ldr	r3, [r7, #8]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	200005a4 	.word	0x200005a4
 8008914:	2000057c 	.word	0x2000057c
 8008918:	2000053c 	.word	0x2000053c
 800891c:	20000584 	.word	0x20000584
 8008920:	20000480 	.word	0x20000480
 8008924:	2000047c 	.word	0x2000047c
 8008928:	20000590 	.word	0x20000590
 800892c:	2000058c 	.word	0x2000058c
 8008930:	e000ed04 	.word	0xe000ed04

08008934 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800893a:	2300      	movs	r3, #0
 800893c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800893e:	4b51      	ldr	r3, [pc, #324]	; (8008a84 <xTaskIncrementTick+0x150>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	f040 808d 	bne.w	8008a62 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008948:	4b4f      	ldr	r3, [pc, #316]	; (8008a88 <xTaskIncrementTick+0x154>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3301      	adds	r3, #1
 800894e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008950:	4a4d      	ldr	r2, [pc, #308]	; (8008a88 <xTaskIncrementTick+0x154>)
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d120      	bne.n	800899e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800895c:	4b4b      	ldr	r3, [pc, #300]	; (8008a8c <xTaskIncrementTick+0x158>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <xTaskIncrementTick+0x48>
	__asm volatile
 8008966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800896a:	f383 8811 	msr	BASEPRI, r3
 800896e:	f3bf 8f6f 	isb	sy
 8008972:	f3bf 8f4f 	dsb	sy
 8008976:	603b      	str	r3, [r7, #0]
}
 8008978:	bf00      	nop
 800897a:	e7fe      	b.n	800897a <xTaskIncrementTick+0x46>
 800897c:	4b43      	ldr	r3, [pc, #268]	; (8008a8c <xTaskIncrementTick+0x158>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	4b43      	ldr	r3, [pc, #268]	; (8008a90 <xTaskIncrementTick+0x15c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a41      	ldr	r2, [pc, #260]	; (8008a8c <xTaskIncrementTick+0x158>)
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	4a41      	ldr	r2, [pc, #260]	; (8008a90 <xTaskIncrementTick+0x15c>)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6013      	str	r3, [r2, #0]
 8008990:	4b40      	ldr	r3, [pc, #256]	; (8008a94 <xTaskIncrementTick+0x160>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3301      	adds	r3, #1
 8008996:	4a3f      	ldr	r2, [pc, #252]	; (8008a94 <xTaskIncrementTick+0x160>)
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	f000 f999 	bl	8008cd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800899e:	4b3e      	ldr	r3, [pc, #248]	; (8008a98 <xTaskIncrementTick+0x164>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d34d      	bcc.n	8008a44 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089a8:	4b38      	ldr	r3, [pc, #224]	; (8008a8c <xTaskIncrementTick+0x158>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <xTaskIncrementTick+0x82>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e000      	b.n	80089b8 <xTaskIncrementTick+0x84>
 80089b6:	2300      	movs	r3, #0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089bc:	4b36      	ldr	r3, [pc, #216]	; (8008a98 <xTaskIncrementTick+0x164>)
 80089be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089c2:	601a      	str	r2, [r3, #0]
					break;
 80089c4:	e03e      	b.n	8008a44 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80089c6:	4b31      	ldr	r3, [pc, #196]	; (8008a8c <xTaskIncrementTick+0x158>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d203      	bcs.n	80089e6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089de:	4a2e      	ldr	r2, [pc, #184]	; (8008a98 <xTaskIncrementTick+0x164>)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6013      	str	r3, [r2, #0]
						break;
 80089e4:	e02e      	b.n	8008a44 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	3304      	adds	r3, #4
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7ff fcb1 	bl	8008352 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d004      	beq.n	8008a02 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	3318      	adds	r3, #24
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff fca8 	bl	8008352 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	2201      	movs	r2, #1
 8008a08:	409a      	lsls	r2, r3
 8008a0a:	4b24      	ldr	r3, [pc, #144]	; (8008a9c <xTaskIncrementTick+0x168>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	4a22      	ldr	r2, [pc, #136]	; (8008a9c <xTaskIncrementTick+0x168>)
 8008a12:	6013      	str	r3, [r2, #0]
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a18:	4613      	mov	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4a1f      	ldr	r2, [pc, #124]	; (8008aa0 <xTaskIncrementTick+0x16c>)
 8008a22:	441a      	add	r2, r3
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	3304      	adds	r3, #4
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	f7ff fc36 	bl	800829c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a34:	4b1b      	ldr	r3, [pc, #108]	; (8008aa4 <xTaskIncrementTick+0x170>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d3b4      	bcc.n	80089a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a42:	e7b1      	b.n	80089a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a44:	4b17      	ldr	r3, [pc, #92]	; (8008aa4 <xTaskIncrementTick+0x170>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4a:	4915      	ldr	r1, [pc, #84]	; (8008aa0 <xTaskIncrementTick+0x16c>)
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	440b      	add	r3, r1
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d907      	bls.n	8008a6c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	e004      	b.n	8008a6c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008a62:	4b11      	ldr	r3, [pc, #68]	; (8008aa8 <xTaskIncrementTick+0x174>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3301      	adds	r3, #1
 8008a68:	4a0f      	ldr	r2, [pc, #60]	; (8008aa8 <xTaskIncrementTick+0x174>)
 8008a6a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008a6c:	4b0f      	ldr	r3, [pc, #60]	; (8008aac <xTaskIncrementTick+0x178>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008a74:	2301      	movs	r3, #1
 8008a76:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008a78:	697b      	ldr	r3, [r7, #20]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	200005a4 	.word	0x200005a4
 8008a88:	20000580 	.word	0x20000580
 8008a8c:	20000534 	.word	0x20000534
 8008a90:	20000538 	.word	0x20000538
 8008a94:	20000594 	.word	0x20000594
 8008a98:	2000059c 	.word	0x2000059c
 8008a9c:	20000584 	.word	0x20000584
 8008aa0:	20000480 	.word	0x20000480
 8008aa4:	2000047c 	.word	0x2000047c
 8008aa8:	2000058c 	.word	0x2000058c
 8008aac:	20000590 	.word	0x20000590

08008ab0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ab6:	4b26      	ldr	r3, [pc, #152]	; (8008b50 <vTaskSwitchContext+0xa0>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d003      	beq.n	8008ac6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008abe:	4b25      	ldr	r3, [pc, #148]	; (8008b54 <vTaskSwitchContext+0xa4>)
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ac4:	e03f      	b.n	8008b46 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008ac6:	4b23      	ldr	r3, [pc, #140]	; (8008b54 <vTaskSwitchContext+0xa4>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008acc:	4b22      	ldr	r3, [pc, #136]	; (8008b58 <vTaskSwitchContext+0xa8>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	fab3 f383 	clz	r3, r3
 8008ad8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	f1c3 031f 	rsb	r3, r3, #31
 8008ae0:	617b      	str	r3, [r7, #20]
 8008ae2:	491e      	ldr	r1, [pc, #120]	; (8008b5c <vTaskSwitchContext+0xac>)
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4413      	add	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	440b      	add	r3, r1
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	607b      	str	r3, [r7, #4]
}
 8008b08:	bf00      	nop
 8008b0a:	e7fe      	b.n	8008b0a <vTaskSwitchContext+0x5a>
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4a11      	ldr	r2, [pc, #68]	; (8008b5c <vTaskSwitchContext+0xac>)
 8008b18:	4413      	add	r3, r2
 8008b1a:	613b      	str	r3, [r7, #16]
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	605a      	str	r2, [r3, #4]
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	3308      	adds	r3, #8
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d104      	bne.n	8008b3c <vTaskSwitchContext+0x8c>
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	605a      	str	r2, [r3, #4]
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	4a07      	ldr	r2, [pc, #28]	; (8008b60 <vTaskSwitchContext+0xb0>)
 8008b44:	6013      	str	r3, [r2, #0]
}
 8008b46:	bf00      	nop
 8008b48:	371c      	adds	r7, #28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bc80      	pop	{r7}
 8008b4e:	4770      	bx	lr
 8008b50:	200005a4 	.word	0x200005a4
 8008b54:	20000590 	.word	0x20000590
 8008b58:	20000584 	.word	0x20000584
 8008b5c:	20000480 	.word	0x20000480
 8008b60:	2000047c 	.word	0x2000047c

08008b64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b6c:	f000 f852 	bl	8008c14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b70:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <prvIdleTask+0x28>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d9f9      	bls.n	8008b6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b78:	4b05      	ldr	r3, [pc, #20]	; (8008b90 <prvIdleTask+0x2c>)
 8008b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b88:	e7f0      	b.n	8008b6c <prvIdleTask+0x8>
 8008b8a:	bf00      	nop
 8008b8c:	20000480 	.word	0x20000480
 8008b90:	e000ed04 	.word	0xe000ed04

08008b94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	607b      	str	r3, [r7, #4]
 8008b9e:	e00c      	b.n	8008bba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4a12      	ldr	r2, [pc, #72]	; (8008bf4 <prvInitialiseTaskLists+0x60>)
 8008bac:	4413      	add	r3, r2
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff fb49 	bl	8008246 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	607b      	str	r3, [r7, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2b06      	cmp	r3, #6
 8008bbe:	d9ef      	bls.n	8008ba0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bc0:	480d      	ldr	r0, [pc, #52]	; (8008bf8 <prvInitialiseTaskLists+0x64>)
 8008bc2:	f7ff fb40 	bl	8008246 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008bc6:	480d      	ldr	r0, [pc, #52]	; (8008bfc <prvInitialiseTaskLists+0x68>)
 8008bc8:	f7ff fb3d 	bl	8008246 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008bcc:	480c      	ldr	r0, [pc, #48]	; (8008c00 <prvInitialiseTaskLists+0x6c>)
 8008bce:	f7ff fb3a 	bl	8008246 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008bd2:	480c      	ldr	r0, [pc, #48]	; (8008c04 <prvInitialiseTaskLists+0x70>)
 8008bd4:	f7ff fb37 	bl	8008246 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008bd8:	480b      	ldr	r0, [pc, #44]	; (8008c08 <prvInitialiseTaskLists+0x74>)
 8008bda:	f7ff fb34 	bl	8008246 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008bde:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <prvInitialiseTaskLists+0x78>)
 8008be0:	4a05      	ldr	r2, [pc, #20]	; (8008bf8 <prvInitialiseTaskLists+0x64>)
 8008be2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008be4:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <prvInitialiseTaskLists+0x7c>)
 8008be6:	4a05      	ldr	r2, [pc, #20]	; (8008bfc <prvInitialiseTaskLists+0x68>)
 8008be8:	601a      	str	r2, [r3, #0]
}
 8008bea:	bf00      	nop
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000480 	.word	0x20000480
 8008bf8:	2000050c 	.word	0x2000050c
 8008bfc:	20000520 	.word	0x20000520
 8008c00:	2000053c 	.word	0x2000053c
 8008c04:	20000550 	.word	0x20000550
 8008c08:	20000568 	.word	0x20000568
 8008c0c:	20000534 	.word	0x20000534
 8008c10:	20000538 	.word	0x20000538

08008c14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c1a:	e019      	b.n	8008c50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c1c:	f000 f9ee 	bl	8008ffc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008c20:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <prvCheckTasksWaitingTermination+0x50>)
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7ff fb90 	bl	8008352 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c32:	4b0d      	ldr	r3, [pc, #52]	; (8008c68 <prvCheckTasksWaitingTermination+0x54>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	4a0b      	ldr	r2, [pc, #44]	; (8008c68 <prvCheckTasksWaitingTermination+0x54>)
 8008c3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c3c:	4b0b      	ldr	r3, [pc, #44]	; (8008c6c <prvCheckTasksWaitingTermination+0x58>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	4a0a      	ldr	r2, [pc, #40]	; (8008c6c <prvCheckTasksWaitingTermination+0x58>)
 8008c44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c46:	f000 fa09 	bl	800905c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f810 	bl	8008c70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c50:	4b06      	ldr	r3, [pc, #24]	; (8008c6c <prvCheckTasksWaitingTermination+0x58>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d1e1      	bne.n	8008c1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c58:	bf00      	nop
 8008c5a:	bf00      	nop
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000550 	.word	0x20000550
 8008c68:	2000057c 	.word	0x2000057c
 8008c6c:	20000564 	.word	0x20000564

08008c70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d108      	bne.n	8008c94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c86:	4618      	mov	r0, r3
 8008c88:	f000 fb3e 	bl	8009308 <vPortFree>
				vPortFree( pxTCB );
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fb3b 	bl	8009308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c92:	e018      	b.n	8008cc6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d103      	bne.n	8008ca6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fb32 	bl	8009308 <vPortFree>
	}
 8008ca4:	e00f      	b.n	8008cc6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d00a      	beq.n	8008cc6 <prvDeleteTCB+0x56>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	60fb      	str	r3, [r7, #12]
}
 8008cc2:	bf00      	nop
 8008cc4:	e7fe      	b.n	8008cc4 <prvDeleteTCB+0x54>
	}
 8008cc6:	bf00      	nop
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cd6:	4b0e      	ldr	r3, [pc, #56]	; (8008d10 <prvResetNextTaskUnblockTime+0x40>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <prvResetNextTaskUnblockTime+0x14>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e000      	b.n	8008ce6 <prvResetNextTaskUnblockTime+0x16>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008cea:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <prvResetNextTaskUnblockTime+0x44>)
 8008cec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cf0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cf2:	e008      	b.n	8008d06 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008cf4:	4b06      	ldr	r3, [pc, #24]	; (8008d10 <prvResetNextTaskUnblockTime+0x40>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	4a04      	ldr	r2, [pc, #16]	; (8008d14 <prvResetNextTaskUnblockTime+0x44>)
 8008d04:	6013      	str	r3, [r2, #0]
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bc80      	pop	{r7}
 8008d0e:	4770      	bx	lr
 8008d10:	20000534 	.word	0x20000534
 8008d14:	2000059c 	.word	0x2000059c

08008d18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d1e:	4b0b      	ldr	r3, [pc, #44]	; (8008d4c <xTaskGetSchedulerState+0x34>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d102      	bne.n	8008d2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d26:	2301      	movs	r3, #1
 8008d28:	607b      	str	r3, [r7, #4]
 8008d2a:	e008      	b.n	8008d3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d2c:	4b08      	ldr	r3, [pc, #32]	; (8008d50 <xTaskGetSchedulerState+0x38>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d102      	bne.n	8008d3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d34:	2302      	movs	r3, #2
 8008d36:	607b      	str	r3, [r7, #4]
 8008d38:	e001      	b.n	8008d3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d3e:	687b      	ldr	r3, [r7, #4]
	}
 8008d40:	4618      	mov	r0, r3
 8008d42:	370c      	adds	r7, #12
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bc80      	pop	{r7}
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	20000588 	.word	0x20000588
 8008d50:	200005a4 	.word	0x200005a4

08008d54 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d5e:	4b29      	ldr	r3, [pc, #164]	; (8008e04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d64:	4b28      	ldr	r3, [pc, #160]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3304      	adds	r3, #4
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff faf1 	bl	8008352 <uxListRemove>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d10b      	bne.n	8008d8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008d76:	4b24      	ldr	r3, [pc, #144]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d82:	43da      	mvns	r2, r3
 8008d84:	4b21      	ldr	r3, [pc, #132]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4013      	ands	r3, r2
 8008d8a:	4a20      	ldr	r2, [pc, #128]	; (8008e0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d94:	d10a      	bne.n	8008dac <prvAddCurrentTaskToDelayedList+0x58>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d007      	beq.n	8008dac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d9c:	4b1a      	ldr	r3, [pc, #104]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3304      	adds	r3, #4
 8008da2:	4619      	mov	r1, r3
 8008da4:	481a      	ldr	r0, [pc, #104]	; (8008e10 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008da6:	f7ff fa79 	bl	800829c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008daa:	e026      	b.n	8008dfa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4413      	add	r3, r2
 8008db2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008db4:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d209      	bcs.n	8008dd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dc4:	4b13      	ldr	r3, [pc, #76]	; (8008e14 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	4b0f      	ldr	r3, [pc, #60]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f7ff fa86 	bl	80082e2 <vListInsert>
}
 8008dd6:	e010      	b.n	8008dfa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dd8:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	3304      	adds	r3, #4
 8008de2:	4619      	mov	r1, r3
 8008de4:	4610      	mov	r0, r2
 8008de6:	f7ff fa7c 	bl	80082e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dea:	4b0c      	ldr	r3, [pc, #48]	; (8008e1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d202      	bcs.n	8008dfa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008df4:	4a09      	ldr	r2, [pc, #36]	; (8008e1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	6013      	str	r3, [r2, #0]
}
 8008dfa:	bf00      	nop
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	20000580 	.word	0x20000580
 8008e08:	2000047c 	.word	0x2000047c
 8008e0c:	20000584 	.word	0x20000584
 8008e10:	20000568 	.word	0x20000568
 8008e14:	20000538 	.word	0x20000538
 8008e18:	20000534 	.word	0x20000534
 8008e1c:	2000059c 	.word	0x2000059c

08008e20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3b04      	subs	r3, #4
 8008e30:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3b04      	subs	r3, #4
 8008e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f023 0201 	bic.w	r2, r3, #1
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3b04      	subs	r3, #4
 8008e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e50:	4a08      	ldr	r2, [pc, #32]	; (8008e74 <pxPortInitialiseStack+0x54>)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	3b14      	subs	r3, #20
 8008e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3b20      	subs	r3, #32
 8008e66:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e68:	68fb      	ldr	r3, [r7, #12]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bc80      	pop	{r7}
 8008e72:	4770      	bx	lr
 8008e74:	08008e79 	.word	0x08008e79

08008e78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e82:	4b12      	ldr	r3, [pc, #72]	; (8008ecc <prvTaskExitError+0x54>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e8a:	d00a      	beq.n	8008ea2 <prvTaskExitError+0x2a>
	__asm volatile
 8008e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	60fb      	str	r3, [r7, #12]
}
 8008e9e:	bf00      	nop
 8008ea0:	e7fe      	b.n	8008ea0 <prvTaskExitError+0x28>
	__asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	60bb      	str	r3, [r7, #8]
}
 8008eb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008eb6:	bf00      	nop
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0fc      	beq.n	8008eb8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ebe:	bf00      	nop
 8008ec0:	bf00      	nop
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bc80      	pop	{r7}
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	20000114 	.word	0x20000114

08008ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <pxCurrentTCBConst2>)
 8008ed2:	6819      	ldr	r1, [r3, #0]
 8008ed4:	6808      	ldr	r0, [r1, #0]
 8008ed6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008eda:	f380 8809 	msr	PSP, r0
 8008ede:	f3bf 8f6f 	isb	sy
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8811 	msr	BASEPRI, r0
 8008eea:	f04e 0e0d 	orr.w	lr, lr, #13
 8008eee:	4770      	bx	lr

08008ef0 <pxCurrentTCBConst2>:
 8008ef0:	2000047c 	.word	0x2000047c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop

08008ef8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008ef8:	4806      	ldr	r0, [pc, #24]	; (8008f14 <prvPortStartFirstTask+0x1c>)
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	6800      	ldr	r0, [r0, #0]
 8008efe:	f380 8808 	msr	MSP, r0
 8008f02:	b662      	cpsie	i
 8008f04:	b661      	cpsie	f
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	df00      	svc	0
 8008f10:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f12:	bf00      	nop
 8008f14:	e000ed08 	.word	0xe000ed08

08008f18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f1e:	4b32      	ldr	r3, [pc, #200]	; (8008fe8 <xPortStartScheduler+0xd0>)
 8008f20:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	22ff      	movs	r2, #255	; 0xff
 8008f2e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	4b2a      	ldr	r3, [pc, #168]	; (8008fec <xPortStartScheduler+0xd4>)
 8008f44:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f46:	4b2a      	ldr	r3, [pc, #168]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f48:	2207      	movs	r2, #7
 8008f4a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f4c:	e009      	b.n	8008f62 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f4e:	4b28      	ldr	r3, [pc, #160]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4a26      	ldr	r2, [pc, #152]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f56:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f58:	78fb      	ldrb	r3, [r7, #3]
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f6a:	2b80      	cmp	r3, #128	; 0x80
 8008f6c:	d0ef      	beq.n	8008f4e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f6e:	4b20      	ldr	r3, [pc, #128]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f1c3 0307 	rsb	r3, r3, #7
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d00a      	beq.n	8008f90 <xPortStartScheduler+0x78>
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	60bb      	str	r3, [r7, #8]
}
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f90:	4b17      	ldr	r3, [pc, #92]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	021b      	lsls	r3, r3, #8
 8008f96:	4a16      	ldr	r2, [pc, #88]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f98:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f9a:	4b15      	ldr	r3, [pc, #84]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fa2:	4a13      	ldr	r2, [pc, #76]	; (8008ff0 <xPortStartScheduler+0xd8>)
 8008fa4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fae:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <xPortStartScheduler+0xdc>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a10      	ldr	r2, [pc, #64]	; (8008ff4 <xPortStartScheduler+0xdc>)
 8008fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fba:	4b0e      	ldr	r3, [pc, #56]	; (8008ff4 <xPortStartScheduler+0xdc>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a0d      	ldr	r2, [pc, #52]	; (8008ff4 <xPortStartScheduler+0xdc>)
 8008fc0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fc4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fc6:	f000 f8b9 	bl	800913c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fca:	4b0b      	ldr	r3, [pc, #44]	; (8008ff8 <xPortStartScheduler+0xe0>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fd0:	f7ff ff92 	bl	8008ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fd4:	f7ff fd6c 	bl	8008ab0 <vTaskSwitchContext>
	prvTaskExitError();
 8008fd8:	f7ff ff4e 	bl	8008e78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	e000e400 	.word	0xe000e400
 8008fec:	200005a8 	.word	0x200005a8
 8008ff0:	200005ac 	.word	0x200005ac
 8008ff4:	e000ed20 	.word	0xe000ed20
 8008ff8:	20000114 	.word	0x20000114

08008ffc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	607b      	str	r3, [r7, #4]
}
 8009014:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009016:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <vPortEnterCritical+0x58>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3301      	adds	r3, #1
 800901c:	4a0d      	ldr	r2, [pc, #52]	; (8009054 <vPortEnterCritical+0x58>)
 800901e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009020:	4b0c      	ldr	r3, [pc, #48]	; (8009054 <vPortEnterCritical+0x58>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d10f      	bne.n	8009048 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009028:	4b0b      	ldr	r3, [pc, #44]	; (8009058 <vPortEnterCritical+0x5c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00a      	beq.n	8009048 <vPortEnterCritical+0x4c>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	603b      	str	r3, [r7, #0]
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <vPortEnterCritical+0x4a>
	}
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	bc80      	pop	{r7}
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	20000114 	.word	0x20000114
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009062:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <vPortExitCritical+0x4c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10a      	bne.n	8009080 <vPortExitCritical+0x24>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	607b      	str	r3, [r7, #4]
}
 800907c:	bf00      	nop
 800907e:	e7fe      	b.n	800907e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009080:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <vPortExitCritical+0x4c>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3b01      	subs	r3, #1
 8009086:	4a08      	ldr	r2, [pc, #32]	; (80090a8 <vPortExitCritical+0x4c>)
 8009088:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800908a:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <vPortExitCritical+0x4c>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d105      	bne.n	800909e <vPortExitCritical+0x42>
 8009092:	2300      	movs	r3, #0
 8009094:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800909c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800909e:	bf00      	nop
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bc80      	pop	{r7}
 80090a6:	4770      	bx	lr
 80090a8:	20000114 	.word	0x20000114
 80090ac:	00000000 	.word	0x00000000

080090b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090b0:	f3ef 8009 	mrs	r0, PSP
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	4b0d      	ldr	r3, [pc, #52]	; (80090f0 <pxCurrentTCBConst>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090c0:	6010      	str	r0, [r2, #0]
 80090c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80090c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090ca:	f380 8811 	msr	BASEPRI, r0
 80090ce:	f7ff fcef 	bl	8008ab0 <vTaskSwitchContext>
 80090d2:	f04f 0000 	mov.w	r0, #0
 80090d6:	f380 8811 	msr	BASEPRI, r0
 80090da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090de:	6819      	ldr	r1, [r3, #0]
 80090e0:	6808      	ldr	r0, [r1, #0]
 80090e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090e6:	f380 8809 	msr	PSP, r0
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	4770      	bx	lr

080090f0 <pxCurrentTCBConst>:
 80090f0:	2000047c 	.word	0x2000047c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80090f4:	bf00      	nop
 80090f6:	bf00      	nop

080090f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
	__asm volatile
 80090fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009102:	f383 8811 	msr	BASEPRI, r3
 8009106:	f3bf 8f6f 	isb	sy
 800910a:	f3bf 8f4f 	dsb	sy
 800910e:	607b      	str	r3, [r7, #4]
}
 8009110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009112:	f7ff fc0f 	bl	8008934 <xTaskIncrementTick>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d003      	beq.n	8009124 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800911c:	4b06      	ldr	r3, [pc, #24]	; (8009138 <xPortSysTickHandler+0x40>)
 800911e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	2300      	movs	r3, #0
 8009126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f383 8811 	msr	BASEPRI, r3
}
 800912e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	e000ed04 	.word	0xe000ed04

0800913c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009140:	4b0a      	ldr	r3, [pc, #40]	; (800916c <vPortSetupTimerInterrupt+0x30>)
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009146:	4b0a      	ldr	r3, [pc, #40]	; (8009170 <vPortSetupTimerInterrupt+0x34>)
 8009148:	2200      	movs	r2, #0
 800914a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800914c:	4b09      	ldr	r3, [pc, #36]	; (8009174 <vPortSetupTimerInterrupt+0x38>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a09      	ldr	r2, [pc, #36]	; (8009178 <vPortSetupTimerInterrupt+0x3c>)
 8009152:	fba2 2303 	umull	r2, r3, r2, r3
 8009156:	099b      	lsrs	r3, r3, #6
 8009158:	4a08      	ldr	r2, [pc, #32]	; (800917c <vPortSetupTimerInterrupt+0x40>)
 800915a:	3b01      	subs	r3, #1
 800915c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800915e:	4b03      	ldr	r3, [pc, #12]	; (800916c <vPortSetupTimerInterrupt+0x30>)
 8009160:	2207      	movs	r2, #7
 8009162:	601a      	str	r2, [r3, #0]
}
 8009164:	bf00      	nop
 8009166:	46bd      	mov	sp, r7
 8009168:	bc80      	pop	{r7}
 800916a:	4770      	bx	lr
 800916c:	e000e010 	.word	0xe000e010
 8009170:	e000e018 	.word	0xe000e018
 8009174:	20000000 	.word	0x20000000
 8009178:	10624dd3 	.word	0x10624dd3
 800917c:	e000e014 	.word	0xe000e014

08009180 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08a      	sub	sp, #40	; 0x28
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009188:	2300      	movs	r3, #0
 800918a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800918c:	f7ff fb28 	bl	80087e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009190:	4b58      	ldr	r3, [pc, #352]	; (80092f4 <pvPortMalloc+0x174>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d101      	bne.n	800919c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009198:	f000 f910 	bl	80093bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800919c:	4b56      	ldr	r3, [pc, #344]	; (80092f8 <pvPortMalloc+0x178>)
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4013      	ands	r3, r2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f040 808e 	bne.w	80092c6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01d      	beq.n	80091ec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80091b0:	2208      	movs	r2, #8
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4413      	add	r3, r2
 80091b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f003 0307 	and.w	r3, r3, #7
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d014      	beq.n	80091ec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f023 0307 	bic.w	r3, r3, #7
 80091c8:	3308      	adds	r3, #8
 80091ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f003 0307 	and.w	r3, r3, #7
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00a      	beq.n	80091ec <pvPortMalloc+0x6c>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	617b      	str	r3, [r7, #20]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d069      	beq.n	80092c6 <pvPortMalloc+0x146>
 80091f2:	4b42      	ldr	r3, [pc, #264]	; (80092fc <pvPortMalloc+0x17c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d864      	bhi.n	80092c6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091fc:	4b40      	ldr	r3, [pc, #256]	; (8009300 <pvPortMalloc+0x180>)
 80091fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009200:	4b3f      	ldr	r3, [pc, #252]	; (8009300 <pvPortMalloc+0x180>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009206:	e004      	b.n	8009212 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	429a      	cmp	r2, r3
 800921a:	d903      	bls.n	8009224 <pvPortMalloc+0xa4>
 800921c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d1f1      	bne.n	8009208 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009224:	4b33      	ldr	r3, [pc, #204]	; (80092f4 <pvPortMalloc+0x174>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800922a:	429a      	cmp	r2, r3
 800922c:	d04b      	beq.n	80092c6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2208      	movs	r2, #8
 8009234:	4413      	add	r3, r2
 8009236:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	1ad2      	subs	r2, r2, r3
 8009248:	2308      	movs	r3, #8
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	429a      	cmp	r2, r3
 800924e:	d91f      	bls.n	8009290 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4413      	add	r3, r2
 8009256:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	f003 0307 	and.w	r3, r3, #7
 800925e:	2b00      	cmp	r3, #0
 8009260:	d00a      	beq.n	8009278 <pvPortMalloc+0xf8>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	613b      	str	r3, [r7, #16]
}
 8009274:	bf00      	nop
 8009276:	e7fe      	b.n	8009276 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	1ad2      	subs	r2, r2, r3
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800928a:	69b8      	ldr	r0, [r7, #24]
 800928c:	f000 f8f8 	bl	8009480 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009290:	4b1a      	ldr	r3, [pc, #104]	; (80092fc <pvPortMalloc+0x17c>)
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	4a18      	ldr	r2, [pc, #96]	; (80092fc <pvPortMalloc+0x17c>)
 800929c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800929e:	4b17      	ldr	r3, [pc, #92]	; (80092fc <pvPortMalloc+0x17c>)
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	4b18      	ldr	r3, [pc, #96]	; (8009304 <pvPortMalloc+0x184>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d203      	bcs.n	80092b2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092aa:	4b14      	ldr	r3, [pc, #80]	; (80092fc <pvPortMalloc+0x17c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a15      	ldr	r2, [pc, #84]	; (8009304 <pvPortMalloc+0x184>)
 80092b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	4b10      	ldr	r3, [pc, #64]	; (80092f8 <pvPortMalloc+0x178>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	431a      	orrs	r2, r3
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092c6:	f7ff fa99 	bl	80087fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	f003 0307 	and.w	r3, r3, #7
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00a      	beq.n	80092ea <pvPortMalloc+0x16a>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	60fb      	str	r3, [r7, #12]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <pvPortMalloc+0x168>
	return pvReturn;
 80092ea:	69fb      	ldr	r3, [r7, #28]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3728      	adds	r7, #40	; 0x28
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	200011b8 	.word	0x200011b8
 80092f8:	200011c4 	.word	0x200011c4
 80092fc:	200011bc 	.word	0x200011bc
 8009300:	200011b0 	.word	0x200011b0
 8009304:	200011c0 	.word	0x200011c0

08009308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d048      	beq.n	80093ac <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800931a:	2308      	movs	r3, #8
 800931c:	425b      	negs	r3, r3
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	4413      	add	r3, r2
 8009322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	4b21      	ldr	r3, [pc, #132]	; (80093b4 <vPortFree+0xac>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4013      	ands	r3, r2
 8009332:	2b00      	cmp	r3, #0
 8009334:	d10a      	bne.n	800934c <vPortFree+0x44>
	__asm volatile
 8009336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933a:	f383 8811 	msr	BASEPRI, r3
 800933e:	f3bf 8f6f 	isb	sy
 8009342:	f3bf 8f4f 	dsb	sy
 8009346:	60fb      	str	r3, [r7, #12]
}
 8009348:	bf00      	nop
 800934a:	e7fe      	b.n	800934a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00a      	beq.n	800936a <vPortFree+0x62>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	60bb      	str	r3, [r7, #8]
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	4b11      	ldr	r3, [pc, #68]	; (80093b4 <vPortFree+0xac>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4013      	ands	r3, r2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d019      	beq.n	80093ac <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d115      	bne.n	80093ac <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	4b0b      	ldr	r3, [pc, #44]	; (80093b4 <vPortFree+0xac>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	43db      	mvns	r3, r3
 800938a:	401a      	ands	r2, r3
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009390:	f7ff fa26 	bl	80087e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	4b07      	ldr	r3, [pc, #28]	; (80093b8 <vPortFree+0xb0>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4413      	add	r3, r2
 800939e:	4a06      	ldr	r2, [pc, #24]	; (80093b8 <vPortFree+0xb0>)
 80093a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093a2:	6938      	ldr	r0, [r7, #16]
 80093a4:	f000 f86c 	bl	8009480 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80093a8:	f7ff fa28 	bl	80087fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093ac:	bf00      	nop
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	200011c4 	.word	0x200011c4
 80093b8:	200011bc 	.word	0x200011bc

080093bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80093c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093c8:	4b27      	ldr	r3, [pc, #156]	; (8009468 <prvHeapInit+0xac>)
 80093ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f003 0307 	and.w	r3, r3, #7
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00c      	beq.n	80093f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3307      	adds	r3, #7
 80093da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f023 0307 	bic.w	r3, r3, #7
 80093e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	4a1f      	ldr	r2, [pc, #124]	; (8009468 <prvHeapInit+0xac>)
 80093ec:	4413      	add	r3, r2
 80093ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093f4:	4a1d      	ldr	r2, [pc, #116]	; (800946c <prvHeapInit+0xb0>)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093fa:	4b1c      	ldr	r3, [pc, #112]	; (800946c <prvHeapInit+0xb0>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	4413      	add	r3, r2
 8009406:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009408:	2208      	movs	r2, #8
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f023 0307 	bic.w	r3, r3, #7
 8009416:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4a15      	ldr	r2, [pc, #84]	; (8009470 <prvHeapInit+0xb4>)
 800941c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800941e:	4b14      	ldr	r3, [pc, #80]	; (8009470 <prvHeapInit+0xb4>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2200      	movs	r2, #0
 8009424:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009426:	4b12      	ldr	r3, [pc, #72]	; (8009470 <prvHeapInit+0xb4>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2200      	movs	r2, #0
 800942c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	1ad2      	subs	r2, r2, r3
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800943c:	4b0c      	ldr	r3, [pc, #48]	; (8009470 <prvHeapInit+0xb4>)
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	4a0a      	ldr	r2, [pc, #40]	; (8009474 <prvHeapInit+0xb8>)
 800944a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	4a09      	ldr	r2, [pc, #36]	; (8009478 <prvHeapInit+0xbc>)
 8009452:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009454:	4b09      	ldr	r3, [pc, #36]	; (800947c <prvHeapInit+0xc0>)
 8009456:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800945a:	601a      	str	r2, [r3, #0]
}
 800945c:	bf00      	nop
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	bc80      	pop	{r7}
 8009464:	4770      	bx	lr
 8009466:	bf00      	nop
 8009468:	200005b0 	.word	0x200005b0
 800946c:	200011b0 	.word	0x200011b0
 8009470:	200011b8 	.word	0x200011b8
 8009474:	200011c0 	.word	0x200011c0
 8009478:	200011bc 	.word	0x200011bc
 800947c:	200011c4 	.word	0x200011c4

08009480 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009488:	4b27      	ldr	r3, [pc, #156]	; (8009528 <prvInsertBlockIntoFreeList+0xa8>)
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	e002      	b.n	8009494 <prvInsertBlockIntoFreeList+0x14>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	429a      	cmp	r2, r3
 800949c:	d8f7      	bhi.n	800948e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	68ba      	ldr	r2, [r7, #8]
 80094a8:	4413      	add	r3, r2
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d108      	bne.n	80094c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	685b      	ldr	r3, [r3, #4]
 80094b8:	441a      	add	r2, r3
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	68ba      	ldr	r2, [r7, #8]
 80094cc:	441a      	add	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d118      	bne.n	8009508 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	4b14      	ldr	r3, [pc, #80]	; (800952c <prvInsertBlockIntoFreeList+0xac>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d00d      	beq.n	80094fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	441a      	add	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	e008      	b.n	8009510 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094fe:	4b0b      	ldr	r3, [pc, #44]	; (800952c <prvInsertBlockIntoFreeList+0xac>)
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	e003      	b.n	8009510 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	429a      	cmp	r2, r3
 8009516:	d002      	beq.n	800951e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800951e:	bf00      	nop
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	bc80      	pop	{r7}
 8009526:	4770      	bx	lr
 8009528:	200011b0 	.word	0x200011b0
 800952c:	200011b8 	.word	0x200011b8

08009530 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009534:	2200      	movs	r2, #0
 8009536:	490e      	ldr	r1, [pc, #56]	; (8009570 <MX_USB_DEVICE_Init+0x40>)
 8009538:	480e      	ldr	r0, [pc, #56]	; (8009574 <MX_USB_DEVICE_Init+0x44>)
 800953a:	f7fd fd8b 	bl	8007054 <USBD_Init>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009544:	f7f7 f832 	bl	80005ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009548:	490b      	ldr	r1, [pc, #44]	; (8009578 <MX_USB_DEVICE_Init+0x48>)
 800954a:	480a      	ldr	r0, [pc, #40]	; (8009574 <MX_USB_DEVICE_Init+0x44>)
 800954c:	f7fd fdad 	bl	80070aa <USBD_RegisterClass>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009556:	f7f7 f829 	bl	80005ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800955a:	4806      	ldr	r0, [pc, #24]	; (8009574 <MX_USB_DEVICE_Init+0x44>)
 800955c:	f7fd fdbe 	bl	80070dc <USBD_Start>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009566:	f7f7 f821 	bl	80005ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800956a:	bf00      	nop
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20000118 	.word	0x20000118
 8009574:	200011c8 	.word	0x200011c8
 8009578:	2000000c 	.word	0x2000000c

0800957c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	6039      	str	r1, [r7, #0]
 8009586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2212      	movs	r2, #18
 800958c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800958e:	4b03      	ldr	r3, [pc, #12]	; (800959c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009590:	4618      	mov	r0, r3
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	bc80      	pop	{r7}
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	20000134 	.word	0x20000134

080095a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	4603      	mov	r3, r0
 80095a8:	6039      	str	r1, [r7, #0]
 80095aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2204      	movs	r2, #4
 80095b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095b2:	4b03      	ldr	r3, [pc, #12]	; (80095c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bc80      	pop	{r7}
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	20000148 	.word	0x20000148

080095c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	6039      	str	r1, [r7, #0]
 80095ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d105      	bne.n	80095e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	4907      	ldr	r1, [pc, #28]	; (80095f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80095da:	4808      	ldr	r0, [pc, #32]	; (80095fc <USBD_FS_ProductStrDescriptor+0x38>)
 80095dc:	f7fe fcf6 	bl	8007fcc <USBD_GetString>
 80095e0:	e004      	b.n	80095ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	4904      	ldr	r1, [pc, #16]	; (80095f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80095e6:	4805      	ldr	r0, [pc, #20]	; (80095fc <USBD_FS_ProductStrDescriptor+0x38>)
 80095e8:	f7fe fcf0 	bl	8007fcc <USBD_GetString>
  }
  return USBD_StrDesc;
 80095ec:	4b02      	ldr	r3, [pc, #8]	; (80095f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	2000148c 	.word	0x2000148c
 80095fc:	08009d44 	.word	0x08009d44

08009600 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	6039      	str	r1, [r7, #0]
 800960a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	4904      	ldr	r1, [pc, #16]	; (8009620 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009610:	4804      	ldr	r0, [pc, #16]	; (8009624 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009612:	f7fe fcdb 	bl	8007fcc <USBD_GetString>
  return USBD_StrDesc;
 8009616:	4b02      	ldr	r3, [pc, #8]	; (8009620 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009618:	4618      	mov	r0, r3
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	2000148c 	.word	0x2000148c
 8009624:	08009d54 	.word	0x08009d54

08009628 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	4603      	mov	r3, r0
 8009630:	6039      	str	r1, [r7, #0]
 8009632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	221a      	movs	r2, #26
 8009638:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800963a:	f000 f843 	bl	80096c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800963e:	4b02      	ldr	r3, [pc, #8]	; (8009648 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009640:	4618      	mov	r0, r3
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	2000014c 	.word	0x2000014c

0800964c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	4603      	mov	r3, r0
 8009654:	6039      	str	r1, [r7, #0]
 8009656:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009658:	79fb      	ldrb	r3, [r7, #7]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d105      	bne.n	800966a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	4907      	ldr	r1, [pc, #28]	; (8009680 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009662:	4808      	ldr	r0, [pc, #32]	; (8009684 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009664:	f7fe fcb2 	bl	8007fcc <USBD_GetString>
 8009668:	e004      	b.n	8009674 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800966a:	683a      	ldr	r2, [r7, #0]
 800966c:	4904      	ldr	r1, [pc, #16]	; (8009680 <USBD_FS_ConfigStrDescriptor+0x34>)
 800966e:	4805      	ldr	r0, [pc, #20]	; (8009684 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009670:	f7fe fcac 	bl	8007fcc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009674:	4b02      	ldr	r3, [pc, #8]	; (8009680 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009676:	4618      	mov	r0, r3
 8009678:	3708      	adds	r7, #8
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	2000148c 	.word	0x2000148c
 8009684:	08009d68 	.word	0x08009d68

08009688 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	4603      	mov	r3, r0
 8009690:	6039      	str	r1, [r7, #0]
 8009692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d105      	bne.n	80096a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	4907      	ldr	r1, [pc, #28]	; (80096bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800969e:	4808      	ldr	r0, [pc, #32]	; (80096c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096a0:	f7fe fc94 	bl	8007fcc <USBD_GetString>
 80096a4:	e004      	b.n	80096b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	4904      	ldr	r1, [pc, #16]	; (80096bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096aa:	4805      	ldr	r0, [pc, #20]	; (80096c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096ac:	f7fe fc8e 	bl	8007fcc <USBD_GetString>
  }
  return USBD_StrDesc;
 80096b0:	4b02      	ldr	r3, [pc, #8]	; (80096bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	2000148c 	.word	0x2000148c
 80096c0:	08009d74 	.word	0x08009d74

080096c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096ca:	4b0f      	ldr	r3, [pc, #60]	; (8009708 <Get_SerialNum+0x44>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096d0:	4b0e      	ldr	r3, [pc, #56]	; (800970c <Get_SerialNum+0x48>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096d6:	4b0e      	ldr	r3, [pc, #56]	; (8009710 <Get_SerialNum+0x4c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4413      	add	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d009      	beq.n	80096fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096ea:	2208      	movs	r2, #8
 80096ec:	4909      	ldr	r1, [pc, #36]	; (8009714 <Get_SerialNum+0x50>)
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f000 f814 	bl	800971c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096f4:	2204      	movs	r2, #4
 80096f6:	4908      	ldr	r1, [pc, #32]	; (8009718 <Get_SerialNum+0x54>)
 80096f8:	68b8      	ldr	r0, [r7, #8]
 80096fa:	f000 f80f 	bl	800971c <IntToUnicode>
  }
}
 80096fe:	bf00      	nop
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	1ffff7e8 	.word	0x1ffff7e8
 800970c:	1ffff7ec 	.word	0x1ffff7ec
 8009710:	1ffff7f0 	.word	0x1ffff7f0
 8009714:	2000014e 	.word	0x2000014e
 8009718:	2000015e 	.word	0x2000015e

0800971c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	4613      	mov	r3, r2
 8009728:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800972a:	2300      	movs	r3, #0
 800972c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800972e:	2300      	movs	r3, #0
 8009730:	75fb      	strb	r3, [r7, #23]
 8009732:	e027      	b.n	8009784 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	0f1b      	lsrs	r3, r3, #28
 8009738:	2b09      	cmp	r3, #9
 800973a:	d80b      	bhi.n	8009754 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	0f1b      	lsrs	r3, r3, #28
 8009740:	b2da      	uxtb	r2, r3
 8009742:	7dfb      	ldrb	r3, [r7, #23]
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	4619      	mov	r1, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	440b      	add	r3, r1
 800974c:	3230      	adds	r2, #48	; 0x30
 800974e:	b2d2      	uxtb	r2, r2
 8009750:	701a      	strb	r2, [r3, #0]
 8009752:	e00a      	b.n	800976a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	0f1b      	lsrs	r3, r3, #28
 8009758:	b2da      	uxtb	r2, r3
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	4619      	mov	r1, r3
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	440b      	add	r3, r1
 8009764:	3237      	adds	r2, #55	; 0x37
 8009766:	b2d2      	uxtb	r2, r2
 8009768:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009770:	7dfb      	ldrb	r3, [r7, #23]
 8009772:	005b      	lsls	r3, r3, #1
 8009774:	3301      	adds	r3, #1
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	4413      	add	r3, r2
 800977a:	2200      	movs	r2, #0
 800977c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800977e:	7dfb      	ldrb	r3, [r7, #23]
 8009780:	3301      	adds	r3, #1
 8009782:	75fb      	strb	r3, [r7, #23]
 8009784:	7dfa      	ldrb	r2, [r7, #23]
 8009786:	79fb      	ldrb	r3, [r7, #7]
 8009788:	429a      	cmp	r2, r3
 800978a:	d3d3      	bcc.n	8009734 <IntToUnicode+0x18>
  }
}
 800978c:	bf00      	nop
 800978e:	bf00      	nop
 8009790:	371c      	adds	r7, #28
 8009792:	46bd      	mov	sp, r7
 8009794:	bc80      	pop	{r7}
 8009796:	4770      	bx	lr

08009798 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a0d      	ldr	r2, [pc, #52]	; (80097dc <HAL_PCD_MspInit+0x44>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d113      	bne.n	80097d2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80097aa:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <HAL_PCD_MspInit+0x48>)
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	4a0c      	ldr	r2, [pc, #48]	; (80097e0 <HAL_PCD_MspInit+0x48>)
 80097b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80097b4:	61d3      	str	r3, [r2, #28]
 80097b6:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <HAL_PCD_MspInit+0x48>)
 80097b8:	69db      	ldr	r3, [r3, #28]
 80097ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097be:	60fb      	str	r3, [r7, #12]
 80097c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80097c2:	2200      	movs	r2, #0
 80097c4:	2105      	movs	r1, #5
 80097c6:	2014      	movs	r0, #20
 80097c8:	f7f7 f969 	bl	8000a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80097cc:	2014      	movs	r0, #20
 80097ce:	f7f7 f982 	bl	8000ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	40005c00 	.word	0x40005c00
 80097e0:	40021000 	.word	0x40021000

080097e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80097f8:	4619      	mov	r1, r3
 80097fa:	4610      	mov	r0, r2
 80097fc:	f7fd fcb6 	bl	800716c <USBD_LL_SetupStage>
}
 8009800:	bf00      	nop
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800981a:	78fa      	ldrb	r2, [r7, #3]
 800981c:	6879      	ldr	r1, [r7, #4]
 800981e:	4613      	mov	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	00db      	lsls	r3, r3, #3
 8009826:	440b      	add	r3, r1
 8009828:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	78fb      	ldrb	r3, [r7, #3]
 8009830:	4619      	mov	r1, r3
 8009832:	f7fd fce8 	bl	8007206 <USBD_LL_DataOutStage>
}
 8009836:	bf00      	nop
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	460b      	mov	r3, r1
 8009848:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009850:	78fa      	ldrb	r2, [r7, #3]
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	4613      	mov	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	00db      	lsls	r3, r3, #3
 800985c:	440b      	add	r3, r1
 800985e:	333c      	adds	r3, #60	; 0x3c
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	78fb      	ldrb	r3, [r7, #3]
 8009864:	4619      	mov	r1, r3
 8009866:	f7fd fd3f 	bl	80072e8 <USBD_LL_DataInStage>
}
 800986a:	bf00      	nop
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8009880:	4618      	mov	r0, r3
 8009882:	f7fd fe4f 	bl	8007524 <USBD_LL_SOF>
}
 8009886:	bf00      	nop
 8009888:	3708      	adds	r7, #8
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009896:	2301      	movs	r3, #1
 8009898:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d001      	beq.n	80098a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80098a2:	f7f6 fe83 	bl	80005ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80098ac:	7bfa      	ldrb	r2, [r7, #15]
 80098ae:	4611      	mov	r1, r2
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fd fdff 	bl	80074b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fd fdb8 	bl	8007432 <USBD_LL_Reset>
}
 80098c2:	bf00      	nop
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
	...

080098cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fd fdf9 	bl	80074d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d005      	beq.n	80098f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098e8:	4b04      	ldr	r3, [pc, #16]	; (80098fc <HAL_PCD_SuspendCallback+0x30>)
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	4a03      	ldr	r2, [pc, #12]	; (80098fc <HAL_PCD_SuspendCallback+0x30>)
 80098ee:	f043 0306 	orr.w	r3, r3, #6
 80098f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80098f4:	bf00      	nop
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	e000ed00 	.word	0xe000ed00

08009900 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800990e:	4618      	mov	r0, r3
 8009910:	f7fd fdf3 	bl	80074fa <USBD_LL_Resume>
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009924:	4a1f      	ldr	r2, [pc, #124]	; (80099a4 <USBD_LL_Init+0x88>)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a1d      	ldr	r2, [pc, #116]	; (80099a4 <USBD_LL_Init+0x88>)
 8009930:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009934:	4b1b      	ldr	r3, [pc, #108]	; (80099a4 <USBD_LL_Init+0x88>)
 8009936:	4a1c      	ldr	r2, [pc, #112]	; (80099a8 <USBD_LL_Init+0x8c>)
 8009938:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800993a:	4b1a      	ldr	r3, [pc, #104]	; (80099a4 <USBD_LL_Init+0x88>)
 800993c:	2208      	movs	r2, #8
 800993e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009940:	4b18      	ldr	r3, [pc, #96]	; (80099a4 <USBD_LL_Init+0x88>)
 8009942:	2202      	movs	r2, #2
 8009944:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009946:	4b17      	ldr	r3, [pc, #92]	; (80099a4 <USBD_LL_Init+0x88>)
 8009948:	2200      	movs	r2, #0
 800994a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800994c:	4b15      	ldr	r3, [pc, #84]	; (80099a4 <USBD_LL_Init+0x88>)
 800994e:	2200      	movs	r2, #0
 8009950:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009952:	4b14      	ldr	r3, [pc, #80]	; (80099a4 <USBD_LL_Init+0x88>)
 8009954:	2200      	movs	r2, #0
 8009956:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009958:	4812      	ldr	r0, [pc, #72]	; (80099a4 <USBD_LL_Init+0x88>)
 800995a:	f7f7 fb25 	bl	8000fa8 <HAL_PCD_Init>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009964:	f7f6 fe22 	bl	80005ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800996e:	2318      	movs	r3, #24
 8009970:	2200      	movs	r2, #0
 8009972:	2100      	movs	r1, #0
 8009974:	f7f9 f82d 	bl	80029d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800997e:	2358      	movs	r3, #88	; 0x58
 8009980:	2200      	movs	r2, #0
 8009982:	2180      	movs	r1, #128	; 0x80
 8009984:	f7f9 f825 	bl	80029d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800998e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009992:	2200      	movs	r2, #0
 8009994:	2181      	movs	r1, #129	; 0x81
 8009996:	f7f9 f81c 	bl	80029d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	2000168c 	.word	0x2000168c
 80099a8:	40005c00 	.word	0x40005c00

080099ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7f7 fbef 	bl	80011a6 <HAL_PCD_Start>
 80099c8:	4603      	mov	r3, r0
 80099ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 f93c 	bl	8009c4c <USBD_Get_USB_Status>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b084      	sub	sp, #16
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	4608      	mov	r0, r1
 80099ec:	4611      	mov	r1, r2
 80099ee:	461a      	mov	r2, r3
 80099f0:	4603      	mov	r3, r0
 80099f2:	70fb      	strb	r3, [r7, #3]
 80099f4:	460b      	mov	r3, r1
 80099f6:	70bb      	strb	r3, [r7, #2]
 80099f8:	4613      	mov	r3, r2
 80099fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a00:	2300      	movs	r3, #0
 8009a02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a0a:	78bb      	ldrb	r3, [r7, #2]
 8009a0c:	883a      	ldrh	r2, [r7, #0]
 8009a0e:	78f9      	ldrb	r1, [r7, #3]
 8009a10:	f7f7 fd44 	bl	800149c <HAL_PCD_EP_Open>
 8009a14:	4603      	mov	r3, r0
 8009a16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f000 f916 	bl	8009c4c <USBD_Get_USB_Status>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a24:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b084      	sub	sp, #16
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a48:	78fa      	ldrb	r2, [r7, #3]
 8009a4a:	4611      	mov	r1, r2
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7f7 fd82 	bl	8001556 <HAL_PCD_EP_Close>
 8009a52:	4603      	mov	r3, r0
 8009a54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 f8f7 	bl	8009c4c <USBD_Get_USB_Status>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a86:	78fa      	ldrb	r2, [r7, #3]
 8009a88:	4611      	mov	r1, r2
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7f7 fe13 	bl	80016b6 <HAL_PCD_EP_SetStall>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 f8d8 	bl	8009c4c <USBD_Get_USB_Status>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b084      	sub	sp, #16
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ac4:	78fa      	ldrb	r2, [r7, #3]
 8009ac6:	4611      	mov	r1, r2
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7f7 fe54 	bl	8001776 <HAL_PCD_EP_ClrStall>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 f8b9 	bl	8009c4c <USBD_Get_USB_Status>
 8009ada:	4603      	mov	r3, r0
 8009adc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009afa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	da0c      	bge.n	8009b1e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b0a:	68f9      	ldr	r1, [r7, #12]
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	4613      	mov	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4413      	add	r3, r2
 8009b14:	00db      	lsls	r3, r3, #3
 8009b16:	440b      	add	r3, r1
 8009b18:	3302      	adds	r3, #2
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	e00b      	b.n	8009b36 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b1e:	78fb      	ldrb	r3, [r7, #3]
 8009b20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b24:	68f9      	ldr	r1, [r7, #12]
 8009b26:	4613      	mov	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	00db      	lsls	r3, r3, #3
 8009b2e:	440b      	add	r3, r1
 8009b30:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009b34:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bc80      	pop	{r7}
 8009b3e:	4770      	bx	lr

08009b40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b5a:	78fa      	ldrb	r2, [r7, #3]
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7f7 fc77 	bl	8001452 <HAL_PCD_SetAddress>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 f86e 	bl	8009c4c <USBD_Get_USB_Status>
 8009b70:	4603      	mov	r3, r0
 8009b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b086      	sub	sp, #24
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	60f8      	str	r0, [r7, #12]
 8009b86:	607a      	str	r2, [r7, #4]
 8009b88:	461a      	mov	r2, r3
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	72fb      	strb	r3, [r7, #11]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009ba0:	893b      	ldrh	r3, [r7, #8]
 8009ba2:	7af9      	ldrb	r1, [r7, #11]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	f7f7 fd4f 	bl	8001648 <HAL_PCD_EP_Transmit>
 8009baa:	4603      	mov	r3, r0
 8009bac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 f84b 	bl	8009c4c <USBD_Get_USB_Status>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bba:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	607a      	str	r2, [r7, #4]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	72fb      	strb	r3, [r7, #11]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009be6:	893b      	ldrh	r3, [r7, #8]
 8009be8:	7af9      	ldrb	r1, [r7, #11]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	f7f7 fcfb 	bl	80015e6 <HAL_PCD_EP_Receive>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf4:	7dfb      	ldrb	r3, [r7, #23]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 f828 	bl	8009c4c <USBD_Get_USB_Status>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c00:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
	...

08009c0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c14:	4b02      	ldr	r3, [pc, #8]	; (8009c20 <USBD_static_malloc+0x14>)
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bc80      	pop	{r7}
 8009c1e:	4770      	bx	lr
 8009c20:	2000197c 	.word	0x2000197c

08009c24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]

}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bc80      	pop	{r7}
 8009c34:	4770      	bx	lr

08009c36 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c36:	b480      	push	{r7}
 8009c38:	b083      	sub	sp, #12
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	460b      	mov	r3, r1
 8009c40:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009c42:	bf00      	nop
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bc80      	pop	{r7}
 8009c4a:	4770      	bx	lr

08009c4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	4603      	mov	r3, r0
 8009c54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c56:	2300      	movs	r3, #0
 8009c58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c5a:	79fb      	ldrb	r3, [r7, #7]
 8009c5c:	2b03      	cmp	r3, #3
 8009c5e:	d817      	bhi.n	8009c90 <USBD_Get_USB_Status+0x44>
 8009c60:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <USBD_Get_USB_Status+0x1c>)
 8009c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c66:	bf00      	nop
 8009c68:	08009c79 	.word	0x08009c79
 8009c6c:	08009c7f 	.word	0x08009c7f
 8009c70:	08009c85 	.word	0x08009c85
 8009c74:	08009c8b 	.word	0x08009c8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c7c:	e00b      	b.n	8009c96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c7e:	2302      	movs	r3, #2
 8009c80:	73fb      	strb	r3, [r7, #15]
    break;
 8009c82:	e008      	b.n	8009c96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c84:	2301      	movs	r3, #1
 8009c86:	73fb      	strb	r3, [r7, #15]
    break;
 8009c88:	e005      	b.n	8009c96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c8e:	e002      	b.n	8009c96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c90:	2302      	movs	r3, #2
 8009c92:	73fb      	strb	r3, [r7, #15]
    break;
 8009c94:	bf00      	nop
  }
  return usb_status;
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bc80      	pop	{r7}
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop

08009ca4 <memset>:
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	4402      	add	r2, r0
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d100      	bne.n	8009cae <memset+0xa>
 8009cac:	4770      	bx	lr
 8009cae:	f803 1b01 	strb.w	r1, [r3], #1
 8009cb2:	e7f9      	b.n	8009ca8 <memset+0x4>

08009cb4 <__libc_init_array>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	2600      	movs	r6, #0
 8009cb8:	4d0c      	ldr	r5, [pc, #48]	; (8009cec <__libc_init_array+0x38>)
 8009cba:	4c0d      	ldr	r4, [pc, #52]	; (8009cf0 <__libc_init_array+0x3c>)
 8009cbc:	1b64      	subs	r4, r4, r5
 8009cbe:	10a4      	asrs	r4, r4, #2
 8009cc0:	42a6      	cmp	r6, r4
 8009cc2:	d109      	bne.n	8009cd8 <__libc_init_array+0x24>
 8009cc4:	f000 f81a 	bl	8009cfc <_init>
 8009cc8:	2600      	movs	r6, #0
 8009cca:	4d0a      	ldr	r5, [pc, #40]	; (8009cf4 <__libc_init_array+0x40>)
 8009ccc:	4c0a      	ldr	r4, [pc, #40]	; (8009cf8 <__libc_init_array+0x44>)
 8009cce:	1b64      	subs	r4, r4, r5
 8009cd0:	10a4      	asrs	r4, r4, #2
 8009cd2:	42a6      	cmp	r6, r4
 8009cd4:	d105      	bne.n	8009ce2 <__libc_init_array+0x2e>
 8009cd6:	bd70      	pop	{r4, r5, r6, pc}
 8009cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cdc:	4798      	blx	r3
 8009cde:	3601      	adds	r6, #1
 8009ce0:	e7ee      	b.n	8009cc0 <__libc_init_array+0xc>
 8009ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce6:	4798      	blx	r3
 8009ce8:	3601      	adds	r6, #1
 8009cea:	e7f2      	b.n	8009cd2 <__libc_init_array+0x1e>
 8009cec:	08009db0 	.word	0x08009db0
 8009cf0:	08009db0 	.word	0x08009db0
 8009cf4:	08009db0 	.word	0x08009db0
 8009cf8:	08009db4 	.word	0x08009db4

08009cfc <_init>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	bf00      	nop
 8009d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d02:	bc08      	pop	{r3}
 8009d04:	469e      	mov	lr, r3
 8009d06:	4770      	bx	lr

08009d08 <_fini>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	bf00      	nop
 8009d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0e:	bc08      	pop	{r3}
 8009d10:	469e      	mov	lr, r3
 8009d12:	4770      	bx	lr
