
WakeOnRemote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b54  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08009c64  08009c64  00019c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d00  08009d00  0002015c  2**0
                  CONTENTS
  4 .ARM          00000000  08009d00  08009d00  0002015c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d00  08009d00  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d00  08009d00  00019d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d04  08009d04  00019d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08009d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001828  2000015c  08009e64  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001984  08009e64  00021984  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020185  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ab6  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f6  00000000  00000000  00038c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116a  00000000  00000000  0003e428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bb50  00000000  00000000  0003f592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019da7  00000000  00000000  0005b0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000972f8  00000000  00000000  00074e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005dc4  00000000  00000000  0010c184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00111f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000015c 	.word	0x2000015c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009c4c 	.word	0x08009c4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000160 	.word	0x20000160
 800014c:	08009c4c 	.word	0x08009c4c

08000150 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;
/* USER CODE END Variables */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a07      	ldr	r2, [pc, #28]	; (800017c <HAL_UART_RxCpltCallback+0x2c>)
 800015e:	4293      	cmp	r3, r2
 8000160:	d102      	bne.n	8000168 <HAL_UART_RxCpltCallback+0x18>
		received_msg_flag = 1;
 8000162:	4b07      	ldr	r3, [pc, #28]	; (8000180 <HAL_UART_RxCpltCallback+0x30>)
 8000164:	2201      	movs	r2, #1
 8000166:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) UART1_rxBuffer, 3);
 8000168:	2203      	movs	r2, #3
 800016a:	4906      	ldr	r1, [pc, #24]	; (8000184 <HAL_UART_RxCpltCallback+0x34>)
 800016c:	4806      	ldr	r0, [pc, #24]	; (8000188 <HAL_UART_RxCpltCallback+0x38>)
 800016e:	f003 fc8b 	bl	8003a88 <HAL_UART_Receive_IT>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40013800 	.word	0x40013800
 8000180:	20000460 	.word	0x20000460
 8000184:	20000464 	.word	0x20000464
 8000188:	20000414 	.word	0x20000414

0800018c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <vApplicationGetIdleTaskMemory+0x28>)
 800019c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	4a05      	ldr	r2, [pc, #20]	; (80001b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80001a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2280      	movs	r2, #128	; 0x80
 80001a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001aa:	bf00      	nop
 80001ac:	3714      	adds	r7, #20
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000178 	.word	0x20000178
 80001b8:	200001cc 	.word	0x200001cc

080001bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001bc:	b5b0      	push	{r4, r5, r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c2:	f000 faf3 	bl	80007ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c6:	f000 f81f 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ca:	f000 f8f9 	bl	80003c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001ce:	f000 f875 	bl	80002bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001d2:	f000 f8cb 	bl	800036c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartMainTask, osPriorityNormal, 0, 512);
 80001d6:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <main+0x44>)
 80001d8:	1d3c      	adds	r4, r7, #4
 80001da:	461d      	mov	r5, r3
 80001dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f007 ff72 	bl	80080d6 <osThreadCreate>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a03      	ldr	r2, [pc, #12]	; (8000204 <main+0x48>)
 80001f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001f8:	f007 ff66 	bl	80080c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <main+0x40>
 80001fe:	bf00      	nop
 8000200:	08009c70 	.word	0x08009c70
 8000204:	2000045c 	.word	0x2000045c

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b094      	sub	sp, #80	; 0x50
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f009 fcec 	bl	8009bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000258:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fba2 	bl	80029a8 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026a:	f000 f95f 	bl	800052c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fe0e 	bl	8002eac <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000296:	f000 f949 	bl	800052c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800029a:	2310      	movs	r3, #16
 800029c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 ff8f 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002b0:	f000 f93c 	bl	800052c <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3750      	adds	r7, #80	; 0x50
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08a      	sub	sp, #40	; 0x28
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c2:	f107 0320 	add.w	r3, r7, #32
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]
 80002da:	615a      	str	r2, [r3, #20]
 80002dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002de:	4b22      	ldr	r3, [pc, #136]	; (8000368 <MX_TIM2_Init+0xac>)
 80002e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002e6:	4b20      	ldr	r3, [pc, #128]	; (8000368 <MX_TIM2_Init+0xac>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ec:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <MX_TIM2_Init+0xac>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002f2:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <MX_TIM2_Init+0xac>)
 80002f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002fa:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_TIM2_Init+0xac>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000300:	4b19      	ldr	r3, [pc, #100]	; (8000368 <MX_TIM2_Init+0xac>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000306:	4818      	ldr	r0, [pc, #96]	; (8000368 <MX_TIM2_Init+0xac>)
 8000308:	f003 f814 	bl	8003334 <HAL_TIM_PWM_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000312:	f000 f90b 	bl	800052c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000316:	2300      	movs	r3, #0
 8000318:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800031e:	f107 0320 	add.w	r3, r7, #32
 8000322:	4619      	mov	r1, r3
 8000324:	4810      	ldr	r0, [pc, #64]	; (8000368 <MX_TIM2_Init+0xac>)
 8000326:	f003 fb01 	bl	800392c <HAL_TIMEx_MasterConfigSynchronization>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000330:	f000 f8fc 	bl	800052c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000334:	2360      	movs	r3, #96	; 0x60
 8000336:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	4619      	mov	r1, r3
 800034a:	4807      	ldr	r0, [pc, #28]	; (8000368 <MX_TIM2_Init+0xac>)
 800034c:	f003 f842 	bl	80033d4 <HAL_TIM_PWM_ConfigChannel>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000356:	f000 f8e9 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800035a:	4803      	ldr	r0, [pc, #12]	; (8000368 <MX_TIM2_Init+0xac>)
 800035c:	f000 f940 	bl	80005e0 <HAL_TIM_MspPostInit>

}
 8000360:	bf00      	nop
 8000362:	3728      	adds	r7, #40	; 0x28
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	200003cc 	.word	0x200003cc

0800036c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <MX_USART1_UART_Init+0x50>)
 8000374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800037c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 80003a4:	f003 fb20 	bl	80039e8 <HAL_UART_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ae:	f000 f8bd 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000414 	.word	0x20000414
 80003bc:	40013800 	.word	0x40013800

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <MX_GPIO_Init+0x40>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <MX_GPIO_Init+0x40>)
 80003cc:	f043 0320 	orr.w	r3, r3, #32
 80003d0:	6193      	str	r3, [r2, #24]
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <MX_GPIO_Init+0x40>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	f003 0320 	and.w	r3, r3, #32
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <MX_GPIO_Init+0x40>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a07      	ldr	r2, [pc, #28]	; (8000400 <MX_GPIO_Init+0x40>)
 80003e4:	f043 0304 	orr.w	r3, r3, #4
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <MX_GPIO_Init+0x40>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0304 	and.w	r3, r3, #4
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	40021000 	.word	0x40021000

08000404 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800040c:	f009 f838 	bl	8009480 <MX_USB_DEVICE_Init>
	  uint8_t KEYCODE4;
	  uint8_t KEYCODE5;
	  uint8_t KEYCODE6;
  } keyboardHID;

  keyboardHID keyboardhid = {0,0,0,0,0,0,0,0};
 8000410:	f107 0308 	add.w	r3, r7, #8
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	605a      	str	r2, [r3, #4]

  HAL_UART_Receive_IT(&huart1, (uint8_t*) UART1_rxBuffer, 3);
 800041a:	2203      	movs	r2, #3
 800041c:	493f      	ldr	r1, [pc, #252]	; (800051c <StartMainTask+0x118>)
 800041e:	4840      	ldr	r0, [pc, #256]	; (8000520 <StartMainTask+0x11c>)
 8000420:	f003 fb32 	bl	8003a88 <HAL_UART_Receive_IT>

  /* Infinite loop */
  for(;;)
  {
	  // If a new message has arrived
	  if((received_msg_flag == 1) && (UART1_rxBuffer[0] == 0xA1) && (UART1_rxBuffer[3] == 0xB1)){
 8000424:	4b3f      	ldr	r3, [pc, #252]	; (8000524 <StartMainTask+0x120>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d173      	bne.n	8000514 <StartMainTask+0x110>
 800042c:	4b3b      	ldr	r3, [pc, #236]	; (800051c <StartMainTask+0x118>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2ba1      	cmp	r3, #161	; 0xa1
 8000432:	d16f      	bne.n	8000514 <StartMainTask+0x110>
 8000434:	4b39      	ldr	r3, [pc, #228]	; (800051c <StartMainTask+0x118>)
 8000436:	78db      	ldrb	r3, [r3, #3]
 8000438:	2bb1      	cmp	r3, #177	; 0xb1
 800043a:	d16b      	bne.n	8000514 <StartMainTask+0x110>
		  // Check if the user wants to go into Ubuntu
		  if(UART1_rxBuffer[1] == 0x01){
 800043c:	4b37      	ldr	r3, [pc, #220]	; (800051c <StartMainTask+0x118>)
 800043e:	785b      	ldrb	r3, [r3, #1]
 8000440:	2b01      	cmp	r3, #1
 8000442:	d118      	bne.n	8000476 <StartMainTask+0x72>
			  // Just sends Enter because Ubuntu is in the first boot position
			  keyboardhid.KEYCODE1 = 0x58;		// Send "Enter"
 8000444:	2358      	movs	r3, #88	; 0x58
 8000446:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000448:	f107 0308 	add.w	r3, r7, #8
 800044c:	2208      	movs	r2, #8
 800044e:	4619      	mov	r1, r3
 8000450:	4835      	ldr	r0, [pc, #212]	; (8000528 <StartMainTask+0x124>)
 8000452:	f006 fd33 	bl	8006ebc <USBD_HID_SendReport>
			  osDelay(50);
 8000456:	2032      	movs	r0, #50	; 0x32
 8000458:	f007 fe89 	bl	800816e <osDelay>
			  keyboardhid.KEYCODE1 = 0x00;		// Release key
 800045c:	2300      	movs	r3, #0
 800045e:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000460:	f107 0308 	add.w	r3, r7, #8
 8000464:	2208      	movs	r2, #8
 8000466:	4619      	mov	r1, r3
 8000468:	482f      	ldr	r0, [pc, #188]	; (8000528 <StartMainTask+0x124>)
 800046a:	f006 fd27 	bl	8006ebc <USBD_HID_SendReport>
			  osDelay(50);
 800046e:	2032      	movs	r0, #50	; 0x32
 8000470:	f007 fe7d 	bl	800816e <osDelay>
 8000474:	e04b      	b.n	800050e <StartMainTask+0x10a>

			  // Sends the Ubuntu user password
		  }
		  // Check if the user wants to go into Windows
		  else if(UART1_rxBuffer[1] == 0x02){
 8000476:	4b29      	ldr	r3, [pc, #164]	; (800051c <StartMainTask+0x118>)
 8000478:	785b      	ldrb	r3, [r3, #1]
 800047a:	2b02      	cmp	r3, #2
 800047c:	d147      	bne.n	800050e <StartMainTask+0x10a>
			  // Sends two times Down Arrow and Enter because Windows is in the third boot position
			  keyboardhid.KEYCODE1 = 0x51;		// Send "Down arrow"
 800047e:	2351      	movs	r3, #81	; 0x51
 8000480:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000482:	f107 0308 	add.w	r3, r7, #8
 8000486:	2208      	movs	r2, #8
 8000488:	4619      	mov	r1, r3
 800048a:	4827      	ldr	r0, [pc, #156]	; (8000528 <StartMainTask+0x124>)
 800048c:	f006 fd16 	bl	8006ebc <USBD_HID_SendReport>
			  osDelay(50);
 8000490:	2032      	movs	r0, #50	; 0x32
 8000492:	f007 fe6c 	bl	800816e <osDelay>
			  keyboardhid.KEYCODE1 = 0x00;		// Release key
 8000496:	2300      	movs	r3, #0
 8000498:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800049a:	f107 0308 	add.w	r3, r7, #8
 800049e:	2208      	movs	r2, #8
 80004a0:	4619      	mov	r1, r3
 80004a2:	4821      	ldr	r0, [pc, #132]	; (8000528 <StartMainTask+0x124>)
 80004a4:	f006 fd0a 	bl	8006ebc <USBD_HID_SendReport>
			  osDelay(50);
 80004a8:	2032      	movs	r0, #50	; 0x32
 80004aa:	f007 fe60 	bl	800816e <osDelay>
			  keyboardhid.KEYCODE1 = 0x51;		// Send "Down arrow"
 80004ae:	2351      	movs	r3, #81	; 0x51
 80004b0:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80004b2:	f107 0308 	add.w	r3, r7, #8
 80004b6:	2208      	movs	r2, #8
 80004b8:	4619      	mov	r1, r3
 80004ba:	481b      	ldr	r0, [pc, #108]	; (8000528 <StartMainTask+0x124>)
 80004bc:	f006 fcfe 	bl	8006ebc <USBD_HID_SendReport>
			  osDelay(50);
 80004c0:	2032      	movs	r0, #50	; 0x32
 80004c2:	f007 fe54 	bl	800816e <osDelay>
			  keyboardhid.KEYCODE1 = 0x00;		// Release key
 80004c6:	2300      	movs	r3, #0
 80004c8:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	2208      	movs	r2, #8
 80004d0:	4619      	mov	r1, r3
 80004d2:	4815      	ldr	r0, [pc, #84]	; (8000528 <StartMainTask+0x124>)
 80004d4:	f006 fcf2 	bl	8006ebc <USBD_HID_SendReport>
			  osDelay(50);
 80004d8:	2032      	movs	r0, #50	; 0x32
 80004da:	f007 fe48 	bl	800816e <osDelay>
			  keyboardhid.KEYCODE1 = 0x58;		// Send "Enter"
 80004de:	2358      	movs	r3, #88	; 0x58
 80004e0:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80004e2:	f107 0308 	add.w	r3, r7, #8
 80004e6:	2208      	movs	r2, #8
 80004e8:	4619      	mov	r1, r3
 80004ea:	480f      	ldr	r0, [pc, #60]	; (8000528 <StartMainTask+0x124>)
 80004ec:	f006 fce6 	bl	8006ebc <USBD_HID_SendReport>
			  osDelay(50);
 80004f0:	2032      	movs	r0, #50	; 0x32
 80004f2:	f007 fe3c 	bl	800816e <osDelay>
			  keyboardhid.KEYCODE1 = 0x00;		// Release key
 80004f6:	2300      	movs	r3, #0
 80004f8:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80004fa:	f107 0308 	add.w	r3, r7, #8
 80004fe:	2208      	movs	r2, #8
 8000500:	4619      	mov	r1, r3
 8000502:	4809      	ldr	r0, [pc, #36]	; (8000528 <StartMainTask+0x124>)
 8000504:	f006 fcda 	bl	8006ebc <USBD_HID_SendReport>
			  osDelay(50);
 8000508:	2032      	movs	r0, #50	; 0x32
 800050a:	f007 fe30 	bl	800816e <osDelay>
		  }
		  received_msg_flag = 0;	// Resets message received flag
 800050e:	4b05      	ldr	r3, [pc, #20]	; (8000524 <StartMainTask+0x120>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(10);
 8000514:	200a      	movs	r0, #10
 8000516:	f007 fe2a 	bl	800816e <osDelay>
	  if((received_msg_flag == 1) && (UART1_rxBuffer[0] == 0xA1) && (UART1_rxBuffer[3] == 0xB1)){
 800051a:	e783      	b.n	8000424 <StartMainTask+0x20>
 800051c:	20000464 	.word	0x20000464
 8000520:	20000414 	.word	0x20000414
 8000524:	20000460 	.word	0x20000460
 8000528:	200011bc 	.word	0x200011bc

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
}
 8000532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000534:	e7fe      	b.n	8000534 <Error_Handler+0x8>
	...

08000538 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800053e:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <HAL_MspInit+0x68>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <HAL_MspInit+0x68>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6193      	str	r3, [r2, #24]
 800054a:	4b15      	ldr	r3, [pc, #84]	; (80005a0 <HAL_MspInit+0x68>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_MspInit+0x68>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <HAL_MspInit+0x68>)
 800055c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000560:	61d3      	str	r3, [r2, #28]
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <HAL_MspInit+0x68>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	210f      	movs	r1, #15
 8000572:	f06f 0001 	mvn.w	r0, #1
 8000576:	f000 fa52 	bl	8000a1e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <HAL_MspInit+0x6c>)
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <HAL_MspInit+0x6c>)
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010000 	.word	0x40010000

080005a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005b8:	d10b      	bne.n	80005d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <HAL_TIM_PWM_MspInit+0x34>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_TIM_PWM_MspInit+0x34>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	61d3      	str	r3, [r2, #28]
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <HAL_TIM_PWM_MspInit+0x34>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000

080005e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005fe:	d117      	bne.n	8000630 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <HAL_TIM_MspPostInit+0x58>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <HAL_TIM_MspPostInit+0x58>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_TIM_MspPostInit+0x58>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000618:	2301      	movs	r3, #1
 800061a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061c:	2302      	movs	r3, #2
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2302      	movs	r3, #2
 8000622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4619      	mov	r1, r3
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <HAL_TIM_MspPostInit+0x5c>)
 800062c:	f000 fae0 	bl	8000bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000630:	bf00      	nop
 8000632:	3720      	adds	r7, #32
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800

08000640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <HAL_UART_MspInit+0x9c>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d139      	bne.n	80006d4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <HAL_UART_MspInit+0xa0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <HAL_UART_MspInit+0xa0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <HAL_UART_MspInit+0xa0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <HAL_UART_MspInit+0xa0>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <HAL_UART_MspInit+0xa0>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <HAL_UART_MspInit+0xa0>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000694:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	480f      	ldr	r0, [pc, #60]	; (80006e4 <HAL_UART_MspInit+0xa4>)
 80006a6:	f000 faa3 	bl	8000bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <HAL_UART_MspInit+0xa4>)
 80006c0:	f000 fa96 	bl	8000bf0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2105      	movs	r1, #5
 80006c8:	2025      	movs	r0, #37	; 0x25
 80006ca:	f000 f9a8 	bl	8000a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006ce:	2025      	movs	r0, #37	; 0x25
 80006d0:	f000 f9c1 	bl	8000a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006d4:	bf00      	nop
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40013800 	.word	0x40013800
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010800 	.word	0x40010800

080006e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <NMI_Handler+0x4>

080006ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <HardFault_Handler+0x4>

080006f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MemManage_Handler+0x4>

080006fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <UsageFault_Handler+0x4>

08000706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000716:	f000 f88f 	bl	8000838 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800071a:	f008 faa5 	bl	8008c68 <xTaskGetSchedulerState>
 800071e:	4603      	mov	r3, r0
 8000720:	2b01      	cmp	r3, #1
 8000722:	d001      	beq.n	8000728 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000724:	f008 fc90 	bl	8009048 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000732:	f000 fd06 	bl	8001142 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20001680 	.word	0x20001680

08000740 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <USART1_IRQHandler+0x10>)
 8000746:	f003 f9c5 	bl	8003ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000414 	.word	0x20000414

08000754 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr

08000760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000760:	f7ff fff8 	bl	8000754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480b      	ldr	r0, [pc, #44]	; (8000794 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000766:	490c      	ldr	r1, [pc, #48]	; (8000798 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000768:	4a0c      	ldr	r2, [pc, #48]	; (800079c <LoopFillZerobss+0x16>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a09      	ldr	r2, [pc, #36]	; (80007a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800077c:	4c09      	ldr	r4, [pc, #36]	; (80007a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800078a:	f009 fa3b 	bl	8009c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078e:	f7ff fd15 	bl	80001bc <main>
  bx lr
 8000792:	4770      	bx	lr
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 800079c:	08009d08 	.word	0x08009d08
  ldr r2, =_sbss
 80007a0:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 80007a4:	20001984 	.word	0x20001984

080007a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC1_2_IRQHandler>
	...

080007ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_Init+0x28>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <HAL_Init+0x28>)
 80007b6:	f043 0310 	orr.w	r3, r3, #16
 80007ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 f923 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007c2:	200f      	movs	r0, #15
 80007c4:	f000 f808 	bl	80007d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c8:	f7ff feb6 	bl	8000538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40022000 	.word	0x40022000

080007d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_InitTick+0x54>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_InitTick+0x58>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	4619      	mov	r1, r3
 80007ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 f93b 	bl	8000a72 <HAL_SYSTICK_Config>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e00e      	b.n	8000824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d80a      	bhi.n	8000822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800080c:	2200      	movs	r2, #0
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000814:	f000 f903 	bl	8000a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000818:	4a06      	ldr	r2, [pc, #24]	; (8000834 <HAL_InitTick+0x5c>)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	e000      	b.n	8000824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000000 	.word	0x20000000
 8000830:	20000008 	.word	0x20000008
 8000834:	20000004 	.word	0x20000004

08000838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <HAL_IncTick+0x1c>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	461a      	mov	r2, r3
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x20>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4413      	add	r3, r2
 8000848:	4a03      	ldr	r2, [pc, #12]	; (8000858 <HAL_IncTick+0x20>)
 800084a:	6013      	str	r3, [r2, #0]
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000008 	.word	0x20000008
 8000858:	20000468 	.word	0x20000468

0800085c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  return uwTick;
 8000860:	4b02      	ldr	r3, [pc, #8]	; (800086c <HAL_GetTick+0x10>)
 8000862:	681b      	ldr	r3, [r3, #0]
}
 8000864:	4618      	mov	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	20000468 	.word	0x20000468

08000870 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f003 0307 	and.w	r3, r3, #7
 800087e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800089c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008a2:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <__NVIC_SetPriorityGrouping+0x44>)
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	60d3      	str	r3, [r2, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <__NVIC_GetPriorityGrouping+0x18>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	f003 0307 	and.w	r3, r3, #7
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	db0b      	blt.n	80008fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 021f 	and.w	r2, r3, #31
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <__NVIC_EnableIRQ+0x34>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	095b      	lsrs	r3, r3, #5
 80008f4:	2001      	movs	r0, #1
 80008f6:	fa00 f202 	lsl.w	r2, r0, r2
 80008fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100

0800090c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db0a      	blt.n	8000936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <__NVIC_SetPriority+0x4c>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	0112      	lsls	r2, r2, #4
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	440b      	add	r3, r1
 8000930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000934:	e00a      	b.n	800094c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <__NVIC_SetPriority+0x50>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	3b04      	subs	r3, #4
 8000944:	0112      	lsls	r2, r2, #4
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	440b      	add	r3, r1
 800094a:	761a      	strb	r2, [r3, #24]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f1c3 0307 	rsb	r3, r3, #7
 800097a:	2b04      	cmp	r3, #4
 800097c:	bf28      	it	cs
 800097e:	2304      	movcs	r3, #4
 8000980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3304      	adds	r3, #4
 8000986:	2b06      	cmp	r3, #6
 8000988:	d902      	bls.n	8000990 <NVIC_EncodePriority+0x30>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3b03      	subs	r3, #3
 800098e:	e000      	b.n	8000992 <NVIC_EncodePriority+0x32>
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43da      	mvns	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43d9      	mvns	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	4313      	orrs	r3, r2
         );
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3724      	adds	r7, #36	; 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d4:	d301      	bcc.n	80009da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00f      	b.n	80009fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <SysTick_Config+0x40>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e2:	210f      	movs	r1, #15
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e8:	f7ff ff90 	bl	800090c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SysTick_Config+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SysTick_Config+0x40>)
 80009f4:	2207      	movs	r2, #7
 80009f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	e000e010 	.word	0xe000e010

08000a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff2d 	bl	8000870 <__NVIC_SetPriorityGrouping>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff42 	bl	80008b8 <__NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ff90 	bl	8000960 <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff5f 	bl	800090c <__NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff35 	bl	80008d4 <__NVIC_EnableIRQ>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffa2 	bl	80009c4 <SysTick_Config>
 8000a80:	4603      	mov	r3, r0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b085      	sub	sp, #20
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d008      	beq.n	8000ab4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2204      	movs	r2, #4
 8000aa6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e020      	b.n	8000af6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f022 020e 	bic.w	r2, r2, #14
 8000ac2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f022 0201 	bic.w	r2, r2, #1
 8000ad2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000adc:	2101      	movs	r1, #1
 8000ade:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d005      	beq.n	8000b24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	73fb      	strb	r3, [r7, #15]
 8000b22:	e051      	b.n	8000bc8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f022 020e 	bic.w	r2, r2, #14
 8000b32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f022 0201 	bic.w	r2, r2, #1
 8000b42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <HAL_DMA_Abort_IT+0xd4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d029      	beq.n	8000ba2 <HAL_DMA_Abort_IT+0xa2>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <HAL_DMA_Abort_IT+0xd8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d022      	beq.n	8000b9e <HAL_DMA_Abort_IT+0x9e>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1f      	ldr	r2, [pc, #124]	; (8000bdc <HAL_DMA_Abort_IT+0xdc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d01a      	beq.n	8000b98 <HAL_DMA_Abort_IT+0x98>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a1e      	ldr	r2, [pc, #120]	; (8000be0 <HAL_DMA_Abort_IT+0xe0>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d012      	beq.n	8000b92 <HAL_DMA_Abort_IT+0x92>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a1c      	ldr	r2, [pc, #112]	; (8000be4 <HAL_DMA_Abort_IT+0xe4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d00a      	beq.n	8000b8c <HAL_DMA_Abort_IT+0x8c>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a1b      	ldr	r2, [pc, #108]	; (8000be8 <HAL_DMA_Abort_IT+0xe8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d102      	bne.n	8000b86 <HAL_DMA_Abort_IT+0x86>
 8000b80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b84:	e00e      	b.n	8000ba4 <HAL_DMA_Abort_IT+0xa4>
 8000b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b8a:	e00b      	b.n	8000ba4 <HAL_DMA_Abort_IT+0xa4>
 8000b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b90:	e008      	b.n	8000ba4 <HAL_DMA_Abort_IT+0xa4>
 8000b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b96:	e005      	b.n	8000ba4 <HAL_DMA_Abort_IT+0xa4>
 8000b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9c:	e002      	b.n	8000ba4 <HAL_DMA_Abort_IT+0xa4>
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	e000      	b.n	8000ba4 <HAL_DMA_Abort_IT+0xa4>
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_DMA_Abort_IT+0xec>)
 8000ba6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	4798      	blx	r3
    } 
  }
  return status;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40020008 	.word	0x40020008
 8000bd8:	4002001c 	.word	0x4002001c
 8000bdc:	40020030 	.word	0x40020030
 8000be0:	40020044 	.word	0x40020044
 8000be4:	40020058 	.word	0x40020058
 8000be8:	4002006c 	.word	0x4002006c
 8000bec:	40020000 	.word	0x40020000

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b08b      	sub	sp, #44	; 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c02:	e169      	b.n	8000ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c04:	2201      	movs	r2, #1
 8000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	69fa      	ldr	r2, [r7, #28]
 8000c14:	4013      	ands	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f040 8158 	bne.w	8000ed2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	4a9a      	ldr	r2, [pc, #616]	; (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d05e      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c2c:	4a98      	ldr	r2, [pc, #608]	; (8000e90 <HAL_GPIO_Init+0x2a0>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d875      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c32:	4a98      	ldr	r2, [pc, #608]	; (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d058      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c38:	4a96      	ldr	r2, [pc, #600]	; (8000e94 <HAL_GPIO_Init+0x2a4>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d86f      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c3e:	4a96      	ldr	r2, [pc, #600]	; (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d052      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c44:	4a94      	ldr	r2, [pc, #592]	; (8000e98 <HAL_GPIO_Init+0x2a8>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d869      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c4a:	4a94      	ldr	r2, [pc, #592]	; (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d04c      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c50:	4a92      	ldr	r2, [pc, #584]	; (8000e9c <HAL_GPIO_Init+0x2ac>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d863      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c56:	4a92      	ldr	r2, [pc, #584]	; (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d046      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
 8000c5c:	4a90      	ldr	r2, [pc, #576]	; (8000ea0 <HAL_GPIO_Init+0x2b0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d85d      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c62:	2b12      	cmp	r3, #18
 8000c64:	d82a      	bhi.n	8000cbc <HAL_GPIO_Init+0xcc>
 8000c66:	2b12      	cmp	r3, #18
 8000c68:	d859      	bhi.n	8000d1e <HAL_GPIO_Init+0x12e>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <HAL_GPIO_Init+0x80>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000ceb 	.word	0x08000ceb
 8000c74:	08000cc5 	.word	0x08000cc5
 8000c78:	08000cd7 	.word	0x08000cd7
 8000c7c:	08000d19 	.word	0x08000d19
 8000c80:	08000d1f 	.word	0x08000d1f
 8000c84:	08000d1f 	.word	0x08000d1f
 8000c88:	08000d1f 	.word	0x08000d1f
 8000c8c:	08000d1f 	.word	0x08000d1f
 8000c90:	08000d1f 	.word	0x08000d1f
 8000c94:	08000d1f 	.word	0x08000d1f
 8000c98:	08000d1f 	.word	0x08000d1f
 8000c9c:	08000d1f 	.word	0x08000d1f
 8000ca0:	08000d1f 	.word	0x08000d1f
 8000ca4:	08000d1f 	.word	0x08000d1f
 8000ca8:	08000d1f 	.word	0x08000d1f
 8000cac:	08000d1f 	.word	0x08000d1f
 8000cb0:	08000d1f 	.word	0x08000d1f
 8000cb4:	08000ccd 	.word	0x08000ccd
 8000cb8:	08000ce1 	.word	0x08000ce1
 8000cbc:	4a79      	ldr	r2, [pc, #484]	; (8000ea4 <HAL_GPIO_Init+0x2b4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d013      	beq.n	8000cea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cc2:	e02c      	b.n	8000d1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	623b      	str	r3, [r7, #32]
          break;
 8000cca:	e029      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	623b      	str	r3, [r7, #32]
          break;
 8000cd4:	e024      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	3308      	adds	r3, #8
 8000cdc:	623b      	str	r3, [r7, #32]
          break;
 8000cde:	e01f      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	330c      	adds	r3, #12
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e01a      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e013      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d105      	bne.n	8000d0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d00:	2308      	movs	r3, #8
 8000d02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	611a      	str	r2, [r3, #16]
          break;
 8000d0a:	e009      	b.n	8000d20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	615a      	str	r2, [r3, #20]
          break;
 8000d16:	e003      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
          break;
 8000d1c:	e000      	b.n	8000d20 <HAL_GPIO_Init+0x130>
          break;
 8000d1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2bff      	cmp	r3, #255	; 0xff
 8000d24:	d801      	bhi.n	8000d2a <HAL_GPIO_Init+0x13a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	e001      	b.n	8000d2e <HAL_GPIO_Init+0x13e>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2bff      	cmp	r3, #255	; 0xff
 8000d34:	d802      	bhi.n	8000d3c <HAL_GPIO_Init+0x14c>
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0x152>
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	3b08      	subs	r3, #8
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	210f      	movs	r1, #15
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	401a      	ands	r2, r3
 8000d54:	6a39      	ldr	r1, [r7, #32]
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 80b1 	beq.w	8000ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d70:	4b4d      	ldr	r3, [pc, #308]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a4c      	ldr	r2, [pc, #304]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b4a      	ldr	r3, [pc, #296]	; (8000ea8 <HAL_GPIO_Init+0x2b8>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d88:	4a48      	ldr	r2, [pc, #288]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	3302      	adds	r3, #2
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	220f      	movs	r2, #15
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a40      	ldr	r2, [pc, #256]	; (8000eb0 <HAL_GPIO_Init+0x2c0>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d013      	beq.n	8000ddc <HAL_GPIO_Init+0x1ec>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <HAL_GPIO_Init+0x2c4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d00d      	beq.n	8000dd8 <HAL_GPIO_Init+0x1e8>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a3e      	ldr	r2, [pc, #248]	; (8000eb8 <HAL_GPIO_Init+0x2c8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d007      	beq.n	8000dd4 <HAL_GPIO_Init+0x1e4>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a3d      	ldr	r2, [pc, #244]	; (8000ebc <HAL_GPIO_Init+0x2cc>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d101      	bne.n	8000dd0 <HAL_GPIO_Init+0x1e0>
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e006      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	e004      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e002      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e000      	b.n	8000dde <HAL_GPIO_Init+0x1ee>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de0:	f002 0203 	and.w	r2, r2, #3
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	4093      	lsls	r3, r2
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dee:	492f      	ldr	r1, [pc, #188]	; (8000eac <HAL_GPIO_Init+0x2bc>)
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	3302      	adds	r3, #2
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d006      	beq.n	8000e16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	492c      	ldr	r1, [pc, #176]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4928      	ldr	r1, [pc, #160]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	4922      	ldr	r1, [pc, #136]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	60cb      	str	r3, [r1, #12]
 8000e3c:	e006      	b.n	8000e4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	491e      	ldr	r1, [pc, #120]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d006      	beq.n	8000e66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e58:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	4918      	ldr	r1, [pc, #96]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	604b      	str	r3, [r1, #4]
 8000e64:	e006      	b.n	8000e74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	4914      	ldr	r1, [pc, #80]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e70:	4013      	ands	r3, r2
 8000e72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d021      	beq.n	8000ec4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	490e      	ldr	r1, [pc, #56]	; (8000ec0 <HAL_GPIO_Init+0x2d0>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]
 8000e8c:	e021      	b.n	8000ed2 <HAL_GPIO_Init+0x2e2>
 8000e8e:	bf00      	nop
 8000e90:	10320000 	.word	0x10320000
 8000e94:	10310000 	.word	0x10310000
 8000e98:	10220000 	.word	0x10220000
 8000e9c:	10210000 	.word	0x10210000
 8000ea0:	10120000 	.word	0x10120000
 8000ea4:	10110000 	.word	0x10110000
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	40011000 	.word	0x40011000
 8000ebc:	40011400 	.word	0x40011400
 8000ec0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_GPIO_Init+0x304>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	4909      	ldr	r1, [pc, #36]	; (8000ef4 <HAL_GPIO_Init+0x304>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f47f ae8e 	bne.w	8000c04 <HAL_GPIO_Init+0x14>
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	372c      	adds	r7, #44	; 0x2c
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efa:	b08b      	sub	sp, #44	; 0x2c
 8000efc:	af06      	add	r7, sp, #24
 8000efe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0f1      	b.n	80010ee <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d106      	bne.n	8000f24 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f008 fbe2 	bl	80096e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2203      	movs	r2, #3
 8000f28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 fb07 	bl	8004544 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	687e      	ldr	r6, [r7, #4]
 8000f3e:	466d      	mov	r5, sp
 8000f40:	f106 0410 	add.w	r4, r6, #16
 8000f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	602b      	str	r3, [r5, #0]
 8000f4c:	1d33      	adds	r3, r6, #4
 8000f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f50:	6838      	ldr	r0, [r7, #0]
 8000f52:	f003 fad1 	bl	80044f8 <USB_CoreInit>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e0c2      	b.n	80010ee <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fb02 	bl	8004578 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e040      	b.n	8000ffc <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	4613      	mov	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	4413      	add	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	440b      	add	r3, r1
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	440b      	add	r3, r1
 8000fa0:	7bfa      	ldrb	r2, [r7, #15]
 8000fa2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3303      	adds	r3, #3
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3338      	adds	r3, #56	; 0x38
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	333c      	adds	r3, #60	; 0x3c
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	440b      	add	r3, r1
 8000ff0:	3340      	adds	r3, #64	; 0x40
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	429a      	cmp	r2, r3
 8001004:	d3b9      	bcc.n	8000f7a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e044      	b.n	8001096 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	440b      	add	r3, r1
 800101a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001022:	7bfa      	ldrb	r2, [r7, #15]
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	440b      	add	r3, r1
 8001030:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001034:	7bfa      	ldrb	r2, [r7, #15]
 8001036:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	440b      	add	r3, r1
 8001046:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800104e:	7bfa      	ldrb	r2, [r7, #15]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	440b      	add	r3, r1
 8001072:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	4613      	mov	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	440b      	add	r3, r1
 8001088:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	3301      	adds	r3, #1
 8001094:	73fb      	strb	r3, [r7, #15]
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	d3b5      	bcc.n	800100c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	603b      	str	r3, [r7, #0]
 80010a6:	687e      	ldr	r6, [r7, #4]
 80010a8:	466d      	mov	r5, sp
 80010aa:	f106 0410 	add.w	r4, r6, #16
 80010ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	602b      	str	r3, [r5, #0]
 80010b6:	1d33      	adds	r3, r6, #4
 80010b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ba:	6838      	ldr	r0, [r7, #0]
 80010bc:	f003 fa68 	bl	8004590 <USB_DevInit>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2202      	movs	r2, #2
 80010ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00d      	b.n	80010ee <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f005 fce9 	bl	8006abe <USB_DevDisconnect>

  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001104:	2b01      	cmp	r3, #1
 8001106:	d101      	bne.n	800110c <HAL_PCD_Start+0x16>
 8001108:	2302      	movs	r3, #2
 800110a:	e016      	b.n	800113a <HAL_PCD_Start+0x44>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4618      	mov	r0, r3
 800111a:	f003 f9fd 	bl	8004518 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800111e:	2101      	movs	r1, #1
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f008 fd30 	bl	8009b86 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f005 fcbd 	bl	8006aaa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b088      	sub	sp, #32
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f005 fcbf 	bl	8006ad2 <USB_ReadInterrupts>
 8001154:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fb04 	bl	800176e <PCD_EP_ISR_Handler>

    return;
 8001166:	e119      	b.n	800139c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116e:	2b00      	cmp	r3, #0
 8001170:	d013      	beq.n	800119a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800117a:	b29a      	uxth	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001184:	b292      	uxth	r2, r2
 8001186:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f008 fb27 	bl	80097de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001190:	2100      	movs	r1, #0
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f905 	bl	80013a2 <HAL_PCD_SetAddress>

    return;
 8001198:	e100      	b.n	800139c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00c      	beq.n	80011be <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80011b6:	b292      	uxth	r2, r2
 80011b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011bc:	e0ee      	b.n	800139c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00c      	beq.n	80011e2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011da:	b292      	uxth	r2, r2
 80011dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011e0:	e0dc      	b.n	800139c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d027      	beq.n	800123c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0204 	bic.w	r2, r2, #4
 80011fe:	b292      	uxth	r2, r2
 8001200:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800120c:	b29a      	uxth	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0208 	bic.w	r2, r2, #8
 8001216:	b292      	uxth	r2, r2
 8001218:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f008 fb17 	bl	8009850 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001234:	b292      	uxth	r2, r2
 8001236:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800123a:	e0af      	b.n	800139c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 8083 	beq.w	800134e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001248:	2300      	movs	r3, #0
 800124a:	77fb      	strb	r3, [r7, #31]
 800124c:	e010      	b.n	8001270 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	7ffb      	ldrb	r3, [r7, #31]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	441a      	add	r2, r3
 800125a:	7ffb      	ldrb	r3, [r7, #31]
 800125c:	8812      	ldrh	r2, [r2, #0]
 800125e:	b292      	uxth	r2, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	3320      	adds	r3, #32
 8001264:	443b      	add	r3, r7
 8001266:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800126a:	7ffb      	ldrb	r3, [r7, #31]
 800126c:	3301      	adds	r3, #1
 800126e:	77fb      	strb	r3, [r7, #31]
 8001270:	7ffb      	ldrb	r3, [r7, #31]
 8001272:	2b07      	cmp	r3, #7
 8001274:	d9eb      	bls.n	800124e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800127e:	b29a      	uxth	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0201 	orr.w	r2, r2, #1
 8001288:	b292      	uxth	r2, r2
 800128a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001296:	b29a      	uxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0201 	bic.w	r2, r2, #1
 80012a0:	b292      	uxth	r2, r2
 80012a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80012a6:	bf00      	nop
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f6      	beq.n	80012a8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012cc:	b292      	uxth	r2, r2
 80012ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	77fb      	strb	r3, [r7, #31]
 80012d6:	e00f      	b.n	80012f8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80012d8:	7ffb      	ldrb	r3, [r7, #31]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	4611      	mov	r1, r2
 80012e0:	7ffa      	ldrb	r2, [r7, #31]
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	440a      	add	r2, r1
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	3320      	adds	r3, #32
 80012ea:	443b      	add	r3, r7
 80012ec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80012f0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80012f2:	7ffb      	ldrb	r3, [r7, #31]
 80012f4:	3301      	adds	r3, #1
 80012f6:	77fb      	strb	r3, [r7, #31]
 80012f8:	7ffb      	ldrb	r3, [r7, #31]
 80012fa:	2b07      	cmp	r3, #7
 80012fc:	d9ec      	bls.n	80012d8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001306:	b29a      	uxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f042 0208 	orr.w	r2, r2, #8
 8001310:	b292      	uxth	r2, r2
 8001312:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800131e:	b29a      	uxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001328:	b292      	uxth	r2, r2
 800132a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001336:	b29a      	uxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0204 	orr.w	r2, r2, #4
 8001340:	b292      	uxth	r2, r2
 8001342:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f008 fa68 	bl	800981c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800134c:	e026      	b.n	800139c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00f      	beq.n	8001378 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001360:	b29a      	uxth	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800136a:	b292      	uxth	r2, r2
 800136c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f008 fa26 	bl	80097c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001376:	e011      	b.n	800139c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00c      	beq.n	800139c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800138a:	b29a      	uxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001394:	b292      	uxth	r2, r2
 8001396:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800139a:	bf00      	nop
  }
}
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_PCD_SetAddress+0x1a>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e013      	b.n	80013e4 <HAL_PCD_SetAddress+0x42>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	78fa      	ldrb	r2, [r7, #3]
 80013c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	78fa      	ldrb	r2, [r7, #3]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f005 fb55 	bl	8006a84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	4608      	mov	r0, r1
 80013f6:	4611      	mov	r1, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4603      	mov	r3, r0
 80013fc:	70fb      	strb	r3, [r7, #3]
 80013fe:	460b      	mov	r3, r1
 8001400:	803b      	strh	r3, [r7, #0]
 8001402:	4613      	mov	r3, r2
 8001404:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800140a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800140e:	2b00      	cmp	r3, #0
 8001410:	da0e      	bge.n	8001430 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2201      	movs	r2, #1
 800142c:	705a      	strb	r2, [r3, #1]
 800142e:	e00e      	b.n	800144e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	f003 0207 	and.w	r2, r3, #7
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	b2da      	uxtb	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800145a:	883a      	ldrh	r2, [r7, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	78ba      	ldrb	r2, [r7, #2]
 8001464:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001466:	78bb      	ldrb	r3, [r7, #2]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d102      	bne.n	8001472 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2200      	movs	r2, #0
 8001470:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <HAL_PCD_EP_Open+0x94>
 800147c:	2302      	movs	r3, #2
 800147e:	e00e      	b.n	800149e <HAL_PCD_EP_Open+0xb2>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68f9      	ldr	r1, [r7, #12]
 800148e:	4618      	mov	r0, r3
 8001490:	f003 f89e 	bl	80045d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800149c:	7afb      	ldrb	r3, [r7, #11]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	da0e      	bge.n	80014d8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2201      	movs	r2, #1
 80014d4:	705a      	strb	r2, [r3, #1]
 80014d6:	e00e      	b.n	80014f6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014d8:	78fb      	ldrb	r3, [r7, #3]
 80014da:	f003 0207 	and.w	r2, r3, #7
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_PCD_EP_Close+0x6a>
 800150c:	2302      	movs	r3, #2
 800150e:	e00e      	b.n	800152e <HAL_PCD_EP_Close+0x88>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	68f9      	ldr	r1, [r7, #12]
 800151e:	4618      	mov	r0, r3
 8001520:	f003 fc16 	bl	8004d50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	607a      	str	r2, [r7, #4]
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	460b      	mov	r3, r1
 8001544:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001546:	7afb      	ldrb	r3, [r7, #11]
 8001548:	f003 0207 	and.w	r2, r3, #7
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4413      	add	r3, r2
 800155c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2200      	movs	r2, #0
 8001574:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001576:	7afb      	ldrb	r3, [r7, #11]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	b2da      	uxtb	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6979      	ldr	r1, [r7, #20]
 8001588:	4618      	mov	r0, r3
 800158a:	f003 fdcd 	bl	8005128 <USB_EPStartXfer>

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	460b      	mov	r3, r1
 80015a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a8:	7afb      	ldrb	r3, [r7, #11]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2201      	movs	r2, #1
 80015ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	2201      	movs	r2, #1
 80015e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015e4:	7afb      	ldrb	r3, [r7, #11]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6979      	ldr	r1, [r7, #20]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 fd96 	bl	8005128 <USB_EPStartXfer>

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	460b      	mov	r3, r1
 8001610:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	f003 0207 	and.w	r2, r3, #7
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	d901      	bls.n	8001624 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e04c      	b.n	80016be <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001628:	2b00      	cmp	r3, #0
 800162a:	da0e      	bge.n	800164a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2201      	movs	r2, #1
 8001646:	705a      	strb	r2, [r3, #1]
 8001648:	e00c      	b.n	8001664 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800164a:	78fa      	ldrb	r2, [r7, #3]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2201      	movs	r2, #1
 8001668:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	b2da      	uxtb	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_PCD_EP_SetStall+0x7e>
 8001680:	2302      	movs	r3, #2
 8001682:	e01c      	b.n	80016be <HAL_PCD_EP_SetStall+0xb8>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68f9      	ldr	r1, [r7, #12]
 8001692:	4618      	mov	r0, r3
 8001694:	f005 f8f9 	bl	800688a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001698:	78fb      	ldrb	r3, [r7, #3]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d108      	bne.n	80016b4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80016ac:	4619      	mov	r1, r3
 80016ae:	4610      	mov	r0, r2
 80016b0:	f005 fa1e 	bl	8006af0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	f003 020f 	and.w	r2, r3, #15
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d901      	bls.n	80016e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e040      	b.n	8001766 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da0e      	bge.n	800170a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	705a      	strb	r2, [r3, #1]
 8001708:	e00e      	b.n	8001728 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	f003 0207 	and.w	r2, r3, #7
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	4413      	add	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	b2da      	uxtb	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001740:	2b01      	cmp	r3, #1
 8001742:	d101      	bne.n	8001748 <HAL_PCD_EP_ClrStall+0x82>
 8001744:	2302      	movs	r3, #2
 8001746:	e00e      	b.n	8001766 <HAL_PCD_EP_ClrStall+0xa0>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68f9      	ldr	r1, [r7, #12]
 8001756:	4618      	mov	r0, r3
 8001758:	f005 f8e7 	bl	800692a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b096      	sub	sp, #88	; 0x58
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001776:	e3bf      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001780:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001784:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001788:	b2db      	uxtb	r3, r3
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001792:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 8179 	bne.w	8001a8e <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800179c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d152      	bne.n	800184e <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80017b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b8:	81fb      	strh	r3, [r7, #14]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	89fb      	ldrh	r3, [r7, #14]
 80017c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3328      	adds	r3, #40	; 0x28
 80017d0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017da:	b29b      	uxth	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4413      	add	r3, r2
 80017e6:	3302      	adds	r3, #2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	441a      	add	r2, r3
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800180c:	2100      	movs	r1, #0
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f007 ffbd 	bl	800978e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 836b 	beq.w	8001ef8 <PCD_EP_ISR_Handler+0x78a>
 8001822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f040 8366 	bne.w	8001ef8 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001832:	b2db      	uxtb	r3, r3
 8001834:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001838:	b2da      	uxtb	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	b292      	uxth	r2, r2
 8001840:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800184c:	e354      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001854:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001860:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001868:	2b00      	cmp	r3, #0
 800186a:	d034      	beq.n	80018d6 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001874:	b29b      	uxth	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4413      	add	r3, r2
 8001880:	3306      	adds	r3, #6
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	4413      	add	r3, r2
 800188a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001896:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80018a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80018a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	f005 f970 	bl	8006b90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018bc:	4013      	ands	r3, r2
 80018be:	823b      	strh	r3, [r7, #16]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	8a3a      	ldrh	r2, [r7, #16]
 80018c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ca:	b292      	uxth	r2, r2
 80018cc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f007 ff30 	bl	8009734 <HAL_PCD_SetupStageCallback>
 80018d4:	e310      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018d6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f280 830c 	bge.w	8001ef8 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018ec:	4013      	ands	r3, r2
 80018ee:	83fb      	strh	r3, [r7, #30]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	8bfa      	ldrh	r2, [r7, #30]
 80018f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018fa:	b292      	uxth	r2, r2
 80018fc:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001906:	b29b      	uxth	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4413      	add	r3, r2
 8001912:	3306      	adds	r3, #6
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	4413      	add	r3, r2
 800191c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001928:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d019      	beq.n	8001966 <PCD_EP_ISR_Handler+0x1f8>
 8001932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d015      	beq.n	8001966 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001940:	6959      	ldr	r1, [r3, #20]
 8001942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001944:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001948:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800194a:	b29b      	uxth	r3, r3
 800194c:	f005 f920 	bl	8006b90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001952:	695a      	ldr	r2, [r3, #20]
 8001954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	441a      	add	r2, r3
 800195a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800195e:	2100      	movs	r1, #0
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f007 fef9 	bl	8009758 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001970:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001978:	2b00      	cmp	r3, #0
 800197a:	f040 82bd 	bne.w	8001ef8 <PCD_EP_ISR_Handler+0x78a>
 800197e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001982:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001986:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800198a:	f000 82b5 	beq.w	8001ef8 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800199c:	b29b      	uxth	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	4413      	add	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	801a      	strh	r2, [r3, #0]
 80019be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	2b3e      	cmp	r3, #62	; 0x3e
 80019c4:	d91d      	bls.n	8001a02 <PCD_EP_ISR_Handler+0x294>
 80019c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	647b      	str	r3, [r7, #68]	; 0x44
 80019ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <PCD_EP_ISR_Handler+0x272>
 80019da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019dc:	3b01      	subs	r3, #1
 80019de:	647b      	str	r3, [r7, #68]	; 0x44
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	801a      	strh	r2, [r3, #0]
 8001a00:	e026      	b.n	8001a50 <PCD_EP_ISR_Handler+0x2e2>
 8001a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10a      	bne.n	8001a20 <PCD_EP_ISR_Handler+0x2b2>
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	881b      	ldrh	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	801a      	strh	r2, [r3, #0]
 8001a1e:	e017      	b.n	8001a50 <PCD_EP_ISR_Handler+0x2e2>
 8001a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	647b      	str	r3, [r7, #68]	; 0x44
 8001a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <PCD_EP_ISR_Handler+0x2cc>
 8001a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a36:	3301      	adds	r3, #1
 8001a38:	647b      	str	r3, [r7, #68]	; 0x44
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	029b      	lsls	r3, r3, #10
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a60:	827b      	strh	r3, [r7, #18]
 8001a62:	8a7b      	ldrh	r3, [r7, #18]
 8001a64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001a68:	827b      	strh	r3, [r7, #18]
 8001a6a:	8a7b      	ldrh	r3, [r7, #18]
 8001a6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a70:	827b      	strh	r3, [r7, #18]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	8a7b      	ldrh	r3, [r7, #18]
 8001a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	8013      	strh	r3, [r2, #0]
 8001a8c:	e234      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001aa2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f280 80fc 	bge.w	8001ca4 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ada:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ade:	b292      	uxth	r2, r2
 8001ae0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ae2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afa:	7b1b      	ldrb	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d125      	bne.n	8001b4c <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4413      	add	r3, r2
 8001b14:	3306      	adds	r3, #6
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b28:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001b2c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8092 	beq.w	8001c5a <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	6959      	ldr	r1, [r3, #20]
 8001b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b40:	88da      	ldrh	r2, [r3, #6]
 8001b42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b46:	f005 f823 	bl	8006b90 <USB_ReadPMA>
 8001b4a:	e086      	b.n	8001c5a <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b4e:	78db      	ldrb	r3, [r3, #3]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d10a      	bne.n	8001b6a <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b58:	461a      	mov	r2, r3
 8001b5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f9d9 	bl	8001f14 <HAL_PCD_EP_DB_Receive>
 8001b62:	4603      	mov	r3, r0
 8001b64:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b68:	e077      	b.n	8001c5a <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b84:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	441a      	add	r2, r3
 8001b96:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d024      	beq.n	8001c12 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3302      	adds	r3, #2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bf0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001bf4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d02e      	beq.n	8001c5a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c02:	6959      	ldr	r1, [r3, #20]
 8001c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c06:	891a      	ldrh	r2, [r3, #8]
 8001c08:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c0c:	f004 ffc0 	bl	8006b90 <USB_ReadPMA>
 8001c10:	e023      	b.n	8001c5a <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4413      	add	r3, r2
 8001c26:	3306      	adds	r3, #6
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001c3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4c:	6959      	ldr	r1, [r3, #20]
 8001c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c50:	895a      	ldrh	r2, [r3, #10]
 8001c52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c56:	f004 ff9b 	bl	8006b90 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c62:	441a      	add	r2, r3
 8001c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c6a:	695a      	ldr	r2, [r3, #20]
 8001c6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c70:	441a      	add	r2, r3
 8001c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c74:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <PCD_EP_ISR_Handler+0x51c>
 8001c7e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d206      	bcs.n	8001c98 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f007 fd61 	bl	8009758 <HAL_PCD_DataOutStageCallback>
 8001c96:	e005      	b.n	8001ca4 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fa42 	bl	8005128 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ca4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8123 	beq.w	8001ef8 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001cb2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	441a      	add	r2, r3
 8001cf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d04:	78db      	ldrb	r3, [r3, #3]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	f040 80a2 	bne.w	8001e50 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d14:	7b1b      	ldrb	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 8093 	beq.w	8001e42 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d046      	beq.n	8001db6 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2a:	785b      	ldrb	r3, [r3, #1]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d126      	bne.n	8001d7e <PCD_EP_ISR_Handler+0x610>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	4413      	add	r3, r2
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
 8001d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	011a      	lsls	r2, r3, #4
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	4413      	add	r3, r2
 8001d52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d56:	623b      	str	r3, [r7, #32]
 8001d58:	6a3b      	ldr	r3, [r7, #32]
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	801a      	strh	r2, [r3, #0]
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	6a3b      	ldr	r3, [r7, #32]
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	e061      	b.n	8001e42 <PCD_EP_ISR_Handler+0x6d4>
 8001d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d80:	785b      	ldrb	r3, [r3, #1]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d15d      	bne.n	8001e42 <PCD_EP_ISR_Handler+0x6d4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9a:	4413      	add	r3, r2
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	011a      	lsls	r2, r3, #4
 8001da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da6:	4413      	add	r3, r2
 8001da8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db0:	2200      	movs	r2, #0
 8001db2:	801a      	strh	r2, [r3, #0]
 8001db4:	e045      	b.n	8001e42 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d126      	bne.n	8001e12 <PCD_EP_ISR_Handler+0x6a4>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd8:	4413      	add	r3, r2
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
 8001ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	011a      	lsls	r2, r3, #4
 8001de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de4:	4413      	add	r3, r2
 8001de6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	801a      	strh	r2, [r3, #0]
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0e:	801a      	strh	r2, [r3, #0]
 8001e10:	e017      	b.n	8001e42 <PCD_EP_ISR_Handler+0x6d4>
 8001e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e14:	785b      	ldrb	r3, [r3, #1]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d113      	bne.n	8001e42 <PCD_EP_ISR_Handler+0x6d4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	461a      	mov	r2, r3
 8001e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e28:	4413      	add	r3, r2
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	011a      	lsls	r2, r3, #4
 8001e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e34:	4413      	add	r3, r2
 8001e36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e3e:	2200      	movs	r2, #0
 8001e40:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	4619      	mov	r1, r3
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f007 fca0 	bl	800978e <HAL_PCD_DataInStageCallback>
 8001e4e:	e053      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001e50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d146      	bne.n	8001eea <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3302      	adds	r3, #2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e84:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e8a:	699a      	ldr	r2, [r3, #24]
 8001e8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d907      	bls.n	8001ea4 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e9c:	1ad2      	subs	r2, r2, r3
 8001e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea0:	619a      	str	r2, [r3, #24]
 8001ea2:	e002      	b.n	8001eaa <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f007 fc68 	bl	800978e <HAL_PCD_DataInStageCallback>
 8001ebe:	e01b      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ec8:	441a      	add	r2, r3
 8001eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ecc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed0:	69da      	ldr	r2, [r3, #28]
 8001ed2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ed6:	441a      	add	r2, r3
 8001ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eda:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 f920 	bl	8005128 <USB_EPStartXfer>
 8001ee8:	e006      	b.n	8001ef8 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001eea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001eee:	461a      	mov	r2, r3
 8001ef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f91b 	bl	800212e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f6ff ac37 	blt.w	8001778 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3758      	adds	r7, #88	; 0x58
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d07e      	beq.n	800202a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	3302      	adds	r3, #2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f54:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	8b7b      	ldrh	r3, [r7, #26]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d306      	bcc.n	8001f6e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	8b7b      	ldrh	r3, [r7, #26]
 8001f66:	1ad2      	subs	r2, r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	619a      	str	r2, [r3, #24]
 8001f6c:	e002      	b.n	8001f74 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d123      	bne.n	8001fc4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f96:	833b      	strh	r3, [r7, #24]
 8001f98:	8b3b      	ldrh	r3, [r7, #24]
 8001f9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f9e:	833b      	strh	r3, [r7, #24]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	441a      	add	r2, r3
 8001fae:	8b3b      	ldrh	r3, [r7, #24]
 8001fb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01f      	beq.n	800200e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe8:	82fb      	strh	r3, [r7, #22]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	441a      	add	r2, r3
 8001ff8:	8afb      	ldrh	r3, [r7, #22]
 8001ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002006:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800200a:	b29b      	uxth	r3, r3
 800200c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800200e:	8b7b      	ldrh	r3, [r7, #26]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8087 	beq.w	8002124 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6818      	ldr	r0, [r3, #0]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	6959      	ldr	r1, [r3, #20]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	891a      	ldrh	r2, [r3, #8]
 8002022:	8b7b      	ldrh	r3, [r7, #26]
 8002024:	f004 fdb4 	bl	8006b90 <USB_ReadPMA>
 8002028:	e07c      	b.n	8002124 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002032:	b29b      	uxth	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	3306      	adds	r3, #6
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	4413      	add	r3, r2
 8002048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002052:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	699a      	ldr	r2, [r3, #24]
 8002058:	8b7b      	ldrh	r3, [r7, #26]
 800205a:	429a      	cmp	r2, r3
 800205c:	d306      	bcc.n	800206c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	8b7b      	ldrh	r3, [r7, #26]
 8002064:	1ad2      	subs	r2, r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	619a      	str	r2, [r3, #24]
 800206a:	e002      	b.n	8002072 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d123      	bne.n	80020c2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002094:	83fb      	strh	r3, [r7, #30]
 8002096:	8bfb      	ldrh	r3, [r7, #30]
 8002098:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800209c:	83fb      	strh	r3, [r7, #30]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	441a      	add	r2, r3
 80020ac:	8bfb      	ldrh	r3, [r7, #30]
 80020ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020be:	b29b      	uxth	r3, r3
 80020c0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d11f      	bne.n	800210c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e6:	83bb      	strh	r3, [r7, #28]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	441a      	add	r2, r3
 80020f6:	8bbb      	ldrh	r3, [r7, #28]
 80020f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002104:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002108:	b29b      	uxth	r3, r3
 800210a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800210c:	8b7b      	ldrh	r3, [r7, #26]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	6959      	ldr	r1, [r3, #20]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	895a      	ldrh	r2, [r3, #10]
 800211e:	8b7b      	ldrh	r3, [r7, #26]
 8002120:	f004 fd36 	bl	8006b90 <USB_ReadPMA>
    }
  }

  return count;
 8002124:	8b7b      	ldrh	r3, [r7, #26]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3720      	adds	r7, #32
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b0a4      	sub	sp, #144	; 0x90
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	4613      	mov	r3, r2
 800213a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800213c:	88fb      	ldrh	r3, [r7, #6]
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 81dd 	beq.w	8002502 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002150:	b29b      	uxth	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	3302      	adds	r3, #2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	4413      	add	r3, r2
 8002166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002170:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	699a      	ldr	r2, [r3, #24]
 8002178:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800217c:	429a      	cmp	r2, r3
 800217e:	d907      	bls.n	8002190 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	699a      	ldr	r2, [r3, #24]
 8002184:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002188:	1ad2      	subs	r2, r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	619a      	str	r2, [r3, #24]
 800218e:	e002      	b.n	8002196 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 80b9 	bne.w	8002312 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	785b      	ldrb	r3, [r3, #1]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d126      	bne.n	80021f6 <HAL_PCD_EP_DB_Transmit+0xc8>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021bc:	4413      	add	r3, r2
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	011a      	lsls	r2, r3, #4
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	4413      	add	r3, r2
 80021ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021da:	b29a      	uxth	r2, r3
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	801a      	strh	r2, [r3, #0]
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f2:	801a      	strh	r2, [r3, #0]
 80021f4:	e01a      	b.n	800222c <HAL_PCD_EP_DB_Transmit+0xfe>
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	785b      	ldrb	r3, [r3, #1]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d116      	bne.n	800222c <HAL_PCD_EP_DB_Transmit+0xfe>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220c:	b29b      	uxth	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002212:	4413      	add	r3, r2
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	011a      	lsls	r2, r3, #4
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	4413      	add	r3, r2
 8002220:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002228:	2200      	movs	r2, #0
 800222a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	785b      	ldrb	r3, [r3, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d126      	bne.n	8002288 <HAL_PCD_EP_DB_Transmit+0x15a>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	61fb      	str	r3, [r7, #28]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002248:	b29b      	uxth	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4413      	add	r3, r2
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	011a      	lsls	r2, r3, #4
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	4413      	add	r3, r2
 800225c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800226c:	b29a      	uxth	r2, r3
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	801a      	strh	r2, [r3, #0]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800227c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002280:	b29a      	uxth	r2, r3
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	801a      	strh	r2, [r3, #0]
 8002286:	e017      	b.n	80022b8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	785b      	ldrb	r3, [r3, #1]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d113      	bne.n	80022b8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002298:	b29b      	uxth	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	4413      	add	r3, r2
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	011a      	lsls	r2, r3, #4
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	4413      	add	r3, r2
 80022ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022b0:	623b      	str	r3, [r7, #32]
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	2200      	movs	r2, #0
 80022b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4619      	mov	r1, r3
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f007 fa65 	bl	800978e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 82fc 	beq.w	80028c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ea:	82fb      	strh	r3, [r7, #22]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	441a      	add	r2, r3
 80022fa:	8afb      	ldrh	r3, [r7, #22]
 80022fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800230c:	b29b      	uxth	r3, r3
 800230e:	8013      	strh	r3, [r2, #0]
 8002310:	e2da      	b.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d021      	beq.n	8002360 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	881b      	ldrh	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002336:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	441a      	add	r2, r3
 8002348:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800234c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002354:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235c:	b29b      	uxth	r3, r3
 800235e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002366:	2b01      	cmp	r3, #1
 8002368:	f040 82ae 	bne.w	80028c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002374:	441a      	add	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002382:	441a      	add	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	6a1a      	ldr	r2, [r3, #32]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	d30b      	bcc.n	80023ac <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023a4:	1ad2      	subs	r2, r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	621a      	str	r2, [r3, #32]
 80023aa:	e017      	b.n	80023dc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d108      	bne.n	80023c6 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80023b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023c4:	e00a      	b.n	80023dc <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	785b      	ldrb	r3, [r3, #1]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d165      	bne.n	80024b0 <HAL_PCD_EP_DB_Transmit+0x382>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f8:	4413      	add	r3, r2
 80023fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	011a      	lsls	r2, r3, #4
 8002402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002404:	4413      	add	r3, r2
 8002406:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800240a:	63bb      	str	r3, [r7, #56]	; 0x38
 800240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002416:	b29a      	uxth	r2, r3
 8002418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241a:	801a      	strh	r2, [r3, #0]
 800241c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002420:	2b3e      	cmp	r3, #62	; 0x3e
 8002422:	d91d      	bls.n	8002460 <HAL_PCD_EP_DB_Transmit+0x332>
 8002424:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	64bb      	str	r3, [r7, #72]	; 0x48
 800242c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002430:	f003 031f 	and.w	r3, r3, #31
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <HAL_PCD_EP_DB_Transmit+0x310>
 8002438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800243a:	3b01      	subs	r3, #1
 800243c:	64bb      	str	r3, [r7, #72]	; 0x48
 800243e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	b29a      	uxth	r2, r3
 8002444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002446:	b29b      	uxth	r3, r3
 8002448:	029b      	lsls	r3, r3, #10
 800244a:	b29b      	uxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002458:	b29a      	uxth	r2, r3
 800245a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245c:	801a      	strh	r2, [r3, #0]
 800245e:	e044      	b.n	80024ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002460:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <HAL_PCD_EP_DB_Transmit+0x350>
 8002468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002476:	b29a      	uxth	r2, r3
 8002478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247a:	801a      	strh	r2, [r3, #0]
 800247c:	e035      	b.n	80024ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 800247e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002482:	085b      	lsrs	r3, r3, #1
 8002484:	64bb      	str	r3, [r7, #72]	; 0x48
 8002486:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002494:	3301      	adds	r3, #1
 8002496:	64bb      	str	r3, [r7, #72]	; 0x48
 8002498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	b29a      	uxth	r2, r3
 800249e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	029b      	lsls	r3, r3, #10
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	4313      	orrs	r3, r2
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	801a      	strh	r2, [r3, #0]
 80024ae:	e01c      	b.n	80024ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	785b      	ldrb	r3, [r3, #1]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d118      	bne.n	80024ea <HAL_PCD_EP_DB_Transmit+0x3bc>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	647b      	str	r3, [r7, #68]	; 0x44
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024cc:	4413      	add	r3, r2
 80024ce:	647b      	str	r3, [r7, #68]	; 0x44
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	011a      	lsls	r2, r3, #4
 80024d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d8:	4413      	add	r3, r2
 80024da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024de:	643b      	str	r3, [r7, #64]	; 0x40
 80024e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	6959      	ldr	r1, [r3, #20]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	891a      	ldrh	r2, [r3, #8]
 80024f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	f004 fb03 	bl	8006b06 <USB_WritePMA>
 8002500:	e1e2      	b.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	4413      	add	r3, r2
 8002516:	3306      	adds	r3, #6
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	4413      	add	r3, r2
 8002520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800252a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002536:	429a      	cmp	r2, r3
 8002538:	d307      	bcc.n	800254a <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	699a      	ldr	r2, [r3, #24]
 800253e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002542:	1ad2      	subs	r2, r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	619a      	str	r2, [r3, #24]
 8002548:	e002      	b.n	8002550 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f040 80c0 	bne.w	80026da <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	785b      	ldrb	r3, [r3, #1]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d126      	bne.n	80025b0 <HAL_PCD_EP_DB_Transmit+0x482>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002570:	b29b      	uxth	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002576:	4413      	add	r3, r2
 8002578:	67fb      	str	r3, [r7, #124]	; 0x7c
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	011a      	lsls	r2, r3, #4
 8002580:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002582:	4413      	add	r3, r2
 8002584:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002588:	67bb      	str	r3, [r7, #120]	; 0x78
 800258a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002594:	b29a      	uxth	r2, r3
 8002596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002598:	801a      	strh	r2, [r3, #0]
 800259a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ac:	801a      	strh	r2, [r3, #0]
 80025ae:	e01a      	b.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	785b      	ldrb	r3, [r3, #1]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d116      	bne.n	80025e6 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	667b      	str	r3, [r7, #100]	; 0x64
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025cc:	4413      	add	r3, r2
 80025ce:	667b      	str	r3, [r7, #100]	; 0x64
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	011a      	lsls	r2, r3, #4
 80025d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d8:	4413      	add	r3, r2
 80025da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025de:	663b      	str	r3, [r7, #96]	; 0x60
 80025e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025e2:	2200      	movs	r2, #0
 80025e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	677b      	str	r3, [r7, #116]	; 0x74
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	785b      	ldrb	r3, [r3, #1]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d12b      	bne.n	800264c <HAL_PCD_EP_DB_Transmit+0x51e>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002608:	4413      	add	r3, r2
 800260a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	011a      	lsls	r2, r3, #4
 8002612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002614:	4413      	add	r3, r2
 8002616:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800261a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800261e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800262a:	b29a      	uxth	r2, r3
 800262c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002636:	881b      	ldrh	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800263e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002642:	b29a      	uxth	r2, r3
 8002644:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002648:	801a      	strh	r2, [r3, #0]
 800264a:	e017      	b.n	800267c <HAL_PCD_EP_DB_Transmit+0x54e>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	785b      	ldrb	r3, [r3, #1]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d113      	bne.n	800267c <HAL_PCD_EP_DB_Transmit+0x54e>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265c:	b29b      	uxth	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002662:	4413      	add	r3, r2
 8002664:	677b      	str	r3, [r7, #116]	; 0x74
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	011a      	lsls	r2, r3, #4
 800266c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800266e:	4413      	add	r3, r2
 8002670:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002674:	673b      	str	r3, [r7, #112]	; 0x70
 8002676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002678:	2200      	movs	r2, #0
 800267a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f007 f883 	bl	800978e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 811a 	bne.w	80028c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	441a      	add	r2, r3
 80026c0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80026c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	8013      	strh	r3, [r2, #0]
 80026d8:	e0f6      	b.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d121      	bne.n	8002728 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	441a      	add	r2, r3
 8002710:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800271c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002724:	b29b      	uxth	r3, r3
 8002726:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800272e:	2b01      	cmp	r3, #1
 8002730:	f040 80ca 	bne.w	80028c8 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800273c:	441a      	add	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	69da      	ldr	r2, [r3, #28]
 8002746:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800274a:	441a      	add	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	6a1a      	ldr	r2, [r3, #32]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	429a      	cmp	r2, r3
 800275a:	d30b      	bcc.n	8002774 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6a1a      	ldr	r2, [r3, #32]
 8002768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800276c:	1ad2      	subs	r2, r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	621a      	str	r2, [r3, #32]
 8002772:	e017      	b.n	80027a4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d108      	bne.n	800278e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800277c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002780:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800278c:	e00a      	b.n	80027a4 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2200      	movs	r2, #0
 800279a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	657b      	str	r3, [r7, #84]	; 0x54
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	785b      	ldrb	r3, [r3, #1]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d165      	bne.n	800287e <HAL_PCD_EP_DB_Transmit+0x750>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c6:	4413      	add	r3, r2
 80027c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	011a      	lsls	r2, r3, #4
 80027d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d2:	4413      	add	r3, r2
 80027d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80027da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027ee:	2b3e      	cmp	r3, #62	; 0x3e
 80027f0:	d91d      	bls.n	800282e <HAL_PCD_EP_DB_Transmit+0x700>
 80027f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80027fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_PCD_EP_DB_Transmit+0x6de>
 8002806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002808:	3b01      	subs	r3, #1
 800280a:	66bb      	str	r3, [r7, #104]	; 0x68
 800280c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	b29a      	uxth	r2, r3
 8002812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002814:	b29b      	uxth	r3, r3
 8002816:	029b      	lsls	r3, r3, #10
 8002818:	b29b      	uxth	r3, r3
 800281a:	4313      	orrs	r3, r2
 800281c:	b29b      	uxth	r3, r3
 800281e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002826:	b29a      	uxth	r2, r3
 8002828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800282a:	801a      	strh	r2, [r3, #0]
 800282c:	e041      	b.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x784>
 800282e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <HAL_PCD_EP_DB_Transmit+0x71e>
 8002836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002844:	b29a      	uxth	r2, r3
 8002846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002848:	801a      	strh	r2, [r3, #0]
 800284a:	e032      	b.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x784>
 800284c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	66bb      	str	r3, [r7, #104]	; 0x68
 8002854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HAL_PCD_EP_DB_Transmit+0x738>
 8002860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002862:	3301      	adds	r3, #1
 8002864:	66bb      	str	r3, [r7, #104]	; 0x68
 8002866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b29a      	uxth	r2, r3
 800286c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286e:	b29b      	uxth	r3, r3
 8002870:	029b      	lsls	r3, r3, #10
 8002872:	b29b      	uxth	r3, r3
 8002874:	4313      	orrs	r3, r2
 8002876:	b29a      	uxth	r2, r3
 8002878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800287a:	801a      	strh	r2, [r3, #0]
 800287c:	e019      	b.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x784>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	785b      	ldrb	r3, [r3, #1]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d115      	bne.n	80028b2 <HAL_PCD_EP_DB_Transmit+0x784>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002894:	4413      	add	r3, r2
 8002896:	657b      	str	r3, [r7, #84]	; 0x54
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	011a      	lsls	r2, r3, #4
 800289e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a0:	4413      	add	r3, r2
 80028a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028a6:	653b      	str	r3, [r7, #80]	; 0x50
 80028a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	6959      	ldr	r1, [r3, #20]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	895a      	ldrh	r2, [r3, #10]
 80028be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f004 f91f 	bl	8006b06 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e2:	82bb      	strh	r3, [r7, #20]
 80028e4:	8abb      	ldrh	r3, [r7, #20]
 80028e6:	f083 0310 	eor.w	r3, r3, #16
 80028ea:	82bb      	strh	r3, [r7, #20]
 80028ec:	8abb      	ldrh	r3, [r7, #20]
 80028ee:	f083 0320 	eor.w	r3, r3, #32
 80028f2:	82bb      	strh	r3, [r7, #20]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	8abb      	ldrh	r3, [r7, #20]
 8002904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800290c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002914:	b29b      	uxth	r3, r3
 8002916:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3790      	adds	r7, #144	; 0x90
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002922:	b480      	push	{r7}
 8002924:	b087      	sub	sp, #28
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	817b      	strh	r3, [r7, #10]
 8002930:	4613      	mov	r3, r2
 8002932:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002934:	897b      	ldrh	r3, [r7, #10]
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00b      	beq.n	8002958 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002940:	897b      	ldrh	r3, [r7, #10]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e009      	b.n	800296c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002958:	897a      	ldrh	r2, [r7, #10]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4413      	add	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800296c:	893b      	ldrh	r3, [r7, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d107      	bne.n	8002982 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	b29a      	uxth	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	80da      	strh	r2, [r3, #6]
 8002980:	e00b      	b.n	800299a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2201      	movs	r2, #1
 8002986:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	b29a      	uxth	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0c1b      	lsrs	r3, r3, #16
 8002994:	b29a      	uxth	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e272      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8087 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c8:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d00c      	beq.n	80029ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029d4:	4b8f      	ldr	r3, [pc, #572]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d112      	bne.n	8002a06 <HAL_RCC_OscConfig+0x5e>
 80029e0:	4b8c      	ldr	r3, [pc, #560]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ec:	d10b      	bne.n	8002a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ee:	4b89      	ldr	r3, [pc, #548]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d06c      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x12c>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d168      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e24c      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x76>
 8002a10:	4b80      	ldr	r3, [pc, #512]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a7f      	ldr	r2, [pc, #508]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	e02e      	b.n	8002a7c <HAL_RCC_OscConfig+0xd4>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x98>
 8002a26:	4b7b      	ldr	r3, [pc, #492]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a7a      	ldr	r2, [pc, #488]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b78      	ldr	r3, [pc, #480]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a77      	ldr	r2, [pc, #476]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e01d      	b.n	8002a7c <HAL_RCC_OscConfig+0xd4>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0xbc>
 8002a4a:	4b72      	ldr	r3, [pc, #456]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a71      	ldr	r2, [pc, #452]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a6e      	ldr	r2, [pc, #440]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0xd4>
 8002a64:	4b6b      	ldr	r3, [pc, #428]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a6a      	ldr	r2, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6e:	6013      	str	r3, [r2, #0]
 8002a70:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a67      	ldr	r2, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d013      	beq.n	8002aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fd feea 	bl	800085c <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fd fee6 	bl	800085c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e200      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9e:	4b5d      	ldr	r3, [pc, #372]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0xe4>
 8002aaa:	e014      	b.n	8002ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fd fed6 	bl	800085c <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fd fed2 	bl	800085c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	; 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1ec      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x10c>
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d063      	beq.n	8002baa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ae2:	4b4c      	ldr	r3, [pc, #304]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002aee:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 030c 	and.w	r3, r3, #12
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d11c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x18c>
 8002afa:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_RCC_OscConfig+0x176>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1c0      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4939      	ldr	r1, [pc, #228]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	e03a      	b.n	8002baa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3c:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fd fe8b 	bl	800085c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7fd fe87 	bl	800085c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1a1      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4927      	ldr	r1, [pc, #156]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
 8002b7c:	e015      	b.n	8002baa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7e:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_RCC_OscConfig+0x270>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fd fe6a 	bl	800085c <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7fd fe66 	bl	800085c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e180      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d03a      	beq.n	8002c2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d019      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc4:	f7fd fe4a 	bl	800085c <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7fd fe46 	bl	800085c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e160      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bea:	2001      	movs	r0, #1
 8002bec:	f000 face 	bl	800318c <RCC_Delay>
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_RCC_OscConfig+0x274>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf8:	f7fd fe30 	bl	800085c <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfe:	e00f      	b.n	8002c20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c00:	f7fd fe2c 	bl	800085c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d908      	bls.n	8002c20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e146      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
 8002c12:	bf00      	nop
 8002c14:	40021000 	.word	0x40021000
 8002c18:	42420000 	.word	0x42420000
 8002c1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	4b92      	ldr	r3, [pc, #584]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e9      	bne.n	8002c00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80a6 	beq.w	8002d86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3e:	4b8b      	ldr	r3, [pc, #556]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10d      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	4a87      	ldr	r2, [pc, #540]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	61d3      	str	r3, [r2, #28]
 8002c56:	4b85      	ldr	r3, [pc, #532]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b82      	ldr	r3, [pc, #520]	; (8002e70 <HAL_RCC_OscConfig+0x4c8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d118      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c72:	4b7f      	ldr	r3, [pc, #508]	; (8002e70 <HAL_RCC_OscConfig+0x4c8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7e      	ldr	r2, [pc, #504]	; (8002e70 <HAL_RCC_OscConfig+0x4c8>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7e:	f7fd fded 	bl	800085c <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c86:	f7fd fde9 	bl	800085c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b64      	cmp	r3, #100	; 0x64
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e103      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b75      	ldr	r3, [pc, #468]	; (8002e70 <HAL_RCC_OscConfig+0x4c8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x312>
 8002cac:	4b6f      	ldr	r3, [pc, #444]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	4a6e      	ldr	r2, [pc, #440]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6213      	str	r3, [r2, #32]
 8002cb8:	e02d      	b.n	8002d16 <HAL_RCC_OscConfig+0x36e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x334>
 8002cc2:	4b6a      	ldr	r3, [pc, #424]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	4a69      	ldr	r2, [pc, #420]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	6213      	str	r3, [r2, #32]
 8002cce:	4b67      	ldr	r3, [pc, #412]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	4a66      	ldr	r2, [pc, #408]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	f023 0304 	bic.w	r3, r3, #4
 8002cd8:	6213      	str	r3, [r2, #32]
 8002cda:	e01c      	b.n	8002d16 <HAL_RCC_OscConfig+0x36e>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	2b05      	cmp	r3, #5
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCC_OscConfig+0x356>
 8002ce4:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	4a60      	ldr	r2, [pc, #384]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	f043 0304 	orr.w	r3, r3, #4
 8002cee:	6213      	str	r3, [r2, #32]
 8002cf0:	4b5e      	ldr	r3, [pc, #376]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	4a5d      	ldr	r2, [pc, #372]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6213      	str	r3, [r2, #32]
 8002cfc:	e00b      	b.n	8002d16 <HAL_RCC_OscConfig+0x36e>
 8002cfe:	4b5b      	ldr	r3, [pc, #364]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a5a      	ldr	r2, [pc, #360]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6213      	str	r3, [r2, #32]
 8002d0a:	4b58      	ldr	r3, [pc, #352]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	4a57      	ldr	r2, [pc, #348]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d015      	beq.n	8002d4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1e:	f7fd fd9d 	bl	800085c <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	e00a      	b.n	8002d3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d26:	f7fd fd99 	bl	800085c <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e0b1      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	4b4b      	ldr	r3, [pc, #300]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0ee      	beq.n	8002d26 <HAL_RCC_OscConfig+0x37e>
 8002d48:	e014      	b.n	8002d74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7fd fd87 	bl	800085c <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d52:	f7fd fd83 	bl	800085c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e09b      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ee      	bne.n	8002d52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d74:	7dfb      	ldrb	r3, [r7, #23]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d105      	bne.n	8002d86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	4a3b      	ldr	r2, [pc, #236]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 8087 	beq.w	8002e9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d90:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 030c 	and.w	r3, r3, #12
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d061      	beq.n	8002e60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d146      	bne.n	8002e32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da4:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fd fd57 	bl	800085c <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fd fd53 	bl	800085c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e06d      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc4:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd8:	d108      	bne.n	8002dec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dda:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	4921      	ldr	r1, [pc, #132]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dec:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a19      	ldr	r1, [r3, #32]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	491b      	ldr	r1, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e04:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fd fd27 	bl	800085c <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fd fd23 	bl	800085c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e03d      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x46a>
 8002e30:	e035      	b.n	8002e9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e32:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <HAL_RCC_OscConfig+0x4cc>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fd fd10 	bl	800085c <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fd fd0c 	bl	800085c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e026      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1f0      	bne.n	8002e40 <HAL_RCC_OscConfig+0x498>
 8002e5e:	e01e      	b.n	8002e9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d107      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e019      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40007000 	.word	0x40007000
 8002e74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_OscConfig+0x500>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d106      	bne.n	8002e9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d001      	beq.n	8002e9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e000      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40021000 	.word	0x40021000

08002eac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0d0      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ec0:	4b6a      	ldr	r3, [pc, #424]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d910      	bls.n	8002ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ece:	4b67      	ldr	r3, [pc, #412]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 0207 	bic.w	r2, r3, #7
 8002ed6:	4965      	ldr	r1, [pc, #404]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d001      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0b8      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f08:	4b59      	ldr	r3, [pc, #356]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a58      	ldr	r2, [pc, #352]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f20:	4b53      	ldr	r3, [pc, #332]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a52      	ldr	r2, [pc, #328]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f2c:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	494d      	ldr	r1, [pc, #308]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d040      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d107      	bne.n	8002f62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d115      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e07f      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d107      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f6a:	4b41      	ldr	r3, [pc, #260]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d109      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e073      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f7a:	4b3d      	ldr	r3, [pc, #244]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e06b      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4936      	ldr	r1, [pc, #216]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f9c:	f7fd fc5e 	bl	800085c <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa4:	f7fd fc5a 	bl	800085c <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e053      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 020c 	and.w	r2, r3, #12
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1eb      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b27      	ldr	r3, [pc, #156]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d210      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f023 0207 	bic.w	r2, r3, #7
 8002fe2:	4922      	ldr	r1, [pc, #136]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fea:	4b20      	ldr	r3, [pc, #128]	; (800306c <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e032      	b.n	8003062 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003008:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4916      	ldr	r1, [pc, #88]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8003016:	4313      	orrs	r3, r2
 8003018:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	490e      	ldr	r1, [pc, #56]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800303a:	f000 f821 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 800303e:	4602      	mov	r2, r0
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_ClockConfig+0x1c4>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	490a      	ldr	r1, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x1c8>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <HAL_RCC_ClockConfig+0x1cc>)
 8003054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_RCC_ClockConfig+0x1d0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fbbc 	bl	80007d8 <HAL_InitTick>

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40022000 	.word	0x40022000
 8003070:	40021000 	.word	0x40021000
 8003074:	08009cd4 	.word	0x08009cd4
 8003078:	20000000 	.word	0x20000000
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800309a:	4b1e      	ldr	r3, [pc, #120]	; (8003114 <HAL_RCC_GetSysClockFreq+0x94>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d002      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x30>
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d003      	beq.n	80030b6 <HAL_RCC_GetSysClockFreq+0x36>
 80030ae:	e027      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030b0:	4b19      	ldr	r3, [pc, #100]	; (8003118 <HAL_RCC_GetSysClockFreq+0x98>)
 80030b2:	613b      	str	r3, [r7, #16]
      break;
 80030b4:	e027      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	0c9b      	lsrs	r3, r3, #18
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	4a17      	ldr	r2, [pc, #92]	; (800311c <HAL_RCC_GetSysClockFreq+0x9c>)
 80030c0:	5cd3      	ldrb	r3, [r2, r3]
 80030c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d010      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_RCC_GetSysClockFreq+0x94>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	0c5b      	lsrs	r3, r3, #17
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	4a11      	ldr	r2, [pc, #68]	; (8003120 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <HAL_RCC_GetSysClockFreq+0x98>)
 80030e2:	fb03 f202 	mul.w	r2, r3, r2
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e004      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030f4:	fb02 f303 	mul.w	r3, r2, r3
 80030f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	613b      	str	r3, [r7, #16]
      break;
 80030fe:	e002      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_RCC_GetSysClockFreq+0x98>)
 8003102:	613b      	str	r3, [r7, #16]
      break;
 8003104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003106:	693b      	ldr	r3, [r7, #16]
}
 8003108:	4618      	mov	r0, r3
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	007a1200 	.word	0x007a1200
 800311c:	08009cec 	.word	0x08009cec
 8003120:	08009cfc 	.word	0x08009cfc
 8003124:	003d0900 	.word	0x003d0900

08003128 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800312c:	4b02      	ldr	r3, [pc, #8]	; (8003138 <HAL_RCC_GetHCLKFreq+0x10>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	20000000 	.word	0x20000000

0800313c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003140:	f7ff fff2 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	4903      	ldr	r1, [pc, #12]	; (8003160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003158:	4618      	mov	r0, r3
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	08009ce4 	.word	0x08009ce4

08003164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003168:	f7ff ffde 	bl	8003128 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	0adb      	lsrs	r3, r3, #11
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4903      	ldr	r1, [pc, #12]	; (8003188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003180:	4618      	mov	r0, r3
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40021000 	.word	0x40021000
 8003188:	08009ce4 	.word	0x08009ce4

0800318c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <RCC_Delay+0x34>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <RCC_Delay+0x38>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	0a5b      	lsrs	r3, r3, #9
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031a8:	bf00      	nop
  }
  while (Delay --);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1e5a      	subs	r2, r3, #1
 80031ae:	60fa      	str	r2, [r7, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f9      	bne.n	80031a8 <RCC_Delay+0x1c>
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	20000000 	.word	0x20000000
 80031c4:	10624dd3 	.word	0x10624dd3

080031c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d07d      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031e4:	2300      	movs	r3, #0
 80031e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e8:	4b4f      	ldr	r3, [pc, #316]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10d      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	4a4b      	ldr	r2, [pc, #300]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fe:	61d3      	str	r3, [r2, #28]
 8003200:	4b49      	ldr	r3, [pc, #292]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320c:	2301      	movs	r3, #1
 800320e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003210:	4b46      	ldr	r3, [pc, #280]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d118      	bne.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321c:	4b43      	ldr	r3, [pc, #268]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a42      	ldr	r2, [pc, #264]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003226:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003228:	f7fd fb18 	bl	800085c <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	e008      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003230:	f7fd fb14 	bl	800085c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e06d      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003242:	4b3a      	ldr	r3, [pc, #232]	; (800332c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800324e:	4b36      	ldr	r3, [pc, #216]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003256:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d02e      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	429a      	cmp	r2, r3
 800326a:	d027      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800326c:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003274:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003276:	4b2e      	ldr	r3, [pc, #184]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800327c:	4b2c      	ldr	r3, [pc, #176]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003282:	4a29      	ldr	r2, [pc, #164]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d014      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fd fae3 	bl	800085c <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	e00a      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fd fadf 	bl	800085c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e036      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b0:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ee      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032bc:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4917      	ldr	r1, [pc, #92]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d105      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	4a13      	ldr	r2, [pc, #76]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	490b      	ldr	r1, [pc, #44]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d008      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	4904      	ldr	r1, [pc, #16]	; (8003328 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	40007000 	.word	0x40007000
 8003330:	42420440 	.word	0x42420440

08003334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e041      	b.n	80033ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d106      	bne.n	8003360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f7fd f924 	bl	80005a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3304      	adds	r3, #4
 8003370:	4619      	mov	r1, r3
 8003372:	4610      	mov	r0, r2
 8003374:	f000 f8f0 	bl	8003558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e0ae      	b.n	8003550 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b0c      	cmp	r3, #12
 80033fe:	f200 809f 	bhi.w	8003540 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003402:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	0800343d 	.word	0x0800343d
 800340c:	08003541 	.word	0x08003541
 8003410:	08003541 	.word	0x08003541
 8003414:	08003541 	.word	0x08003541
 8003418:	0800347d 	.word	0x0800347d
 800341c:	08003541 	.word	0x08003541
 8003420:	08003541 	.word	0x08003541
 8003424:	08003541 	.word	0x08003541
 8003428:	080034bf 	.word	0x080034bf
 800342c:	08003541 	.word	0x08003541
 8003430:	08003541 	.word	0x08003541
 8003434:	08003541 	.word	0x08003541
 8003438:	080034ff 	.word	0x080034ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68b9      	ldr	r1, [r7, #8]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f8ea 	bl	800361c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0208 	orr.w	r2, r2, #8
 8003456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0204 	bic.w	r2, r2, #4
 8003466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6999      	ldr	r1, [r3, #24]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	619a      	str	r2, [r3, #24]
      break;
 800347a:	e064      	b.n	8003546 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 f930 	bl	80036e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6999      	ldr	r1, [r3, #24]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	021a      	lsls	r2, r3, #8
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	619a      	str	r2, [r3, #24]
      break;
 80034bc:	e043      	b.n	8003546 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68b9      	ldr	r1, [r7, #8]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 f979 	bl	80037bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69da      	ldr	r2, [r3, #28]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f042 0208 	orr.w	r2, r2, #8
 80034d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0204 	bic.w	r2, r2, #4
 80034e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69d9      	ldr	r1, [r3, #28]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	61da      	str	r2, [r3, #28]
      break;
 80034fc:	e023      	b.n	8003546 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68b9      	ldr	r1, [r7, #8]
 8003504:	4618      	mov	r0, r3
 8003506:	f000 f9c3 	bl	8003890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69da      	ldr	r2, [r3, #28]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69d9      	ldr	r1, [r3, #28]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	021a      	lsls	r2, r3, #8
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	61da      	str	r2, [r3, #28]
      break;
 800353e:	e002      	b.n	8003546 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	75fb      	strb	r3, [r7, #23]
      break;
 8003544:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800354e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <TIM_Base_SetConfig+0xb8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00b      	beq.n	8003588 <TIM_Base_SetConfig+0x30>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003576:	d007      	beq.n	8003588 <TIM_Base_SetConfig+0x30>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a26      	ldr	r2, [pc, #152]	; (8003614 <TIM_Base_SetConfig+0xbc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d003      	beq.n	8003588 <TIM_Base_SetConfig+0x30>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a25      	ldr	r2, [pc, #148]	; (8003618 <TIM_Base_SetConfig+0xc0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d108      	bne.n	800359a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <TIM_Base_SetConfig+0xb8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00b      	beq.n	80035ba <TIM_Base_SetConfig+0x62>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a8:	d007      	beq.n	80035ba <TIM_Base_SetConfig+0x62>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a19      	ldr	r2, [pc, #100]	; (8003614 <TIM_Base_SetConfig+0xbc>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d003      	beq.n	80035ba <TIM_Base_SetConfig+0x62>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a18      	ldr	r2, [pc, #96]	; (8003618 <TIM_Base_SetConfig+0xc0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d108      	bne.n	80035cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a07      	ldr	r2, [pc, #28]	; (8003610 <TIM_Base_SetConfig+0xb8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d103      	bne.n	8003600 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	615a      	str	r2, [r3, #20]
}
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800

0800361c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f023 0201 	bic.w	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0303 	bic.w	r3, r3, #3
 8003652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f023 0302 	bic.w	r3, r3, #2
 8003664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a1c      	ldr	r2, [pc, #112]	; (80036e4 <TIM_OC1_SetConfig+0xc8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d10c      	bne.n	8003692 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0308 	bic.w	r3, r3, #8
 800367e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f023 0304 	bic.w	r3, r3, #4
 8003690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <TIM_OC1_SetConfig+0xc8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d111      	bne.n	80036be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	40012c00 	.word	0x40012c00

080036e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f023 0210 	bic.w	r2, r3, #16
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0320 	bic.w	r3, r3, #32
 8003732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a1d      	ldr	r2, [pc, #116]	; (80037b8 <TIM_OC2_SetConfig+0xd0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d10d      	bne.n	8003764 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800374e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003762:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <TIM_OC2_SetConfig+0xd0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d113      	bne.n	8003794 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003772:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800377a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	621a      	str	r2, [r3, #32]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr
 80037b8:	40012c00 	.word	0x40012c00

080037bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0303 	bic.w	r3, r3, #3
 80037f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a1d      	ldr	r2, [pc, #116]	; (800388c <TIM_OC3_SetConfig+0xd0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d10d      	bne.n	8003836 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003820:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a14      	ldr	r2, [pc, #80]	; (800388c <TIM_OC3_SetConfig+0xd0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d113      	bne.n	8003866 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800384c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	621a      	str	r2, [r3, #32]
}
 8003880:	bf00      	nop
 8003882:	371c      	adds	r7, #28
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00

08003890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	021b      	lsls	r3, r3, #8
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	031b      	lsls	r3, r3, #12
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a0f      	ldr	r2, [pc, #60]	; (8003928 <TIM_OC4_SetConfig+0x98>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d109      	bne.n	8003904 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr
 8003928:	40012c00 	.word	0x40012c00

0800392c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003940:	2302      	movs	r3, #2
 8003942:	e046      	b.n	80039d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a16      	ldr	r2, [pc, #88]	; (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00e      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003990:	d009      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a10      	ldr	r2, [pc, #64]	; (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10c      	bne.n	80039c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3714      	adds	r7, #20
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40000400 	.word	0x40000400
 80039e4:	40000800 	.word	0x40000800

080039e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e042      	b.n	8003a80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fc fe16 	bl	8000640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	; 0x24
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fcd5 	bl	80043dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d112      	bne.n	8003ac8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_UART_Receive_IT+0x26>
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e00b      	b.n	8003aca <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	461a      	mov	r2, r3
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fab7 	bl	8004032 <UART_Start_Receive_IT>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	e000      	b.n	8003aca <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b0ba      	sub	sp, #232	; 0xe8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003b12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10f      	bne.n	8003b3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <HAL_UART_IRQHandler+0x66>
 8003b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fb93 	bl	800425e <UART_Receive_IT>
      return;
 8003b38:	e25b      	b.n	8003ff2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80de 	beq.w	8003d00 <HAL_UART_IRQHandler+0x22c>
 8003b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d106      	bne.n	8003b5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80d1 	beq.w	8003d00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_UART_IRQHandler+0xae>
 8003b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	f043 0201 	orr.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00b      	beq.n	8003ba6 <HAL_UART_IRQHandler+0xd2>
 8003b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	f043 0202 	orr.w	r2, r3, #2
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00b      	beq.n	8003bca <HAL_UART_IRQHandler+0xf6>
 8003bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	f043 0204 	orr.w	r2, r3, #4
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d011      	beq.n	8003bfa <HAL_UART_IRQHandler+0x126>
 8003bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	f043 0208 	orr.w	r2, r3, #8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 81f2 	beq.w	8003fe8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c08:	f003 0320 	and.w	r3, r3, #32
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_UART_IRQHandler+0x14e>
 8003c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fb1e 	bl	800425e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf14      	ite	ne
 8003c30:	2301      	movne	r3, #1
 8003c32:	2300      	moveq	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d103      	bne.n	8003c4e <HAL_UART_IRQHandler+0x17a>
 8003c46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d04f      	beq.n	8003cee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa28 	bl	80040a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d041      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3314      	adds	r3, #20
 8003c68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3314      	adds	r3, #20
 8003c8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ca6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1d9      	bne.n	8003c62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d013      	beq.n	8003cde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	4a7e      	ldr	r2, [pc, #504]	; (8003eb4 <HAL_UART_IRQHandler+0x3e0>)
 8003cbc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7fc ff1c 	bl	8000b00 <HAL_DMA_Abort_IT>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d016      	beq.n	8003cfc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cd8:	4610      	mov	r0, r2
 8003cda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cdc:	e00e      	b.n	8003cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f993 	bl	800400a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce4:	e00a      	b.n	8003cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f98f 	bl	800400a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	e006      	b.n	8003cfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f98b 	bl	800400a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003cfa:	e175      	b.n	8003fe8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	bf00      	nop
    return;
 8003cfe:	e173      	b.n	8003fe8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	f040 814f 	bne.w	8003fa8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8148 	beq.w	8003fa8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d1c:	f003 0310 	and.w	r3, r3, #16
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8141 	beq.w	8003fa8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 80b6 	beq.w	8003eb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8145 	beq.w	8003fec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	f080 813e 	bcs.w	8003fec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	f000 8088 	beq.w	8003e94 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	330c      	adds	r3, #12
 8003d8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003db0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003db4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dbc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1d9      	bne.n	8003d84 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3314      	adds	r3, #20
 8003dd6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3314      	adds	r3, #20
 8003df0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003df4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003df8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dfc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e1      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3314      	adds	r3, #20
 8003e12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e30:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e3      	bne.n	8003e0c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e64:	f023 0310 	bic.w	r3, r3, #16
 8003e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e76:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e78:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e3      	bne.n	8003e52 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fc fdfb 	bl	8000a8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f8b6 	bl	800401c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eb0:	e09c      	b.n	8003fec <HAL_UART_IRQHandler+0x518>
 8003eb2:	bf00      	nop
 8003eb4:	08004169 	.word	0x08004169
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 808e 	beq.w	8003ff0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8089 	beq.w	8003ff0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	330c      	adds	r3, #12
 8003efe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003f02:	647a      	str	r2, [r7, #68]	; 0x44
 8003f04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f0a:	e841 2300 	strex	r3, r2, [r1]
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1e3      	bne.n	8003ede <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	623b      	str	r3, [r7, #32]
   return(result);
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3314      	adds	r3, #20
 8003f36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f3a:	633a      	str	r2, [r7, #48]	; 0x30
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e3      	bne.n	8003f16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	330c      	adds	r3, #12
 8003f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	e853 3f00 	ldrex	r3, [r3]
 8003f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0310 	bic.w	r3, r3, #16
 8003f72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f80:	61fa      	str	r2, [r7, #28]
 8003f82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	69b9      	ldr	r1, [r7, #24]
 8003f86:	69fa      	ldr	r2, [r7, #28]
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e3      	bne.n	8003f5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f83b 	bl	800401c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fa6:	e023      	b.n	8003ff0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d009      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x4f4>
 8003fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d003      	beq.n	8003fc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 f8e5 	bl	8004190 <UART_Transmit_IT>
    return;
 8003fc6:	e014      	b.n	8003ff2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00e      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x51e>
 8003fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f924 	bl	800422e <UART_EndTransmit_IT>
    return;
 8003fe6:	e004      	b.n	8003ff2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003fe8:	bf00      	nop
 8003fea:	e002      	b.n	8003ff2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ff0:	bf00      	nop
  }
}
 8003ff2:	37e8      	adds	r7, #232	; 0xe8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	460b      	mov	r3, r1
 8004026:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr

08004032 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004032:	b480      	push	{r7}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	4613      	mov	r3, r2
 800403e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	88fa      	ldrh	r2, [r7, #6]
 800404a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2222      	movs	r2, #34	; 0x22
 800405c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d007      	beq.n	8004078 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004076:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0220 	orr.w	r2, r2, #32
 8004096:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr

080040a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b095      	sub	sp, #84	; 0x54
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	330c      	adds	r3, #12
 80040b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	330c      	adds	r3, #12
 80040ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040cc:	643a      	str	r2, [r7, #64]	; 0x40
 80040ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e5      	bne.n	80040ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3314      	adds	r3, #20
 80040e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3314      	adds	r3, #20
 80040fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004100:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e5      	bne.n	80040e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	2b01      	cmp	r3, #1
 800411a:	d119      	bne.n	8004150 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	330c      	adds	r3, #12
 8004122:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	e853 3f00 	ldrex	r3, [r3]
 800412a:	60bb      	str	r3, [r7, #8]
   return(result);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f023 0310 	bic.w	r3, r3, #16
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800413c:	61ba      	str	r2, [r7, #24]
 800413e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	6979      	ldr	r1, [r7, #20]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	613b      	str	r3, [r7, #16]
   return(result);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1e5      	bne.n	800411c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800415e:	bf00      	nop
 8004160:	3754      	adds	r7, #84	; 0x54
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7ff ff41 	bl	800400a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b21      	cmp	r3, #33	; 0x21
 80041a2:	d13e      	bne.n	8004222 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ac:	d114      	bne.n	80041d8 <UART_Transmit_IT+0x48>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d110      	bne.n	80041d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	461a      	mov	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	1c9a      	adds	r2, r3, #2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]
 80041d6:	e008      	b.n	80041ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	1c59      	adds	r1, r3, #1
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6211      	str	r1, [r2, #32]
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4619      	mov	r1, r3
 80041f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10f      	bne.n	800421e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800420c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68da      	ldr	r2, [r3, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800421c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e000      	b.n	8004224 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004222:	2302      	movs	r3, #2
  }
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr

0800422e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68da      	ldr	r2, [r3, #12]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004244:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fed2 	bl	8003ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b08c      	sub	sp, #48	; 0x30
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b22      	cmp	r3, #34	; 0x22
 8004270:	f040 80ae 	bne.w	80043d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427c:	d117      	bne.n	80042ae <UART_Receive_IT+0x50>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d113      	bne.n	80042ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004286:	2300      	movs	r3, #0
 8004288:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429c:	b29a      	uxth	r2, r3
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	1c9a      	adds	r2, r3, #2
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
 80042ac:	e026      	b.n	80042fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c0:	d007      	beq.n	80042d2 <UART_Receive_IT+0x74>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10a      	bne.n	80042e0 <UART_Receive_IT+0x82>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	e008      	b.n	80042f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	1c5a      	adds	r2, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29b      	uxth	r3, r3
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4619      	mov	r1, r3
 800430a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800430c:	2b00      	cmp	r3, #0
 800430e:	d15d      	bne.n	80043cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0220 	bic.w	r2, r2, #32
 800431e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800432e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	2b01      	cmp	r3, #1
 8004354:	d135      	bne.n	80043c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	330c      	adds	r3, #12
 8004362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	613b      	str	r3, [r7, #16]
   return(result);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f023 0310 	bic.w	r3, r3, #16
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437c:	623a      	str	r2, [r7, #32]
 800437e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	69f9      	ldr	r1, [r7, #28]
 8004382:	6a3a      	ldr	r2, [r7, #32]
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	61bb      	str	r3, [r7, #24]
   return(result);
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e5      	bne.n	800435c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b10      	cmp	r3, #16
 800439c:	d10a      	bne.n	80043b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043b8:	4619      	mov	r1, r3
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff fe2e 	bl	800401c <HAL_UARTEx_RxEventCallback>
 80043c0:	e002      	b.n	80043c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fb fec4 	bl	8000150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e002      	b.n	80043d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043cc:	2300      	movs	r3, #0
 80043ce:	e000      	b.n	80043d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
  }
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3730      	adds	r7, #48	; 0x30
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004416:	f023 030c 	bic.w	r3, r3, #12
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	430b      	orrs	r3, r1
 8004422:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2c      	ldr	r2, [pc, #176]	; (80044f0 <UART_SetConfig+0x114>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d103      	bne.n	800444c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004444:	f7fe fe8e 	bl	8003164 <HAL_RCC_GetPCLK2Freq>
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	e002      	b.n	8004452 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800444c:	f7fe fe76 	bl	800313c <HAL_RCC_GetPCLK1Freq>
 8004450:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	009a      	lsls	r2, r3, #2
 800445c:	441a      	add	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	4a22      	ldr	r2, [pc, #136]	; (80044f4 <UART_SetConfig+0x118>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	0119      	lsls	r1, r3, #4
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	009a      	lsls	r2, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	fbb2 f2f3 	udiv	r2, r2, r3
 8004488:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <UART_SetConfig+0x118>)
 800448a:	fba3 0302 	umull	r0, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	2064      	movs	r0, #100	; 0x64
 8004492:	fb00 f303 	mul.w	r3, r0, r3
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	3332      	adds	r3, #50	; 0x32
 800449c:	4a15      	ldr	r2, [pc, #84]	; (80044f4 <UART_SetConfig+0x118>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	095b      	lsrs	r3, r3, #5
 80044a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044a8:	4419      	add	r1, r3
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009a      	lsls	r2, r3, #2
 80044b4:	441a      	add	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <UART_SetConfig+0x118>)
 80044c2:	fba3 0302 	umull	r0, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2064      	movs	r0, #100	; 0x64
 80044ca:	fb00 f303 	mul.w	r3, r0, r3
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	3332      	adds	r3, #50	; 0x32
 80044d4:	4a07      	ldr	r2, [pc, #28]	; (80044f4 <UART_SetConfig+0x118>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f003 020f 	and.w	r2, r3, #15
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	440a      	add	r2, r1
 80044e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40013800 	.word	0x40013800
 80044f4:	51eb851f 	.word	0x51eb851f

080044f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044f8:	b084      	sub	sp, #16
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
 8004502:	f107 0014 	add.w	r0, r7, #20
 8004506:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	b004      	add	sp, #16
 8004516:	4770      	bx	lr

08004518 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004528:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800452c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	b29a      	uxth	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr

08004544 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800454c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004550:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	b29b      	uxth	r3, r3
 800455e:	43db      	mvns	r3, r3
 8004560:	b29b      	uxth	r3, r3
 8004562:	4013      	ands	r3, r2
 8004564:	b29a      	uxth	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004590:	b084      	sub	sp, #16
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	f107 0014 	add.w	r0, r7, #20
 800459e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	b004      	add	sp, #16
 80045ce:	4770      	bx	lr

080045d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b09d      	sub	sp, #116	; 0x74
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80045f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	78db      	ldrb	r3, [r3, #3]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d81f      	bhi.n	8004642 <USB_ActivateEndpoint+0x72>
 8004602:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <USB_ActivateEndpoint+0x38>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	08004619 	.word	0x08004619
 800460c:	08004635 	.word	0x08004635
 8004610:	0800464b 	.word	0x0800464b
 8004614:	08004627 	.word	0x08004627
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004618:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800461c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004620:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004624:	e012      	b.n	800464c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004626:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800462a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800462e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004632:	e00b      	b.n	800464c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004634:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800463c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004640:	e004      	b.n	800464c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004648:	e000      	b.n	800464c <USB_ActivateEndpoint+0x7c>
      break;
 800464a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800465a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800465e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466a:	b29b      	uxth	r3, r3
 800466c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	b29b      	uxth	r3, r3
 800467c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004684:	b29a      	uxth	r2, r3
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	4313      	orrs	r3, r2
 800468e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	441a      	add	r2, r3
 800469c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80046a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	7b1b      	ldrb	r3, [r3, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f040 8178 	bne.w	80049ae <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	785b      	ldrb	r3, [r3, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8084 	beq.w	80047d0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	4413      	add	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	011a      	lsls	r2, r3, #4
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	88db      	ldrh	r3, [r3, #6]
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	827b      	strh	r3, [r7, #18]
 800470a:	8a7b      	ldrh	r3, [r7, #18]
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01b      	beq.n	800474c <USB_ActivateEndpoint+0x17c>
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	823b      	strh	r3, [r7, #16]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	8a3b      	ldrh	r3, [r7, #16]
 8004738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800473c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004744:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004748:	b29b      	uxth	r3, r3
 800474a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	78db      	ldrb	r3, [r3, #3]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d020      	beq.n	8004796 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800476a:	81bb      	strh	r3, [r7, #12]
 800476c:	89bb      	ldrh	r3, [r7, #12]
 800476e:	f083 0320 	eor.w	r3, r3, #32
 8004772:	81bb      	strh	r3, [r7, #12]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	89bb      	ldrh	r3, [r7, #12]
 8004780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800478c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004790:	b29b      	uxth	r3, r3
 8004792:	8013      	strh	r3, [r2, #0]
 8004794:	e2d5      	b.n	8004d42 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ac:	81fb      	strh	r3, [r7, #14]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	441a      	add	r2, r3
 80047b8:	89fb      	ldrh	r3, [r7, #14]
 80047ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]
 80047ce:	e2b8      	b.n	8004d42 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	633b      	str	r3, [r7, #48]	; 0x30
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047da:	b29b      	uxth	r3, r3
 80047dc:	461a      	mov	r2, r3
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	4413      	add	r3, r2
 80047e2:	633b      	str	r3, [r7, #48]	; 0x30
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	011a      	lsls	r2, r3, #4
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80047f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	88db      	ldrh	r3, [r3, #6]
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	62bb      	str	r3, [r7, #40]	; 0x28
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480e:	b29b      	uxth	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	4413      	add	r3, r2
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	011a      	lsls	r2, r3, #4
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	4413      	add	r3, r2
 8004822:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004832:	b29a      	uxth	r2, r3
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	801a      	strh	r2, [r3, #0]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	2b3e      	cmp	r3, #62	; 0x3e
 800483e:	d91d      	bls.n	800487c <USB_ActivateEndpoint+0x2ac>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	095b      	lsrs	r3, r3, #5
 8004846:	66bb      	str	r3, [r7, #104]	; 0x68
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	2b00      	cmp	r3, #0
 8004852:	d102      	bne.n	800485a <USB_ActivateEndpoint+0x28a>
 8004854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004856:	3b01      	subs	r3, #1
 8004858:	66bb      	str	r3, [r7, #104]	; 0x68
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29a      	uxth	r2, r3
 8004860:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004862:	b29b      	uxth	r3, r3
 8004864:	029b      	lsls	r3, r3, #10
 8004866:	b29b      	uxth	r3, r3
 8004868:	4313      	orrs	r3, r2
 800486a:	b29b      	uxth	r3, r3
 800486c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004874:	b29a      	uxth	r2, r3
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	801a      	strh	r2, [r3, #0]
 800487a:	e026      	b.n	80048ca <USB_ActivateEndpoint+0x2fa>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <USB_ActivateEndpoint+0x2ca>
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29b      	uxth	r3, r3
 800488a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800488e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004892:	b29a      	uxth	r2, r3
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	801a      	strh	r2, [r3, #0]
 8004898:	e017      	b.n	80048ca <USB_ActivateEndpoint+0x2fa>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	085b      	lsrs	r3, r3, #1
 80048a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <USB_ActivateEndpoint+0x2e4>
 80048ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048b0:	3301      	adds	r3, #1
 80048b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	881b      	ldrh	r3, [r3, #0]
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048bc:	b29b      	uxth	r3, r3
 80048be:	029b      	lsls	r3, r3, #10
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	4313      	orrs	r3, r2
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80048d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01b      	beq.n	800491a <USB_ActivateEndpoint+0x34a>
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	881b      	ldrh	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f8:	843b      	strh	r3, [r7, #32]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	441a      	add	r2, r3
 8004904:	8c3b      	ldrh	r3, [r7, #32]
 8004906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800490a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800490e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004916:	b29b      	uxth	r3, r3
 8004918:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d124      	bne.n	800496c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004938:	83bb      	strh	r3, [r7, #28]
 800493a:	8bbb      	ldrh	r3, [r7, #28]
 800493c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004940:	83bb      	strh	r3, [r7, #28]
 8004942:	8bbb      	ldrh	r3, [r7, #28]
 8004944:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004948:	83bb      	strh	r3, [r7, #28]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	441a      	add	r2, r3
 8004954:	8bbb      	ldrh	r3, [r7, #28]
 8004956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800495a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800495e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004966:	b29b      	uxth	r3, r3
 8004968:	8013      	strh	r3, [r2, #0]
 800496a:	e1ea      	b.n	8004d42 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800497e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004982:	83fb      	strh	r3, [r7, #30]
 8004984:	8bfb      	ldrh	r3, [r7, #30]
 8004986:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800498a:	83fb      	strh	r3, [r7, #30]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	441a      	add	r2, r3
 8004996:	8bfb      	ldrh	r3, [r7, #30]
 8004998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	8013      	strh	r3, [r2, #0]
 80049ac:	e1c9      	b.n	8004d42 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	78db      	ldrb	r3, [r3, #3]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d11e      	bne.n	80049f4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	441a      	add	r2, r3
 80049da:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80049de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	8013      	strh	r3, [r2, #0]
 80049f2:	e01d      	b.n	8004a30 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	441a      	add	r2, r3
 8004a18:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a40:	4413      	add	r3, r2
 8004a42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	011a      	lsls	r2, r3, #4
 8004a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a52:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	891b      	ldrh	r3, [r3, #8]
 8004a58:	085b      	lsrs	r3, r3, #1
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a62:	801a      	strh	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	657b      	str	r3, [r7, #84]	; 0x54
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a74:	4413      	add	r3, r2
 8004a76:	657b      	str	r3, [r7, #84]	; 0x54
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	011a      	lsls	r2, r3, #4
 8004a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a86:	653b      	str	r3, [r7, #80]	; 0x50
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	895b      	ldrh	r3, [r3, #10]
 8004a8c:	085b      	lsrs	r3, r3, #1
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a96:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 8093 	bne.w	8004bc8 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	881b      	ldrh	r3, [r3, #0]
 8004aae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004ab2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01b      	beq.n	8004af6 <USB_ActivateEndpoint+0x526>
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	441a      	add	r2, r3
 8004ae0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004b04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01b      	beq.n	8004b46 <USB_ActivateEndpoint+0x576>
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b24:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	441a      	add	r2, r3
 8004b30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b5e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b64:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b66:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b6c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	8013      	strh	r3, [r2, #0]
 8004bc6:	e0bc      	b.n	8004d42 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004bd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01d      	beq.n	8004c20 <USB_ActivateEndpoint+0x650>
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004c30:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01d      	beq.n	8004c78 <USB_ActivateEndpoint+0x6a8>
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c52:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	441a      	add	r2, r3
 8004c60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	78db      	ldrb	r3, [r3, #3]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d024      	beq.n	8004cca <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c9e:	f083 0320 	eor.w	r3, r3, #32
 8004ca2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	441a      	add	r2, r3
 8004cb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	8013      	strh	r3, [r2, #0]
 8004cc8:	e01d      	b.n	8004d06 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	441a      	add	r2, r3
 8004cee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	441a      	add	r2, r3
 8004d2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004d42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3774      	adds	r7, #116	; 0x74
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b08d      	sub	sp, #52	; 0x34
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	7b1b      	ldrb	r3, [r3, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f040 808e 	bne.w	8004e80 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d044      	beq.n	8004df6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	81bb      	strh	r3, [r7, #12]
 8004d7a:	89bb      	ldrh	r3, [r7, #12]
 8004d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01b      	beq.n	8004dbc <USB_DeactivateEndpoint+0x6c>
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	881b      	ldrh	r3, [r3, #0]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	817b      	strh	r3, [r7, #10]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	897b      	ldrh	r3, [r7, #10]
 8004da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd2:	813b      	strh	r3, [r7, #8]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	441a      	add	r2, r3
 8004dde:	893b      	ldrh	r3, [r7, #8]
 8004de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	8013      	strh	r3, [r2, #0]
 8004df4:	e192      	b.n	800511c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	827b      	strh	r3, [r7, #18]
 8004e04:	8a7b      	ldrh	r3, [r7, #18]
 8004e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01b      	beq.n	8004e46 <USB_DeactivateEndpoint+0xf6>
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	4413      	add	r3, r2
 8004e18:	881b      	ldrh	r3, [r3, #0]
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e24:	823b      	strh	r3, [r7, #16]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	441a      	add	r2, r3
 8004e30:	8a3b      	ldrh	r3, [r7, #16]
 8004e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5c:	81fb      	strh	r3, [r7, #14]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	441a      	add	r2, r3
 8004e68:	89fb      	ldrh	r3, [r7, #14]
 8004e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	8013      	strh	r3, [r2, #0]
 8004e7e:	e14d      	b.n	800511c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f040 80a5 	bne.w	8004fd4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	843b      	strh	r3, [r7, #32]
 8004e98:	8c3b      	ldrh	r3, [r7, #32]
 8004e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01b      	beq.n	8004eda <USB_DeactivateEndpoint+0x18a>
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	83fb      	strh	r3, [r7, #30]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	8bfb      	ldrh	r3, [r7, #30]
 8004ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ece:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	83bb      	strh	r3, [r7, #28]
 8004ee8:	8bbb      	ldrh	r3, [r7, #28]
 8004eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01b      	beq.n	8004f2a <USB_DeactivateEndpoint+0x1da>
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f08:	837b      	strh	r3, [r7, #26]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	441a      	add	r2, r3
 8004f14:	8b7b      	ldrh	r3, [r7, #26]
 8004f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f40:	833b      	strh	r3, [r7, #24]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	441a      	add	r2, r3
 8004f4c:	8b3b      	ldrh	r3, [r7, #24]
 8004f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f78:	82fb      	strh	r3, [r7, #22]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	441a      	add	r2, r3
 8004f84:	8afb      	ldrh	r3, [r7, #22]
 8004f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb0:	82bb      	strh	r3, [r7, #20]
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	441a      	add	r2, r3
 8004fbc:	8abb      	ldrh	r3, [r7, #20]
 8004fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	8013      	strh	r3, [r2, #0]
 8004fd2:	e0a3      	b.n	800511c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004fe2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d01b      	beq.n	8005024 <USB_DeactivateEndpoint+0x2d4>
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	441a      	add	r2, r3
 800500e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800501c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005020:	b29b      	uxth	r3, r3
 8005022:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005032:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01b      	beq.n	8005074 <USB_DeactivateEndpoint+0x324>
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	853b      	strh	r3, [r7, #40]	; 0x28
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800506c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005070:	b29b      	uxth	r3, r3
 8005072:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	b29b      	uxth	r3, r3
 8005082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	441a      	add	r2, r3
 8005096:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	881b      	ldrh	r3, [r3, #0]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	441a      	add	r2, r3
 80050ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	441a      	add	r2, r3
 8005106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800510c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005118:	b29b      	uxth	r3, r3
 800511a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3734      	adds	r7, #52	; 0x34
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b0c2      	sub	sp, #264	; 0x108
 800512c:	af00      	add	r7, sp, #0
 800512e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005132:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005136:	6018      	str	r0, [r3, #0]
 8005138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005140:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	2b01      	cmp	r3, #1
 8005150:	f040 86b7 	bne.w	8005ec2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699a      	ldr	r2, [r3, #24]
 8005160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	429a      	cmp	r2, r3
 800516e:	d908      	bls.n	8005182 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005180:	e007      	b.n	8005192 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	7b1b      	ldrb	r3, [r3, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d13a      	bne.n	8005218 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80051a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6959      	ldr	r1, [r3, #20]
 80051ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	88da      	ldrh	r2, [r3, #6]
 80051ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80051c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051c8:	6800      	ldr	r0, [r0, #0]
 80051ca:	f001 fc9c 	bl	8006b06 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	613b      	str	r3, [r7, #16]
 80051da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	461a      	mov	r2, r3
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	011a      	lsls	r2, r3, #4
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	4413      	add	r3, r2
 8005204:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	f000 be1f 	b.w	8005e56 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	78db      	ldrb	r3, [r3, #3]
 8005224:	2b02      	cmp	r3, #2
 8005226:	f040 8462 	bne.w	8005aee <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800522a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6a1a      	ldr	r2, [r3, #32]
 8005236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	429a      	cmp	r2, r3
 8005244:	f240 83df 	bls.w	8005a06 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005276:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005280:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	441a      	add	r2, r3
 800528c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005298:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800529c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80052a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6a1a      	ldr	r2, [r3, #32]
 80052b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052b4:	1ad2      	subs	r2, r2, r3
 80052b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80052c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4413      	add	r3, r2
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29b      	uxth	r3, r3
 80052e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 81c7 	beq.w	8005678 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	633b      	str	r3, [r7, #48]	; 0x30
 80052f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	785b      	ldrb	r3, [r3, #1]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d177      	bne.n	80053f6 <USB_EPStartXfer+0x2ce>
 8005306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800530a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
 8005312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005320:	b29b      	uxth	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	4413      	add	r3, r2
 8005328:	62bb      	str	r3, [r7, #40]	; 0x28
 800532a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	011a      	lsls	r2, r3, #4
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	4413      	add	r3, r2
 800533c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	881b      	ldrh	r3, [r3, #0]
 8005346:	b29b      	uxth	r3, r3
 8005348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800534c:	b29a      	uxth	r2, r3
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	801a      	strh	r2, [r3, #0]
 8005352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005356:	2b3e      	cmp	r3, #62	; 0x3e
 8005358:	d921      	bls.n	800539e <USB_EPStartXfer+0x276>
 800535a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	2b00      	cmp	r3, #0
 800536e:	d104      	bne.n	800537a <USB_EPStartXfer+0x252>
 8005370:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005374:	3b01      	subs	r3, #1
 8005376:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29a      	uxth	r2, r3
 8005380:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005384:	b29b      	uxth	r3, r3
 8005386:	029b      	lsls	r3, r3, #10
 8005388:	b29b      	uxth	r3, r3
 800538a:	4313      	orrs	r3, r2
 800538c:	b29b      	uxth	r3, r3
 800538e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005396:	b29a      	uxth	r2, r3
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	801a      	strh	r2, [r3, #0]
 800539c:	e050      	b.n	8005440 <USB_EPStartXfer+0x318>
 800539e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <USB_EPStartXfer+0x294>
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	e041      	b.n	8005440 <USB_EPStartXfer+0x318>
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <USB_EPStartXfer+0x2b4>
 80053d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053d6:	3301      	adds	r3, #1
 80053d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	029b      	lsls	r3, r3, #10
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	4313      	orrs	r3, r2
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	e024      	b.n	8005440 <USB_EPStartXfer+0x318>
 80053f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d11c      	bne.n	8005440 <USB_EPStartXfer+0x318>
 8005406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800540a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005414:	b29b      	uxth	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541a:	4413      	add	r3, r2
 800541c:	633b      	str	r3, [r7, #48]	; 0x30
 800541e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	011a      	lsls	r2, r3, #4
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	4413      	add	r3, r2
 8005430:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543a:	b29a      	uxth	r2, r3
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	895b      	ldrh	r3, [r3, #10]
 800544c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6959      	ldr	r1, [r3, #20]
 800545c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005460:	b29b      	uxth	r3, r3
 8005462:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005466:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800546a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800546e:	6800      	ldr	r0, [r0, #0]
 8005470:	f001 fb49 	bl	8006b06 <USB_WritePMA>
            ep->xfer_buff += len;
 8005474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005484:	441a      	add	r2, r3
 8005486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6a1a      	ldr	r2, [r3, #32]
 800549e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d90f      	bls.n	80054ce <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80054ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6a1a      	ldr	r2, [r3, #32]
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054be:	1ad2      	subs	r2, r2, r3
 80054c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	621a      	str	r2, [r3, #32]
 80054cc:	e00e      	b.n	80054ec <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80054ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80054de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2200      	movs	r2, #0
 80054ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80054ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d177      	bne.n	80055ec <USB_EPStartXfer+0x4c4>
 80054fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800550c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005516:	b29b      	uxth	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	4413      	add	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	011a      	lsls	r2, r3, #4
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	4413      	add	r3, r2
 8005532:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005542:	b29a      	uxth	r2, r3
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554c:	2b3e      	cmp	r3, #62	; 0x3e
 800554e:	d921      	bls.n	8005594 <USB_EPStartXfer+0x46c>
 8005550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800555a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555e:	f003 031f 	and.w	r3, r3, #31
 8005562:	2b00      	cmp	r3, #0
 8005564:	d104      	bne.n	8005570 <USB_EPStartXfer+0x448>
 8005566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556a:	3b01      	subs	r3, #1
 800556c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29a      	uxth	r2, r3
 8005576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800557a:	b29b      	uxth	r3, r3
 800557c:	029b      	lsls	r3, r3, #10
 800557e:	b29b      	uxth	r3, r3
 8005580:	4313      	orrs	r3, r2
 8005582:	b29b      	uxth	r3, r3
 8005584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558c:	b29a      	uxth	r2, r3
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	e056      	b.n	8005642 <USB_EPStartXfer+0x51a>
 8005594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <USB_EPStartXfer+0x48a>
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	801a      	strh	r2, [r3, #0]
 80055b0:	e047      	b.n	8005642 <USB_EPStartXfer+0x51a>
 80055b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d004      	beq.n	80055d2 <USB_EPStartXfer+0x4aa>
 80055c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055cc:	3301      	adds	r3, #1
 80055ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055dc:	b29b      	uxth	r3, r3
 80055de:	029b      	lsls	r3, r3, #10
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	4313      	orrs	r3, r2
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	801a      	strh	r2, [r3, #0]
 80055ea:	e02a      	b.n	8005642 <USB_EPStartXfer+0x51a>
 80055ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d122      	bne.n	8005642 <USB_EPStartXfer+0x51a>
 80055fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005600:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	623b      	str	r3, [r7, #32]
 8005608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005616:	b29b      	uxth	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	4413      	add	r3, r2
 800561e:	623b      	str	r3, [r7, #32]
 8005620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	011a      	lsls	r2, r3, #4
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	4413      	add	r3, r2
 8005632:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005636:	61fb      	str	r3, [r7, #28]
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800563c:	b29a      	uxth	r2, r3
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	891b      	ldrh	r3, [r3, #8]
 800564e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6959      	ldr	r1, [r3, #20]
 800565e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005662:	b29b      	uxth	r3, r3
 8005664:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005668:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800566c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005670:	6800      	ldr	r0, [r0, #0]
 8005672:	f001 fa48 	bl	8006b06 <USB_WritePMA>
 8005676:	e3ee      	b.n	8005e56 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800567c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d177      	bne.n	8005778 <USB_EPStartXfer+0x650>
 8005688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800568c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	64bb      	str	r3, [r7, #72]	; 0x48
 8005694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a8:	4413      	add	r3, r2
 80056aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	011a      	lsls	r2, r3, #4
 80056ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056bc:	4413      	add	r3, r2
 80056be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056c2:	647b      	str	r3, [r7, #68]	; 0x44
 80056c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d2:	801a      	strh	r2, [r3, #0]
 80056d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d8:	2b3e      	cmp	r3, #62	; 0x3e
 80056da:	d921      	bls.n	8005720 <USB_EPStartXfer+0x5f8>
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ea:	f003 031f 	and.w	r3, r3, #31
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d104      	bne.n	80056fc <USB_EPStartXfer+0x5d4>
 80056f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056f6:	3b01      	subs	r3, #1
 80056f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80056fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	b29a      	uxth	r2, r3
 8005702:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005706:	b29b      	uxth	r3, r3
 8005708:	029b      	lsls	r3, r3, #10
 800570a:	b29b      	uxth	r3, r3
 800570c:	4313      	orrs	r3, r2
 800570e:	b29b      	uxth	r3, r3
 8005710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005718:	b29a      	uxth	r2, r3
 800571a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800571c:	801a      	strh	r2, [r3, #0]
 800571e:	e056      	b.n	80057ce <USB_EPStartXfer+0x6a6>
 8005720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <USB_EPStartXfer+0x616>
 8005728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800572a:	881b      	ldrh	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005736:	b29a      	uxth	r2, r3
 8005738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	e047      	b.n	80057ce <USB_EPStartXfer+0x6a6>
 800573e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005742:	085b      	lsrs	r3, r3, #1
 8005744:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d004      	beq.n	800575e <USB_EPStartXfer+0x636>
 8005754:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005758:	3301      	adds	r3, #1
 800575a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800575e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005760:	881b      	ldrh	r3, [r3, #0]
 8005762:	b29a      	uxth	r2, r3
 8005764:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005768:	b29b      	uxth	r3, r3
 800576a:	029b      	lsls	r3, r3, #10
 800576c:	b29b      	uxth	r3, r3
 800576e:	4313      	orrs	r3, r2
 8005770:	b29a      	uxth	r2, r3
 8005772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005774:	801a      	strh	r2, [r3, #0]
 8005776:	e02a      	b.n	80057ce <USB_EPStartXfer+0x6a6>
 8005778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800577c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	785b      	ldrb	r3, [r3, #1]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d122      	bne.n	80057ce <USB_EPStartXfer+0x6a6>
 8005788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800578c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	653b      	str	r3, [r7, #80]	; 0x50
 8005794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a8:	4413      	add	r3, r2
 80057aa:	653b      	str	r3, [r7, #80]	; 0x50
 80057ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	011a      	lsls	r2, r3, #4
 80057ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057bc:	4413      	add	r3, r2
 80057be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	891b      	ldrh	r3, [r3, #8]
 80057da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6959      	ldr	r1, [r3, #20]
 80057ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80057f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80057f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80057fc:	6800      	ldr	r0, [r0, #0]
 80057fe:	f001 f982 	bl	8006b06 <USB_WritePMA>
            ep->xfer_buff += len;
 8005802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005812:	441a      	add	r2, r3
 8005814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6a1a      	ldr	r2, [r3, #32]
 800582c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	429a      	cmp	r2, r3
 800583a:	d90f      	bls.n	800585c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800583c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6a1a      	ldr	r2, [r3, #32]
 8005848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800584c:	1ad2      	subs	r2, r2, r3
 800584e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	621a      	str	r2, [r3, #32]
 800585a:	e00e      	b.n	800587a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800585c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800586c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2200      	movs	r2, #0
 8005878:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800587a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	643b      	str	r3, [r7, #64]	; 0x40
 8005886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800588a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d177      	bne.n	8005986 <USB_EPStartXfer+0x85e>
 8005896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80058a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	4413      	add	r3, r2
 80058b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80058ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	011a      	lsls	r2, r3, #4
 80058c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ca:	4413      	add	r3, r2
 80058cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058d0:	637b      	str	r3, [r7, #52]	; 0x34
 80058d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058dc:	b29a      	uxth	r2, r3
 80058de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e0:	801a      	strh	r2, [r3, #0]
 80058e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e6:	2b3e      	cmp	r3, #62	; 0x3e
 80058e8:	d921      	bls.n	800592e <USB_EPStartXfer+0x806>
 80058ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f8:	f003 031f 	and.w	r3, r3, #31
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <USB_EPStartXfer+0x7e2>
 8005900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005904:	3b01      	subs	r3, #1
 8005906:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800590a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b29a      	uxth	r2, r3
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005914:	b29b      	uxth	r3, r3
 8005916:	029b      	lsls	r3, r3, #10
 8005918:	b29b      	uxth	r3, r3
 800591a:	4313      	orrs	r3, r2
 800591c:	b29b      	uxth	r3, r3
 800591e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005926:	b29a      	uxth	r2, r3
 8005928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592a:	801a      	strh	r2, [r3, #0]
 800592c:	e050      	b.n	80059d0 <USB_EPStartXfer+0x8a8>
 800592e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10a      	bne.n	800594c <USB_EPStartXfer+0x824>
 8005936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005938:	881b      	ldrh	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005944:	b29a      	uxth	r2, r3
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	801a      	strh	r2, [r3, #0]
 800594a:	e041      	b.n	80059d0 <USB_EPStartXfer+0x8a8>
 800594c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005950:	085b      	lsrs	r3, r3, #1
 8005952:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d004      	beq.n	800596c <USB_EPStartXfer+0x844>
 8005962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005966:	3301      	adds	r3, #1
 8005968:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	b29a      	uxth	r2, r3
 8005972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005976:	b29b      	uxth	r3, r3
 8005978:	029b      	lsls	r3, r3, #10
 800597a:	b29b      	uxth	r3, r3
 800597c:	4313      	orrs	r3, r2
 800597e:	b29a      	uxth	r2, r3
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	e024      	b.n	80059d0 <USB_EPStartXfer+0x8a8>
 8005986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d11c      	bne.n	80059d0 <USB_EPStartXfer+0x8a8>
 8005996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	461a      	mov	r2, r3
 80059a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059aa:	4413      	add	r3, r2
 80059ac:	643b      	str	r3, [r7, #64]	; 0x40
 80059ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	011a      	lsls	r2, r3, #4
 80059bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059be:	4413      	add	r3, r2
 80059c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	895b      	ldrh	r3, [r3, #10]
 80059dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6959      	ldr	r1, [r3, #20]
 80059ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80059f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80059fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80059fe:	6800      	ldr	r0, [r0, #0]
 8005a00:	f001 f881 	bl	8006b06 <USB_WritePMA>
 8005a04:	e227      	b.n	8005e56 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	441a      	add	r2, r3
 8005a5a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a92:	4413      	add	r3, r2
 8005a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	011a      	lsls	r2, r3, #4
 8005aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005aac:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ab6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	891b      	ldrh	r3, [r3, #8]
 8005ac4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005acc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6959      	ldr	r1, [r3, #20]
 8005ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ade:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ae2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ae6:	6800      	ldr	r0, [r0, #0]
 8005ae8:	f001 f80d 	bl	8006b06 <USB_WritePMA>
 8005aec:	e1b3      	b.n	8005e56 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6a1a      	ldr	r2, [r3, #32]
 8005afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005afe:	1ad2      	subs	r2, r2, r3
 8005b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f000 80c6 	beq.w	8005cc0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	785b      	ldrb	r3, [r3, #1]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d177      	bne.n	8005c40 <USB_EPStartXfer+0xb18>
 8005b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b70:	4413      	add	r3, r2
 8005b72:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	011a      	lsls	r2, r3, #4
 8005b82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b84:	4413      	add	r3, r2
 8005b86:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b8a:	667b      	str	r3, [r7, #100]	; 0x64
 8005b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ba2:	d921      	bls.n	8005be8 <USB_EPStartXfer+0xac0>
 8005ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb2:	f003 031f 	and.w	r3, r3, #31
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <USB_EPStartXfer+0xa9c>
 8005bba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be4:	801a      	strh	r2, [r3, #0]
 8005be6:	e050      	b.n	8005c8a <USB_EPStartXfer+0xb62>
 8005be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <USB_EPStartXfer+0xade>
 8005bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	e041      	b.n	8005c8a <USB_EPStartXfer+0xb62>
 8005c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <USB_EPStartXfer+0xafe>
 8005c1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c20:	3301      	adds	r3, #1
 8005c22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	029b      	lsls	r3, r3, #10
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	4313      	orrs	r3, r2
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c3c:	801a      	strh	r2, [r3, #0]
 8005c3e:	e024      	b.n	8005c8a <USB_EPStartXfer+0xb62>
 8005c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d11c      	bne.n	8005c8a <USB_EPStartXfer+0xb62>
 8005c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c64:	4413      	add	r3, r2
 8005c66:	673b      	str	r3, [r7, #112]	; 0x70
 8005c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c78:	4413      	add	r3, r2
 8005c7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	895b      	ldrh	r3, [r3, #10]
 8005c96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6959      	ldr	r1, [r3, #20]
 8005ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005cb0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005cb4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005cb8:	6800      	ldr	r0, [r0, #0]
 8005cba:	f000 ff24 	bl	8006b06 <USB_WritePMA>
 8005cbe:	e0ca      	b.n	8005e56 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	785b      	ldrb	r3, [r3, #1]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d177      	bne.n	8005dc0 <USB_EPStartXfer+0xc98>
 8005cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cf0:	4413      	add	r3, r2
 8005cf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	011a      	lsls	r2, r3, #4
 8005d02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005d04:	4413      	add	r3, r2
 8005d06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d20:	2b3e      	cmp	r3, #62	; 0x3e
 8005d22:	d921      	bls.n	8005d68 <USB_EPStartXfer+0xc40>
 8005d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d28:	095b      	lsrs	r3, r3, #5
 8005d2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d32:	f003 031f 	and.w	r3, r3, #31
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d104      	bne.n	8005d44 <USB_EPStartXfer+0xc1c>
 8005d3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	029b      	lsls	r3, r3, #10
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	4313      	orrs	r3, r2
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d64:	801a      	strh	r2, [r3, #0]
 8005d66:	e05c      	b.n	8005e22 <USB_EPStartXfer+0xcfa>
 8005d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <USB_EPStartXfer+0xc5e>
 8005d70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	e04d      	b.n	8005e22 <USB_EPStartXfer+0xcfa>
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d004      	beq.n	8005da6 <USB_EPStartXfer+0xc7e>
 8005d9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005da0:	3301      	adds	r3, #1
 8005da2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	029b      	lsls	r3, r3, #10
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	4313      	orrs	r3, r2
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	e030      	b.n	8005e22 <USB_EPStartXfer+0xcfa>
 8005dc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d128      	bne.n	8005e22 <USB_EPStartXfer+0xcfa>
 8005dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	461a      	mov	r2, r3
 8005df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005df4:	4413      	add	r3, r2
 8005df6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	011a      	lsls	r2, r3, #4
 8005e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	891b      	ldrh	r3, [r3, #8]
 8005e2e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6959      	ldr	r1, [r3, #20]
 8005e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005e4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005e50:	6800      	ldr	r0, [r0, #0]
 8005e52:	f000 fe58 	bl	8006b06 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7c:	817b      	strh	r3, [r7, #10]
 8005e7e:	897b      	ldrh	r3, [r7, #10]
 8005e80:	f083 0310 	eor.w	r3, r3, #16
 8005e84:	817b      	strh	r3, [r7, #10]
 8005e86:	897b      	ldrh	r3, [r7, #10]
 8005e88:	f083 0320 	eor.w	r3, r3, #32
 8005e8c:	817b      	strh	r3, [r7, #10]
 8005e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	441a      	add	r2, r3
 8005ea8:	897b      	ldrh	r3, [r7, #10]
 8005eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	8013      	strh	r3, [r2, #0]
 8005ebe:	f000 bcde 	b.w	800687e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	7b1b      	ldrb	r3, [r3, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f040 80bb 	bne.w	800604a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699a      	ldr	r2, [r3, #24]
 8005ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d917      	bls.n	8005f20 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	699a      	ldr	r2, [r3, #24]
 8005f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f10:	1ad2      	subs	r2, r2, r3
 8005f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	619a      	str	r2, [r3, #24]
 8005f1e:	e00e      	b.n	8005f3e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f62:	4413      	add	r3, r2
 8005f64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	011a      	lsls	r2, r3, #4
 8005f76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005f9e:	d924      	bls.n	8005fea <USB_EPStartXfer+0xec2>
 8005fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fae:	f003 031f 	and.w	r3, r3, #31
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d104      	bne.n	8005fc0 <USB_EPStartXfer+0xe98>
 8005fb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	029b      	lsls	r3, r3, #10
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fe4:	801a      	strh	r2, [r3, #0]
 8005fe6:	f000 bc10 	b.w	800680a <USB_EPStartXfer+0x16e2>
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10c      	bne.n	800600c <USB_EPStartXfer+0xee4>
 8005ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006002:	b29a      	uxth	r2, r3
 8006004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	e3fe      	b.n	800680a <USB_EPStartXfer+0x16e2>
 800600c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006010:	085b      	lsrs	r3, r3, #1
 8006012:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b00      	cmp	r3, #0
 8006020:	d004      	beq.n	800602c <USB_EPStartXfer+0xf04>
 8006022:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006026:	3301      	adds	r3, #1
 8006028:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800602c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29a      	uxth	r2, r3
 8006034:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006038:	b29b      	uxth	r3, r3
 800603a:	029b      	lsls	r3, r3, #10
 800603c:	b29b      	uxth	r3, r3
 800603e:	4313      	orrs	r3, r2
 8006040:	b29a      	uxth	r2, r3
 8006042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	e3df      	b.n	800680a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800604a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800604e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	78db      	ldrb	r3, [r3, #3]
 8006056:	2b02      	cmp	r3, #2
 8006058:	f040 8218 	bne.w	800648c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800605c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	785b      	ldrb	r3, [r3, #1]
 8006068:	2b00      	cmp	r3, #0
 800606a:	f040 809d 	bne.w	80061a8 <USB_EPStartXfer+0x1080>
 800606e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800607c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800608a:	b29b      	uxth	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006092:	4413      	add	r3, r2
 8006094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800609c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	011a      	lsls	r2, r3, #4
 80060a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060aa:	4413      	add	r3, r2
 80060ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80060c6:	801a      	strh	r2, [r3, #0]
 80060c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2b3e      	cmp	r3, #62	; 0x3e
 80060d6:	d92b      	bls.n	8006130 <USB_EPStartXfer+0x1008>
 80060d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80060ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d104      	bne.n	8006108 <USB_EPStartXfer+0xfe0>
 80060fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006102:	3b01      	subs	r3, #1
 8006104:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006108:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	b29a      	uxth	r2, r3
 8006110:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006114:	b29b      	uxth	r3, r3
 8006116:	029b      	lsls	r3, r3, #10
 8006118:	b29b      	uxth	r3, r3
 800611a:	4313      	orrs	r3, r2
 800611c:	b29b      	uxth	r3, r3
 800611e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006122:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006126:	b29a      	uxth	r2, r3
 8006128:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	e070      	b.n	8006212 <USB_EPStartXfer+0x10ea>
 8006130:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006134:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10c      	bne.n	800615a <USB_EPStartXfer+0x1032>
 8006140:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800614c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006150:	b29a      	uxth	r2, r3
 8006152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006156:	801a      	strh	r2, [r3, #0]
 8006158:	e05b      	b.n	8006212 <USB_EPStartXfer+0x10ea>
 800615a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	085b      	lsrs	r3, r3, #1
 8006168:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800616c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <USB_EPStartXfer+0x1062>
 8006180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006184:	3301      	adds	r3, #1
 8006186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800618a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	b29a      	uxth	r2, r3
 8006192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006196:	b29b      	uxth	r3, r3
 8006198:	029b      	lsls	r3, r3, #10
 800619a:	b29b      	uxth	r3, r3
 800619c:	4313      	orrs	r3, r2
 800619e:	b29a      	uxth	r2, r3
 80061a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	e034      	b.n	8006212 <USB_EPStartXfer+0x10ea>
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	785b      	ldrb	r3, [r3, #1]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d12c      	bne.n	8006212 <USB_EPStartXfer+0x10ea>
 80061b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061dc:	4413      	add	r3, r2
 80061de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	011a      	lsls	r2, r3, #4
 80061f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061f4:	4413      	add	r3, r2
 80061f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80061fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	b29a      	uxth	r2, r3
 800620c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006210:	801a      	strh	r2, [r3, #0]
 8006212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f040 809d 	bne.w	800636c <USB_EPStartXfer+0x1244>
 8006232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006236:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006244:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624e:	b29b      	uxth	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006256:	4413      	add	r3, r2
 8006258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800625c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	011a      	lsls	r2, r3, #4
 800626a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800626e:	4413      	add	r3, r2
 8006270:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006284:	b29a      	uxth	r2, r3
 8006286:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800628a:	801a      	strh	r2, [r3, #0]
 800628c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b3e      	cmp	r3, #62	; 0x3e
 800629a:	d92b      	bls.n	80062f4 <USB_EPStartXfer+0x11cc>
 800629c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <USB_EPStartXfer+0x11a4>
 80062c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c6:	3b01      	subs	r3, #1
 80062c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d8:	b29b      	uxth	r3, r3
 80062da:	029b      	lsls	r3, r3, #10
 80062dc:	b29b      	uxth	r3, r3
 80062de:	4313      	orrs	r3, r2
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062f0:	801a      	strh	r2, [r3, #0]
 80062f2:	e069      	b.n	80063c8 <USB_EPStartXfer+0x12a0>
 80062f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10c      	bne.n	800631e <USB_EPStartXfer+0x11f6>
 8006304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006314:	b29a      	uxth	r2, r3
 8006316:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800631a:	801a      	strh	r2, [r3, #0]
 800631c:	e054      	b.n	80063c8 <USB_EPStartXfer+0x12a0>
 800631e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	085b      	lsrs	r3, r3, #1
 800632c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <USB_EPStartXfer+0x1226>
 8006344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006348:	3301      	adds	r3, #1
 800634a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800634e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006352:	881b      	ldrh	r3, [r3, #0]
 8006354:	b29a      	uxth	r2, r3
 8006356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800635a:	b29b      	uxth	r3, r3
 800635c:	029b      	lsls	r3, r3, #10
 800635e:	b29b      	uxth	r3, r3
 8006360:	4313      	orrs	r3, r2
 8006362:	b29a      	uxth	r2, r3
 8006364:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006368:	801a      	strh	r2, [r3, #0]
 800636a:	e02d      	b.n	80063c8 <USB_EPStartXfer+0x12a0>
 800636c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d125      	bne.n	80063c8 <USB_EPStartXfer+0x12a0>
 800637c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800638a:	b29b      	uxth	r3, r3
 800638c:	461a      	mov	r2, r3
 800638e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006392:	4413      	add	r3, r2
 8006394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	011a      	lsls	r2, r3, #4
 80063a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80063aa:	4413      	add	r3, r2
 80063ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80063c6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8218 	beq.w	800680a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80063fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80063fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <USB_EPStartXfer+0x12ea>
 8006406:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800640a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10d      	bne.n	800642e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006412:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800641a:	2b00      	cmp	r3, #0
 800641c:	f040 81f5 	bne.w	800680a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006420:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	f040 81ee 	bne.w	800680a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800642e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800643c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006454:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	441a      	add	r2, r3
 8006472:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006482:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]
 800648a:	e1be      	b.n	800680a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800648c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	78db      	ldrb	r3, [r3, #3]
 8006498:	2b01      	cmp	r3, #1
 800649a:	f040 81b4 	bne.w	8006806 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800649e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d917      	bls.n	80064ea <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80064ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80064ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699a      	ldr	r2, [r3, #24]
 80064d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	619a      	str	r2, [r3, #24]
 80064e8:	e00e      	b.n	8006508 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80064ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80064fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2200      	movs	r2, #0
 8006506:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800650c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	2b00      	cmp	r3, #0
 8006516:	f040 8085 	bne.w	8006624 <USB_EPStartXfer+0x14fc>
 800651a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800651e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006536:	b29b      	uxth	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800653e:	4413      	add	r3, r2
 8006540:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	011a      	lsls	r2, r3, #4
 8006552:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006556:	4413      	add	r3, r2
 8006558:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800655c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006560:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006564:	881b      	ldrh	r3, [r3, #0]
 8006566:	b29b      	uxth	r3, r3
 8006568:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800656c:	b29a      	uxth	r2, r3
 800656e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006572:	801a      	strh	r2, [r3, #0]
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006578:	2b3e      	cmp	r3, #62	; 0x3e
 800657a:	d923      	bls.n	80065c4 <USB_EPStartXfer+0x149c>
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006580:	095b      	lsrs	r3, r3, #5
 8006582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2b00      	cmp	r3, #0
 8006590:	d104      	bne.n	800659c <USB_EPStartXfer+0x1474>
 8006592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006596:	3b01      	subs	r3, #1
 8006598:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800659c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	029b      	lsls	r3, r3, #10
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	4313      	orrs	r3, r2
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065c0:	801a      	strh	r2, [r3, #0]
 80065c2:	e060      	b.n	8006686 <USB_EPStartXfer+0x155e>
 80065c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10c      	bne.n	80065e6 <USB_EPStartXfer+0x14be>
 80065cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065dc:	b29a      	uxth	r2, r3
 80065de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	e04f      	b.n	8006686 <USB_EPStartXfer+0x155e>
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d004      	beq.n	8006606 <USB_EPStartXfer+0x14de>
 80065fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006600:	3301      	adds	r3, #1
 8006602:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29a      	uxth	r2, r3
 800660e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006612:	b29b      	uxth	r3, r3
 8006614:	029b      	lsls	r3, r3, #10
 8006616:	b29b      	uxth	r3, r3
 8006618:	4313      	orrs	r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006620:	801a      	strh	r2, [r3, #0]
 8006622:	e030      	b.n	8006686 <USB_EPStartXfer+0x155e>
 8006624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d128      	bne.n	8006686 <USB_EPStartXfer+0x155e>
 8006634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006646:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006650:	b29b      	uxth	r3, r3
 8006652:	461a      	mov	r2, r3
 8006654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006658:	4413      	add	r3, r2
 800665a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800665e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	011a      	lsls	r2, r3, #4
 800666c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006670:	4413      	add	r3, r2
 8006672:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006676:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800667a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667e:	b29a      	uxth	r2, r3
 8006680:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f040 8085 	bne.w	80067b0 <USB_EPStartXfer+0x1688>
 80066a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066ca:	4413      	add	r3, r2
 80066cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	011a      	lsls	r2, r3, #4
 80066de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066e2:	4413      	add	r3, r2
 80066e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066fe:	801a      	strh	r2, [r3, #0]
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006704:	2b3e      	cmp	r3, #62	; 0x3e
 8006706:	d923      	bls.n	8006750 <USB_EPStartXfer+0x1628>
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	2b00      	cmp	r3, #0
 800671c:	d104      	bne.n	8006728 <USB_EPStartXfer+0x1600>
 800671e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006722:	3b01      	subs	r3, #1
 8006724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006728:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800672c:	881b      	ldrh	r3, [r3, #0]
 800672e:	b29a      	uxth	r2, r3
 8006730:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006734:	b29b      	uxth	r3, r3
 8006736:	029b      	lsls	r3, r3, #10
 8006738:	b29b      	uxth	r3, r3
 800673a:	4313      	orrs	r3, r2
 800673c:	b29b      	uxth	r3, r3
 800673e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006746:	b29a      	uxth	r2, r3
 8006748:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	e05c      	b.n	800680a <USB_EPStartXfer+0x16e2>
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10c      	bne.n	8006772 <USB_EPStartXfer+0x164a>
 8006758:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006768:	b29a      	uxth	r2, r3
 800676a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800676e:	801a      	strh	r2, [r3, #0]
 8006770:	e04b      	b.n	800680a <USB_EPStartXfer+0x16e2>
 8006772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006776:	085b      	lsrs	r3, r3, #1
 8006778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800677c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d004      	beq.n	8006792 <USB_EPStartXfer+0x166a>
 8006788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800678c:	3301      	adds	r3, #1
 800678e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29a      	uxth	r2, r3
 800679a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800679e:	b29b      	uxth	r3, r3
 80067a0:	029b      	lsls	r3, r3, #10
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	4313      	orrs	r3, r2
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	e02c      	b.n	800680a <USB_EPStartXfer+0x16e2>
 80067b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d124      	bne.n	800680a <USB_EPStartXfer+0x16e2>
 80067c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067d6:	4413      	add	r3, r2
 80067d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	011a      	lsls	r2, r3, #4
 80067ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067ee:	4413      	add	r3, r2
 80067f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	e001      	b.n	800680a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e03a      	b.n	8006880 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800680a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800680e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800682c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006830:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006834:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006838:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800683c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006840:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006844:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006848:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800684c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006850:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	441a      	add	r2, r3
 8006866:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800686a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800687a:	b29b      	uxth	r3, r3
 800687c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800688a:	b480      	push	{r7}
 800688c:	b085      	sub	sp, #20
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	785b      	ldrb	r3, [r3, #1]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d020      	beq.n	80068de <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068b2:	81bb      	strh	r3, [r7, #12]
 80068b4:	89bb      	ldrh	r3, [r7, #12]
 80068b6:	f083 0310 	eor.w	r3, r3, #16
 80068ba:	81bb      	strh	r3, [r7, #12]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	441a      	add	r2, r3
 80068c6:	89bb      	ldrh	r3, [r7, #12]
 80068c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d8:	b29b      	uxth	r3, r3
 80068da:	8013      	strh	r3, [r2, #0]
 80068dc:	e01f      	b.n	800691e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	881b      	ldrh	r3, [r3, #0]
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f4:	81fb      	strh	r3, [r7, #14]
 80068f6:	89fb      	ldrh	r3, [r7, #14]
 80068f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068fc:	81fb      	strh	r3, [r7, #14]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	441a      	add	r2, r3
 8006908:	89fb      	ldrh	r3, [r7, #14]
 800690a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691a:	b29b      	uxth	r3, r3
 800691c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr

0800692a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800692a:	b480      	push	{r7}
 800692c:	b087      	sub	sp, #28
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	7b1b      	ldrb	r3, [r3, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	f040 809d 	bne.w	8006a78 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d04c      	beq.n	80069e0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	823b      	strh	r3, [r7, #16]
 8006954:	8a3b      	ldrh	r3, [r7, #16]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01b      	beq.n	8006996 <USB_EPClearStall+0x6c>
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	b29b      	uxth	r3, r3
 800696c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006974:	81fb      	strh	r3, [r7, #14]
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	441a      	add	r2, r3
 8006980:	89fb      	ldrh	r3, [r7, #14]
 8006982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800698e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006992:	b29b      	uxth	r3, r3
 8006994:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	78db      	ldrb	r3, [r3, #3]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d06c      	beq.n	8006a78 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b4:	81bb      	strh	r3, [r7, #12]
 80069b6:	89bb      	ldrh	r3, [r7, #12]
 80069b8:	f083 0320 	eor.w	r3, r3, #32
 80069bc:	81bb      	strh	r3, [r7, #12]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	441a      	add	r2, r3
 80069c8:	89bb      	ldrh	r3, [r7, #12]
 80069ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069da:	b29b      	uxth	r3, r3
 80069dc:	8013      	strh	r3, [r2, #0]
 80069de:	e04b      	b.n	8006a78 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	82fb      	strh	r3, [r7, #22]
 80069ee:	8afb      	ldrh	r3, [r7, #22]
 80069f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01b      	beq.n	8006a30 <USB_EPClearStall+0x106>
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0e:	82bb      	strh	r3, [r7, #20]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	8abb      	ldrh	r3, [r7, #20]
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a46:	827b      	strh	r3, [r7, #18]
 8006a48:	8a7b      	ldrh	r3, [r7, #18]
 8006a4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a4e:	827b      	strh	r3, [r7, #18]
 8006a50:	8a7b      	ldrh	r3, [r7, #18]
 8006a52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a56:	827b      	strh	r3, [r7, #18]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	441a      	add	r2, r3
 8006a62:	8a7b      	ldrh	r3, [r7, #18]
 8006a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2280      	movs	r2, #128	; 0x80
 8006a9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bc80      	pop	{r7}
 8006aa8:	4770      	bx	lr

08006aaa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr

08006ad2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bc80      	pop	{r7}
 8006aee:	4770      	bx	lr

08006af0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr

08006b06 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b08b      	sub	sp, #44	; 0x2c
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	60f8      	str	r0, [r7, #12]
 8006b0e:	60b9      	str	r1, [r7, #8]
 8006b10:	4611      	mov	r1, r2
 8006b12:	461a      	mov	r2, r3
 8006b14:	460b      	mov	r3, r1
 8006b16:	80fb      	strh	r3, [r7, #6]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b1c:	88bb      	ldrh	r3, [r7, #4]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	005a      	lsls	r2, r3, #1
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b38:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b3e:	e01e      	b.n	8006b7e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	b21a      	sxth	r2, r3
 8006b50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	b21b      	sxth	r3, r3
 8006b58:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	8a7a      	ldrh	r2, [r7, #18]
 8006b5e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	3302      	adds	r3, #2
 8006b64:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	3302      	adds	r3, #2
 8006b6a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	3301      	adds	r3, #1
 8006b76:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1dd      	bne.n	8006b40 <USB_WritePMA+0x3a>
  }
}
 8006b84:	bf00      	nop
 8006b86:	bf00      	nop
 8006b88:	372c      	adds	r7, #44	; 0x2c
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr

08006b90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b08b      	sub	sp, #44	; 0x2c
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	80fb      	strh	r3, [r7, #6]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006ba6:	88bb      	ldrh	r3, [r7, #4]
 8006ba8:	085b      	lsrs	r3, r3, #1
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bb6:	88fb      	ldrh	r3, [r7, #6]
 8006bb8:	005a      	lsls	r2, r3, #1
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc8:	e01b      	b.n	8006c02 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	3302      	adds	r3, #2
 8006bd6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	3301      	adds	r3, #1
 8006be4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	0a1b      	lsrs	r3, r3, #8
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e0      	bne.n	8006bca <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006c08:	88bb      	ldrh	r3, [r7, #4]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	881b      	ldrh	r3, [r3, #0]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	b2da      	uxtb	r2, r3
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	701a      	strb	r2, [r3, #0]
  }
}
 8006c24:	bf00      	nop
 8006c26:	372c      	adds	r7, #44	; 0x2c
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006c3a:	2304      	movs	r3, #4
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	2181      	movs	r1, #129	; 0x81
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f002 fe76 	bl	8009932 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006c4c:	2010      	movs	r0, #16
 8006c4e:	f002 ff85 	bl	8009b5c <USBD_static_malloc>
 8006c52:	4602      	mov	r2, r0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006c64:	2302      	movs	r3, #2
 8006c66:	e005      	b.n	8006c74 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6e:	2200      	movs	r2, #0
 8006c70:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006c88:	2181      	movs	r1, #129	; 0x81
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f002 fe77 	bl	800997e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f002 ff64 	bl	8009b74 <USBD_static_free>
    pdev->pClassData = NULL;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d045      	beq.n	8006d7a <USBD_HID_Setup+0xba>
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	f040 80d3 	bne.w	8006e9a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	3b02      	subs	r3, #2
 8006cfa:	2b09      	cmp	r3, #9
 8006cfc:	d835      	bhi.n	8006d6a <USBD_HID_Setup+0xaa>
 8006cfe:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <USBD_HID_Setup+0x44>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d5b 	.word	0x08006d5b
 8006d08:	08006d3b 	.word	0x08006d3b
 8006d0c:	08006d6b 	.word	0x08006d6b
 8006d10:	08006d6b 	.word	0x08006d6b
 8006d14:	08006d6b 	.word	0x08006d6b
 8006d18:	08006d6b 	.word	0x08006d6b
 8006d1c:	08006d6b 	.word	0x08006d6b
 8006d20:	08006d6b 	.word	0x08006d6b
 8006d24:	08006d49 	.word	0x08006d49
 8006d28:	08006d2d 	.word	0x08006d2d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	885b      	ldrh	r3, [r3, #2]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	461a      	mov	r2, r3
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	601a      	str	r2, [r3, #0]
          break;
 8006d38:	e01e      	b.n	8006d78 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 f944 	bl	8007fce <USBD_CtlSendData>
          break;
 8006d46:	e017      	b.n	8006d78 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	885b      	ldrh	r3, [r3, #2]
 8006d4c:	0a1b      	lsrs	r3, r3, #8
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	605a      	str	r2, [r3, #4]
          break;
 8006d58:	e00e      	b.n	8006d78 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	2201      	movs	r2, #1
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 f933 	bl	8007fce <USBD_CtlSendData>
          break;
 8006d68:	e006      	b.n	8006d78 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 f8c4 	bl	8007efa <USBD_CtlError>
          ret = USBD_FAIL;
 8006d72:	2302      	movs	r3, #2
 8006d74:	75fb      	strb	r3, [r7, #23]
          break;
 8006d76:	bf00      	nop
      }
      break;
 8006d78:	e096      	b.n	8006ea8 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	785b      	ldrb	r3, [r3, #1]
 8006d7e:	2b0b      	cmp	r3, #11
 8006d80:	f200 8083 	bhi.w	8006e8a <USBD_HID_Setup+0x1ca>
 8006d84:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <USBD_HID_Setup+0xcc>)
 8006d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8a:	bf00      	nop
 8006d8c:	08006dbd 	.word	0x08006dbd
 8006d90:	08006e8b 	.word	0x08006e8b
 8006d94:	08006e8b 	.word	0x08006e8b
 8006d98:	08006e8b 	.word	0x08006e8b
 8006d9c:	08006e8b 	.word	0x08006e8b
 8006da0:	08006e8b 	.word	0x08006e8b
 8006da4:	08006de5 	.word	0x08006de5
 8006da8:	08006e8b 	.word	0x08006e8b
 8006dac:	08006e8b 	.word	0x08006e8b
 8006db0:	08006e8b 	.word	0x08006e8b
 8006db4:	08006e3d 	.word	0x08006e3d
 8006db8:	08006e65 	.word	0x08006e65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d107      	bne.n	8006dd6 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006dc6:	f107 030e 	add.w	r3, r7, #14
 8006dca:	2202      	movs	r2, #2
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 f8fd 	bl	8007fce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dd4:	e060      	b.n	8006e98 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006dd6:	6839      	ldr	r1, [r7, #0]
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 f88e 	bl	8007efa <USBD_CtlError>
            ret = USBD_FAIL;
 8006dde:	2302      	movs	r3, #2
 8006de0:	75fb      	strb	r3, [r7, #23]
          break;
 8006de2:	e059      	b.n	8006e98 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	885b      	ldrh	r3, [r3, #2]
 8006de8:	0a1b      	lsrs	r3, r3, #8
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b22      	cmp	r3, #34	; 0x22
 8006dee:	d108      	bne.n	8006e02 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	88db      	ldrh	r3, [r3, #6]
 8006df4:	2b3f      	cmp	r3, #63	; 0x3f
 8006df6:	bf28      	it	cs
 8006df8:	233f      	movcs	r3, #63	; 0x3f
 8006dfa:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006dfc:	4b2d      	ldr	r3, [pc, #180]	; (8006eb4 <USBD_HID_Setup+0x1f4>)
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	e015      	b.n	8006e2e <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	885b      	ldrh	r3, [r3, #2]
 8006e06:	0a1b      	lsrs	r3, r3, #8
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2b21      	cmp	r3, #33	; 0x21
 8006e0c:	d108      	bne.n	8006e20 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006e0e:	4b2a      	ldr	r3, [pc, #168]	; (8006eb8 <USBD_HID_Setup+0x1f8>)
 8006e10:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	88db      	ldrh	r3, [r3, #6]
 8006e16:	2b09      	cmp	r3, #9
 8006e18:	bf28      	it	cs
 8006e1a:	2309      	movcs	r3, #9
 8006e1c:	83fb      	strh	r3, [r7, #30]
 8006e1e:	e006      	b.n	8006e2e <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 f869 	bl	8007efa <USBD_CtlError>
            ret = USBD_FAIL;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	75fb      	strb	r3, [r7, #23]
            break;
 8006e2c:	e034      	b.n	8006e98 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006e2e:	8bfb      	ldrh	r3, [r7, #30]
 8006e30:	461a      	mov	r2, r3
 8006e32:	69b9      	ldr	r1, [r7, #24]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 f8ca 	bl	8007fce <USBD_CtlSendData>
          break;
 8006e3a:	e02d      	b.n	8006e98 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d107      	bne.n	8006e56 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	3308      	adds	r3, #8
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 f8bd 	bl	8007fce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e54:	e020      	b.n	8006e98 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 f84e 	bl	8007efa <USBD_CtlError>
            ret = USBD_FAIL;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	75fb      	strb	r3, [r7, #23]
          break;
 8006e62:	e019      	b.n	8006e98 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d106      	bne.n	8006e7c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	885b      	ldrh	r3, [r3, #2]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e7a:	e00d      	b.n	8006e98 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 f83b 	bl	8007efa <USBD_CtlError>
            ret = USBD_FAIL;
 8006e84:	2302      	movs	r3, #2
 8006e86:	75fb      	strb	r3, [r7, #23]
          break;
 8006e88:	e006      	b.n	8006e98 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 f834 	bl	8007efa <USBD_CtlError>
          ret = USBD_FAIL;
 8006e92:	2302      	movs	r3, #2
 8006e94:	75fb      	strb	r3, [r7, #23]
          break;
 8006e96:	bf00      	nop
      }
      break;
 8006e98:	e006      	b.n	8006ea8 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 f82c 	bl	8007efa <USBD_CtlError>
      ret = USBD_FAIL;
 8006ea2:	2302      	movs	r3, #2
 8006ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea6:	bf00      	nop
  }

  return ret;
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3720      	adds	r7, #32
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	200000c8 	.word	0x200000c8
 8006eb8:	200000b0 	.word	0x200000b0

08006ebc <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed0:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed8:	2b03      	cmp	r3, #3
 8006eda:	d10c      	bne.n	8006ef6 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	7b1b      	ldrb	r3, [r3, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d108      	bne.n	8006ef6 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006eea:	88fb      	ldrh	r3, [r7, #6]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	2181      	movs	r1, #129	; 0x81
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f002 fdec 	bl	8009ace <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2222      	movs	r2, #34	; 0x22
 8006f0c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006f0e:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bc80      	pop	{r7}
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000044 	.word	0x20000044

08006f20 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2222      	movs	r2, #34	; 0x22
 8006f2c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006f2e:	4b03      	ldr	r3, [pc, #12]	; (8006f3c <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	20000068 	.word	0x20000068

08006f40 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2222      	movs	r2, #34	; 0x22
 8006f4c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006f4e:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bc80      	pop	{r7}
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	2000008c 	.word	0x2000008c

08006f60 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f72:	2200      	movs	r2, #0
 8006f74:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bc80      	pop	{r7}
 8006f80:	4770      	bx	lr
	...

08006f84 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	220a      	movs	r2, #10
 8006f90:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006f92:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bc80      	pop	{r7}
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	200000bc 	.word	0x200000bc

08006fa4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006fb8:	2302      	movs	r3, #2
 8006fba:	e01a      	b.n	8006ff2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	79fa      	ldrb	r2, [r7, #7]
 8006fe8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f002 fc3e 	bl	800986c <USBD_LL_Init>

  return USBD_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b085      	sub	sp, #20
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d006      	beq.n	800701c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]
 800701a:	e001      	b.n	8007020 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800701c:	2302      	movs	r3, #2
 800701e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007020:	7bfb      	ldrb	r3, [r7, #15]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	bc80      	pop	{r7}
 800702a:	4770      	bx	lr

0800702c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f002 fc61 	bl	80098fc <USBD_LL_Start>

  return USBD_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr

08007058 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007064:	2302      	movs	r3, #2
 8007066:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00c      	beq.n	800708c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	78fa      	ldrb	r2, [r7, #3]
 800707c:	4611      	mov	r1, r2
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800708c:	7bfb      	ldrb	r3, [r7, #15]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b082      	sub	sp, #8
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	78fa      	ldrb	r2, [r7, #3]
 80070ac:	4611      	mov	r1, r2
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	4798      	blx	r3

  return USBD_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	4618      	mov	r0, r3
 80070d0:	f000 fed7 	bl	8007e82 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80070e2:	461a      	mov	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d016      	beq.n	8007126 <USBD_LL_SetupStage+0x6a>
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d81c      	bhi.n	8007136 <USBD_LL_SetupStage+0x7a>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <USBD_LL_SetupStage+0x4a>
 8007100:	2b01      	cmp	r3, #1
 8007102:	d008      	beq.n	8007116 <USBD_LL_SetupStage+0x5a>
 8007104:	e017      	b.n	8007136 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f9ca 	bl	80074a8 <USBD_StdDevReq>
      break;
 8007114:	e01a      	b.n	800714c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa2c 	bl	800757c <USBD_StdItfReq>
      break;
 8007124:	e012      	b.n	800714c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fa6c 	bl	800760c <USBD_StdEPReq>
      break;
 8007134:	e00a      	b.n	800714c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800713c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007140:	b2db      	uxtb	r3, r3
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f002 fc39 	bl	80099bc <USBD_LL_StallEP>
      break;
 800714a:	bf00      	nop
  }

  return USBD_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b086      	sub	sp, #24
 800715a:	af00      	add	r7, sp, #0
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	460b      	mov	r3, r1
 8007160:	607a      	str	r2, [r7, #4]
 8007162:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007164:	7afb      	ldrb	r3, [r7, #11]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d14b      	bne.n	8007202 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007170:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007178:	2b03      	cmp	r3, #3
 800717a:	d134      	bne.n	80071e6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	429a      	cmp	r2, r3
 8007186:	d919      	bls.n	80071bc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	1ad2      	subs	r2, r2, r3
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	68da      	ldr	r2, [r3, #12]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800719e:	429a      	cmp	r2, r3
 80071a0:	d203      	bcs.n	80071aa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	e002      	b.n	80071b0 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	6879      	ldr	r1, [r7, #4]
 80071b4:	68f8      	ldr	r0, [r7, #12]
 80071b6:	f000 ff38 	bl	800802a <USBD_CtlContinueRx>
 80071ba:	e038      	b.n	800722e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00a      	beq.n	80071de <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d105      	bne.n	80071de <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 ff35 	bl	800804e <USBD_CtlSendStatus>
 80071e4:	e023      	b.n	800722e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071ec:	2b05      	cmp	r3, #5
 80071ee:	d11e      	bne.n	800722e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80071f8:	2100      	movs	r1, #0
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f002 fbde 	bl	80099bc <USBD_LL_StallEP>
 8007200:	e015      	b.n	800722e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00d      	beq.n	800722a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007214:	2b03      	cmp	r3, #3
 8007216:	d108      	bne.n	800722a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	7afa      	ldrb	r2, [r7, #11]
 8007222:	4611      	mov	r1, r2
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	4798      	blx	r3
 8007228:	e001      	b.n	800722e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800722a:	2302      	movs	r3, #2
 800722c:	e000      	b.n	8007230 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	460b      	mov	r3, r1
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d17f      	bne.n	800734c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3314      	adds	r3, #20
 8007250:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007258:	2b02      	cmp	r3, #2
 800725a:	d15c      	bne.n	8007316 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	429a      	cmp	r2, r3
 8007266:	d915      	bls.n	8007294 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	1ad2      	subs	r2, r2, r3
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	b29b      	uxth	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 fec0 	bl	8008006 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007286:	2300      	movs	r3, #0
 8007288:	2200      	movs	r2, #0
 800728a:	2100      	movs	r1, #0
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f002 fc41 	bl	8009b14 <USBD_LL_PrepareReceive>
 8007292:	e04e      	b.n	8007332 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	6912      	ldr	r2, [r2, #16]
 800729c:	fbb3 f1f2 	udiv	r1, r3, r2
 80072a0:	fb01 f202 	mul.w	r2, r1, r2
 80072a4:	1a9b      	subs	r3, r3, r2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d11c      	bne.n	80072e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d316      	bcc.n	80072e4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d20f      	bcs.n	80072e4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072c4:	2200      	movs	r2, #0
 80072c6:	2100      	movs	r1, #0
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 fe9c 	bl	8008006 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072d6:	2300      	movs	r3, #0
 80072d8:	2200      	movs	r2, #0
 80072da:	2100      	movs	r1, #0
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f002 fc19 	bl	8009b14 <USBD_LL_PrepareReceive>
 80072e2:	e026      	b.n	8007332 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80072f6:	2b03      	cmp	r3, #3
 80072f8:	d105      	bne.n	8007306 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007306:	2180      	movs	r1, #128	; 0x80
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f002 fb57 	bl	80099bc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 feb0 	bl	8008074 <USBD_CtlReceiveStatus>
 8007314:	e00d      	b.n	8007332 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800731c:	2b04      	cmp	r3, #4
 800731e:	d004      	beq.n	800732a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007326:	2b00      	cmp	r3, #0
 8007328:	d103      	bne.n	8007332 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800732a:	2180      	movs	r1, #128	; 0x80
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f002 fb45 	bl	80099bc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007338:	2b01      	cmp	r3, #1
 800733a:	d11d      	bne.n	8007378 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f7ff fe81 	bl	8007044 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800734a:	e015      	b.n	8007378 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00d      	beq.n	8007374 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800735e:	2b03      	cmp	r3, #3
 8007360:	d108      	bne.n	8007374 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007368:	695b      	ldr	r3, [r3, #20]
 800736a:	7afa      	ldrb	r2, [r7, #11]
 800736c:	4611      	mov	r1, r2
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	4798      	blx	r3
 8007372:	e001      	b.n	8007378 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007374:	2302      	movs	r3, #2
 8007376:	e000      	b.n	800737a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800738a:	2340      	movs	r3, #64	; 0x40
 800738c:	2200      	movs	r2, #0
 800738e:	2100      	movs	r1, #0
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f002 face 	bl	8009932 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2240      	movs	r2, #64	; 0x40
 80073a2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	2200      	movs	r2, #0
 80073aa:	2180      	movs	r1, #128	; 0x80
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f002 fac0 	bl	8009932 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2240      	movs	r2, #64	; 0x40
 80073bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d009      	beq.n	80073fa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6852      	ldr	r2, [r2, #4]
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	4611      	mov	r1, r2
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
  }

  return USBD_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3708      	adds	r7, #8
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	460b      	mov	r3, r1
 800740e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	78fa      	ldrb	r2, [r7, #3]
 8007414:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	bc80      	pop	{r7}
 8007420:	4770      	bx	lr

08007422 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2204      	movs	r2, #4
 800743a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	bc80      	pop	{r7}
 8007448:	4770      	bx	lr

0800744a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007458:	2b04      	cmp	r3, #4
 800745a:	d105      	bne.n	8007468 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	bc80      	pop	{r7}
 8007472:	4770      	bx	lr

08007474 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007482:	2b03      	cmp	r3, #3
 8007484:	d10b      	bne.n	800749e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748c:	69db      	ldr	r3, [r3, #28]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d005      	beq.n	800749e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074be:	2b40      	cmp	r3, #64	; 0x40
 80074c0:	d005      	beq.n	80074ce <USBD_StdDevReq+0x26>
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	d84f      	bhi.n	8007566 <USBD_StdDevReq+0xbe>
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d009      	beq.n	80074de <USBD_StdDevReq+0x36>
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d14b      	bne.n	8007566 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
      break;
 80074dc:	e048      	b.n	8007570 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	785b      	ldrb	r3, [r3, #1]
 80074e2:	2b09      	cmp	r3, #9
 80074e4:	d839      	bhi.n	800755a <USBD_StdDevReq+0xb2>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <USBD_StdDevReq+0x44>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	0800753d 	.word	0x0800753d
 80074f0:	08007551 	.word	0x08007551
 80074f4:	0800755b 	.word	0x0800755b
 80074f8:	08007547 	.word	0x08007547
 80074fc:	0800755b 	.word	0x0800755b
 8007500:	0800751f 	.word	0x0800751f
 8007504:	08007515 	.word	0x08007515
 8007508:	0800755b 	.word	0x0800755b
 800750c:	08007533 	.word	0x08007533
 8007510:	08007529 	.word	0x08007529
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f9dc 	bl	80078d4 <USBD_GetDescriptor>
          break;
 800751c:	e022      	b.n	8007564 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fb3f 	bl	8007ba4 <USBD_SetAddress>
          break;
 8007526:	e01d      	b.n	8007564 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fb7e 	bl	8007c2c <USBD_SetConfig>
          break;
 8007530:	e018      	b.n	8007564 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007532:	6839      	ldr	r1, [r7, #0]
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fc07 	bl	8007d48 <USBD_GetConfig>
          break;
 800753a:	e013      	b.n	8007564 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fc37 	bl	8007db2 <USBD_GetStatus>
          break;
 8007544:	e00e      	b.n	8007564 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fc65 	bl	8007e18 <USBD_SetFeature>
          break;
 800754e:	e009      	b.n	8007564 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fc74 	bl	8007e40 <USBD_ClrFeature>
          break;
 8007558:	e004      	b.n	8007564 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fccc 	bl	8007efa <USBD_CtlError>
          break;
 8007562:	bf00      	nop
      }
      break;
 8007564:	e004      	b.n	8007570 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fcc6 	bl	8007efa <USBD_CtlError>
      break;
 800756e:	bf00      	nop
  }

  return ret;
 8007570:	7bfb      	ldrb	r3, [r7, #15]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop

0800757c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007592:	2b40      	cmp	r3, #64	; 0x40
 8007594:	d005      	beq.n	80075a2 <USBD_StdItfReq+0x26>
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	d82e      	bhi.n	80075f8 <USBD_StdItfReq+0x7c>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <USBD_StdItfReq+0x26>
 800759e:	2b20      	cmp	r3, #32
 80075a0:	d12a      	bne.n	80075f8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a8:	3b01      	subs	r3, #1
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d81d      	bhi.n	80075ea <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	889b      	ldrh	r3, [r3, #4]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d813      	bhi.n	80075e0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	4798      	blx	r3
 80075c6:	4603      	mov	r3, r0
 80075c8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	88db      	ldrh	r3, [r3, #6]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d110      	bne.n	80075f4 <USBD_StdItfReq+0x78>
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10d      	bne.n	80075f4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fd38 	bl	800804e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075de:	e009      	b.n	80075f4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80075e0:	6839      	ldr	r1, [r7, #0]
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fc89 	bl	8007efa <USBD_CtlError>
          break;
 80075e8:	e004      	b.n	80075f4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fc84 	bl	8007efa <USBD_CtlError>
          break;
 80075f2:	e000      	b.n	80075f6 <USBD_StdItfReq+0x7a>
          break;
 80075f4:	bf00      	nop
      }
      break;
 80075f6:	e004      	b.n	8007602 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fc7d 	bl	8007efa <USBD_CtlError>
      break;
 8007600:	bf00      	nop
  }

  return USBD_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	889b      	ldrh	r3, [r3, #4]
 800761e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007628:	2b40      	cmp	r3, #64	; 0x40
 800762a:	d007      	beq.n	800763c <USBD_StdEPReq+0x30>
 800762c:	2b40      	cmp	r3, #64	; 0x40
 800762e:	f200 8146 	bhi.w	80078be <USBD_StdEPReq+0x2b2>
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <USBD_StdEPReq+0x40>
 8007636:	2b20      	cmp	r3, #32
 8007638:	f040 8141 	bne.w	80078be <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	4798      	blx	r3
      break;
 800764a:	e13d      	b.n	80078c8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007654:	2b20      	cmp	r3, #32
 8007656:	d10a      	bne.n	800766e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	4798      	blx	r3
 8007666:	4603      	mov	r3, r0
 8007668:	73fb      	strb	r3, [r7, #15]

        return ret;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	e12d      	b.n	80078ca <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	785b      	ldrb	r3, [r3, #1]
 8007672:	2b03      	cmp	r3, #3
 8007674:	d007      	beq.n	8007686 <USBD_StdEPReq+0x7a>
 8007676:	2b03      	cmp	r3, #3
 8007678:	f300 811b 	bgt.w	80078b2 <USBD_StdEPReq+0x2a6>
 800767c:	2b00      	cmp	r3, #0
 800767e:	d072      	beq.n	8007766 <USBD_StdEPReq+0x15a>
 8007680:	2b01      	cmp	r3, #1
 8007682:	d03a      	beq.n	80076fa <USBD_StdEPReq+0xee>
 8007684:	e115      	b.n	80078b2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800768c:	2b02      	cmp	r3, #2
 800768e:	d002      	beq.n	8007696 <USBD_StdEPReq+0x8a>
 8007690:	2b03      	cmp	r3, #3
 8007692:	d015      	beq.n	80076c0 <USBD_StdEPReq+0xb4>
 8007694:	e02b      	b.n	80076ee <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00c      	beq.n	80076b6 <USBD_StdEPReq+0xaa>
 800769c:	7bbb      	ldrb	r3, [r7, #14]
 800769e:	2b80      	cmp	r3, #128	; 0x80
 80076a0:	d009      	beq.n	80076b6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f002 f988 	bl	80099bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80076ac:	2180      	movs	r1, #128	; 0x80
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f002 f984 	bl	80099bc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076b4:	e020      	b.n	80076f8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80076b6:	6839      	ldr	r1, [r7, #0]
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fc1e 	bl	8007efa <USBD_CtlError>
              break;
 80076be:	e01b      	b.n	80076f8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	885b      	ldrh	r3, [r3, #2]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10e      	bne.n	80076e6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00b      	beq.n	80076e6 <USBD_StdEPReq+0xda>
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	2b80      	cmp	r3, #128	; 0x80
 80076d2:	d008      	beq.n	80076e6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	88db      	ldrh	r3, [r3, #6]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d104      	bne.n	80076e6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f002 f96b 	bl	80099bc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fcb1 	bl	800804e <USBD_CtlSendStatus>

              break;
 80076ec:	e004      	b.n	80076f8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc02 	bl	8007efa <USBD_CtlError>
              break;
 80076f6:	bf00      	nop
          }
          break;
 80076f8:	e0e0      	b.n	80078bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007700:	2b02      	cmp	r3, #2
 8007702:	d002      	beq.n	800770a <USBD_StdEPReq+0xfe>
 8007704:	2b03      	cmp	r3, #3
 8007706:	d015      	beq.n	8007734 <USBD_StdEPReq+0x128>
 8007708:	e026      	b.n	8007758 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00c      	beq.n	800772a <USBD_StdEPReq+0x11e>
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	2b80      	cmp	r3, #128	; 0x80
 8007714:	d009      	beq.n	800772a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f002 f94e 	bl	80099bc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007720:	2180      	movs	r1, #128	; 0x80
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f002 f94a 	bl	80099bc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007728:	e01c      	b.n	8007764 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fbe4 	bl	8007efa <USBD_CtlError>
              break;
 8007732:	e017      	b.n	8007764 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	885b      	ldrh	r3, [r3, #2]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d112      	bne.n	8007762 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007742:	2b00      	cmp	r3, #0
 8007744:	d004      	beq.n	8007750 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007746:	7bbb      	ldrb	r3, [r7, #14]
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f002 f955 	bl	80099fa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fc7c 	bl	800804e <USBD_CtlSendStatus>
              }
              break;
 8007756:	e004      	b.n	8007762 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fbcd 	bl	8007efa <USBD_CtlError>
              break;
 8007760:	e000      	b.n	8007764 <USBD_StdEPReq+0x158>
              break;
 8007762:	bf00      	nop
          }
          break;
 8007764:	e0aa      	b.n	80078bc <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776c:	2b02      	cmp	r3, #2
 800776e:	d002      	beq.n	8007776 <USBD_StdEPReq+0x16a>
 8007770:	2b03      	cmp	r3, #3
 8007772:	d032      	beq.n	80077da <USBD_StdEPReq+0x1ce>
 8007774:	e097      	b.n	80078a6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d007      	beq.n	800778c <USBD_StdEPReq+0x180>
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	2b80      	cmp	r3, #128	; 0x80
 8007780:	d004      	beq.n	800778c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fbb8 	bl	8007efa <USBD_CtlError>
                break;
 800778a:	e091      	b.n	80078b0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800778c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007790:	2b00      	cmp	r3, #0
 8007792:	da0b      	bge.n	80077ac <USBD_StdEPReq+0x1a0>
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800779a:	4613      	mov	r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	3310      	adds	r3, #16
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	3304      	adds	r3, #4
 80077aa:	e00b      	b.n	80077c4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077b2:	4613      	mov	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	4413      	add	r3, r2
 80077c2:	3304      	adds	r3, #4
 80077c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	2202      	movs	r2, #2
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fbfb 	bl	8007fce <USBD_CtlSendData>
              break;
 80077d8:	e06a      	b.n	80078b0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	da11      	bge.n	8007806 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	f003 020f 	and.w	r2, r3, #15
 80077e8:	6879      	ldr	r1, [r7, #4]
 80077ea:	4613      	mov	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	440b      	add	r3, r1
 80077f4:	3318      	adds	r3, #24
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d117      	bne.n	800782c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80077fc:	6839      	ldr	r1, [r7, #0]
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fb7b 	bl	8007efa <USBD_CtlError>
                  break;
 8007804:	e054      	b.n	80078b0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	f003 020f 	and.w	r2, r3, #15
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	4613      	mov	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	440b      	add	r3, r1
 8007818:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d104      	bne.n	800782c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fb68 	bl	8007efa <USBD_CtlError>
                  break;
 800782a:	e041      	b.n	80078b0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800782c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007830:	2b00      	cmp	r3, #0
 8007832:	da0b      	bge.n	800784c <USBD_StdEPReq+0x240>
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	3310      	adds	r3, #16
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	4413      	add	r3, r2
 8007848:	3304      	adds	r3, #4
 800784a:	e00b      	b.n	8007864 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	4413      	add	r3, r2
 8007862:	3304      	adds	r3, #4
 8007864:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <USBD_StdEPReq+0x266>
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	2b80      	cmp	r3, #128	; 0x80
 8007870:	d103      	bne.n	800787a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2200      	movs	r2, #0
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	e00e      	b.n	8007898 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f002 f8da 	bl	8009a38 <USBD_LL_IsStallEP>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2201      	movs	r2, #1
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	e002      	b.n	8007898 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2200      	movs	r2, #0
 8007896:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2202      	movs	r2, #2
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fb95 	bl	8007fce <USBD_CtlSendData>
              break;
 80078a4:	e004      	b.n	80078b0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fb26 	bl	8007efa <USBD_CtlError>
              break;
 80078ae:	bf00      	nop
          }
          break;
 80078b0:	e004      	b.n	80078bc <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fb20 	bl	8007efa <USBD_CtlError>
          break;
 80078ba:	bf00      	nop
      }
      break;
 80078bc:	e004      	b.n	80078c8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fb1a 	bl	8007efa <USBD_CtlError>
      break;
 80078c6:	bf00      	nop
  }

  return ret;
 80078c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	885b      	ldrh	r3, [r3, #2]
 80078ee:	0a1b      	lsrs	r3, r3, #8
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	3b01      	subs	r3, #1
 80078f4:	2b06      	cmp	r3, #6
 80078f6:	f200 8128 	bhi.w	8007b4a <USBD_GetDescriptor+0x276>
 80078fa:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <USBD_GetDescriptor+0x2c>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	0800791d 	.word	0x0800791d
 8007904:	08007935 	.word	0x08007935
 8007908:	08007975 	.word	0x08007975
 800790c:	08007b4b 	.word	0x08007b4b
 8007910:	08007b4b 	.word	0x08007b4b
 8007914:	08007aeb 	.word	0x08007aeb
 8007918:	08007b17 	.word	0x08007b17
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	7c12      	ldrb	r2, [r2, #16]
 8007928:	f107 0108 	add.w	r1, r7, #8
 800792c:	4610      	mov	r0, r2
 800792e:	4798      	blx	r3
 8007930:	60f8      	str	r0, [r7, #12]
      break;
 8007932:	e112      	b.n	8007b5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7c1b      	ldrb	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10d      	bne.n	8007958 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007944:	f107 0208 	add.w	r2, r7, #8
 8007948:	4610      	mov	r0, r2
 800794a:	4798      	blx	r3
 800794c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3301      	adds	r3, #1
 8007952:	2202      	movs	r2, #2
 8007954:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007956:	e100      	b.n	8007b5a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007960:	f107 0208 	add.w	r2, r7, #8
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
 8007968:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3301      	adds	r3, #1
 800796e:	2202      	movs	r2, #2
 8007970:	701a      	strb	r2, [r3, #0]
      break;
 8007972:	e0f2      	b.n	8007b5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	885b      	ldrh	r3, [r3, #2]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b05      	cmp	r3, #5
 800797c:	f200 80ac 	bhi.w	8007ad8 <USBD_GetDescriptor+0x204>
 8007980:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <USBD_GetDescriptor+0xb4>)
 8007982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007986:	bf00      	nop
 8007988:	080079a1 	.word	0x080079a1
 800798c:	080079d5 	.word	0x080079d5
 8007990:	08007a09 	.word	0x08007a09
 8007994:	08007a3d 	.word	0x08007a3d
 8007998:	08007a71 	.word	0x08007a71
 800799c:	08007aa5 	.word	0x08007aa5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00b      	beq.n	80079c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	7c12      	ldrb	r2, [r2, #16]
 80079b8:	f107 0108 	add.w	r1, r7, #8
 80079bc:	4610      	mov	r0, r2
 80079be:	4798      	blx	r3
 80079c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079c2:	e091      	b.n	8007ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fa97 	bl	8007efa <USBD_CtlError>
            err++;
 80079cc:	7afb      	ldrb	r3, [r7, #11]
 80079ce:	3301      	adds	r3, #1
 80079d0:	72fb      	strb	r3, [r7, #11]
          break;
 80079d2:	e089      	b.n	8007ae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	7c12      	ldrb	r2, [r2, #16]
 80079ec:	f107 0108 	add.w	r1, r7, #8
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
 80079f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079f6:	e077      	b.n	8007ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa7d 	bl	8007efa <USBD_CtlError>
            err++;
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	3301      	adds	r3, #1
 8007a04:	72fb      	strb	r3, [r7, #11]
          break;
 8007a06:	e06f      	b.n	8007ae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d00b      	beq.n	8007a2c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	7c12      	ldrb	r2, [r2, #16]
 8007a20:	f107 0108 	add.w	r1, r7, #8
 8007a24:	4610      	mov	r0, r2
 8007a26:	4798      	blx	r3
 8007a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a2a:	e05d      	b.n	8007ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa63 	bl	8007efa <USBD_CtlError>
            err++;
 8007a34:	7afb      	ldrb	r3, [r7, #11]
 8007a36:	3301      	adds	r3, #1
 8007a38:	72fb      	strb	r3, [r7, #11]
          break;
 8007a3a:	e055      	b.n	8007ae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00b      	beq.n	8007a60 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	7c12      	ldrb	r2, [r2, #16]
 8007a54:	f107 0108 	add.w	r1, r7, #8
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
 8007a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a5e:	e043      	b.n	8007ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fa49 	bl	8007efa <USBD_CtlError>
            err++;
 8007a68:	7afb      	ldrb	r3, [r7, #11]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a6e:	e03b      	b.n	8007ae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00b      	beq.n	8007a94 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a82:	695b      	ldr	r3, [r3, #20]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	7c12      	ldrb	r2, [r2, #16]
 8007a88:	f107 0108 	add.w	r1, r7, #8
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4798      	blx	r3
 8007a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a92:	e029      	b.n	8007ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa2f 	bl	8007efa <USBD_CtlError>
            err++;
 8007a9c:	7afb      	ldrb	r3, [r7, #11]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8007aa2:	e021      	b.n	8007ae8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	7c12      	ldrb	r2, [r2, #16]
 8007abc:	f107 0108 	add.w	r1, r7, #8
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4798      	blx	r3
 8007ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ac6:	e00f      	b.n	8007ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 fa15 	bl	8007efa <USBD_CtlError>
            err++;
 8007ad0:	7afb      	ldrb	r3, [r7, #11]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ad6:	e007      	b.n	8007ae8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fa0d 	bl	8007efa <USBD_CtlError>
          err++;
 8007ae0:	7afb      	ldrb	r3, [r7, #11]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007ae6:	e038      	b.n	8007b5a <USBD_GetDescriptor+0x286>
 8007ae8:	e037      	b.n	8007b5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	7c1b      	ldrb	r3, [r3, #16]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afa:	f107 0208 	add.w	r2, r7, #8
 8007afe:	4610      	mov	r0, r2
 8007b00:	4798      	blx	r3
 8007b02:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b04:	e029      	b.n	8007b5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f9f6 	bl	8007efa <USBD_CtlError>
        err++;
 8007b0e:	7afb      	ldrb	r3, [r7, #11]
 8007b10:	3301      	adds	r3, #1
 8007b12:	72fb      	strb	r3, [r7, #11]
      break;
 8007b14:	e021      	b.n	8007b5a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	7c1b      	ldrb	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10d      	bne.n	8007b3a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b26:	f107 0208 	add.w	r2, r7, #8
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	4798      	blx	r3
 8007b2e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3301      	adds	r3, #1
 8007b34:	2207      	movs	r2, #7
 8007b36:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b38:	e00f      	b.n	8007b5a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f9dc 	bl	8007efa <USBD_CtlError>
        err++;
 8007b42:	7afb      	ldrb	r3, [r7, #11]
 8007b44:	3301      	adds	r3, #1
 8007b46:	72fb      	strb	r3, [r7, #11]
      break;
 8007b48:	e007      	b.n	8007b5a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b4a:	6839      	ldr	r1, [r7, #0]
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f9d4 	bl	8007efa <USBD_CtlError>
      err++;
 8007b52:	7afb      	ldrb	r3, [r7, #11]
 8007b54:	3301      	adds	r3, #1
 8007b56:	72fb      	strb	r3, [r7, #11]
      break;
 8007b58:	bf00      	nop
  }

  if (err != 0U)
 8007b5a:	7afb      	ldrb	r3, [r7, #11]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d11c      	bne.n	8007b9a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007b60:	893b      	ldrh	r3, [r7, #8]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d011      	beq.n	8007b8a <USBD_GetDescriptor+0x2b6>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	88db      	ldrh	r3, [r3, #6]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00d      	beq.n	8007b8a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	88da      	ldrh	r2, [r3, #6]
 8007b72:	893b      	ldrh	r3, [r7, #8]
 8007b74:	4293      	cmp	r3, r2
 8007b76:	bf28      	it	cs
 8007b78:	4613      	movcs	r3, r2
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b7e:	893b      	ldrh	r3, [r7, #8]
 8007b80:	461a      	mov	r2, r3
 8007b82:	68f9      	ldr	r1, [r7, #12]
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fa22 	bl	8007fce <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	88db      	ldrh	r3, [r3, #6]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d104      	bne.n	8007b9c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa5b 	bl	800804e <USBD_CtlSendStatus>
 8007b98:	e000      	b.n	8007b9c <USBD_GetDescriptor+0x2c8>
    return;
 8007b9a:	bf00      	nop
    }
  }
}
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop

08007ba4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	889b      	ldrh	r3, [r3, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d130      	bne.n	8007c18 <USBD_SetAddress+0x74>
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	88db      	ldrh	r3, [r3, #6]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d12c      	bne.n	8007c18 <USBD_SetAddress+0x74>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	885b      	ldrh	r3, [r3, #2]
 8007bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8007bc4:	d828      	bhi.n	8007c18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	885b      	ldrh	r3, [r3, #2]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d104      	bne.n	8007be6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f98b 	bl	8007efa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be4:	e01d      	b.n	8007c22 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7bfa      	ldrb	r2, [r7, #15]
 8007bea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 ff4c 	bl	8009a90 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fa28 	bl	800804e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d004      	beq.n	8007c0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0c:	e009      	b.n	8007c22 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c16:	e004      	b.n	8007c22 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f96d 	bl	8007efa <USBD_CtlError>
  }
}
 8007c20:	bf00      	nop
 8007c22:	bf00      	nop
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	885b      	ldrh	r3, [r3, #2]
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	4b41      	ldr	r3, [pc, #260]	; (8007d44 <USBD_SetConfig+0x118>)
 8007c3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c40:	4b40      	ldr	r3, [pc, #256]	; (8007d44 <USBD_SetConfig+0x118>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d904      	bls.n	8007c52 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f955 	bl	8007efa <USBD_CtlError>
 8007c50:	e075      	b.n	8007d3e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d002      	beq.n	8007c62 <USBD_SetConfig+0x36>
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d023      	beq.n	8007ca8 <USBD_SetConfig+0x7c>
 8007c60:	e062      	b.n	8007d28 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007c62:	4b38      	ldr	r3, [pc, #224]	; (8007d44 <USBD_SetConfig+0x118>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d01a      	beq.n	8007ca0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007c6a:	4b36      	ldr	r3, [pc, #216]	; (8007d44 <USBD_SetConfig+0x118>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2203      	movs	r2, #3
 8007c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c7c:	4b31      	ldr	r3, [pc, #196]	; (8007d44 <USBD_SetConfig+0x118>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7ff f9e8 	bl	8007058 <USBD_SetClassConfig>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d104      	bne.n	8007c98 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f932 	bl	8007efa <USBD_CtlError>
            return;
 8007c96:	e052      	b.n	8007d3e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f9d8 	bl	800804e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007c9e:	e04e      	b.n	8007d3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f9d4 	bl	800804e <USBD_CtlSendStatus>
        break;
 8007ca6:	e04a      	b.n	8007d3e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ca8:	4b26      	ldr	r3, [pc, #152]	; (8007d44 <USBD_SetConfig+0x118>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d112      	bne.n	8007cd6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007cb8:	4b22      	ldr	r3, [pc, #136]	; (8007d44 <USBD_SetConfig+0x118>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007cc2:	4b20      	ldr	r3, [pc, #128]	; (8007d44 <USBD_SetConfig+0x118>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff f9e4 	bl	8007096 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f9bd 	bl	800804e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007cd4:	e033      	b.n	8007d3e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007cd6:	4b1b      	ldr	r3, [pc, #108]	; (8007d44 <USBD_SetConfig+0x118>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d01d      	beq.n	8007d20 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff f9d2 	bl	8007096 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007cf2:	4b14      	ldr	r3, [pc, #80]	; (8007d44 <USBD_SetConfig+0x118>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007cfc:	4b11      	ldr	r3, [pc, #68]	; (8007d44 <USBD_SetConfig+0x118>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff f9a8 	bl	8007058 <USBD_SetClassConfig>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d104      	bne.n	8007d18 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f8f2 	bl	8007efa <USBD_CtlError>
            return;
 8007d16:	e012      	b.n	8007d3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f998 	bl	800804e <USBD_CtlSendStatus>
        break;
 8007d1e:	e00e      	b.n	8007d3e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f994 	bl	800804e <USBD_CtlSendStatus>
        break;
 8007d26:	e00a      	b.n	8007d3e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f8e5 	bl	8007efa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d30:	4b04      	ldr	r3, [pc, #16]	; (8007d44 <USBD_SetConfig+0x118>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7ff f9ad 	bl	8007096 <USBD_ClrClassConfig>
        break;
 8007d3c:	bf00      	nop
    }
  }
}
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	2000046c 	.word	0x2000046c

08007d48 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	88db      	ldrh	r3, [r3, #6]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d004      	beq.n	8007d64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f8cc 	bl	8007efa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d62:	e022      	b.n	8007daa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	dc02      	bgt.n	8007d74 <USBD_GetConfig+0x2c>
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	dc03      	bgt.n	8007d7a <USBD_GetConfig+0x32>
 8007d72:	e015      	b.n	8007da0 <USBD_GetConfig+0x58>
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d00b      	beq.n	8007d90 <USBD_GetConfig+0x48>
 8007d78:	e012      	b.n	8007da0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3308      	adds	r3, #8
 8007d84:	2201      	movs	r2, #1
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f920 	bl	8007fce <USBD_CtlSendData>
        break;
 8007d8e:	e00c      	b.n	8007daa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3304      	adds	r3, #4
 8007d94:	2201      	movs	r2, #1
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f918 	bl	8007fce <USBD_CtlSendData>
        break;
 8007d9e:	e004      	b.n	8007daa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f8a9 	bl	8007efa <USBD_CtlError>
        break;
 8007da8:	bf00      	nop
}
 8007daa:	bf00      	nop
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b082      	sub	sp, #8
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d81e      	bhi.n	8007e06 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	88db      	ldrh	r3, [r3, #6]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d004      	beq.n	8007dda <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f891 	bl	8007efa <USBD_CtlError>
        break;
 8007dd8:	e01a      	b.n	8007e10 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d005      	beq.n	8007df6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f043 0202 	orr.w	r2, r3, #2
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	330c      	adds	r3, #12
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f8e5 	bl	8007fce <USBD_CtlSendData>
      break;
 8007e04:	e004      	b.n	8007e10 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f876 	bl	8007efa <USBD_CtlError>
      break;
 8007e0e:	bf00      	nop
  }
}
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	885b      	ldrh	r3, [r3, #2]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d106      	bne.n	8007e38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f90b 	bl	800804e <USBD_CtlSendStatus>
  }
}
 8007e38:	bf00      	nop
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e50:	3b01      	subs	r3, #1
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d80b      	bhi.n	8007e6e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	885b      	ldrh	r3, [r3, #2]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d10c      	bne.n	8007e78 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f8f1 	bl	800804e <USBD_CtlSendStatus>
      }
      break;
 8007e6c:	e004      	b.n	8007e78 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f842 	bl	8007efa <USBD_CtlError>
      break;
 8007e76:	e000      	b.n	8007e7a <USBD_ClrFeature+0x3a>
      break;
 8007e78:	bf00      	nop
  }
}
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	781a      	ldrb	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	785a      	ldrb	r2, [r3, #1]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	3302      	adds	r3, #2
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	3303      	adds	r3, #3
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	021b      	lsls	r3, r3, #8
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	4413      	add	r3, r2
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	3304      	adds	r3, #4
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	3305      	adds	r3, #5
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	4413      	add	r3, r2
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	3306      	adds	r3, #6
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	3307      	adds	r3, #7
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	4413      	add	r3, r2
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	80da      	strh	r2, [r3, #6]

}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr

08007efa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
 8007f02:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007f04:	2180      	movs	r1, #128	; 0x80
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f001 fd58 	bl	80099bc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fd54 	bl	80099bc <USBD_LL_StallEP>
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d032      	beq.n	8007f98 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 f834 	bl	8007fa0 <USBD_GetLen>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	75fa      	strb	r2, [r7, #23]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	4413      	add	r3, r2
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	7812      	ldrb	r2, [r2, #0]
 8007f56:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	75fa      	strb	r2, [r7, #23]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	4413      	add	r3, r2
 8007f64:	2203      	movs	r2, #3
 8007f66:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007f68:	e012      	b.n	8007f90 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	60fa      	str	r2, [r7, #12]
 8007f70:	7dfa      	ldrb	r2, [r7, #23]
 8007f72:	1c51      	adds	r1, r2, #1
 8007f74:	75f9      	strb	r1, [r7, #23]
 8007f76:	4611      	mov	r1, r2
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	440a      	add	r2, r1
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	75fa      	strb	r2, [r7, #23]
 8007f86:	461a      	mov	r2, r3
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1e8      	bne.n	8007f6a <USBD_GetString+0x4e>
    }
  }
}
 8007f98:	bf00      	nop
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007fac:	e005      	b.n	8007fba <USBD_GetLen+0x1a>
  {
    len++;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1f5      	bne.n	8007fae <USBD_GetLen+0xe>
  }

  return len;
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bc80      	pop	{r7}
 8007fcc:	4770      	bx	lr

08007fce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007fe4:	88fa      	ldrh	r2, [r7, #6]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007fea:	88fa      	ldrh	r2, [r7, #6]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ff0:	88fb      	ldrh	r3, [r7, #6]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f001 fd69 	bl	8009ace <USBD_LL_Transmit>

  return USBD_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	60f8      	str	r0, [r7, #12]
 800800e:	60b9      	str	r1, [r7, #8]
 8008010:	4613      	mov	r3, r2
 8008012:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008014:	88fb      	ldrh	r3, [r7, #6]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	2100      	movs	r1, #0
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f001 fd57 	bl	8009ace <USBD_LL_Transmit>

  return USBD_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b084      	sub	sp, #16
 800802e:	af00      	add	r7, sp, #0
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	60b9      	str	r1, [r7, #8]
 8008034:	4613      	mov	r3, r2
 8008036:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008038:	88fb      	ldrh	r3, [r7, #6]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	2100      	movs	r1, #0
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f001 fd68 	bl	8009b14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2204      	movs	r2, #4
 800805a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800805e:	2300      	movs	r3, #0
 8008060:	2200      	movs	r2, #0
 8008062:	2100      	movs	r1, #0
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 fd32 	bl	8009ace <USBD_LL_Transmit>

  return USBD_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2205      	movs	r2, #5
 8008080:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008084:	2300      	movs	r3, #0
 8008086:	2200      	movs	r2, #0
 8008088:	2100      	movs	r1, #0
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 fd42 	bl	8009b14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800809a:	b480      	push	{r7}
 800809c:	b085      	sub	sp, #20
 800809e:	af00      	add	r7, sp, #0
 80080a0:	4603      	mov	r3, r0
 80080a2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80080a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80080ac:	2b84      	cmp	r3, #132	; 0x84
 80080ae:	d005      	beq.n	80080bc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80080b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	4413      	add	r3, r2
 80080b8:	3303      	adds	r3, #3
 80080ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80080bc:	68fb      	ldr	r3, [r7, #12]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr

080080c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80080cc:	f000 fad0 	bl	8008670 <vTaskStartScheduler>
  
  return osOK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80080d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080d8:	b089      	sub	sp, #36	; 0x24
 80080da:	af04      	add	r7, sp, #16
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d020      	beq.n	800812a <osThreadCreate+0x54>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01c      	beq.n	800812a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	685c      	ldr	r4, [r3, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	691e      	ldr	r6, [r3, #16]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008102:	4618      	mov	r0, r3
 8008104:	f7ff ffc9 	bl	800809a <makeFreeRtosPriority>
 8008108:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008112:	9202      	str	r2, [sp, #8]
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	9100      	str	r1, [sp, #0]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	4632      	mov	r2, r6
 800811c:	4629      	mov	r1, r5
 800811e:	4620      	mov	r0, r4
 8008120:	f000 f8e8 	bl	80082f4 <xTaskCreateStatic>
 8008124:	4603      	mov	r3, r0
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	e01c      	b.n	8008164 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685c      	ldr	r4, [r3, #4]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008136:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff ffab 	bl	800809a <makeFreeRtosPriority>
 8008144:	4602      	mov	r2, r0
 8008146:	f107 030c 	add.w	r3, r7, #12
 800814a:	9301      	str	r3, [sp, #4]
 800814c:	9200      	str	r2, [sp, #0]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	4632      	mov	r2, r6
 8008152:	4629      	mov	r1, r5
 8008154:	4620      	mov	r0, r4
 8008156:	f000 f929 	bl	80083ac <xTaskCreate>
 800815a:	4603      	mov	r3, r0
 800815c:	2b01      	cmp	r3, #1
 800815e:	d001      	beq.n	8008164 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008160:	2300      	movs	r3, #0
 8008162:	e000      	b.n	8008166 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008164:	68fb      	ldr	r3, [r7, #12]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800816e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b084      	sub	sp, #16
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <osDelay+0x16>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	e000      	b.n	8008186 <osDelay+0x18>
 8008184:	2301      	movs	r3, #1
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fa3e 	bl	8008608 <vTaskDelay>
  
  return osOK;
 800818c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f103 0208 	add.w	r2, r3, #8
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081ae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f103 0208 	add.w	r2, r3, #8
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f103 0208 	add.w	r2, r3, #8
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081ca:	bf00      	nop
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr

080081d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081e2:	bf00      	nop
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bc80      	pop	{r7}
 80081ea:	4770      	bx	lr

080081ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	601a      	str	r2, [r3, #0]
}
 8008228:	bf00      	nop
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	bc80      	pop	{r7}
 8008230:	4770      	bx	lr

08008232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008232:	b480      	push	{r7}
 8008234:	b085      	sub	sp, #20
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008248:	d103      	bne.n	8008252 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	e00c      	b.n	800826c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3308      	adds	r3, #8
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	e002      	b.n	8008260 <vListInsert+0x2e>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	429a      	cmp	r2, r3
 800826a:	d2f6      	bcs.n	800825a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	1c5a      	adds	r2, r3, #1
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]
}
 8008298:	bf00      	nop
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	bc80      	pop	{r7}
 80082a0:	4770      	bx	lr

080082a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	6892      	ldr	r2, [r2, #8]
 80082b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	6852      	ldr	r2, [r2, #4]
 80082c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d103      	bne.n	80082d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	1e5a      	subs	r2, r3, #1
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bc80      	pop	{r7}
 80082f2:	4770      	bx	lr

080082f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08e      	sub	sp, #56	; 0x38
 80082f8:	af04      	add	r7, sp, #16
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008304:	2b00      	cmp	r3, #0
 8008306:	d10a      	bne.n	800831e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800831a:	bf00      	nop
 800831c:	e7fe      	b.n	800831c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10a      	bne.n	800833a <xTaskCreateStatic+0x46>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	61fb      	str	r3, [r7, #28]
}
 8008336:	bf00      	nop
 8008338:	e7fe      	b.n	8008338 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800833a:	2354      	movs	r3, #84	; 0x54
 800833c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2b54      	cmp	r3, #84	; 0x54
 8008342:	d00a      	beq.n	800835a <xTaskCreateStatic+0x66>
	__asm volatile
 8008344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	61bb      	str	r3, [r7, #24]
}
 8008356:	bf00      	nop
 8008358:	e7fe      	b.n	8008358 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800835a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835c:	2b00      	cmp	r3, #0
 800835e:	d01e      	beq.n	800839e <xTaskCreateStatic+0xaa>
 8008360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008362:	2b00      	cmp	r3, #0
 8008364:	d01b      	beq.n	800839e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800836a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800836e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	2202      	movs	r2, #2
 8008374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008378:	2300      	movs	r3, #0
 800837a:	9303      	str	r3, [sp, #12]
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	9302      	str	r3, [sp, #8]
 8008380:	f107 0314 	add.w	r3, r7, #20
 8008384:	9301      	str	r3, [sp, #4]
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	68b9      	ldr	r1, [r7, #8]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f850 	bl	8008436 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008398:	f000 f8cc 	bl	8008534 <prvAddNewTaskToReadyList>
 800839c:	e001      	b.n	80083a2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800839e:	2300      	movs	r3, #0
 80083a0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083a2:	697b      	ldr	r3, [r7, #20]
	}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3728      	adds	r7, #40	; 0x28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08c      	sub	sp, #48	; 0x30
 80083b0:	af04      	add	r7, sp, #16
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	603b      	str	r3, [r7, #0]
 80083b8:	4613      	mov	r3, r2
 80083ba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083bc:	88fb      	ldrh	r3, [r7, #6]
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fe85 	bl	80090d0 <pvPortMalloc>
 80083c6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00e      	beq.n	80083ec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80083ce:	2054      	movs	r0, #84	; 0x54
 80083d0:	f000 fe7e 	bl	80090d0 <pvPortMalloc>
 80083d4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	631a      	str	r2, [r3, #48]	; 0x30
 80083e2:	e005      	b.n	80083f0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083e4:	6978      	ldr	r0, [r7, #20]
 80083e6:	f000 ff37 	bl	8009258 <vPortFree>
 80083ea:	e001      	b.n	80083f0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d017      	beq.n	8008426 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083fe:	88fa      	ldrh	r2, [r7, #6]
 8008400:	2300      	movs	r3, #0
 8008402:	9303      	str	r3, [sp, #12]
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	9302      	str	r3, [sp, #8]
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	9301      	str	r3, [sp, #4]
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f80e 	bl	8008436 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800841a:	69f8      	ldr	r0, [r7, #28]
 800841c:	f000 f88a 	bl	8008534 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008420:	2301      	movs	r3, #1
 8008422:	61bb      	str	r3, [r7, #24]
 8008424:	e002      	b.n	800842c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800842a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800842c:	69bb      	ldr	r3, [r7, #24]
	}
 800842e:	4618      	mov	r0, r3
 8008430:	3720      	adds	r7, #32
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b088      	sub	sp, #32
 800843a:	af00      	add	r7, sp, #0
 800843c:	60f8      	str	r0, [r7, #12]
 800843e:	60b9      	str	r1, [r7, #8]
 8008440:	607a      	str	r2, [r7, #4]
 8008442:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800844e:	3b01      	subs	r3, #1
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	f023 0307 	bic.w	r3, r3, #7
 800845c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	f003 0307 	and.w	r3, r3, #7
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00a      	beq.n	800847e <prvInitialiseNewTask+0x48>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	617b      	str	r3, [r7, #20]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800847e:	2300      	movs	r3, #0
 8008480:	61fb      	str	r3, [r7, #28]
 8008482:	e012      	b.n	80084aa <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	4413      	add	r3, r2
 800848a:	7819      	ldrb	r1, [r3, #0]
 800848c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	3334      	adds	r3, #52	; 0x34
 8008494:	460a      	mov	r2, r1
 8008496:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	4413      	add	r3, r2
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d006      	beq.n	80084b2 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	3301      	adds	r3, #1
 80084a8:	61fb      	str	r3, [r7, #28]
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	2b0f      	cmp	r3, #15
 80084ae:	d9e9      	bls.n	8008484 <prvInitialiseNewTask+0x4e>
 80084b0:	e000      	b.n	80084b4 <prvInitialiseNewTask+0x7e>
		{
			break;
 80084b2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	2b06      	cmp	r3, #6
 80084c0:	d901      	bls.n	80084c6 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084c2:	2306      	movs	r3, #6
 80084c4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ca:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084d0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	2200      	movs	r2, #0
 80084d6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084da:	3304      	adds	r3, #4
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff fe79 	bl	80081d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	3318      	adds	r3, #24
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff fe74 	bl	80081d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f4:	f1c3 0207 	rsb	r2, r3, #7
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008500:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	2200      	movs	r2, #0
 8008506:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	69b8      	ldr	r0, [r7, #24]
 8008516:	f000 fc2b 	bl	8008d70 <pxPortInitialiseStack>
 800851a:	4602      	mov	r2, r0
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800852a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800852c:	bf00      	nop
 800852e:	3720      	adds	r7, #32
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800853c:	f000 fd06 	bl	8008f4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008540:	4b2a      	ldr	r3, [pc, #168]	; (80085ec <prvAddNewTaskToReadyList+0xb8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	4a29      	ldr	r2, [pc, #164]	; (80085ec <prvAddNewTaskToReadyList+0xb8>)
 8008548:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800854a:	4b29      	ldr	r3, [pc, #164]	; (80085f0 <prvAddNewTaskToReadyList+0xbc>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d109      	bne.n	8008566 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008552:	4a27      	ldr	r2, [pc, #156]	; (80085f0 <prvAddNewTaskToReadyList+0xbc>)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008558:	4b24      	ldr	r3, [pc, #144]	; (80085ec <prvAddNewTaskToReadyList+0xb8>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d110      	bne.n	8008582 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008560:	f000 fac0 	bl	8008ae4 <prvInitialiseTaskLists>
 8008564:	e00d      	b.n	8008582 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008566:	4b23      	ldr	r3, [pc, #140]	; (80085f4 <prvAddNewTaskToReadyList+0xc0>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d109      	bne.n	8008582 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800856e:	4b20      	ldr	r3, [pc, #128]	; (80085f0 <prvAddNewTaskToReadyList+0xbc>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	429a      	cmp	r2, r3
 800857a:	d802      	bhi.n	8008582 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800857c:	4a1c      	ldr	r2, [pc, #112]	; (80085f0 <prvAddNewTaskToReadyList+0xbc>)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008582:	4b1d      	ldr	r3, [pc, #116]	; (80085f8 <prvAddNewTaskToReadyList+0xc4>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3301      	adds	r3, #1
 8008588:	4a1b      	ldr	r2, [pc, #108]	; (80085f8 <prvAddNewTaskToReadyList+0xc4>)
 800858a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008590:	2201      	movs	r2, #1
 8008592:	409a      	lsls	r2, r3
 8008594:	4b19      	ldr	r3, [pc, #100]	; (80085fc <prvAddNewTaskToReadyList+0xc8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4313      	orrs	r3, r2
 800859a:	4a18      	ldr	r2, [pc, #96]	; (80085fc <prvAddNewTaskToReadyList+0xc8>)
 800859c:	6013      	str	r3, [r2, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a2:	4613      	mov	r3, r2
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	4a15      	ldr	r2, [pc, #84]	; (8008600 <prvAddNewTaskToReadyList+0xcc>)
 80085ac:	441a      	add	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3304      	adds	r3, #4
 80085b2:	4619      	mov	r1, r3
 80085b4:	4610      	mov	r0, r2
 80085b6:	f7ff fe19 	bl	80081ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085ba:	f000 fcf7 	bl	8008fac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085be:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <prvAddNewTaskToReadyList+0xc0>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00e      	beq.n	80085e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085c6:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <prvAddNewTaskToReadyList+0xbc>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d207      	bcs.n	80085e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085d4:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <prvAddNewTaskToReadyList+0xd0>)
 80085d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085e4:	bf00      	nop
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20000570 	.word	0x20000570
 80085f0:	20000470 	.word	0x20000470
 80085f4:	2000057c 	.word	0x2000057c
 80085f8:	2000058c 	.word	0x2000058c
 80085fc:	20000578 	.word	0x20000578
 8008600:	20000474 	.word	0x20000474
 8008604:	e000ed04 	.word	0xe000ed04

08008608 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d017      	beq.n	800864a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800861a:	4b13      	ldr	r3, [pc, #76]	; (8008668 <vTaskDelay+0x60>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00a      	beq.n	8008638 <vTaskDelay+0x30>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	60bb      	str	r3, [r7, #8]
}
 8008634:	bf00      	nop
 8008636:	e7fe      	b.n	8008636 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008638:	f000 f87a 	bl	8008730 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800863c:	2100      	movs	r1, #0
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fb30 	bl	8008ca4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008644:	f000 f882 	bl	800874c <xTaskResumeAll>
 8008648:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d107      	bne.n	8008660 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008650:	4b06      	ldr	r3, [pc, #24]	; (800866c <vTaskDelay+0x64>)
 8008652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008660:	bf00      	nop
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	20000598 	.word	0x20000598
 800866c:	e000ed04 	.word	0xe000ed04

08008670 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08a      	sub	sp, #40	; 0x28
 8008674:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008676:	2300      	movs	r3, #0
 8008678:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800867a:	2300      	movs	r3, #0
 800867c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800867e:	463a      	mov	r2, r7
 8008680:	1d39      	adds	r1, r7, #4
 8008682:	f107 0308 	add.w	r3, r7, #8
 8008686:	4618      	mov	r0, r3
 8008688:	f7f7 fd80 	bl	800018c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	9202      	str	r2, [sp, #8]
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	2300      	movs	r3, #0
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	2300      	movs	r3, #0
 800869c:	460a      	mov	r2, r1
 800869e:	491e      	ldr	r1, [pc, #120]	; (8008718 <vTaskStartScheduler+0xa8>)
 80086a0:	481e      	ldr	r0, [pc, #120]	; (800871c <vTaskStartScheduler+0xac>)
 80086a2:	f7ff fe27 	bl	80082f4 <xTaskCreateStatic>
 80086a6:	4603      	mov	r3, r0
 80086a8:	4a1d      	ldr	r2, [pc, #116]	; (8008720 <vTaskStartScheduler+0xb0>)
 80086aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086ac:	4b1c      	ldr	r3, [pc, #112]	; (8008720 <vTaskStartScheduler+0xb0>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086b4:	2301      	movs	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	e001      	b.n	80086be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d116      	bne.n	80086f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	613b      	str	r3, [r7, #16]
}
 80086d6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086d8:	4b12      	ldr	r3, [pc, #72]	; (8008724 <vTaskStartScheduler+0xb4>)
 80086da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086e0:	4b11      	ldr	r3, [pc, #68]	; (8008728 <vTaskStartScheduler+0xb8>)
 80086e2:	2201      	movs	r2, #1
 80086e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80086e6:	4b11      	ldr	r3, [pc, #68]	; (800872c <vTaskStartScheduler+0xbc>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086ec:	f000 fbbc 	bl	8008e68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086f0:	e00e      	b.n	8008710 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086f8:	d10a      	bne.n	8008710 <vTaskStartScheduler+0xa0>
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	60fb      	str	r3, [r7, #12]
}
 800870c:	bf00      	nop
 800870e:	e7fe      	b.n	800870e <vTaskStartScheduler+0x9e>
}
 8008710:	bf00      	nop
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	08009c8c 	.word	0x08009c8c
 800871c:	08008ab5 	.word	0x08008ab5
 8008720:	20000594 	.word	0x20000594
 8008724:	20000590 	.word	0x20000590
 8008728:	2000057c 	.word	0x2000057c
 800872c:	20000574 	.word	0x20000574

08008730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008734:	4b04      	ldr	r3, [pc, #16]	; (8008748 <vTaskSuspendAll+0x18>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3301      	adds	r3, #1
 800873a:	4a03      	ldr	r2, [pc, #12]	; (8008748 <vTaskSuspendAll+0x18>)
 800873c:	6013      	str	r3, [r2, #0]
}
 800873e:	bf00      	nop
 8008740:	46bd      	mov	sp, r7
 8008742:	bc80      	pop	{r7}
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	20000598 	.word	0x20000598

0800874c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008752:	2300      	movs	r3, #0
 8008754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008756:	2300      	movs	r3, #0
 8008758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800875a:	4b41      	ldr	r3, [pc, #260]	; (8008860 <xTaskResumeAll+0x114>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <xTaskResumeAll+0x2c>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	603b      	str	r3, [r7, #0]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008778:	f000 fbe8 	bl	8008f4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800877c:	4b38      	ldr	r3, [pc, #224]	; (8008860 <xTaskResumeAll+0x114>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3b01      	subs	r3, #1
 8008782:	4a37      	ldr	r2, [pc, #220]	; (8008860 <xTaskResumeAll+0x114>)
 8008784:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008786:	4b36      	ldr	r3, [pc, #216]	; (8008860 <xTaskResumeAll+0x114>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d161      	bne.n	8008852 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800878e:	4b35      	ldr	r3, [pc, #212]	; (8008864 <xTaskResumeAll+0x118>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d05d      	beq.n	8008852 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008796:	e02e      	b.n	80087f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008798:	4b33      	ldr	r3, [pc, #204]	; (8008868 <xTaskResumeAll+0x11c>)
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3318      	adds	r3, #24
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff fd7c 	bl	80082a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	3304      	adds	r3, #4
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7ff fd77 	bl	80082a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	2201      	movs	r2, #1
 80087ba:	409a      	lsls	r2, r3
 80087bc:	4b2b      	ldr	r3, [pc, #172]	; (800886c <xTaskResumeAll+0x120>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	4a2a      	ldr	r2, [pc, #168]	; (800886c <xTaskResumeAll+0x120>)
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ca:	4613      	mov	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4a27      	ldr	r2, [pc, #156]	; (8008870 <xTaskResumeAll+0x124>)
 80087d4:	441a      	add	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3304      	adds	r3, #4
 80087da:	4619      	mov	r1, r3
 80087dc:	4610      	mov	r0, r2
 80087de:	f7ff fd05 	bl	80081ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e6:	4b23      	ldr	r3, [pc, #140]	; (8008874 <xTaskResumeAll+0x128>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d302      	bcc.n	80087f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80087f0:	4b21      	ldr	r3, [pc, #132]	; (8008878 <xTaskResumeAll+0x12c>)
 80087f2:	2201      	movs	r2, #1
 80087f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087f6:	4b1c      	ldr	r3, [pc, #112]	; (8008868 <xTaskResumeAll+0x11c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1cc      	bne.n	8008798 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008804:	f000 fa0c 	bl	8008c20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008808:	4b1c      	ldr	r3, [pc, #112]	; (800887c <xTaskResumeAll+0x130>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d010      	beq.n	8008836 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008814:	f000 f836 	bl	8008884 <xTaskIncrementTick>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800881e:	4b16      	ldr	r3, [pc, #88]	; (8008878 <xTaskResumeAll+0x12c>)
 8008820:	2201      	movs	r2, #1
 8008822:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3b01      	subs	r3, #1
 8008828:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1f1      	bne.n	8008814 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008830:	4b12      	ldr	r3, [pc, #72]	; (800887c <xTaskResumeAll+0x130>)
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008836:	4b10      	ldr	r3, [pc, #64]	; (8008878 <xTaskResumeAll+0x12c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d009      	beq.n	8008852 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800883e:	2301      	movs	r3, #1
 8008840:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008842:	4b0f      	ldr	r3, [pc, #60]	; (8008880 <xTaskResumeAll+0x134>)
 8008844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008852:	f000 fbab 	bl	8008fac <vPortExitCritical>

	return xAlreadyYielded;
 8008856:	68bb      	ldr	r3, [r7, #8]
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	20000598 	.word	0x20000598
 8008864:	20000570 	.word	0x20000570
 8008868:	20000530 	.word	0x20000530
 800886c:	20000578 	.word	0x20000578
 8008870:	20000474 	.word	0x20000474
 8008874:	20000470 	.word	0x20000470
 8008878:	20000584 	.word	0x20000584
 800887c:	20000580 	.word	0x20000580
 8008880:	e000ed04 	.word	0xe000ed04

08008884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800888a:	2300      	movs	r3, #0
 800888c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800888e:	4b51      	ldr	r3, [pc, #324]	; (80089d4 <xTaskIncrementTick+0x150>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	f040 808d 	bne.w	80089b2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008898:	4b4f      	ldr	r3, [pc, #316]	; (80089d8 <xTaskIncrementTick+0x154>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3301      	adds	r3, #1
 800889e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088a0:	4a4d      	ldr	r2, [pc, #308]	; (80089d8 <xTaskIncrementTick+0x154>)
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d120      	bne.n	80088ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80088ac:	4b4b      	ldr	r3, [pc, #300]	; (80089dc <xTaskIncrementTick+0x158>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <xTaskIncrementTick+0x48>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	603b      	str	r3, [r7, #0]
}
 80088c8:	bf00      	nop
 80088ca:	e7fe      	b.n	80088ca <xTaskIncrementTick+0x46>
 80088cc:	4b43      	ldr	r3, [pc, #268]	; (80089dc <xTaskIncrementTick+0x158>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	4b43      	ldr	r3, [pc, #268]	; (80089e0 <xTaskIncrementTick+0x15c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a41      	ldr	r2, [pc, #260]	; (80089dc <xTaskIncrementTick+0x158>)
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	4a41      	ldr	r2, [pc, #260]	; (80089e0 <xTaskIncrementTick+0x15c>)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	4b40      	ldr	r3, [pc, #256]	; (80089e4 <xTaskIncrementTick+0x160>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3301      	adds	r3, #1
 80088e6:	4a3f      	ldr	r2, [pc, #252]	; (80089e4 <xTaskIncrementTick+0x160>)
 80088e8:	6013      	str	r3, [r2, #0]
 80088ea:	f000 f999 	bl	8008c20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088ee:	4b3e      	ldr	r3, [pc, #248]	; (80089e8 <xTaskIncrementTick+0x164>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d34d      	bcc.n	8008994 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088f8:	4b38      	ldr	r3, [pc, #224]	; (80089dc <xTaskIncrementTick+0x158>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d101      	bne.n	8008906 <xTaskIncrementTick+0x82>
 8008902:	2301      	movs	r3, #1
 8008904:	e000      	b.n	8008908 <xTaskIncrementTick+0x84>
 8008906:	2300      	movs	r3, #0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d004      	beq.n	8008916 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800890c:	4b36      	ldr	r3, [pc, #216]	; (80089e8 <xTaskIncrementTick+0x164>)
 800890e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008912:	601a      	str	r2, [r3, #0]
					break;
 8008914:	e03e      	b.n	8008994 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008916:	4b31      	ldr	r3, [pc, #196]	; (80089dc <xTaskIncrementTick+0x158>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	429a      	cmp	r2, r3
 800892c:	d203      	bcs.n	8008936 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800892e:	4a2e      	ldr	r2, [pc, #184]	; (80089e8 <xTaskIncrementTick+0x164>)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6013      	str	r3, [r2, #0]
						break;
 8008934:	e02e      	b.n	8008994 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	3304      	adds	r3, #4
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff fcb1 	bl	80082a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008944:	2b00      	cmp	r3, #0
 8008946:	d004      	beq.n	8008952 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	3318      	adds	r3, #24
 800894c:	4618      	mov	r0, r3
 800894e:	f7ff fca8 	bl	80082a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008956:	2201      	movs	r2, #1
 8008958:	409a      	lsls	r2, r3
 800895a:	4b24      	ldr	r3, [pc, #144]	; (80089ec <xTaskIncrementTick+0x168>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4313      	orrs	r3, r2
 8008960:	4a22      	ldr	r2, [pc, #136]	; (80089ec <xTaskIncrementTick+0x168>)
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008968:	4613      	mov	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	4a1f      	ldr	r2, [pc, #124]	; (80089f0 <xTaskIncrementTick+0x16c>)
 8008972:	441a      	add	r2, r3
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	3304      	adds	r3, #4
 8008978:	4619      	mov	r1, r3
 800897a:	4610      	mov	r0, r2
 800897c:	f7ff fc36 	bl	80081ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008984:	4b1b      	ldr	r3, [pc, #108]	; (80089f4 <xTaskIncrementTick+0x170>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898a:	429a      	cmp	r2, r3
 800898c:	d3b4      	bcc.n	80088f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800898e:	2301      	movs	r3, #1
 8008990:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008992:	e7b1      	b.n	80088f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008994:	4b17      	ldr	r3, [pc, #92]	; (80089f4 <xTaskIncrementTick+0x170>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899a:	4915      	ldr	r1, [pc, #84]	; (80089f0 <xTaskIncrementTick+0x16c>)
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	440b      	add	r3, r1
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d907      	bls.n	80089bc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80089ac:	2301      	movs	r3, #1
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	e004      	b.n	80089bc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80089b2:	4b11      	ldr	r3, [pc, #68]	; (80089f8 <xTaskIncrementTick+0x174>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3301      	adds	r3, #1
 80089b8:	4a0f      	ldr	r2, [pc, #60]	; (80089f8 <xTaskIncrementTick+0x174>)
 80089ba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80089bc:	4b0f      	ldr	r3, [pc, #60]	; (80089fc <xTaskIncrementTick+0x178>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80089c4:	2301      	movs	r3, #1
 80089c6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80089c8:	697b      	ldr	r3, [r7, #20]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3718      	adds	r7, #24
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000598 	.word	0x20000598
 80089d8:	20000574 	.word	0x20000574
 80089dc:	20000528 	.word	0x20000528
 80089e0:	2000052c 	.word	0x2000052c
 80089e4:	20000588 	.word	0x20000588
 80089e8:	20000590 	.word	0x20000590
 80089ec:	20000578 	.word	0x20000578
 80089f0:	20000474 	.word	0x20000474
 80089f4:	20000470 	.word	0x20000470
 80089f8:	20000580 	.word	0x20000580
 80089fc:	20000584 	.word	0x20000584

08008a00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a06:	4b26      	ldr	r3, [pc, #152]	; (8008aa0 <vTaskSwitchContext+0xa0>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a0e:	4b25      	ldr	r3, [pc, #148]	; (8008aa4 <vTaskSwitchContext+0xa4>)
 8008a10:	2201      	movs	r2, #1
 8008a12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a14:	e03f      	b.n	8008a96 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008a16:	4b23      	ldr	r3, [pc, #140]	; (8008aa4 <vTaskSwitchContext+0xa4>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008a1c:	4b22      	ldr	r3, [pc, #136]	; (8008aa8 <vTaskSwitchContext+0xa8>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	fab3 f383 	clz	r3, r3
 8008a28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	f1c3 031f 	rsb	r3, r3, #31
 8008a30:	617b      	str	r3, [r7, #20]
 8008a32:	491e      	ldr	r1, [pc, #120]	; (8008aac <vTaskSwitchContext+0xac>)
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10a      	bne.n	8008a5c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	607b      	str	r3, [r7, #4]
}
 8008a58:	bf00      	nop
 8008a5a:	e7fe      	b.n	8008a5a <vTaskSwitchContext+0x5a>
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4a11      	ldr	r2, [pc, #68]	; (8008aac <vTaskSwitchContext+0xac>)
 8008a68:	4413      	add	r3, r2
 8008a6a:	613b      	str	r3, [r7, #16]
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	605a      	str	r2, [r3, #4]
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d104      	bne.n	8008a8c <vTaskSwitchContext+0x8c>
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	605a      	str	r2, [r3, #4]
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	4a07      	ldr	r2, [pc, #28]	; (8008ab0 <vTaskSwitchContext+0xb0>)
 8008a94:	6013      	str	r3, [r2, #0]
}
 8008a96:	bf00      	nop
 8008a98:	371c      	adds	r7, #28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bc80      	pop	{r7}
 8008a9e:	4770      	bx	lr
 8008aa0:	20000598 	.word	0x20000598
 8008aa4:	20000584 	.word	0x20000584
 8008aa8:	20000578 	.word	0x20000578
 8008aac:	20000474 	.word	0x20000474
 8008ab0:	20000470 	.word	0x20000470

08008ab4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008abc:	f000 f852 	bl	8008b64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ac0:	4b06      	ldr	r3, [pc, #24]	; (8008adc <prvIdleTask+0x28>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d9f9      	bls.n	8008abc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ac8:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <prvIdleTask+0x2c>)
 8008aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ad8:	e7f0      	b.n	8008abc <prvIdleTask+0x8>
 8008ada:	bf00      	nop
 8008adc:	20000474 	.word	0x20000474
 8008ae0:	e000ed04 	.word	0xe000ed04

08008ae4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008aea:	2300      	movs	r3, #0
 8008aec:	607b      	str	r3, [r7, #4]
 8008aee:	e00c      	b.n	8008b0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	4613      	mov	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4a12      	ldr	r2, [pc, #72]	; (8008b44 <prvInitialiseTaskLists+0x60>)
 8008afc:	4413      	add	r3, r2
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff fb49 	bl	8008196 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3301      	adds	r3, #1
 8008b08:	607b      	str	r3, [r7, #4]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2b06      	cmp	r3, #6
 8008b0e:	d9ef      	bls.n	8008af0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b10:	480d      	ldr	r0, [pc, #52]	; (8008b48 <prvInitialiseTaskLists+0x64>)
 8008b12:	f7ff fb40 	bl	8008196 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b16:	480d      	ldr	r0, [pc, #52]	; (8008b4c <prvInitialiseTaskLists+0x68>)
 8008b18:	f7ff fb3d 	bl	8008196 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b1c:	480c      	ldr	r0, [pc, #48]	; (8008b50 <prvInitialiseTaskLists+0x6c>)
 8008b1e:	f7ff fb3a 	bl	8008196 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b22:	480c      	ldr	r0, [pc, #48]	; (8008b54 <prvInitialiseTaskLists+0x70>)
 8008b24:	f7ff fb37 	bl	8008196 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b28:	480b      	ldr	r0, [pc, #44]	; (8008b58 <prvInitialiseTaskLists+0x74>)
 8008b2a:	f7ff fb34 	bl	8008196 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b2e:	4b0b      	ldr	r3, [pc, #44]	; (8008b5c <prvInitialiseTaskLists+0x78>)
 8008b30:	4a05      	ldr	r2, [pc, #20]	; (8008b48 <prvInitialiseTaskLists+0x64>)
 8008b32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b34:	4b0a      	ldr	r3, [pc, #40]	; (8008b60 <prvInitialiseTaskLists+0x7c>)
 8008b36:	4a05      	ldr	r2, [pc, #20]	; (8008b4c <prvInitialiseTaskLists+0x68>)
 8008b38:	601a      	str	r2, [r3, #0]
}
 8008b3a:	bf00      	nop
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	20000474 	.word	0x20000474
 8008b48:	20000500 	.word	0x20000500
 8008b4c:	20000514 	.word	0x20000514
 8008b50:	20000530 	.word	0x20000530
 8008b54:	20000544 	.word	0x20000544
 8008b58:	2000055c 	.word	0x2000055c
 8008b5c:	20000528 	.word	0x20000528
 8008b60:	2000052c 	.word	0x2000052c

08008b64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b6a:	e019      	b.n	8008ba0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b6c:	f000 f9ee 	bl	8008f4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008b70:	4b10      	ldr	r3, [pc, #64]	; (8008bb4 <prvCheckTasksWaitingTermination+0x50>)
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7ff fb90 	bl	80082a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b82:	4b0d      	ldr	r3, [pc, #52]	; (8008bb8 <prvCheckTasksWaitingTermination+0x54>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	4a0b      	ldr	r2, [pc, #44]	; (8008bb8 <prvCheckTasksWaitingTermination+0x54>)
 8008b8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b8c:	4b0b      	ldr	r3, [pc, #44]	; (8008bbc <prvCheckTasksWaitingTermination+0x58>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	4a0a      	ldr	r2, [pc, #40]	; (8008bbc <prvCheckTasksWaitingTermination+0x58>)
 8008b94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b96:	f000 fa09 	bl	8008fac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f810 	bl	8008bc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ba0:	4b06      	ldr	r3, [pc, #24]	; (8008bbc <prvCheckTasksWaitingTermination+0x58>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d1e1      	bne.n	8008b6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ba8:	bf00      	nop
 8008baa:	bf00      	nop
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000544 	.word	0x20000544
 8008bb8:	20000570 	.word	0x20000570
 8008bbc:	20000558 	.word	0x20000558

08008bc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d108      	bne.n	8008be4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 fb3e 	bl	8009258 <vPortFree>
				vPortFree( pxTCB );
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fb3b 	bl	8009258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008be2:	e018      	b.n	8008c16 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d103      	bne.n	8008bf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fb32 	bl	8009258 <vPortFree>
	}
 8008bf4:	e00f      	b.n	8008c16 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d00a      	beq.n	8008c16 <prvDeleteTCB+0x56>
	__asm volatile
 8008c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c04:	f383 8811 	msr	BASEPRI, r3
 8008c08:	f3bf 8f6f 	isb	sy
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	60fb      	str	r3, [r7, #12]
}
 8008c12:	bf00      	nop
 8008c14:	e7fe      	b.n	8008c14 <prvDeleteTCB+0x54>
	}
 8008c16:	bf00      	nop
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
	...

08008c20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c26:	4b0e      	ldr	r3, [pc, #56]	; (8008c60 <prvResetNextTaskUnblockTime+0x40>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <prvResetNextTaskUnblockTime+0x14>
 8008c30:	2301      	movs	r3, #1
 8008c32:	e000      	b.n	8008c36 <prvResetNextTaskUnblockTime+0x16>
 8008c34:	2300      	movs	r3, #0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d004      	beq.n	8008c44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c3a:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <prvResetNextTaskUnblockTime+0x44>)
 8008c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c42:	e008      	b.n	8008c56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008c44:	4b06      	ldr	r3, [pc, #24]	; (8008c60 <prvResetNextTaskUnblockTime+0x40>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	4a04      	ldr	r2, [pc, #16]	; (8008c64 <prvResetNextTaskUnblockTime+0x44>)
 8008c54:	6013      	str	r3, [r2, #0]
}
 8008c56:	bf00      	nop
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bc80      	pop	{r7}
 8008c5e:	4770      	bx	lr
 8008c60:	20000528 	.word	0x20000528
 8008c64:	20000590 	.word	0x20000590

08008c68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c6e:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <xTaskGetSchedulerState+0x34>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d102      	bne.n	8008c7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c76:	2301      	movs	r3, #1
 8008c78:	607b      	str	r3, [r7, #4]
 8008c7a:	e008      	b.n	8008c8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c7c:	4b08      	ldr	r3, [pc, #32]	; (8008ca0 <xTaskGetSchedulerState+0x38>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d102      	bne.n	8008c8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c84:	2302      	movs	r3, #2
 8008c86:	607b      	str	r3, [r7, #4]
 8008c88:	e001      	b.n	8008c8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c8e:	687b      	ldr	r3, [r7, #4]
	}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bc80      	pop	{r7}
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	2000057c 	.word	0x2000057c
 8008ca0:	20000598 	.word	0x20000598

08008ca4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cae:	4b29      	ldr	r3, [pc, #164]	; (8008d54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb4:	4b28      	ldr	r3, [pc, #160]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff faf1 	bl	80082a2 <uxListRemove>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10b      	bne.n	8008cde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008cc6:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	2201      	movs	r2, #1
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	43da      	mvns	r2, r3
 8008cd4:	4b21      	ldr	r3, [pc, #132]	; (8008d5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	4a20      	ldr	r2, [pc, #128]	; (8008d5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ce4:	d10a      	bne.n	8008cfc <prvAddCurrentTaskToDelayedList+0x58>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cec:	4b1a      	ldr	r3, [pc, #104]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	481a      	ldr	r0, [pc, #104]	; (8008d60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008cf6:	f7ff fa79 	bl	80081ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cfa:	e026      	b.n	8008d4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4413      	add	r3, r2
 8008d02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d04:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d209      	bcs.n	8008d28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d14:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	4619      	mov	r1, r3
 8008d20:	4610      	mov	r0, r2
 8008d22:	f7ff fa86 	bl	8008232 <vListInsert>
}
 8008d26:	e010      	b.n	8008d4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d28:	4b0f      	ldr	r3, [pc, #60]	; (8008d68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3304      	adds	r3, #4
 8008d32:	4619      	mov	r1, r3
 8008d34:	4610      	mov	r0, r2
 8008d36:	f7ff fa7c 	bl	8008232 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d3a:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d202      	bcs.n	8008d4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008d44:	4a09      	ldr	r2, [pc, #36]	; (8008d6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	6013      	str	r3, [r2, #0]
}
 8008d4a:	bf00      	nop
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000574 	.word	0x20000574
 8008d58:	20000470 	.word	0x20000470
 8008d5c:	20000578 	.word	0x20000578
 8008d60:	2000055c 	.word	0x2000055c
 8008d64:	2000052c 	.word	0x2000052c
 8008d68:	20000528 	.word	0x20000528
 8008d6c:	20000590 	.word	0x20000590

08008d70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3b04      	subs	r3, #4
 8008d80:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3b04      	subs	r3, #4
 8008d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f023 0201 	bic.w	r2, r3, #1
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	3b04      	subs	r3, #4
 8008d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008da0:	4a08      	ldr	r2, [pc, #32]	; (8008dc4 <pxPortInitialiseStack+0x54>)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3b14      	subs	r3, #20
 8008daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3b20      	subs	r3, #32
 8008db6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008db8:	68fb      	ldr	r3, [r7, #12]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr
 8008dc4:	08008dc9 	.word	0x08008dc9

08008dc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008dd2:	4b12      	ldr	r3, [pc, #72]	; (8008e1c <prvTaskExitError+0x54>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dda:	d00a      	beq.n	8008df2 <prvTaskExitError+0x2a>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	60fb      	str	r3, [r7, #12]
}
 8008dee:	bf00      	nop
 8008df0:	e7fe      	b.n	8008df0 <prvTaskExitError+0x28>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	60bb      	str	r3, [r7, #8]
}
 8008e04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e06:	bf00      	nop
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0fc      	beq.n	8008e08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e0e:	bf00      	nop
 8008e10:	bf00      	nop
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bc80      	pop	{r7}
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	20000108 	.word	0x20000108

08008e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e20:	4b07      	ldr	r3, [pc, #28]	; (8008e40 <pxCurrentTCBConst2>)
 8008e22:	6819      	ldr	r1, [r3, #0]
 8008e24:	6808      	ldr	r0, [r1, #0]
 8008e26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e2a:	f380 8809 	msr	PSP, r0
 8008e2e:	f3bf 8f6f 	isb	sy
 8008e32:	f04f 0000 	mov.w	r0, #0
 8008e36:	f380 8811 	msr	BASEPRI, r0
 8008e3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008e3e:	4770      	bx	lr

08008e40 <pxCurrentTCBConst2>:
 8008e40:	20000470 	.word	0x20000470
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop

08008e48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008e48:	4806      	ldr	r0, [pc, #24]	; (8008e64 <prvPortStartFirstTask+0x1c>)
 8008e4a:	6800      	ldr	r0, [r0, #0]
 8008e4c:	6800      	ldr	r0, [r0, #0]
 8008e4e:	f380 8808 	msr	MSP, r0
 8008e52:	b662      	cpsie	i
 8008e54:	b661      	cpsie	f
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	df00      	svc	0
 8008e60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e62:	bf00      	nop
 8008e64:	e000ed08 	.word	0xe000ed08

08008e68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e6e:	4b32      	ldr	r3, [pc, #200]	; (8008f38 <xPortStartScheduler+0xd0>)
 8008e70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	22ff      	movs	r2, #255	; 0xff
 8008e7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	4b2a      	ldr	r3, [pc, #168]	; (8008f3c <xPortStartScheduler+0xd4>)
 8008e94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e96:	4b2a      	ldr	r3, [pc, #168]	; (8008f40 <xPortStartScheduler+0xd8>)
 8008e98:	2207      	movs	r2, #7
 8008e9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e9c:	e009      	b.n	8008eb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008e9e:	4b28      	ldr	r3, [pc, #160]	; (8008f40 <xPortStartScheduler+0xd8>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3b01      	subs	r3, #1
 8008ea4:	4a26      	ldr	r2, [pc, #152]	; (8008f40 <xPortStartScheduler+0xd8>)
 8008ea6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ea8:	78fb      	ldrb	r3, [r7, #3]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eb2:	78fb      	ldrb	r3, [r7, #3]
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eba:	2b80      	cmp	r3, #128	; 0x80
 8008ebc:	d0ef      	beq.n	8008e9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ebe:	4b20      	ldr	r3, [pc, #128]	; (8008f40 <xPortStartScheduler+0xd8>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f1c3 0307 	rsb	r3, r3, #7
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	d00a      	beq.n	8008ee0 <xPortStartScheduler+0x78>
	__asm volatile
 8008eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ece:	f383 8811 	msr	BASEPRI, r3
 8008ed2:	f3bf 8f6f 	isb	sy
 8008ed6:	f3bf 8f4f 	dsb	sy
 8008eda:	60bb      	str	r3, [r7, #8]
}
 8008edc:	bf00      	nop
 8008ede:	e7fe      	b.n	8008ede <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ee0:	4b17      	ldr	r3, [pc, #92]	; (8008f40 <xPortStartScheduler+0xd8>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	021b      	lsls	r3, r3, #8
 8008ee6:	4a16      	ldr	r2, [pc, #88]	; (8008f40 <xPortStartScheduler+0xd8>)
 8008ee8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008eea:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <xPortStartScheduler+0xd8>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ef2:	4a13      	ldr	r2, [pc, #76]	; (8008f40 <xPortStartScheduler+0xd8>)
 8008ef4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008efe:	4b11      	ldr	r3, [pc, #68]	; (8008f44 <xPortStartScheduler+0xdc>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a10      	ldr	r2, [pc, #64]	; (8008f44 <xPortStartScheduler+0xdc>)
 8008f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f0a:	4b0e      	ldr	r3, [pc, #56]	; (8008f44 <xPortStartScheduler+0xdc>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a0d      	ldr	r2, [pc, #52]	; (8008f44 <xPortStartScheduler+0xdc>)
 8008f10:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f14:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f16:	f000 f8b9 	bl	800908c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f1a:	4b0b      	ldr	r3, [pc, #44]	; (8008f48 <xPortStartScheduler+0xe0>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f20:	f7ff ff92 	bl	8008e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f24:	f7ff fd6c 	bl	8008a00 <vTaskSwitchContext>
	prvTaskExitError();
 8008f28:	f7ff ff4e 	bl	8008dc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	e000e400 	.word	0xe000e400
 8008f3c:	2000059c 	.word	0x2000059c
 8008f40:	200005a0 	.word	0x200005a0
 8008f44:	e000ed20 	.word	0xe000ed20
 8008f48:	20000108 	.word	0x20000108

08008f4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	607b      	str	r3, [r7, #4]
}
 8008f64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f66:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <vPortEnterCritical+0x58>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	4a0d      	ldr	r2, [pc, #52]	; (8008fa4 <vPortEnterCritical+0x58>)
 8008f6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f70:	4b0c      	ldr	r3, [pc, #48]	; (8008fa4 <vPortEnterCritical+0x58>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d10f      	bne.n	8008f98 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f78:	4b0b      	ldr	r3, [pc, #44]	; (8008fa8 <vPortEnterCritical+0x5c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <vPortEnterCritical+0x4c>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	603b      	str	r3, [r7, #0]
}
 8008f94:	bf00      	nop
 8008f96:	e7fe      	b.n	8008f96 <vPortEnterCritical+0x4a>
	}
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bc80      	pop	{r7}
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	20000108 	.word	0x20000108
 8008fa8:	e000ed04 	.word	0xe000ed04

08008fac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008fb2:	4b11      	ldr	r3, [pc, #68]	; (8008ff8 <vPortExitCritical+0x4c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10a      	bne.n	8008fd0 <vPortExitCritical+0x24>
	__asm volatile
 8008fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbe:	f383 8811 	msr	BASEPRI, r3
 8008fc2:	f3bf 8f6f 	isb	sy
 8008fc6:	f3bf 8f4f 	dsb	sy
 8008fca:	607b      	str	r3, [r7, #4]
}
 8008fcc:	bf00      	nop
 8008fce:	e7fe      	b.n	8008fce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008fd0:	4b09      	ldr	r3, [pc, #36]	; (8008ff8 <vPortExitCritical+0x4c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	4a08      	ldr	r2, [pc, #32]	; (8008ff8 <vPortExitCritical+0x4c>)
 8008fd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008fda:	4b07      	ldr	r3, [pc, #28]	; (8008ff8 <vPortExitCritical+0x4c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d105      	bne.n	8008fee <vPortExitCritical+0x42>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008fec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fee:	bf00      	nop
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bc80      	pop	{r7}
 8008ff6:	4770      	bx	lr
 8008ff8:	20000108 	.word	0x20000108
 8008ffc:	00000000 	.word	0x00000000

08009000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009000:	f3ef 8009 	mrs	r0, PSP
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <pxCurrentTCBConst>)
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009010:	6010      	str	r0, [r2, #0]
 8009012:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009016:	f04f 0050 	mov.w	r0, #80	; 0x50
 800901a:	f380 8811 	msr	BASEPRI, r0
 800901e:	f7ff fcef 	bl	8008a00 <vTaskSwitchContext>
 8009022:	f04f 0000 	mov.w	r0, #0
 8009026:	f380 8811 	msr	BASEPRI, r0
 800902a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800902e:	6819      	ldr	r1, [r3, #0]
 8009030:	6808      	ldr	r0, [r1, #0]
 8009032:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009036:	f380 8809 	msr	PSP, r0
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	4770      	bx	lr

08009040 <pxCurrentTCBConst>:
 8009040:	20000470 	.word	0x20000470
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop

08009048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
	__asm volatile
 800904e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009052:	f383 8811 	msr	BASEPRI, r3
 8009056:	f3bf 8f6f 	isb	sy
 800905a:	f3bf 8f4f 	dsb	sy
 800905e:	607b      	str	r3, [r7, #4]
}
 8009060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009062:	f7ff fc0f 	bl	8008884 <xTaskIncrementTick>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d003      	beq.n	8009074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800906c:	4b06      	ldr	r3, [pc, #24]	; (8009088 <xPortSysTickHandler+0x40>)
 800906e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	2300      	movs	r3, #0
 8009076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	f383 8811 	msr	BASEPRI, r3
}
 800907e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009080:	bf00      	nop
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009090:	4b0a      	ldr	r3, [pc, #40]	; (80090bc <vPortSetupTimerInterrupt+0x30>)
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009096:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <vPortSetupTimerInterrupt+0x34>)
 8009098:	2200      	movs	r2, #0
 800909a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800909c:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <vPortSetupTimerInterrupt+0x38>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <vPortSetupTimerInterrupt+0x3c>)
 80090a2:	fba2 2303 	umull	r2, r3, r2, r3
 80090a6:	099b      	lsrs	r3, r3, #6
 80090a8:	4a08      	ldr	r2, [pc, #32]	; (80090cc <vPortSetupTimerInterrupt+0x40>)
 80090aa:	3b01      	subs	r3, #1
 80090ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090ae:	4b03      	ldr	r3, [pc, #12]	; (80090bc <vPortSetupTimerInterrupt+0x30>)
 80090b0:	2207      	movs	r2, #7
 80090b2:	601a      	str	r2, [r3, #0]
}
 80090b4:	bf00      	nop
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bc80      	pop	{r7}
 80090ba:	4770      	bx	lr
 80090bc:	e000e010 	.word	0xe000e010
 80090c0:	e000e018 	.word	0xe000e018
 80090c4:	20000000 	.word	0x20000000
 80090c8:	10624dd3 	.word	0x10624dd3
 80090cc:	e000e014 	.word	0xe000e014

080090d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08a      	sub	sp, #40	; 0x28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090d8:	2300      	movs	r3, #0
 80090da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090dc:	f7ff fb28 	bl	8008730 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090e0:	4b58      	ldr	r3, [pc, #352]	; (8009244 <pvPortMalloc+0x174>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d101      	bne.n	80090ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80090e8:	f000 f910 	bl	800930c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090ec:	4b56      	ldr	r3, [pc, #344]	; (8009248 <pvPortMalloc+0x178>)
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4013      	ands	r3, r2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f040 808e 	bne.w	8009216 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d01d      	beq.n	800913c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009100:	2208      	movs	r2, #8
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4413      	add	r3, r2
 8009106:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f003 0307 	and.w	r3, r3, #7
 800910e:	2b00      	cmp	r3, #0
 8009110:	d014      	beq.n	800913c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f023 0307 	bic.w	r3, r3, #7
 8009118:	3308      	adds	r3, #8
 800911a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f003 0307 	and.w	r3, r3, #7
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00a      	beq.n	800913c <pvPortMalloc+0x6c>
	__asm volatile
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	617b      	str	r3, [r7, #20]
}
 8009138:	bf00      	nop
 800913a:	e7fe      	b.n	800913a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d069      	beq.n	8009216 <pvPortMalloc+0x146>
 8009142:	4b42      	ldr	r3, [pc, #264]	; (800924c <pvPortMalloc+0x17c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	429a      	cmp	r2, r3
 800914a:	d864      	bhi.n	8009216 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800914c:	4b40      	ldr	r3, [pc, #256]	; (8009250 <pvPortMalloc+0x180>)
 800914e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009150:	4b3f      	ldr	r3, [pc, #252]	; (8009250 <pvPortMalloc+0x180>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009156:	e004      	b.n	8009162 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	429a      	cmp	r2, r3
 800916a:	d903      	bls.n	8009174 <pvPortMalloc+0xa4>
 800916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1f1      	bne.n	8009158 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009174:	4b33      	ldr	r3, [pc, #204]	; (8009244 <pvPortMalloc+0x174>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800917a:	429a      	cmp	r2, r3
 800917c:	d04b      	beq.n	8009216 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2208      	movs	r2, #8
 8009184:	4413      	add	r3, r2
 8009186:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	1ad2      	subs	r2, r2, r3
 8009198:	2308      	movs	r3, #8
 800919a:	005b      	lsls	r3, r3, #1
 800919c:	429a      	cmp	r2, r3
 800919e:	d91f      	bls.n	80091e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4413      	add	r3, r2
 80091a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	f003 0307 	and.w	r3, r3, #7
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00a      	beq.n	80091c8 <pvPortMalloc+0xf8>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	613b      	str	r3, [r7, #16]
}
 80091c4:	bf00      	nop
 80091c6:	e7fe      	b.n	80091c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	1ad2      	subs	r2, r2, r3
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091da:	69b8      	ldr	r0, [r7, #24]
 80091dc:	f000 f8f8 	bl	80093d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80091e0:	4b1a      	ldr	r3, [pc, #104]	; (800924c <pvPortMalloc+0x17c>)
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	4a18      	ldr	r2, [pc, #96]	; (800924c <pvPortMalloc+0x17c>)
 80091ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091ee:	4b17      	ldr	r3, [pc, #92]	; (800924c <pvPortMalloc+0x17c>)
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	4b18      	ldr	r3, [pc, #96]	; (8009254 <pvPortMalloc+0x184>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d203      	bcs.n	8009202 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80091fa:	4b14      	ldr	r3, [pc, #80]	; (800924c <pvPortMalloc+0x17c>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a15      	ldr	r2, [pc, #84]	; (8009254 <pvPortMalloc+0x184>)
 8009200:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	4b10      	ldr	r3, [pc, #64]	; (8009248 <pvPortMalloc+0x178>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	431a      	orrs	r2, r3
 800920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800920e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009216:	f7ff fa99 	bl	800874c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	f003 0307 	and.w	r3, r3, #7
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00a      	beq.n	800923a <pvPortMalloc+0x16a>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	f383 8811 	msr	BASEPRI, r3
 800922c:	f3bf 8f6f 	isb	sy
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	60fb      	str	r3, [r7, #12]
}
 8009236:	bf00      	nop
 8009238:	e7fe      	b.n	8009238 <pvPortMalloc+0x168>
	return pvReturn;
 800923a:	69fb      	ldr	r3, [r7, #28]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3728      	adds	r7, #40	; 0x28
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	200011ac 	.word	0x200011ac
 8009248:	200011b8 	.word	0x200011b8
 800924c:	200011b0 	.word	0x200011b0
 8009250:	200011a4 	.word	0x200011a4
 8009254:	200011b4 	.word	0x200011b4

08009258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d048      	beq.n	80092fc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800926a:	2308      	movs	r3, #8
 800926c:	425b      	negs	r3, r3
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	4413      	add	r3, r2
 8009272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	4b21      	ldr	r3, [pc, #132]	; (8009304 <vPortFree+0xac>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4013      	ands	r3, r2
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10a      	bne.n	800929c <vPortFree+0x44>
	__asm volatile
 8009286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	60fb      	str	r3, [r7, #12]
}
 8009298:	bf00      	nop
 800929a:	e7fe      	b.n	800929a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00a      	beq.n	80092ba <vPortFree+0x62>
	__asm volatile
 80092a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a8:	f383 8811 	msr	BASEPRI, r3
 80092ac:	f3bf 8f6f 	isb	sy
 80092b0:	f3bf 8f4f 	dsb	sy
 80092b4:	60bb      	str	r3, [r7, #8]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	4b11      	ldr	r3, [pc, #68]	; (8009304 <vPortFree+0xac>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4013      	ands	r3, r2
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d019      	beq.n	80092fc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d115      	bne.n	80092fc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	4b0b      	ldr	r3, [pc, #44]	; (8009304 <vPortFree+0xac>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	43db      	mvns	r3, r3
 80092da:	401a      	ands	r2, r3
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80092e0:	f7ff fa26 	bl	8008730 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	685a      	ldr	r2, [r3, #4]
 80092e8:	4b07      	ldr	r3, [pc, #28]	; (8009308 <vPortFree+0xb0>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4413      	add	r3, r2
 80092ee:	4a06      	ldr	r2, [pc, #24]	; (8009308 <vPortFree+0xb0>)
 80092f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80092f2:	6938      	ldr	r0, [r7, #16]
 80092f4:	f000 f86c 	bl	80093d0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80092f8:	f7ff fa28 	bl	800874c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80092fc:	bf00      	nop
 80092fe:	3718      	adds	r7, #24
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	200011b8 	.word	0x200011b8
 8009308:	200011b0 	.word	0x200011b0

0800930c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009312:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009316:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009318:	4b27      	ldr	r3, [pc, #156]	; (80093b8 <prvHeapInit+0xac>)
 800931a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f003 0307 	and.w	r3, r3, #7
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00c      	beq.n	8009340 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	3307      	adds	r3, #7
 800932a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f023 0307 	bic.w	r3, r3, #7
 8009332:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	4a1f      	ldr	r2, [pc, #124]	; (80093b8 <prvHeapInit+0xac>)
 800933c:	4413      	add	r3, r2
 800933e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009344:	4a1d      	ldr	r2, [pc, #116]	; (80093bc <prvHeapInit+0xb0>)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800934a:	4b1c      	ldr	r3, [pc, #112]	; (80093bc <prvHeapInit+0xb0>)
 800934c:	2200      	movs	r2, #0
 800934e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	4413      	add	r3, r2
 8009356:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009358:	2208      	movs	r2, #8
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	1a9b      	subs	r3, r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f023 0307 	bic.w	r3, r3, #7
 8009366:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	4a15      	ldr	r2, [pc, #84]	; (80093c0 <prvHeapInit+0xb4>)
 800936c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800936e:	4b14      	ldr	r3, [pc, #80]	; (80093c0 <prvHeapInit+0xb4>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2200      	movs	r2, #0
 8009374:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009376:	4b12      	ldr	r3, [pc, #72]	; (80093c0 <prvHeapInit+0xb4>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	1ad2      	subs	r2, r2, r3
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800938c:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <prvHeapInit+0xb4>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	4a0a      	ldr	r2, [pc, #40]	; (80093c4 <prvHeapInit+0xb8>)
 800939a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	4a09      	ldr	r2, [pc, #36]	; (80093c8 <prvHeapInit+0xbc>)
 80093a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093a4:	4b09      	ldr	r3, [pc, #36]	; (80093cc <prvHeapInit+0xc0>)
 80093a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80093aa:	601a      	str	r2, [r3, #0]
}
 80093ac:	bf00      	nop
 80093ae:	3714      	adds	r7, #20
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bc80      	pop	{r7}
 80093b4:	4770      	bx	lr
 80093b6:	bf00      	nop
 80093b8:	200005a4 	.word	0x200005a4
 80093bc:	200011a4 	.word	0x200011a4
 80093c0:	200011ac 	.word	0x200011ac
 80093c4:	200011b4 	.word	0x200011b4
 80093c8:	200011b0 	.word	0x200011b0
 80093cc:	200011b8 	.word	0x200011b8

080093d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093d8:	4b27      	ldr	r3, [pc, #156]	; (8009478 <prvInsertBlockIntoFreeList+0xa8>)
 80093da:	60fb      	str	r3, [r7, #12]
 80093dc:	e002      	b.n	80093e4 <prvInsertBlockIntoFreeList+0x14>
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d8f7      	bhi.n	80093de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	4413      	add	r3, r2
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d108      	bne.n	8009412 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	441a      	add	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	441a      	add	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	429a      	cmp	r2, r3
 8009424:	d118      	bne.n	8009458 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	4b14      	ldr	r3, [pc, #80]	; (800947c <prvInsertBlockIntoFreeList+0xac>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	429a      	cmp	r2, r3
 8009430:	d00d      	beq.n	800944e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	441a      	add	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	e008      	b.n	8009460 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800944e:	4b0b      	ldr	r3, [pc, #44]	; (800947c <prvInsertBlockIntoFreeList+0xac>)
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	e003      	b.n	8009460 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	429a      	cmp	r2, r3
 8009466:	d002      	beq.n	800946e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800946e:	bf00      	nop
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	bc80      	pop	{r7}
 8009476:	4770      	bx	lr
 8009478:	200011a4 	.word	0x200011a4
 800947c:	200011ac 	.word	0x200011ac

08009480 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009484:	2200      	movs	r2, #0
 8009486:	490e      	ldr	r1, [pc, #56]	; (80094c0 <MX_USB_DEVICE_Init+0x40>)
 8009488:	480e      	ldr	r0, [pc, #56]	; (80094c4 <MX_USB_DEVICE_Init+0x44>)
 800948a:	f7fd fd8b 	bl	8006fa4 <USBD_Init>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d001      	beq.n	8009498 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009494:	f7f7 f84a 	bl	800052c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009498:	490b      	ldr	r1, [pc, #44]	; (80094c8 <MX_USB_DEVICE_Init+0x48>)
 800949a:	480a      	ldr	r0, [pc, #40]	; (80094c4 <MX_USB_DEVICE_Init+0x44>)
 800949c:	f7fd fdad 	bl	8006ffa <USBD_RegisterClass>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80094a6:	f7f7 f841 	bl	800052c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094aa:	4806      	ldr	r0, [pc, #24]	; (80094c4 <MX_USB_DEVICE_Init+0x44>)
 80094ac:	f7fd fdbe 	bl	800702c <USBD_Start>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80094b6:	f7f7 f839 	bl	800052c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094ba:	bf00      	nop
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	2000010c 	.word	0x2000010c
 80094c4:	200011bc 	.word	0x200011bc
 80094c8:	2000000c 	.word	0x2000000c

080094cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	4603      	mov	r3, r0
 80094d4:	6039      	str	r1, [r7, #0]
 80094d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	2212      	movs	r2, #18
 80094dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094de:	4b03      	ldr	r3, [pc, #12]	; (80094ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bc80      	pop	{r7}
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	20000128 	.word	0x20000128

080094f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	6039      	str	r1, [r7, #0]
 80094fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2204      	movs	r2, #4
 8009500:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009502:	4b03      	ldr	r3, [pc, #12]	; (8009510 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	bc80      	pop	{r7}
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	2000013c 	.word	0x2000013c

08009514 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	4603      	mov	r3, r0
 800951c:	6039      	str	r1, [r7, #0]
 800951e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d105      	bne.n	8009532 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	4907      	ldr	r1, [pc, #28]	; (8009548 <USBD_FS_ProductStrDescriptor+0x34>)
 800952a:	4808      	ldr	r0, [pc, #32]	; (800954c <USBD_FS_ProductStrDescriptor+0x38>)
 800952c:	f7fe fcf6 	bl	8007f1c <USBD_GetString>
 8009530:	e004      	b.n	800953c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	4904      	ldr	r1, [pc, #16]	; (8009548 <USBD_FS_ProductStrDescriptor+0x34>)
 8009536:	4805      	ldr	r0, [pc, #20]	; (800954c <USBD_FS_ProductStrDescriptor+0x38>)
 8009538:	f7fe fcf0 	bl	8007f1c <USBD_GetString>
  }
  return USBD_StrDesc;
 800953c:	4b02      	ldr	r3, [pc, #8]	; (8009548 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20001480 	.word	0x20001480
 800954c:	08009c94 	.word	0x08009c94

08009550 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	4603      	mov	r3, r0
 8009558:	6039      	str	r1, [r7, #0]
 800955a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	4904      	ldr	r1, [pc, #16]	; (8009570 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009560:	4804      	ldr	r0, [pc, #16]	; (8009574 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009562:	f7fe fcdb 	bl	8007f1c <USBD_GetString>
  return USBD_StrDesc;
 8009566:	4b02      	ldr	r3, [pc, #8]	; (8009570 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009568:	4618      	mov	r0, r3
 800956a:	3708      	adds	r7, #8
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	20001480 	.word	0x20001480
 8009574:	08009ca4 	.word	0x08009ca4

08009578 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	4603      	mov	r3, r0
 8009580:	6039      	str	r1, [r7, #0]
 8009582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	221a      	movs	r2, #26
 8009588:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800958a:	f000 f843 	bl	8009614 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800958e:	4b02      	ldr	r3, [pc, #8]	; (8009598 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	20000140 	.word	0x20000140

0800959c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4603      	mov	r3, r0
 80095a4:	6039      	str	r1, [r7, #0]
 80095a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095a8:	79fb      	ldrb	r3, [r7, #7]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d105      	bne.n	80095ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	4907      	ldr	r1, [pc, #28]	; (80095d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095b2:	4808      	ldr	r0, [pc, #32]	; (80095d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095b4:	f7fe fcb2 	bl	8007f1c <USBD_GetString>
 80095b8:	e004      	b.n	80095c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	4904      	ldr	r1, [pc, #16]	; (80095d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095be:	4805      	ldr	r0, [pc, #20]	; (80095d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095c0:	f7fe fcac 	bl	8007f1c <USBD_GetString>
  }
  return USBD_StrDesc;
 80095c4:	4b02      	ldr	r3, [pc, #8]	; (80095d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	20001480 	.word	0x20001480
 80095d4:	08009cb8 	.word	0x08009cb8

080095d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4603      	mov	r3, r0
 80095e0:	6039      	str	r1, [r7, #0]
 80095e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095e4:	79fb      	ldrb	r3, [r7, #7]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d105      	bne.n	80095f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	4907      	ldr	r1, [pc, #28]	; (800960c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095ee:	4808      	ldr	r0, [pc, #32]	; (8009610 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095f0:	f7fe fc94 	bl	8007f1c <USBD_GetString>
 80095f4:	e004      	b.n	8009600 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	4904      	ldr	r1, [pc, #16]	; (800960c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095fa:	4805      	ldr	r0, [pc, #20]	; (8009610 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095fc:	f7fe fc8e 	bl	8007f1c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009600:	4b02      	ldr	r3, [pc, #8]	; (800960c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009602:	4618      	mov	r0, r3
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20001480 	.word	0x20001480
 8009610:	08009cc4 	.word	0x08009cc4

08009614 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800961a:	4b0f      	ldr	r3, [pc, #60]	; (8009658 <Get_SerialNum+0x44>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009620:	4b0e      	ldr	r3, [pc, #56]	; (800965c <Get_SerialNum+0x48>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009626:	4b0e      	ldr	r3, [pc, #56]	; (8009660 <Get_SerialNum+0x4c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4413      	add	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d009      	beq.n	800964e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800963a:	2208      	movs	r2, #8
 800963c:	4909      	ldr	r1, [pc, #36]	; (8009664 <Get_SerialNum+0x50>)
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f000 f814 	bl	800966c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009644:	2204      	movs	r2, #4
 8009646:	4908      	ldr	r1, [pc, #32]	; (8009668 <Get_SerialNum+0x54>)
 8009648:	68b8      	ldr	r0, [r7, #8]
 800964a:	f000 f80f 	bl	800966c <IntToUnicode>
  }
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	1ffff7e8 	.word	0x1ffff7e8
 800965c:	1ffff7ec 	.word	0x1ffff7ec
 8009660:	1ffff7f0 	.word	0x1ffff7f0
 8009664:	20000142 	.word	0x20000142
 8009668:	20000152 	.word	0x20000152

0800966c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800966c:	b480      	push	{r7}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	4613      	mov	r3, r2
 8009678:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800967e:	2300      	movs	r3, #0
 8009680:	75fb      	strb	r3, [r7, #23]
 8009682:	e027      	b.n	80096d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	0f1b      	lsrs	r3, r3, #28
 8009688:	2b09      	cmp	r3, #9
 800968a:	d80b      	bhi.n	80096a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	0f1b      	lsrs	r3, r3, #28
 8009690:	b2da      	uxtb	r2, r3
 8009692:	7dfb      	ldrb	r3, [r7, #23]
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	4619      	mov	r1, r3
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	440b      	add	r3, r1
 800969c:	3230      	adds	r2, #48	; 0x30
 800969e:	b2d2      	uxtb	r2, r2
 80096a0:	701a      	strb	r2, [r3, #0]
 80096a2:	e00a      	b.n	80096ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	0f1b      	lsrs	r3, r3, #28
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
 80096ac:	005b      	lsls	r3, r3, #1
 80096ae:	4619      	mov	r1, r3
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	440b      	add	r3, r1
 80096b4:	3237      	adds	r2, #55	; 0x37
 80096b6:	b2d2      	uxtb	r2, r2
 80096b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	011b      	lsls	r3, r3, #4
 80096be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	3301      	adds	r3, #1
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	4413      	add	r3, r2
 80096ca:	2200      	movs	r2, #0
 80096cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
 80096d0:	3301      	adds	r3, #1
 80096d2:	75fb      	strb	r3, [r7, #23]
 80096d4:	7dfa      	ldrb	r2, [r7, #23]
 80096d6:	79fb      	ldrb	r3, [r7, #7]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d3d3      	bcc.n	8009684 <IntToUnicode+0x18>
  }
}
 80096dc:	bf00      	nop
 80096de:	bf00      	nop
 80096e0:	371c      	adds	r7, #28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bc80      	pop	{r7}
 80096e6:	4770      	bx	lr

080096e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a0d      	ldr	r2, [pc, #52]	; (800972c <HAL_PCD_MspInit+0x44>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d113      	bne.n	8009722 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80096fa:	4b0d      	ldr	r3, [pc, #52]	; (8009730 <HAL_PCD_MspInit+0x48>)
 80096fc:	69db      	ldr	r3, [r3, #28]
 80096fe:	4a0c      	ldr	r2, [pc, #48]	; (8009730 <HAL_PCD_MspInit+0x48>)
 8009700:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009704:	61d3      	str	r3, [r2, #28]
 8009706:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <HAL_PCD_MspInit+0x48>)
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800970e:	60fb      	str	r3, [r7, #12]
 8009710:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009712:	2200      	movs	r2, #0
 8009714:	2105      	movs	r1, #5
 8009716:	2014      	movs	r0, #20
 8009718:	f7f7 f981 	bl	8000a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800971c:	2014      	movs	r0, #20
 800971e:	f7f7 f99a 	bl	8000a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009722:	bf00      	nop
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	40005c00 	.word	0x40005c00
 8009730:	40021000 	.word	0x40021000

08009734 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009748:	4619      	mov	r1, r3
 800974a:	4610      	mov	r0, r2
 800974c:	f7fd fcb6 	bl	80070bc <USBD_LL_SetupStage>
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800976a:	78fa      	ldrb	r2, [r7, #3]
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	4613      	mov	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	00db      	lsls	r3, r3, #3
 8009776:	440b      	add	r3, r1
 8009778:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	78fb      	ldrb	r3, [r7, #3]
 8009780:	4619      	mov	r1, r3
 8009782:	f7fd fce8 	bl	8007156 <USBD_LL_DataOutStage>
}
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b082      	sub	sp, #8
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	460b      	mov	r3, r1
 8009798:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 80097a0:	78fa      	ldrb	r2, [r7, #3]
 80097a2:	6879      	ldr	r1, [r7, #4]
 80097a4:	4613      	mov	r3, r2
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	440b      	add	r3, r1
 80097ae:	333c      	adds	r3, #60	; 0x3c
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	78fb      	ldrb	r3, [r7, #3]
 80097b4:	4619      	mov	r1, r3
 80097b6:	f7fd fd3f 	bl	8007238 <USBD_LL_DataInStage>
}
 80097ba:	bf00      	nop
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b082      	sub	sp, #8
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fd fe4f 	bl	8007474 <USBD_LL_SOF>
}
 80097d6:	bf00      	nop
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097e6:	2301      	movs	r3, #1
 80097e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d001      	beq.n	80097f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80097f2:	f7f6 fe9b 	bl	800052c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80097fc:	7bfa      	ldrb	r2, [r7, #15]
 80097fe:	4611      	mov	r1, r2
 8009800:	4618      	mov	r0, r3
 8009802:	f7fd fdff 	bl	8007404 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800980c:	4618      	mov	r0, r3
 800980e:	f7fd fdb8 	bl	8007382 <USBD_LL_Reset>
}
 8009812:	bf00      	nop
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800982a:	4618      	mov	r0, r3
 800982c:	f7fd fdf9 	bl	8007422 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d005      	beq.n	8009844 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009838:	4b04      	ldr	r3, [pc, #16]	; (800984c <HAL_PCD_SuspendCallback+0x30>)
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	4a03      	ldr	r2, [pc, #12]	; (800984c <HAL_PCD_SuspendCallback+0x30>)
 800983e:	f043 0306 	orr.w	r3, r3, #6
 8009842:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009844:	bf00      	nop
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	e000ed00 	.word	0xe000ed00

08009850 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800985e:	4618      	mov	r0, r3
 8009860:	f7fd fdf3 	bl	800744a <USBD_LL_Resume>
}
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009874:	4a1f      	ldr	r2, [pc, #124]	; (80098f4 <USBD_LL_Init+0x88>)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a1d      	ldr	r2, [pc, #116]	; (80098f4 <USBD_LL_Init+0x88>)
 8009880:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009884:	4b1b      	ldr	r3, [pc, #108]	; (80098f4 <USBD_LL_Init+0x88>)
 8009886:	4a1c      	ldr	r2, [pc, #112]	; (80098f8 <USBD_LL_Init+0x8c>)
 8009888:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800988a:	4b1a      	ldr	r3, [pc, #104]	; (80098f4 <USBD_LL_Init+0x88>)
 800988c:	2208      	movs	r2, #8
 800988e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009890:	4b18      	ldr	r3, [pc, #96]	; (80098f4 <USBD_LL_Init+0x88>)
 8009892:	2202      	movs	r2, #2
 8009894:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009896:	4b17      	ldr	r3, [pc, #92]	; (80098f4 <USBD_LL_Init+0x88>)
 8009898:	2200      	movs	r2, #0
 800989a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800989c:	4b15      	ldr	r3, [pc, #84]	; (80098f4 <USBD_LL_Init+0x88>)
 800989e:	2200      	movs	r2, #0
 80098a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098a2:	4b14      	ldr	r3, [pc, #80]	; (80098f4 <USBD_LL_Init+0x88>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098a8:	4812      	ldr	r0, [pc, #72]	; (80098f4 <USBD_LL_Init+0x88>)
 80098aa:	f7f7 fb25 	bl	8000ef8 <HAL_PCD_Init>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80098b4:	f7f6 fe3a 	bl	800052c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098be:	2318      	movs	r3, #24
 80098c0:	2200      	movs	r2, #0
 80098c2:	2100      	movs	r1, #0
 80098c4:	f7f9 f82d 	bl	8002922 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098ce:	2358      	movs	r3, #88	; 0x58
 80098d0:	2200      	movs	r2, #0
 80098d2:	2180      	movs	r1, #128	; 0x80
 80098d4:	f7f9 f825 	bl	8002922 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098e2:	2200      	movs	r2, #0
 80098e4:	2181      	movs	r1, #129	; 0x81
 80098e6:	f7f9 f81c 	bl	8002922 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3708      	adds	r7, #8
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20001680 	.word	0x20001680
 80098f8:	40005c00 	.word	0x40005c00

080098fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009912:	4618      	mov	r0, r3
 8009914:	f7f7 fbef 	bl	80010f6 <HAL_PCD_Start>
 8009918:	4603      	mov	r3, r0
 800991a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	4618      	mov	r0, r3
 8009920:	f000 f93c 	bl	8009b9c <USBD_Get_USB_Status>
 8009924:	4603      	mov	r3, r0
 8009926:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009928:	7bbb      	ldrb	r3, [r7, #14]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
 800993a:	4608      	mov	r0, r1
 800993c:	4611      	mov	r1, r2
 800993e:	461a      	mov	r2, r3
 8009940:	4603      	mov	r3, r0
 8009942:	70fb      	strb	r3, [r7, #3]
 8009944:	460b      	mov	r3, r1
 8009946:	70bb      	strb	r3, [r7, #2]
 8009948:	4613      	mov	r3, r2
 800994a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800995a:	78bb      	ldrb	r3, [r7, #2]
 800995c:	883a      	ldrh	r2, [r7, #0]
 800995e:	78f9      	ldrb	r1, [r7, #3]
 8009960:	f7f7 fd44 	bl	80013ec <HAL_PCD_EP_Open>
 8009964:	4603      	mov	r3, r0
 8009966:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	4618      	mov	r0, r3
 800996c:	f000 f916 	bl	8009b9c <USBD_Get_USB_Status>
 8009970:	4603      	mov	r3, r0
 8009972:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009974:	7bbb      	ldrb	r3, [r7, #14]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	460b      	mov	r3, r1
 8009988:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009998:	78fa      	ldrb	r2, [r7, #3]
 800999a:	4611      	mov	r1, r2
 800999c:	4618      	mov	r0, r3
 800999e:	f7f7 fd82 	bl	80014a6 <HAL_PCD_EP_Close>
 80099a2:	4603      	mov	r3, r0
 80099a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a6:	7bfb      	ldrb	r3, [r7, #15]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f000 f8f7 	bl	8009b9c <USBD_Get_USB_Status>
 80099ae:	4603      	mov	r3, r0
 80099b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c8:	2300      	movs	r3, #0
 80099ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099d6:	78fa      	ldrb	r2, [r7, #3]
 80099d8:	4611      	mov	r1, r2
 80099da:	4618      	mov	r0, r3
 80099dc:	f7f7 fe13 	bl	8001606 <HAL_PCD_EP_SetStall>
 80099e0:	4603      	mov	r3, r0
 80099e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 f8d8 	bl	8009b9c <USBD_Get_USB_Status>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	460b      	mov	r3, r1
 8009a04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a14:	78fa      	ldrb	r2, [r7, #3]
 8009a16:	4611      	mov	r1, r2
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f7f7 fe54 	bl	80016c6 <HAL_PCD_EP_ClrStall>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f000 f8b9 	bl	8009b9c <USBD_Get_USB_Status>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	da0c      	bge.n	8009a6e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a54:	78fb      	ldrb	r3, [r7, #3]
 8009a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a5a:	68f9      	ldr	r1, [r7, #12]
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	4613      	mov	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	00db      	lsls	r3, r3, #3
 8009a66:	440b      	add	r3, r1
 8009a68:	3302      	adds	r3, #2
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	e00b      	b.n	8009a86 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a6e:	78fb      	ldrb	r3, [r7, #3]
 8009a70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a74:	68f9      	ldr	r1, [r7, #12]
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	00db      	lsls	r3, r3, #3
 8009a7e:	440b      	add	r3, r1
 8009a80:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009a84:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bc80      	pop	{r7}
 8009a8e:	4770      	bx	lr

08009a90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009aaa:	78fa      	ldrb	r2, [r7, #3]
 8009aac:	4611      	mov	r1, r2
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7f7 fc77 	bl	80013a2 <HAL_PCD_SetAddress>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
 8009aba:	4618      	mov	r0, r3
 8009abc:	f000 f86e 	bl	8009b9c <USBD_Get_USB_Status>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b086      	sub	sp, #24
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	60f8      	str	r0, [r7, #12]
 8009ad6:	607a      	str	r2, [r7, #4]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	460b      	mov	r3, r1
 8009adc:	72fb      	strb	r3, [r7, #11]
 8009ade:	4613      	mov	r3, r2
 8009ae0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009af0:	893b      	ldrh	r3, [r7, #8]
 8009af2:	7af9      	ldrb	r1, [r7, #11]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	f7f7 fd4f 	bl	8001598 <HAL_PCD_EP_Transmit>
 8009afa:	4603      	mov	r3, r0
 8009afc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 f84b 	bl	8009b9c <USBD_Get_USB_Status>
 8009b06:	4603      	mov	r3, r0
 8009b08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3718      	adds	r7, #24
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	607a      	str	r2, [r7, #4]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	460b      	mov	r3, r1
 8009b22:	72fb      	strb	r3, [r7, #11]
 8009b24:	4613      	mov	r3, r2
 8009b26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b36:	893b      	ldrh	r3, [r7, #8]
 8009b38:	7af9      	ldrb	r1, [r7, #11]
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	f7f7 fcfb 	bl	8001536 <HAL_PCD_EP_Receive>
 8009b40:	4603      	mov	r3, r0
 8009b42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 f828 	bl	8009b9c <USBD_Get_USB_Status>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b50:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009b64:	4b02      	ldr	r3, [pc, #8]	; (8009b70 <USBD_static_malloc+0x14>)
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bc80      	pop	{r7}
 8009b6e:	4770      	bx	lr
 8009b70:	20001970 	.word	0x20001970

08009b74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]

}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bc80      	pop	{r7}
 8009b84:	4770      	bx	lr

08009b86 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b86:	b480      	push	{r7}
 8009b88:	b083      	sub	sp, #12
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	460b      	mov	r3, r1
 8009b90:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009b92:	bf00      	nop
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bc80      	pop	{r7}
 8009b9a:	4770      	bx	lr

08009b9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009baa:	79fb      	ldrb	r3, [r7, #7]
 8009bac:	2b03      	cmp	r3, #3
 8009bae:	d817      	bhi.n	8009be0 <USBD_Get_USB_Status+0x44>
 8009bb0:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <USBD_Get_USB_Status+0x1c>)
 8009bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb6:	bf00      	nop
 8009bb8:	08009bc9 	.word	0x08009bc9
 8009bbc:	08009bcf 	.word	0x08009bcf
 8009bc0:	08009bd5 	.word	0x08009bd5
 8009bc4:	08009bdb 	.word	0x08009bdb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	73fb      	strb	r3, [r7, #15]
    break;
 8009bcc:	e00b      	b.n	8009be6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009bce:	2302      	movs	r3, #2
 8009bd0:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd2:	e008      	b.n	8009be6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009bd8:	e005      	b.n	8009be6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009bda:	2302      	movs	r3, #2
 8009bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8009bde:	e002      	b.n	8009be6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009be0:	2302      	movs	r3, #2
 8009be2:	73fb      	strb	r3, [r7, #15]
    break;
 8009be4:	bf00      	nop
  }
  return usb_status;
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bc80      	pop	{r7}
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop

08009bf4 <memset>:
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	4402      	add	r2, r0
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d100      	bne.n	8009bfe <memset+0xa>
 8009bfc:	4770      	bx	lr
 8009bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8009c02:	e7f9      	b.n	8009bf8 <memset+0x4>

08009c04 <__libc_init_array>:
 8009c04:	b570      	push	{r4, r5, r6, lr}
 8009c06:	2600      	movs	r6, #0
 8009c08:	4d0c      	ldr	r5, [pc, #48]	; (8009c3c <__libc_init_array+0x38>)
 8009c0a:	4c0d      	ldr	r4, [pc, #52]	; (8009c40 <__libc_init_array+0x3c>)
 8009c0c:	1b64      	subs	r4, r4, r5
 8009c0e:	10a4      	asrs	r4, r4, #2
 8009c10:	42a6      	cmp	r6, r4
 8009c12:	d109      	bne.n	8009c28 <__libc_init_array+0x24>
 8009c14:	f000 f81a 	bl	8009c4c <_init>
 8009c18:	2600      	movs	r6, #0
 8009c1a:	4d0a      	ldr	r5, [pc, #40]	; (8009c44 <__libc_init_array+0x40>)
 8009c1c:	4c0a      	ldr	r4, [pc, #40]	; (8009c48 <__libc_init_array+0x44>)
 8009c1e:	1b64      	subs	r4, r4, r5
 8009c20:	10a4      	asrs	r4, r4, #2
 8009c22:	42a6      	cmp	r6, r4
 8009c24:	d105      	bne.n	8009c32 <__libc_init_array+0x2e>
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
 8009c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c2c:	4798      	blx	r3
 8009c2e:	3601      	adds	r6, #1
 8009c30:	e7ee      	b.n	8009c10 <__libc_init_array+0xc>
 8009c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c36:	4798      	blx	r3
 8009c38:	3601      	adds	r6, #1
 8009c3a:	e7f2      	b.n	8009c22 <__libc_init_array+0x1e>
 8009c3c:	08009d00 	.word	0x08009d00
 8009c40:	08009d00 	.word	0x08009d00
 8009c44:	08009d00 	.word	0x08009d00
 8009c48:	08009d04 	.word	0x08009d04

08009c4c <_init>:
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	bf00      	nop
 8009c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c52:	bc08      	pop	{r3}
 8009c54:	469e      	mov	lr, r3
 8009c56:	4770      	bx	lr

08009c58 <_fini>:
 8009c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c5a:	bf00      	nop
 8009c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5e:	bc08      	pop	{r3}
 8009c60:	469e      	mov	lr, r3
 8009c62:	4770      	bx	lr
