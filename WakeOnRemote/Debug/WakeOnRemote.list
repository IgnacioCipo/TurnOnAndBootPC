
WakeOnRemote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c24  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08009d34  08009d34  00019d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dd0  08009dd0  0002015c  2**0
                  CONTENTS
  4 .ARM          00000000  08009dd0  08009dd0  0002015c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009dd0  08009dd0  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dd4  08009dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08009dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001828  2000015c  08009f34  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001984  08009f34  00021984  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020185  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018bff  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f6  00000000  00000000  00038dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0003cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116b  00000000  00000000  0003e570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bba1  00000000  00000000  0003f6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd45  00000000  00000000  0005b27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097320  00000000  00000000  00076fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005dc0  00000000  00000000  0010e2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001140a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000015c 	.word	0x2000015c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d1c 	.word	0x08009d1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000160 	.word	0x20000160
 800014c:	08009d1c 	.word	0x08009d1c

08000150 <HAL_UART_RxCpltCallback>:
extern UART_HandleTypeDef huart1;
/* USER CODE END Variables */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	4a07      	ldr	r2, [pc, #28]	; (800017c <HAL_UART_RxCpltCallback+0x2c>)
 800015e:	4293      	cmp	r3, r2
 8000160:	d102      	bne.n	8000168 <HAL_UART_RxCpltCallback+0x18>
		received_msg_flag = 1;
 8000162:	4b07      	ldr	r3, [pc, #28]	; (8000180 <HAL_UART_RxCpltCallback+0x30>)
 8000164:	2201      	movs	r2, #1
 8000166:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t*) UART1_rxBuffer, 3);
 8000168:	2203      	movs	r2, #3
 800016a:	4906      	ldr	r1, [pc, #24]	; (8000184 <HAL_UART_RxCpltCallback+0x34>)
 800016c:	4806      	ldr	r0, [pc, #24]	; (8000188 <HAL_UART_RxCpltCallback+0x38>)
 800016e:	f003 fcef 	bl	8003b50 <HAL_UART_Receive_IT>
}
 8000172:	bf00      	nop
 8000174:	3708      	adds	r7, #8
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40013800 	.word	0x40013800
 8000180:	20000460 	.word	0x20000460
 8000184:	20000464 	.word	0x20000464
 8000188:	20000414 	.word	0x20000414

0800018c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	60f8      	str	r0, [r7, #12]
 8000194:	60b9      	str	r1, [r7, #8]
 8000196:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	4a06      	ldr	r2, [pc, #24]	; (80001b4 <vApplicationGetIdleTaskMemory+0x28>)
 800019c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800019e:	68bb      	ldr	r3, [r7, #8]
 80001a0:	4a05      	ldr	r2, [pc, #20]	; (80001b8 <vApplicationGetIdleTaskMemory+0x2c>)
 80001a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2280      	movs	r2, #128	; 0x80
 80001a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001aa:	bf00      	nop
 80001ac:	3714      	adds	r7, #20
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000178 	.word	0x20000178
 80001b8:	200001cc 	.word	0x200001cc

080001bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001bc:	b5b0      	push	{r4, r5, r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c2:	f000 fb3f 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001c6:	f000 f81f 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ca:	f000 f8f9 	bl	80003c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001ce:	f000 f875 	bl	80002bc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001d2:	f000 f8cb 	bl	800036c <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartMainTask, osPriorityNormal, 0, 512);
 80001d6:	4b0a      	ldr	r3, [pc, #40]	; (8000200 <main+0x44>)
 80001d8:	1d3c      	adds	r4, r7, #4
 80001da:	461d      	mov	r5, r3
 80001dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f007 ffd6 	bl	800819e <osThreadCreate>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a03      	ldr	r2, [pc, #12]	; (8000204 <main+0x48>)
 80001f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001f8:	f007 ffca 	bl	8008190 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <main+0x40>
 80001fe:	bf00      	nop
 8000200:	08009d40 	.word	0x08009d40
 8000204:	2000045c 	.word	0x2000045c

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b094      	sub	sp, #80	; 0x50
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f009 fd54 	bl	8009cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000240:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000258:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fc06 	bl	8002a70 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026a:	f000 f9ab 	bl	80005c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fe72 	bl	8002f74 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000296:	f000 f995 	bl	80005c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800029a:	2310      	movs	r3, #16
 800029c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800029e:	2300      	movs	r3, #0
 80002a0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 fff3 	bl	8003290 <HAL_RCCEx_PeriphCLKConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002b0:	f000 f988 	bl	80005c4 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3750      	adds	r7, #80	; 0x50
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b08a      	sub	sp, #40	; 0x28
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c2:	f107 0320 	add.w	r3, r7, #32
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]
 80002da:	615a      	str	r2, [r3, #20]
 80002dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002de:	4b22      	ldr	r3, [pc, #136]	; (8000368 <MX_TIM2_Init+0xac>)
 80002e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002e6:	4b20      	ldr	r3, [pc, #128]	; (8000368 <MX_TIM2_Init+0xac>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ec:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <MX_TIM2_Init+0xac>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002f2:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <MX_TIM2_Init+0xac>)
 80002f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002fa:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <MX_TIM2_Init+0xac>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000300:	4b19      	ldr	r3, [pc, #100]	; (8000368 <MX_TIM2_Init+0xac>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000306:	4818      	ldr	r0, [pc, #96]	; (8000368 <MX_TIM2_Init+0xac>)
 8000308:	f003 f878 	bl	80033fc <HAL_TIM_PWM_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000312:	f000 f957 	bl	80005c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000316:	2300      	movs	r3, #0
 8000318:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800031a:	2300      	movs	r3, #0
 800031c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800031e:	f107 0320 	add.w	r3, r7, #32
 8000322:	4619      	mov	r1, r3
 8000324:	4810      	ldr	r0, [pc, #64]	; (8000368 <MX_TIM2_Init+0xac>)
 8000326:	f003 fb65 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000330:	f000 f948 	bl	80005c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000334:	2360      	movs	r3, #96	; 0x60
 8000336:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	4619      	mov	r1, r3
 800034a:	4807      	ldr	r0, [pc, #28]	; (8000368 <MX_TIM2_Init+0xac>)
 800034c:	f003 f8a6 	bl	800349c <HAL_TIM_PWM_ConfigChannel>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000356:	f000 f935 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800035a:	4803      	ldr	r0, [pc, #12]	; (8000368 <MX_TIM2_Init+0xac>)
 800035c:	f000 f98c 	bl	8000678 <HAL_TIM_MspPostInit>

}
 8000360:	bf00      	nop
 8000362:	3728      	adds	r7, #40	; 0x28
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	200003cc 	.word	0x200003cc

0800036c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <MX_USART1_UART_Init+0x50>)
 8000374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800037c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038a:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000392:	220c      	movs	r2, #12
 8000394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000396:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <MX_USART1_UART_Init+0x4c>)
 80003a4:	f003 fb84 	bl	8003ab0 <HAL_UART_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ae:	f000 f909 	bl	80005c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000414 	.word	0x20000414
 80003bc:	40013800 	.word	0x40013800

080003c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b088      	sub	sp, #32
 80003c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c6:	f107 0310 	add.w	r3, r7, #16
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d4:	4b1e      	ldr	r3, [pc, #120]	; (8000450 <MX_GPIO_Init+0x90>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a1d      	ldr	r2, [pc, #116]	; (8000450 <MX_GPIO_Init+0x90>)
 80003da:	f043 0310 	orr.w	r3, r3, #16
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <MX_GPIO_Init+0x90>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0310 	and.w	r3, r3, #16
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_GPIO_Init+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a17      	ldr	r2, [pc, #92]	; (8000450 <MX_GPIO_Init+0x90>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <MX_GPIO_Init+0x90>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0320 	and.w	r3, r3, #32
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_GPIO_Init+0x90>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a11      	ldr	r2, [pc, #68]	; (8000450 <MX_GPIO_Init+0x90>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_GPIO_Init+0x90>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0304 	and.w	r3, r3, #4
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000422:	480c      	ldr	r0, [pc, #48]	; (8000454 <MX_GPIO_Init+0x94>)
 8000424:	f000 fdb4 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000428:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800042c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	2301      	movs	r3, #1
 8000430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	2302      	movs	r3, #2
 8000438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800043a:	f107 0310 	add.w	r3, r7, #16
 800043e:	4619      	mov	r1, r3
 8000440:	4804      	ldr	r0, [pc, #16]	; (8000454 <MX_GPIO_Init+0x94>)
 8000442:	f000 fc21 	bl	8000c88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000446:	bf00      	nop
 8000448:	3720      	adds	r7, #32
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000
 8000454:	40011000 	.word	0x40011000

08000458 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000460:	f009 f876 	bl	8009550 <MX_USB_DEVICE_Init>
	  uint8_t KEYCODE4;
	  uint8_t KEYCODE5;
	  uint8_t KEYCODE6;
  } keyboardHID;

  keyboardHID keyboardhid = {0,0,0,0,0,0,0,0};
 8000464:	f107 0308 	add.w	r3, r7, #8
 8000468:	2200      	movs	r2, #0
 800046a:	601a      	str	r2, [r3, #0]
 800046c:	605a      	str	r2, [r3, #4]

  HAL_UART_Receive_IT(&huart1, (uint8_t*) UART1_rxBuffer, 3);
 800046e:	2203      	movs	r2, #3
 8000470:	494f      	ldr	r1, [pc, #316]	; (80005b0 <StartMainTask+0x158>)
 8000472:	4850      	ldr	r0, [pc, #320]	; (80005b4 <StartMainTask+0x15c>)
 8000474:	f003 fb6c 	bl	8003b50 <HAL_UART_Receive_IT>

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047e:	484e      	ldr	r0, [pc, #312]	; (80005b8 <StartMainTask+0x160>)
 8000480:	f000 fd86 	bl	8000f90 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000484:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000488:	f007 fed5 	bl	8008236 <osDelay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000492:	4849      	ldr	r0, [pc, #292]	; (80005b8 <StartMainTask+0x160>)
 8000494:	f000 fd7c 	bl	8000f90 <HAL_GPIO_WritePin>
	  osDelay(1000);
 8000498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800049c:	f007 fecb 	bl	8008236 <osDelay>

	  received_msg_flag = 1;
 80004a0:	4b46      	ldr	r3, [pc, #280]	; (80005bc <StartMainTask+0x164>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	701a      	strb	r2, [r3, #0]
	  UART1_rxBuffer[0] = 0xA1;
 80004a6:	4b42      	ldr	r3, [pc, #264]	; (80005b0 <StartMainTask+0x158>)
 80004a8:	22a1      	movs	r2, #161	; 0xa1
 80004aa:	701a      	strb	r2, [r3, #0]
	  UART1_rxBuffer[1] = 0x02;
 80004ac:	4b40      	ldr	r3, [pc, #256]	; (80005b0 <StartMainTask+0x158>)
 80004ae:	2202      	movs	r2, #2
 80004b0:	705a      	strb	r2, [r3, #1]
	  UART1_rxBuffer[2] = 0xB1;
 80004b2:	4b3f      	ldr	r3, [pc, #252]	; (80005b0 <StartMainTask+0x158>)
 80004b4:	22b1      	movs	r2, #177	; 0xb1
 80004b6:	709a      	strb	r2, [r3, #2]
	  // If a new message has arrived
	  if((received_msg_flag == 1) && (UART1_rxBuffer[0] == 0xA1) && (UART1_rxBuffer[2] == 0xB1)){
 80004b8:	4b40      	ldr	r3, [pc, #256]	; (80005bc <StartMainTask+0x164>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d173      	bne.n	80005a8 <StartMainTask+0x150>
 80004c0:	4b3b      	ldr	r3, [pc, #236]	; (80005b0 <StartMainTask+0x158>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2ba1      	cmp	r3, #161	; 0xa1
 80004c6:	d16f      	bne.n	80005a8 <StartMainTask+0x150>
 80004c8:	4b39      	ldr	r3, [pc, #228]	; (80005b0 <StartMainTask+0x158>)
 80004ca:	789b      	ldrb	r3, [r3, #2]
 80004cc:	2bb1      	cmp	r3, #177	; 0xb1
 80004ce:	d16b      	bne.n	80005a8 <StartMainTask+0x150>
		  // Check if the user wants to go into Ubuntu
		  if(UART1_rxBuffer[0] == 0x01){
 80004d0:	4b37      	ldr	r3, [pc, #220]	; (80005b0 <StartMainTask+0x158>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d118      	bne.n	800050a <StartMainTask+0xb2>
			  // Just sends Enter because Ubuntu is in the first boot position
			  keyboardhid.KEYCODE1 = 0x58;		// Send "Enter"
 80004d8:	2358      	movs	r3, #88	; 0x58
 80004da:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	2208      	movs	r2, #8
 80004e2:	4619      	mov	r1, r3
 80004e4:	4836      	ldr	r0, [pc, #216]	; (80005c0 <StartMainTask+0x168>)
 80004e6:	f006 fd4d 	bl	8006f84 <USBD_HID_SendReport>
			  osDelay(50);
 80004ea:	2032      	movs	r0, #50	; 0x32
 80004ec:	f007 fea3 	bl	8008236 <osDelay>
			  keyboardhid.KEYCODE1 = 0x00;		// Release key
 80004f0:	2300      	movs	r3, #0
 80004f2:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80004f4:	f107 0308 	add.w	r3, r7, #8
 80004f8:	2208      	movs	r2, #8
 80004fa:	4619      	mov	r1, r3
 80004fc:	4830      	ldr	r0, [pc, #192]	; (80005c0 <StartMainTask+0x168>)
 80004fe:	f006 fd41 	bl	8006f84 <USBD_HID_SendReport>
			  osDelay(50);
 8000502:	2032      	movs	r0, #50	; 0x32
 8000504:	f007 fe97 	bl	8008236 <osDelay>
 8000508:	e04b      	b.n	80005a2 <StartMainTask+0x14a>

			  // Sends the Ubuntu user password
		  }
		  // Check if the user wants to go into Windows
		  else if(UART1_rxBuffer[1] == 0x02){
 800050a:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <StartMainTask+0x158>)
 800050c:	785b      	ldrb	r3, [r3, #1]
 800050e:	2b02      	cmp	r3, #2
 8000510:	d147      	bne.n	80005a2 <StartMainTask+0x14a>
			  // Sends two times Down Arrow and Enter because Windows is in the third boot position
			  keyboardhid.KEYCODE1 = 0x51;		// Send "Down arrow"
 8000512:	2351      	movs	r3, #81	; 0x51
 8000514:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2208      	movs	r2, #8
 800051c:	4619      	mov	r1, r3
 800051e:	4828      	ldr	r0, [pc, #160]	; (80005c0 <StartMainTask+0x168>)
 8000520:	f006 fd30 	bl	8006f84 <USBD_HID_SendReport>
			  osDelay(50);
 8000524:	2032      	movs	r0, #50	; 0x32
 8000526:	f007 fe86 	bl	8008236 <osDelay>
			  keyboardhid.KEYCODE1 = 0x00;		// Release key
 800052a:	2300      	movs	r3, #0
 800052c:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	2208      	movs	r2, #8
 8000534:	4619      	mov	r1, r3
 8000536:	4822      	ldr	r0, [pc, #136]	; (80005c0 <StartMainTask+0x168>)
 8000538:	f006 fd24 	bl	8006f84 <USBD_HID_SendReport>
			  osDelay(50);
 800053c:	2032      	movs	r0, #50	; 0x32
 800053e:	f007 fe7a 	bl	8008236 <osDelay>
			  keyboardhid.KEYCODE1 = 0x51;		// Send "Down arrow"
 8000542:	2351      	movs	r3, #81	; 0x51
 8000544:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	2208      	movs	r2, #8
 800054c:	4619      	mov	r1, r3
 800054e:	481c      	ldr	r0, [pc, #112]	; (80005c0 <StartMainTask+0x168>)
 8000550:	f006 fd18 	bl	8006f84 <USBD_HID_SendReport>
			  osDelay(50);
 8000554:	2032      	movs	r0, #50	; 0x32
 8000556:	f007 fe6e 	bl	8008236 <osDelay>
			  keyboardhid.KEYCODE1 = 0x00;		// Release key
 800055a:	2300      	movs	r3, #0
 800055c:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	2208      	movs	r2, #8
 8000564:	4619      	mov	r1, r3
 8000566:	4816      	ldr	r0, [pc, #88]	; (80005c0 <StartMainTask+0x168>)
 8000568:	f006 fd0c 	bl	8006f84 <USBD_HID_SendReport>
			  osDelay(50);
 800056c:	2032      	movs	r0, #50	; 0x32
 800056e:	f007 fe62 	bl	8008236 <osDelay>
			  keyboardhid.KEYCODE1 = 0x58;		// Send "Enter"
 8000572:	2358      	movs	r3, #88	; 0x58
 8000574:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000576:	f107 0308 	add.w	r3, r7, #8
 800057a:	2208      	movs	r2, #8
 800057c:	4619      	mov	r1, r3
 800057e:	4810      	ldr	r0, [pc, #64]	; (80005c0 <StartMainTask+0x168>)
 8000580:	f006 fd00 	bl	8006f84 <USBD_HID_SendReport>
			  osDelay(50);
 8000584:	2032      	movs	r0, #50	; 0x32
 8000586:	f007 fe56 	bl	8008236 <osDelay>
			  keyboardhid.KEYCODE1 = 0x00;		// Release key
 800058a:	2300      	movs	r3, #0
 800058c:	72bb      	strb	r3, [r7, #10]
			  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2208      	movs	r2, #8
 8000594:	4619      	mov	r1, r3
 8000596:	480a      	ldr	r0, [pc, #40]	; (80005c0 <StartMainTask+0x168>)
 8000598:	f006 fcf4 	bl	8006f84 <USBD_HID_SendReport>
			  osDelay(50);
 800059c:	2032      	movs	r0, #50	; 0x32
 800059e:	f007 fe4a 	bl	8008236 <osDelay>
		  }
		  received_msg_flag = 0;	// Resets message received flag
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <StartMainTask+0x164>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
	  }
    osDelay(10);
 80005a8:	200a      	movs	r0, #10
 80005aa:	f007 fe44 	bl	8008236 <osDelay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005ae:	e763      	b.n	8000478 <StartMainTask+0x20>
 80005b0:	20000464 	.word	0x20000464
 80005b4:	20000414 	.word	0x20000414
 80005b8:	40011000 	.word	0x40011000
 80005bc:	20000460 	.word	0x20000460
 80005c0:	200011bc 	.word	0x200011bc

080005c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c8:	b672      	cpsid	i
}
 80005ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005cc:	e7fe      	b.n	80005cc <Error_Handler+0x8>
	...

080005d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005d6:	4b18      	ldr	r3, [pc, #96]	; (8000638 <HAL_MspInit+0x68>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a17      	ldr	r2, [pc, #92]	; (8000638 <HAL_MspInit+0x68>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <HAL_MspInit+0x68>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b12      	ldr	r3, [pc, #72]	; (8000638 <HAL_MspInit+0x68>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a11      	ldr	r2, [pc, #68]	; (8000638 <HAL_MspInit+0x68>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <HAL_MspInit+0x68>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	210f      	movs	r1, #15
 800060a:	f06f 0001 	mvn.w	r0, #1
 800060e:	f000 fa52 	bl	8000ab6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <HAL_MspInit+0x6c>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	4a04      	ldr	r2, [pc, #16]	; (800063c <HAL_MspInit+0x6c>)
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	40010000 	.word	0x40010000

08000640 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000650:	d10b      	bne.n	800066a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_TIM_PWM_MspInit+0x34>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a07      	ldr	r2, [pc, #28]	; (8000674 <HAL_TIM_PWM_MspInit+0x34>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <HAL_TIM_PWM_MspInit+0x34>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	40021000 	.word	0x40021000

08000678 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000696:	d117      	bne.n	80006c8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <HAL_TIM_MspPostInit+0x58>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <HAL_TIM_MspPostInit+0x58>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <HAL_TIM_MspPostInit+0x58>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b0:	2301      	movs	r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4619      	mov	r1, r3
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <HAL_TIM_MspPostInit+0x5c>)
 80006c4:	f000 fae0 	bl	8000c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80006c8:	bf00      	nop
 80006ca:	3720      	adds	r7, #32
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010800 	.word	0x40010800

080006d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a20      	ldr	r2, [pc, #128]	; (8000774 <HAL_UART_MspInit+0x9c>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d139      	bne.n	800076c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <HAL_UART_MspInit+0xa0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a1e      	ldr	r2, [pc, #120]	; (8000778 <HAL_UART_MspInit+0xa0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <HAL_UART_MspInit+0xa0>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <HAL_UART_MspInit+0xa0>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a18      	ldr	r2, [pc, #96]	; (8000778 <HAL_UART_MspInit+0xa0>)
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b16      	ldr	r3, [pc, #88]	; (8000778 <HAL_UART_MspInit+0xa0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800072c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	2302      	movs	r3, #2
 8000730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	4619      	mov	r1, r3
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <HAL_UART_MspInit+0xa4>)
 800073e:	f000 faa3 	bl	8000c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <HAL_UART_MspInit+0xa4>)
 8000758:	f000 fa96 	bl	8000c88 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2105      	movs	r1, #5
 8000760:	2025      	movs	r0, #37	; 0x25
 8000762:	f000 f9a8 	bl	8000ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000766:	2025      	movs	r0, #37	; 0x25
 8000768:	f000 f9c1 	bl	8000aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40013800 	.word	0x40013800
 8000778:	40021000 	.word	0x40021000
 800077c:	40010800 	.word	0x40010800

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ae:	f000 f88f 	bl	80008d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007b2:	f008 fabd 	bl	8008d30 <xTaskGetSchedulerState>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d001      	beq.n	80007c0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007bc:	f008 fcac 	bl	8009118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007ca:	f000 fd1e 	bl	800120a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20001680 	.word	0x20001680

080007d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <USART1_IRQHandler+0x10>)
 80007de:	f003 f9dd 	bl	8003b9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000414 	.word	0x20000414

080007ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f8:	f7ff fff8 	bl	80007ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480b      	ldr	r0, [pc, #44]	; (800082c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007fe:	490c      	ldr	r1, [pc, #48]	; (8000830 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000800:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a09      	ldr	r2, [pc, #36]	; (8000838 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000814:	4c09      	ldr	r4, [pc, #36]	; (800083c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000822:	f009 fa57 	bl	8009cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fcc9 	bl	80001bc <main>
  bx lr
 800082a:	4770      	bx	lr
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000834:	08009dd8 	.word	0x08009dd8
  ldr r2, =_sbss
 8000838:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 800083c:	20001984 	.word	0x20001984

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_Init+0x28>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a07      	ldr	r2, [pc, #28]	; (800086c <HAL_Init+0x28>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 f923 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085a:	200f      	movs	r0, #15
 800085c:	f000 f808 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000860:	f7ff feb6 	bl	80005d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_InitTick+0x54>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x58>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000886:	fbb3 f3f1 	udiv	r3, r3, r1
 800088a:	fbb2 f3f3 	udiv	r3, r2, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f93b 	bl	8000b0a <HAL_SYSTICK_Config>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e00e      	b.n	80008bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d80a      	bhi.n	80008ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008ac:	f000 f903 	bl	8000ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <HAL_InitTick+0x5c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e000      	b.n	80008bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_IncTick+0x1c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x20>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a03      	ldr	r2, [pc, #12]	; (80008f0 <HAL_IncTick+0x20>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000468 	.word	0x20000468

080008f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return uwTick;
 80008f8:	4b02      	ldr	r3, [pc, #8]	; (8000904 <HAL_GetTick+0x10>)
 80008fa:	681b      	ldr	r3, [r3, #0]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	20000468 	.word	0x20000468

08000908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	; (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	2b00      	cmp	r3, #0
 800097c:	db0b      	blt.n	8000996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f003 021f 	and.w	r2, r3, #31
 8000984:	4906      	ldr	r1, [pc, #24]	; (80009a0 <__NVIC_EnableIRQ+0x34>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	095b      	lsrs	r3, r3, #5
 800098c:	2001      	movs	r0, #1
 800098e:	fa00 f202 	lsl.w	r2, r0, r2
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	e000e100 	.word	0xe000e100

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <__NVIC_SetPriority+0x4c>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	; (80009f4 <__NVIC_SetPriority+0x50>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	3b04      	subs	r3, #4
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f1c3 0307 	rsb	r3, r3, #7
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf28      	it	cs
 8000a16:	2304      	movcs	r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <NVIC_EncodePriority+0x30>
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3b03      	subs	r3, #3
 8000a26:	e000      	b.n	8000a2a <NVIC_EncodePriority+0x32>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43da      	mvns	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43d9      	mvns	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	4313      	orrs	r3, r2
         );
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3724      	adds	r7, #36	; 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a80:	f7ff ff90 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff2d 	bl	8000908 <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff42 	bl	8000950 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff90 	bl	80009f8 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5f 	bl	80009a4 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff35 	bl	800096c <__NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ffa2 	bl	8000a5c <SysTick_Config>
 8000b18:	4603      	mov	r3, r0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b085      	sub	sp, #20
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d008      	beq.n	8000b4c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e020      	b.n	8000b8e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f022 020e 	bic.w	r2, r2, #14
 8000b5a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f022 0201 	bic.w	r2, r2, #1
 8000b6a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b74:	2101      	movs	r1, #1
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d005      	beq.n	8000bbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e051      	b.n	8000c60 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 020e 	bic.w	r2, r2, #14
 8000bca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f022 0201 	bic.w	r2, r2, #1
 8000bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <HAL_DMA_Abort_IT+0xd4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d029      	beq.n	8000c3a <HAL_DMA_Abort_IT+0xa2>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a21      	ldr	r2, [pc, #132]	; (8000c70 <HAL_DMA_Abort_IT+0xd8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d022      	beq.n	8000c36 <HAL_DMA_Abort_IT+0x9e>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <HAL_DMA_Abort_IT+0xdc>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d01a      	beq.n	8000c30 <HAL_DMA_Abort_IT+0x98>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <HAL_DMA_Abort_IT+0xe0>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d012      	beq.n	8000c2a <HAL_DMA_Abort_IT+0x92>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <HAL_DMA_Abort_IT+0xe4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d00a      	beq.n	8000c24 <HAL_DMA_Abort_IT+0x8c>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <HAL_DMA_Abort_IT+0xe8>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d102      	bne.n	8000c1e <HAL_DMA_Abort_IT+0x86>
 8000c18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c1c:	e00e      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c22:	e00b      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c28:	e008      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2e:	e005      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c34:	e002      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c36:	2310      	movs	r3, #16
 8000c38:	e000      	b.n	8000c3c <HAL_DMA_Abort_IT+0xa4>
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <HAL_DMA_Abort_IT+0xec>)
 8000c3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2201      	movs	r2, #1
 8000c44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	4798      	blx	r3
    } 
  }
  return status;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40020008 	.word	0x40020008
 8000c70:	4002001c 	.word	0x4002001c
 8000c74:	40020030 	.word	0x40020030
 8000c78:	40020044 	.word	0x40020044
 8000c7c:	40020058 	.word	0x40020058
 8000c80:	4002006c 	.word	0x4002006c
 8000c84:	40020000 	.word	0x40020000

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b08b      	sub	sp, #44	; 0x2c
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e169      	b.n	8000f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f040 8158 	bne.w	8000f6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	4a9a      	ldr	r2, [pc, #616]	; (8000f28 <HAL_GPIO_Init+0x2a0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d05e      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cc4:	4a98      	ldr	r2, [pc, #608]	; (8000f28 <HAL_GPIO_Init+0x2a0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d875      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cca:	4a98      	ldr	r2, [pc, #608]	; (8000f2c <HAL_GPIO_Init+0x2a4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d058      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cd0:	4a96      	ldr	r2, [pc, #600]	; (8000f2c <HAL_GPIO_Init+0x2a4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d86f      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cd6:	4a96      	ldr	r2, [pc, #600]	; (8000f30 <HAL_GPIO_Init+0x2a8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d052      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cdc:	4a94      	ldr	r2, [pc, #592]	; (8000f30 <HAL_GPIO_Init+0x2a8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d869      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000ce2:	4a94      	ldr	r2, [pc, #592]	; (8000f34 <HAL_GPIO_Init+0x2ac>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d04c      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000ce8:	4a92      	ldr	r2, [pc, #584]	; (8000f34 <HAL_GPIO_Init+0x2ac>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d863      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cee:	4a92      	ldr	r2, [pc, #584]	; (8000f38 <HAL_GPIO_Init+0x2b0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d046      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cf4:	4a90      	ldr	r2, [pc, #576]	; (8000f38 <HAL_GPIO_Init+0x2b0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d85d      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cfa:	2b12      	cmp	r3, #18
 8000cfc:	d82a      	bhi.n	8000d54 <HAL_GPIO_Init+0xcc>
 8000cfe:	2b12      	cmp	r3, #18
 8000d00:	d859      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000d02:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <HAL_GPIO_Init+0x80>)
 8000d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d08:	08000d83 	.word	0x08000d83
 8000d0c:	08000d5d 	.word	0x08000d5d
 8000d10:	08000d6f 	.word	0x08000d6f
 8000d14:	08000db1 	.word	0x08000db1
 8000d18:	08000db7 	.word	0x08000db7
 8000d1c:	08000db7 	.word	0x08000db7
 8000d20:	08000db7 	.word	0x08000db7
 8000d24:	08000db7 	.word	0x08000db7
 8000d28:	08000db7 	.word	0x08000db7
 8000d2c:	08000db7 	.word	0x08000db7
 8000d30:	08000db7 	.word	0x08000db7
 8000d34:	08000db7 	.word	0x08000db7
 8000d38:	08000db7 	.word	0x08000db7
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000db7 	.word	0x08000db7
 8000d44:	08000db7 	.word	0x08000db7
 8000d48:	08000db7 	.word	0x08000db7
 8000d4c:	08000d65 	.word	0x08000d65
 8000d50:	08000d79 	.word	0x08000d79
 8000d54:	4a79      	ldr	r2, [pc, #484]	; (8000f3c <HAL_GPIO_Init+0x2b4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d013      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d5a:	e02c      	b.n	8000db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e029      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e024      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	3308      	adds	r3, #8
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e01f      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	330c      	adds	r3, #12
 8000d7e:	623b      	str	r3, [r7, #32]
          break;
 8000d80:	e01a      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	623b      	str	r3, [r7, #32]
          break;
 8000d8e:	e013      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d105      	bne.n	8000da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	611a      	str	r2, [r3, #16]
          break;
 8000da2:	e009      	b.n	8000db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da4:	2308      	movs	r3, #8
 8000da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	615a      	str	r2, [r3, #20]
          break;
 8000dae:	e003      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e000      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          break;
 8000db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	2bff      	cmp	r3, #255	; 0xff
 8000dbc:	d801      	bhi.n	8000dc2 <HAL_GPIO_Init+0x13a>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	e001      	b.n	8000dc6 <HAL_GPIO_Init+0x13e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	2bff      	cmp	r3, #255	; 0xff
 8000dcc:	d802      	bhi.n	8000dd4 <HAL_GPIO_Init+0x14c>
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	e002      	b.n	8000dda <HAL_GPIO_Init+0x152>
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	3b08      	subs	r3, #8
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	210f      	movs	r1, #15
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	401a      	ands	r2, r3
 8000dec:	6a39      	ldr	r1, [r7, #32]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	431a      	orrs	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 80b1 	beq.w	8000f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e08:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <HAL_GPIO_Init+0x2b8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a4c      	ldr	r2, [pc, #304]	; (8000f40 <HAL_GPIO_Init+0x2b8>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b4a      	ldr	r3, [pc, #296]	; (8000f40 <HAL_GPIO_Init+0x2b8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e20:	4a48      	ldr	r2, [pc, #288]	; (8000f44 <HAL_GPIO_Init+0x2bc>)
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a40      	ldr	r2, [pc, #256]	; (8000f48 <HAL_GPIO_Init+0x2c0>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d013      	beq.n	8000e74 <HAL_GPIO_Init+0x1ec>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a3f      	ldr	r2, [pc, #252]	; (8000f4c <HAL_GPIO_Init+0x2c4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d00d      	beq.n	8000e70 <HAL_GPIO_Init+0x1e8>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a3e      	ldr	r2, [pc, #248]	; (8000f50 <HAL_GPIO_Init+0x2c8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0x1e4>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a3d      	ldr	r2, [pc, #244]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d101      	bne.n	8000e68 <HAL_GPIO_Init+0x1e0>
 8000e64:	2303      	movs	r3, #3
 8000e66:	e006      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e68:	2304      	movs	r3, #4
 8000e6a:	e004      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e002      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e74:	2300      	movs	r3, #0
 8000e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e78:	f002 0203 	and.w	r2, r2, #3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4093      	lsls	r3, r2
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e86:	492f      	ldr	r1, [pc, #188]	; (8000f44 <HAL_GPIO_Init+0x2bc>)
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	492c      	ldr	r1, [pc, #176]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	608b      	str	r3, [r1, #8]
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4928      	ldr	r1, [pc, #160]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	4013      	ands	r3, r2
 8000eba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d006      	beq.n	8000ed6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	4922      	ldr	r1, [pc, #136]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	60cb      	str	r3, [r1, #12]
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	491e      	ldr	r1, [pc, #120]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	4918      	ldr	r1, [pc, #96]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	604b      	str	r3, [r1, #4]
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4914      	ldr	r1, [pc, #80]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d021      	beq.n	8000f5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	490e      	ldr	r1, [pc, #56]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
 8000f24:	e021      	b.n	8000f6a <HAL_GPIO_Init+0x2e2>
 8000f26:	bf00      	nop
 8000f28:	10320000 	.word	0x10320000
 8000f2c:	10310000 	.word	0x10310000
 8000f30:	10220000 	.word	0x10220000
 8000f34:	10210000 	.word	0x10210000
 8000f38:	10120000 	.word	0x10120000
 8000f3c:	10110000 	.word	0x10110000
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40010800 	.word	0x40010800
 8000f4c:	40010c00 	.word	0x40010c00
 8000f50:	40011000 	.word	0x40011000
 8000f54:	40011400 	.word	0x40011400
 8000f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	4909      	ldr	r1, [pc, #36]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f47f ae8e 	bne.w	8000c9c <HAL_GPIO_Init+0x14>
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	372c      	adds	r7, #44	; 0x2c
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40010400 	.word	0x40010400

08000f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fac:	e003      	b.n	8000fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	041a      	lsls	r2, r3, #16
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	611a      	str	r2, [r3, #16]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fc2:	b08b      	sub	sp, #44	; 0x2c
 8000fc4:	af06      	add	r7, sp, #24
 8000fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e0f1      	b.n	80011b6 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d106      	bne.n	8000fec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f008 fbe6 	bl	80097b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2203      	movs	r2, #3
 8000ff0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 fb07 	bl	800460c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	687e      	ldr	r6, [r7, #4]
 8001006:	466d      	mov	r5, sp
 8001008:	f106 0410 	add.w	r4, r6, #16
 800100c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800100e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	602b      	str	r3, [r5, #0]
 8001014:	1d33      	adds	r3, r6, #4
 8001016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001018:	6838      	ldr	r0, [r7, #0]
 800101a:	f003 fad1 	bl	80045c0 <USB_CoreInit>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2202      	movs	r2, #2
 8001028:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e0c2      	b.n	80011b6 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f003 fb02 	bl	8004640 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800103c:	2300      	movs	r3, #0
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e040      	b.n	80010c4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	4613      	mov	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	440b      	add	r3, r1
 8001052:	3301      	adds	r3, #1
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	4613      	mov	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4413      	add	r3, r2
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	440b      	add	r3, r1
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	4613      	mov	r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	440b      	add	r3, r1
 800107c:	3303      	adds	r3, #3
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001082:	7bfa      	ldrb	r2, [r7, #15]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	440b      	add	r3, r1
 8001090:	3338      	adds	r3, #56	; 0x38
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4613      	mov	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	440b      	add	r3, r1
 80010a4:	333c      	adds	r3, #60	; 0x3c
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	3340      	adds	r3, #64	; 0x40
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	3301      	adds	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d3b9      	bcc.n	8001042 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e044      	b.n	800115e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	440b      	add	r3, r1
 80010f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	440b      	add	r3, r1
 800110e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001116:	7bfa      	ldrb	r2, [r7, #15]
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	440b      	add	r3, r1
 800113a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	3301      	adds	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	d3b5      	bcc.n	80010d4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	687e      	ldr	r6, [r7, #4]
 8001170:	466d      	mov	r5, sp
 8001172:	f106 0410 	add.w	r4, r6, #16
 8001176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	602b      	str	r3, [r5, #0]
 800117e:	1d33      	adds	r3, r6, #4
 8001180:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001182:	6838      	ldr	r0, [r7, #0]
 8001184:	f003 fa68 	bl	8004658 <USB_DevInit>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d005      	beq.n	800119a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2202      	movs	r2, #2
 8001192:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00d      	b.n	80011b6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f005 fce9 	bl	8006b86 <USB_DevDisconnect>

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_PCD_Start+0x16>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e016      	b.n	8001202 <HAL_PCD_Start+0x44>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 f9fd 	bl	80045e0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80011e6:	2101      	movs	r1, #1
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f008 fd34 	bl	8009c56 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 fcbd 	bl	8006b72 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b088      	sub	sp, #32
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f005 fcbf 	bl	8006b9a <USB_ReadInterrupts>
 800121c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fb04 	bl	8001836 <PCD_EP_ISR_Handler>

    return;
 800122e:	e119      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001236:	2b00      	cmp	r3, #0
 8001238:	d013      	beq.n	8001262 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001242:	b29a      	uxth	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800124c:	b292      	uxth	r2, r2
 800124e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f008 fb2b 	bl	80098ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001258:	2100      	movs	r1, #0
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f000 f905 	bl	800146a <HAL_PCD_SetAddress>

    return;
 8001260:	e100      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00c      	beq.n	8001286 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001274:	b29a      	uxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800127e:	b292      	uxth	r2, r2
 8001280:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001284:	e0ee      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d00c      	beq.n	80012aa <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001298:	b29a      	uxth	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80012a2:	b292      	uxth	r2, r2
 80012a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80012a8:	e0dc      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d027      	beq.n	8001304 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012bc:	b29a      	uxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0204 	bic.w	r2, r2, #4
 80012c6:	b292      	uxth	r2, r2
 80012c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0208 	bic.w	r2, r2, #8
 80012de:	b292      	uxth	r2, r2
 80012e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f008 fb1b 	bl	8009920 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012fc:	b292      	uxth	r2, r2
 80012fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001302:	e0af      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8083 	beq.w	8001416 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001310:	2300      	movs	r3, #0
 8001312:	77fb      	strb	r3, [r7, #31]
 8001314:	e010      	b.n	8001338 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	7ffb      	ldrb	r3, [r7, #31]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	441a      	add	r2, r3
 8001322:	7ffb      	ldrb	r3, [r7, #31]
 8001324:	8812      	ldrh	r2, [r2, #0]
 8001326:	b292      	uxth	r2, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	3320      	adds	r3, #32
 800132c:	443b      	add	r3, r7
 800132e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001332:	7ffb      	ldrb	r3, [r7, #31]
 8001334:	3301      	adds	r3, #1
 8001336:	77fb      	strb	r3, [r7, #31]
 8001338:	7ffb      	ldrb	r3, [r7, #31]
 800133a:	2b07      	cmp	r3, #7
 800133c:	d9eb      	bls.n	8001316 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001346:	b29a      	uxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f042 0201 	orr.w	r2, r2, #1
 8001350:	b292      	uxth	r2, r2
 8001352:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800135e:	b29a      	uxth	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0201 	bic.w	r2, r2, #1
 8001368:	b292      	uxth	r2, r2
 800136a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800136e:	bf00      	nop
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001378:	b29b      	uxth	r3, r3
 800137a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f6      	beq.n	8001370 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800138a:	b29a      	uxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001394:	b292      	uxth	r2, r2
 8001396:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800139a:	2300      	movs	r3, #0
 800139c:	77fb      	strb	r3, [r7, #31]
 800139e:	e00f      	b.n	80013c0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80013a0:	7ffb      	ldrb	r3, [r7, #31]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	4611      	mov	r1, r2
 80013a8:	7ffa      	ldrb	r2, [r7, #31]
 80013aa:	0092      	lsls	r2, r2, #2
 80013ac:	440a      	add	r2, r1
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	3320      	adds	r3, #32
 80013b2:	443b      	add	r3, r7
 80013b4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80013b8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	3301      	adds	r3, #1
 80013be:	77fb      	strb	r3, [r7, #31]
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	d9ec      	bls.n	80013a0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0208 	orr.w	r2, r2, #8
 80013d8:	b292      	uxth	r2, r2
 80013da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013f0:	b292      	uxth	r2, r2
 80013f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0204 	orr.w	r2, r2, #4
 8001408:	b292      	uxth	r2, r2
 800140a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f008 fa6c 	bl	80098ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001414:	e026      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00f      	beq.n	8001440 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001432:	b292      	uxth	r2, r2
 8001434:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f008 fa2a 	bl	8009892 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800143e:	e011      	b.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00c      	beq.n	8001464 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001452:	b29a      	uxth	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800145c:	b292      	uxth	r2, r2
 800145e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001462:	bf00      	nop
  }
}
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_PCD_SetAddress+0x1a>
 8001480:	2302      	movs	r3, #2
 8001482:	e013      	b.n	80014ac <HAL_PCD_SetAddress+0x42>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	78fa      	ldrb	r2, [r7, #3]
 8001490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	78fa      	ldrb	r2, [r7, #3]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f005 fb55 	bl	8006b4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	4608      	mov	r0, r1
 80014be:	4611      	mov	r1, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	4603      	mov	r3, r0
 80014c4:	70fb      	strb	r3, [r7, #3]
 80014c6:	460b      	mov	r3, r1
 80014c8:	803b      	strh	r3, [r7, #0]
 80014ca:	4613      	mov	r3, r2
 80014cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80014d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	da0e      	bge.n	80014f8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2201      	movs	r2, #1
 80014f4:	705a      	strb	r2, [r3, #1]
 80014f6:	e00e      	b.n	8001516 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	f003 0207 	and.w	r2, r3, #7
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001516:	78fb      	ldrb	r3, [r7, #3]
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	b2da      	uxtb	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001522:	883a      	ldrh	r2, [r7, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	78ba      	ldrb	r2, [r7, #2]
 800152c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800152e:	78bb      	ldrb	r3, [r7, #2]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d102      	bne.n	800153a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001540:	2b01      	cmp	r3, #1
 8001542:	d101      	bne.n	8001548 <HAL_PCD_EP_Open+0x94>
 8001544:	2302      	movs	r3, #2
 8001546:	e00e      	b.n	8001566 <HAL_PCD_EP_Open+0xb2>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68f9      	ldr	r1, [r7, #12]
 8001556:	4618      	mov	r0, r3
 8001558:	f003 f89e 	bl	8004698 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001564:	7afb      	ldrb	r3, [r7, #11]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800157a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800157e:	2b00      	cmp	r3, #0
 8001580:	da0e      	bge.n	80015a0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	f003 0307 	and.w	r3, r3, #7
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2201      	movs	r2, #1
 800159c:	705a      	strb	r2, [r3, #1]
 800159e:	e00e      	b.n	80015be <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	f003 0207 	and.w	r2, r3, #7
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2200      	movs	r2, #0
 80015bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d101      	bne.n	80015d8 <HAL_PCD_EP_Close+0x6a>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e00e      	b.n	80015f6 <HAL_PCD_EP_Close+0x88>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fc16 	bl	8004e18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	607a      	str	r2, [r7, #4]
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	460b      	mov	r3, r1
 800160c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800160e:	7afb      	ldrb	r3, [r7, #11]
 8001610:	f003 0207 	and.w	r2, r3, #7
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4413      	add	r3, r2
 8001624:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2200      	movs	r2, #0
 800163c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800163e:	7afb      	ldrb	r3, [r7, #11]
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	b2da      	uxtb	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6979      	ldr	r1, [r7, #20]
 8001650:	4618      	mov	r0, r3
 8001652:	f003 fdcd 	bl	80051f0 <USB_EPStartXfer>

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	607a      	str	r2, [r7, #4]
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	460b      	mov	r3, r1
 800166e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001670:	7afb      	ldrb	r3, [r7, #11]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	2201      	movs	r2, #1
 80016aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6979      	ldr	r1, [r7, #20]
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fd96 	bl	80051f0 <USB_EPStartXfer>

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	460b      	mov	r3, r1
 80016d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	f003 0207 	and.w	r2, r3, #7
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d901      	bls.n	80016ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e04c      	b.n	8001786 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da0e      	bge.n	8001712 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2201      	movs	r2, #1
 800170e:	705a      	strb	r2, [r3, #1]
 8001710:	e00c      	b.n	800172c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001712:	78fa      	ldrb	r2, [r7, #3]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	b2da      	uxtb	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_PCD_EP_SetStall+0x7e>
 8001748:	2302      	movs	r3, #2
 800174a:	e01c      	b.n	8001786 <HAL_PCD_EP_SetStall+0xb8>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	4618      	mov	r0, r3
 800175c:	f005 f8f9 	bl	8006952 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	2b00      	cmp	r3, #0
 8001768:	d108      	bne.n	800177c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001774:	4619      	mov	r1, r3
 8001776:	4610      	mov	r0, r2
 8001778:	f005 fa1e 	bl	8006bb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	f003 020f 	and.w	r2, r3, #15
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d901      	bls.n	80017ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e040      	b.n	800182e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80017ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da0e      	bge.n	80017d2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017b4:	78fb      	ldrb	r3, [r7, #3]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2201      	movs	r2, #1
 80017ce:	705a      	strb	r2, [r3, #1]
 80017d0:	e00e      	b.n	80017f0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f003 0207 	and.w	r2, r3, #7
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_PCD_EP_ClrStall+0x82>
 800180c:	2302      	movs	r3, #2
 800180e:	e00e      	b.n	800182e <HAL_PCD_EP_ClrStall+0xa0>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68f9      	ldr	r1, [r7, #12]
 800181e:	4618      	mov	r0, r3
 8001820:	f005 f8e7 	bl	80069f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b096      	sub	sp, #88	; 0x58
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800183e:	e3bf      	b.n	8001fc0 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001848:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800184c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800185a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800185e:	2b00      	cmp	r3, #0
 8001860:	f040 8179 	bne.w	8001b56 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001864:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	d152      	bne.n	8001916 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800187c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001880:	81fb      	strh	r3, [r7, #14]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800188c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001890:	b29b      	uxth	r3, r3
 8001892:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3328      	adds	r3, #40	; 0x28
 8001898:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4413      	add	r3, r2
 80018ae:	3302      	adds	r3, #2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6812      	ldr	r2, [r2, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80018c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80018c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c8:	695a      	ldr	r2, [r3, #20]
 80018ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	441a      	add	r2, r3
 80018d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80018d4:	2100      	movs	r1, #0
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f007 ffc1 	bl	800985e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 836b 	beq.w	8001fc0 <PCD_EP_ISR_Handler+0x78a>
 80018ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 8366 	bne.w	8001fc0 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001900:	b2da      	uxtb	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	b292      	uxth	r2, r2
 8001908:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001914:	e354      	b.n	8001fc0 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800191c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001928:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800192c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001930:	2b00      	cmp	r3, #0
 8001932:	d034      	beq.n	800199e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800193c:	b29b      	uxth	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	3306      	adds	r3, #6
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	4413      	add	r3, r2
 8001952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800195c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800196a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800196c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800196e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001970:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001972:	b29b      	uxth	r3, r3
 8001974:	f005 f970 	bl	8006c58 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	b29a      	uxth	r2, r3
 8001980:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001984:	4013      	ands	r3, r2
 8001986:	823b      	strh	r3, [r7, #16]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	8a3a      	ldrh	r2, [r7, #16]
 800198e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001992:	b292      	uxth	r2, r2
 8001994:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f007 ff34 	bl	8009804 <HAL_PCD_SetupStageCallback>
 800199c:	e310      	b.n	8001fc0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800199e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f280 830c 	bge.w	8001fc0 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80019b4:	4013      	ands	r3, r2
 80019b6:	83fb      	strh	r3, [r7, #30]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	8bfa      	ldrh	r2, [r7, #30]
 80019be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019c2:	b292      	uxth	r2, r2
 80019c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	3306      	adds	r3, #6
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80019f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d019      	beq.n	8001a2e <PCD_EP_ISR_Handler+0x1f8>
 80019fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d015      	beq.n	8001a2e <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6818      	ldr	r0, [r3, #0]
 8001a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a08:	6959      	ldr	r1, [r3, #20]
 8001a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a10:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	f005 f920 	bl	8006c58 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	441a      	add	r2, r3
 8001a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a24:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001a26:	2100      	movs	r1, #0
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f007 fefd 	bl	8009828 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001a38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f040 82bd 	bne.w	8001fc0 <PCD_EP_ISR_Handler+0x78a>
 8001a46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001a4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001a52:	f000 82b5 	beq.w	8001fc0 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	801a      	strh	r2, [r3, #0]
 8001a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8001a8c:	d91d      	bls.n	8001aca <PCD_EP_ISR_Handler+0x294>
 8001a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	647b      	str	r3, [r7, #68]	; 0x44
 8001a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <PCD_EP_ISR_Handler+0x272>
 8001aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	029b      	lsls	r3, r3, #10
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	801a      	strh	r2, [r3, #0]
 8001ac8:	e026      	b.n	8001b18 <PCD_EP_ISR_Handler+0x2e2>
 8001aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10a      	bne.n	8001ae8 <PCD_EP_ISR_Handler+0x2b2>
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	801a      	strh	r2, [r3, #0]
 8001ae6:	e017      	b.n	8001b18 <PCD_EP_ISR_Handler+0x2e2>
 8001ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	647b      	str	r3, [r7, #68]	; 0x44
 8001af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <PCD_EP_ISR_Handler+0x2cc>
 8001afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afe:	3301      	adds	r3, #1
 8001b00:	647b      	str	r3, [r7, #68]	; 0x44
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	029b      	lsls	r3, r3, #10
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b28:	827b      	strh	r3, [r7, #18]
 8001b2a:	8a7b      	ldrh	r3, [r7, #18]
 8001b2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b30:	827b      	strh	r3, [r7, #18]
 8001b32:	8a7b      	ldrh	r3, [r7, #18]
 8001b34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b38:	827b      	strh	r3, [r7, #18]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	8a7b      	ldrh	r3, [r7, #18]
 8001b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	8013      	strh	r3, [r2, #0]
 8001b54:	e234      	b.n	8001fc0 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b6a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f280 80fc 	bge.w	8001d6c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001ba2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ba6:	b292      	uxth	r2, r2
 8001ba8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001baa:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc2:	7b1b      	ldrb	r3, [r3, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d125      	bne.n	8001c14 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	3306      	adds	r3, #6
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bf0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001bf4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8092 	beq.w	8001d22 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c04:	6959      	ldr	r1, [r3, #20]
 8001c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c08:	88da      	ldrh	r2, [r3, #6]
 8001c0a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c0e:	f005 f823 	bl	8006c58 <USB_ReadPMA>
 8001c12:	e086      	b.n	8001d22 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c16:	78db      	ldrb	r3, [r3, #3]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d10a      	bne.n	8001c32 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001c1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c20:	461a      	mov	r2, r3
 8001c22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f9d9 	bl	8001fdc <HAL_PCD_EP_DB_Receive>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001c30:	e077      	b.n	8001d22 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c4c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	441a      	add	r2, r3
 8001c5e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d024      	beq.n	8001cda <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001cbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d02e      	beq.n	8001d22 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cca:	6959      	ldr	r1, [r3, #20]
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cce:	891a      	ldrh	r2, [r3, #8]
 8001cd0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cd4:	f004 ffc0 	bl	8006c58 <USB_ReadPMA>
 8001cd8:	e023      	b.n	8001d22 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	3306      	adds	r3, #6
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d02:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001d06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
 8001d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d14:	6959      	ldr	r1, [r3, #20]
 8001d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d18:	895a      	ldrh	r2, [r3, #10]
 8001d1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d1e:	f004 ff9b 	bl	8006c58 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d24:	69da      	ldr	r2, [r3, #28]
 8001d26:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d2a:	441a      	add	r2, r3
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d38:	441a      	add	r2, r3
 8001d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <PCD_EP_ISR_Handler+0x51c>
 8001d46:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d206      	bcs.n	8001d60 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	4619      	mov	r1, r3
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f007 fd65 	bl	8009828 <HAL_PCD_DataOutStageCallback>
 8001d5e:	e005      	b.n	8001d6c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 fa42 	bl	80051f0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001d6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 8123 	beq.w	8001fc0 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001d7a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	441a      	add	r2, r3
 8001dba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dcc:	78db      	ldrb	r3, [r3, #3]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	f040 80a2 	bne.w	8001f18 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001dd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ddc:	7b1b      	ldrb	r3, [r3, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8093 	beq.w	8001f0a <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001de4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d046      	beq.n	8001e7e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df2:	785b      	ldrb	r3, [r3, #1]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d126      	bne.n	8001e46 <PCD_EP_ISR_Handler+0x610>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	4413      	add	r3, r2
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	011a      	lsls	r2, r3, #4
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	4413      	add	r3, r2
 8001e1a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e1e:	623b      	str	r3, [r7, #32]
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	801a      	strh	r2, [r3, #0]
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	801a      	strh	r2, [r3, #0]
 8001e44:	e061      	b.n	8001f0a <PCD_EP_ISR_Handler+0x6d4>
 8001e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e48:	785b      	ldrb	r3, [r3, #1]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d15d      	bne.n	8001f0a <PCD_EP_ISR_Handler+0x6d4>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e62:	4413      	add	r3, r2
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	011a      	lsls	r2, r3, #4
 8001e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6e:	4413      	add	r3, r2
 8001e70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	801a      	strh	r2, [r3, #0]
 8001e7c:	e045      	b.n	8001f0a <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e86:	785b      	ldrb	r3, [r3, #1]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d126      	bne.n	8001eda <PCD_EP_ISR_Handler+0x6a4>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	4413      	add	r3, r2
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	011a      	lsls	r2, r3, #4
 8001eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eac:	4413      	add	r3, r2
 8001eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec2:	801a      	strh	r2, [r3, #0]
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed6:	801a      	strh	r2, [r3, #0]
 8001ed8:	e017      	b.n	8001f0a <PCD_EP_ISR_Handler+0x6d4>
 8001eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001edc:	785b      	ldrb	r3, [r3, #1]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d113      	bne.n	8001f0a <PCD_EP_ISR_Handler+0x6d4>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef0:	4413      	add	r3, r2
 8001ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	011a      	lsls	r2, r3, #4
 8001efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001efc:	4413      	add	r3, r2
 8001efe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f06:	2200      	movs	r2, #0
 8001f08:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f007 fca4 	bl	800985e <HAL_PCD_DataInStageCallback>
 8001f16:	e053      	b.n	8001fc0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001f18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d146      	bne.n	8001fb2 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f4c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d907      	bls.n	8001f6c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f64:	1ad2      	subs	r2, r2, r3
 8001f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f68:	619a      	str	r2, [r3, #24]
 8001f6a:	e002      	b.n	8001f72 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f007 fc6c 	bl	800985e <HAL_PCD_DataInStageCallback>
 8001f86:	e01b      	b.n	8001fc0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f90:	441a      	add	r2, r3
 8001f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f94:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001f9e:	441a      	add	r2, r3
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001faa:	4618      	mov	r0, r3
 8001fac:	f003 f920 	bl	80051f0 <USB_EPStartXfer>
 8001fb0:	e006      	b.n	8001fc0 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001fb2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f91b 	bl	80021f6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	b21b      	sxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f6ff ac37 	blt.w	8001840 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3758      	adds	r7, #88	; 0x58
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d07e      	beq.n	80020f2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	3302      	adds	r3, #2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	4413      	add	r3, r2
 8002012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800201c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	8b7b      	ldrh	r3, [r7, #26]
 8002024:	429a      	cmp	r2, r3
 8002026:	d306      	bcc.n	8002036 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	699a      	ldr	r2, [r3, #24]
 800202c:	8b7b      	ldrh	r3, [r7, #26]
 800202e:	1ad2      	subs	r2, r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	619a      	str	r2, [r3, #24]
 8002034:	e002      	b.n	800203c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d123      	bne.n	800208c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800205a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800205e:	833b      	strh	r3, [r7, #24]
 8002060:	8b3b      	ldrh	r3, [r7, #24]
 8002062:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002066:	833b      	strh	r3, [r7, #24]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	441a      	add	r2, r3
 8002076:	8b3b      	ldrh	r3, [r7, #24]
 8002078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800207c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002088:	b29b      	uxth	r3, r3
 800208a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01f      	beq.n	80020d6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020b0:	82fb      	strh	r3, [r7, #22]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	441a      	add	r2, r3
 80020c0:	8afb      	ldrh	r3, [r7, #22]
 80020c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020d6:	8b7b      	ldrh	r3, [r7, #26]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8087 	beq.w	80021ec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	6959      	ldr	r1, [r3, #20]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	891a      	ldrh	r2, [r3, #8]
 80020ea:	8b7b      	ldrh	r3, [r7, #26]
 80020ec:	f004 fdb4 	bl	8006c58 <USB_ReadPMA>
 80020f0:	e07c      	b.n	80021ec <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	461a      	mov	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	3306      	adds	r3, #6
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	4413      	add	r3, r2
 8002110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800211a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	8b7b      	ldrh	r3, [r7, #26]
 8002122:	429a      	cmp	r2, r3
 8002124:	d306      	bcc.n	8002134 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	699a      	ldr	r2, [r3, #24]
 800212a:	8b7b      	ldrh	r3, [r7, #26]
 800212c:	1ad2      	subs	r2, r2, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	619a      	str	r2, [r3, #24]
 8002132:	e002      	b.n	800213a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d123      	bne.n	800218a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	b29b      	uxth	r3, r3
 8002154:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800215c:	83fb      	strh	r3, [r7, #30]
 800215e:	8bfb      	ldrh	r3, [r7, #30]
 8002160:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002164:	83fb      	strh	r3, [r7, #30]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	441a      	add	r2, r3
 8002174:	8bfb      	ldrh	r3, [r7, #30]
 8002176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800217a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800217e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002186:	b29b      	uxth	r3, r3
 8002188:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	d11f      	bne.n	80021d4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ae:	83bb      	strh	r3, [r7, #28]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	441a      	add	r2, r3
 80021be:	8bbb      	ldrh	r3, [r7, #28]
 80021c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021d4:	8b7b      	ldrh	r3, [r7, #26]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d008      	beq.n	80021ec <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	6959      	ldr	r1, [r3, #20]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	895a      	ldrh	r2, [r3, #10]
 80021e6:	8b7b      	ldrh	r3, [r7, #26]
 80021e8:	f004 fd36 	bl	8006c58 <USB_ReadPMA>
    }
  }

  return count;
 80021ec:	8b7b      	ldrh	r3, [r7, #26]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b0a4      	sub	sp, #144	; 0x90
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	4613      	mov	r3, r2
 8002202:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 81dd 	beq.w	80025ca <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002218:	b29b      	uxth	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	3302      	adds	r3, #2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	6812      	ldr	r2, [r2, #0]
 800222c:	4413      	add	r3, r2
 800222e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002238:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002244:	429a      	cmp	r2, r3
 8002246:	d907      	bls.n	8002258 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	699a      	ldr	r2, [r3, #24]
 800224c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002250:	1ad2      	subs	r2, r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	619a      	str	r2, [r3, #24]
 8002256:	e002      	b.n	800225e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 80b9 	bne.w	80023da <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	785b      	ldrb	r3, [r3, #1]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d126      	bne.n	80022be <HAL_PCD_EP_DB_Transmit+0xc8>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800227e:	b29b      	uxth	r3, r3
 8002280:	461a      	mov	r2, r3
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	4413      	add	r3, r2
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	011a      	lsls	r2, r3, #4
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	4413      	add	r3, r2
 8002292:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
 8002298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	b29b      	uxth	r3, r3
 800229e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	801a      	strh	r2, [r3, #0]
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	801a      	strh	r2, [r3, #0]
 80022bc:	e01a      	b.n	80022f4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d116      	bne.n	80022f4 <HAL_PCD_EP_DB_Transmit+0xfe>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022da:	4413      	add	r3, r2
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	011a      	lsls	r2, r3, #4
 80022e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e6:	4413      	add	r3, r2
 80022e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022ec:	633b      	str	r3, [r7, #48]	; 0x30
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	2200      	movs	r2, #0
 80022f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	785b      	ldrb	r3, [r3, #1]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d126      	bne.n	8002350 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002310:	b29b      	uxth	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4413      	add	r3, r2
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	011a      	lsls	r2, r3, #4
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	4413      	add	r3, r2
 8002324:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002334:	b29a      	uxth	r2, r3
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	801a      	strh	r2, [r3, #0]
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b29b      	uxth	r3, r3
 8002340:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002344:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002348:	b29a      	uxth	r2, r3
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	801a      	strh	r2, [r3, #0]
 800234e:	e017      	b.n	8002380 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	785b      	ldrb	r3, [r3, #1]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d113      	bne.n	8002380 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002360:	b29b      	uxth	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	4413      	add	r3, r2
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	011a      	lsls	r2, r3, #4
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	4413      	add	r3, r2
 8002374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002378:	623b      	str	r3, [r7, #32]
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	2200      	movs	r2, #0
 800237e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f007 fa69 	bl	800985e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 82fc 	beq.w	8002990 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b2:	82fb      	strh	r3, [r7, #22]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	441a      	add	r2, r3
 80023c2:	8afb      	ldrh	r3, [r7, #22]
 80023c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	8013      	strh	r3, [r2, #0]
 80023d8:	e2da      	b.n	8002990 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d021      	beq.n	8002428 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	441a      	add	r2, r3
 8002410:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800241c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002424:	b29b      	uxth	r3, r3
 8002426:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800242e:	2b01      	cmp	r3, #1
 8002430:	f040 82ae 	bne.w	8002990 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800243c:	441a      	add	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	69da      	ldr	r2, [r3, #28]
 8002446:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800244a:	441a      	add	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	6a1a      	ldr	r2, [r3, #32]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	429a      	cmp	r2, r3
 800245a:	d30b      	bcc.n	8002474 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	6a1a      	ldr	r2, [r3, #32]
 8002468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800246c:	1ad2      	subs	r2, r2, r3
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	621a      	str	r2, [r3, #32]
 8002472:	e017      	b.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d108      	bne.n	800248e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800247c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002480:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800248c:	e00a      	b.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2200      	movs	r2, #0
 80024a2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d165      	bne.n	8002578 <HAL_PCD_EP_DB_Transmit+0x382>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c0:	4413      	add	r3, r2
 80024c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	011a      	lsls	r2, r3, #4
 80024ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024cc:	4413      	add	r3, r2
 80024ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024de:	b29a      	uxth	r2, r3
 80024e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e2:	801a      	strh	r2, [r3, #0]
 80024e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e8:	2b3e      	cmp	r3, #62	; 0x3e
 80024ea:	d91d      	bls.n	8002528 <HAL_PCD_EP_DB_Transmit+0x332>
 80024ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <HAL_PCD_EP_DB_Transmit+0x310>
 8002500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002502:	3b01      	subs	r3, #1
 8002504:	64bb      	str	r3, [r7, #72]	; 0x48
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	b29a      	uxth	r2, r3
 800250c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800250e:	b29b      	uxth	r3, r3
 8002510:	029b      	lsls	r3, r3, #10
 8002512:	b29b      	uxth	r3, r3
 8002514:	4313      	orrs	r3, r2
 8002516:	b29b      	uxth	r3, r3
 8002518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800251c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002520:	b29a      	uxth	r2, r3
 8002522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002524:	801a      	strh	r2, [r3, #0]
 8002526:	e044      	b.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10a      	bne.n	8002546 <HAL_PCD_EP_DB_Transmit+0x350>
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800253e:	b29a      	uxth	r2, r3
 8002540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e035      	b.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	64bb      	str	r3, [r7, #72]	; 0x48
 800254e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <HAL_PCD_EP_DB_Transmit+0x36a>
 800255a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255c:	3301      	adds	r3, #1
 800255e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b29a      	uxth	r2, r3
 8002566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002568:	b29b      	uxth	r3, r3
 800256a:	029b      	lsls	r3, r3, #10
 800256c:	b29b      	uxth	r3, r3
 800256e:	4313      	orrs	r3, r2
 8002570:	b29a      	uxth	r2, r3
 8002572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002574:	801a      	strh	r2, [r3, #0]
 8002576:	e01c      	b.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	785b      	ldrb	r3, [r3, #1]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d118      	bne.n	80025b2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	647b      	str	r3, [r7, #68]	; 0x44
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800258e:	b29b      	uxth	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002594:	4413      	add	r3, r2
 8002596:	647b      	str	r3, [r7, #68]	; 0x44
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	011a      	lsls	r2, r3, #4
 800259e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a0:	4413      	add	r3, r2
 80025a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025a6:	643b      	str	r3, [r7, #64]	; 0x40
 80025a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	6959      	ldr	r1, [r3, #20]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	891a      	ldrh	r2, [r3, #8]
 80025be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f004 fb03 	bl	8006bce <USB_WritePMA>
 80025c8:	e1e2      	b.n	8002990 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	4413      	add	r3, r2
 80025de:	3306      	adds	r3, #6
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025fe:	429a      	cmp	r2, r3
 8002600:	d307      	bcc.n	8002612 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	699a      	ldr	r2, [r3, #24]
 8002606:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800260a:	1ad2      	subs	r2, r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	619a      	str	r2, [r3, #24]
 8002610:	e002      	b.n	8002618 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 80c0 	bne.w	80027a2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	785b      	ldrb	r3, [r3, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d126      	bne.n	8002678 <HAL_PCD_EP_DB_Transmit+0x482>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002638:	b29b      	uxth	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800263e:	4413      	add	r3, r2
 8002640:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	011a      	lsls	r2, r3, #4
 8002648:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800264a:	4413      	add	r3, r2
 800264c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002650:	67bb      	str	r3, [r7, #120]	; 0x78
 8002652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800265c:	b29a      	uxth	r2, r3
 800265e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002660:	801a      	strh	r2, [r3, #0]
 8002662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800266c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002670:	b29a      	uxth	r2, r3
 8002672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	e01a      	b.n	80026ae <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d116      	bne.n	80026ae <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	667b      	str	r3, [r7, #100]	; 0x64
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800268e:	b29b      	uxth	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002694:	4413      	add	r3, r2
 8002696:	667b      	str	r3, [r7, #100]	; 0x64
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	011a      	lsls	r2, r3, #4
 800269e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a0:	4413      	add	r3, r2
 80026a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026a6:	663b      	str	r3, [r7, #96]	; 0x60
 80026a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026aa:	2200      	movs	r2, #0
 80026ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	677b      	str	r3, [r7, #116]	; 0x74
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d12b      	bne.n	8002714 <HAL_PCD_EP_DB_Transmit+0x51e>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	461a      	mov	r2, r3
 80026ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d0:	4413      	add	r3, r2
 80026d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	011a      	lsls	r2, r3, #4
 80026da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026dc:	4413      	add	r3, r2
 80026de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80026e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026f8:	801a      	strh	r2, [r3, #0]
 80026fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800270a:	b29a      	uxth	r2, r3
 800270c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002710:	801a      	strh	r2, [r3, #0]
 8002712:	e017      	b.n	8002744 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	785b      	ldrb	r3, [r3, #1]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d113      	bne.n	8002744 <HAL_PCD_EP_DB_Transmit+0x54e>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002724:	b29b      	uxth	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272a:	4413      	add	r3, r2
 800272c:	677b      	str	r3, [r7, #116]	; 0x74
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	011a      	lsls	r2, r3, #4
 8002734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002736:	4413      	add	r3, r2
 8002738:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800273c:	673b      	str	r3, [r7, #112]	; 0x70
 800273e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002740:	2200      	movs	r2, #0
 8002742:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f007 f887 	bl	800985e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002756:	2b00      	cmp	r3, #0
 8002758:	f040 811a 	bne.w	8002990 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002776:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	441a      	add	r2, r3
 8002788:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800278c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279c:	b29b      	uxth	r3, r3
 800279e:	8013      	strh	r3, [r2, #0]
 80027a0:	e0f6      	b.n	8002990 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d121      	bne.n	80027f0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	441a      	add	r2, r3
 80027d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	f040 80ca 	bne.w	8002990 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002804:	441a      	add	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002812:	441a      	add	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	6a1a      	ldr	r2, [r3, #32]
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	429a      	cmp	r2, r3
 8002822:	d30b      	bcc.n	800283c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	6a1a      	ldr	r2, [r3, #32]
 8002830:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002834:	1ad2      	subs	r2, r2, r3
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	621a      	str	r2, [r3, #32]
 800283a:	e017      	b.n	800286c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d108      	bne.n	8002856 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002844:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002848:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002854:	e00a      	b.n	800286c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2200      	movs	r2, #0
 8002862:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	657b      	str	r3, [r7, #84]	; 0x54
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	785b      	ldrb	r3, [r3, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d165      	bne.n	8002946 <HAL_PCD_EP_DB_Transmit+0x750>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002888:	b29b      	uxth	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288e:	4413      	add	r3, r2
 8002890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	011a      	lsls	r2, r3, #4
 8002898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800289a:	4413      	add	r3, r2
 800289c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80028a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028b0:	801a      	strh	r2, [r3, #0]
 80028b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028b6:	2b3e      	cmp	r3, #62	; 0x3e
 80028b8:	d91d      	bls.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x700>
 80028ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80028c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028c6:	f003 031f 	and.w	r3, r3, #31
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d102      	bne.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x6de>
 80028ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028d0:	3b01      	subs	r3, #1
 80028d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80028d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29a      	uxth	r2, r3
 80028da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028dc:	b29b      	uxth	r3, r3
 80028de:	029b      	lsls	r3, r3, #10
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028f2:	801a      	strh	r2, [r3, #0]
 80028f4:	e041      	b.n	800297a <HAL_PCD_EP_DB_Transmit+0x784>
 80028f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10a      	bne.n	8002914 <HAL_PCD_EP_DB_Transmit+0x71e>
 80028fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002908:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800290c:	b29a      	uxth	r2, r3
 800290e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002910:	801a      	strh	r2, [r3, #0]
 8002912:	e032      	b.n	800297a <HAL_PCD_EP_DB_Transmit+0x784>
 8002914:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	66bb      	str	r3, [r7, #104]	; 0x68
 800291c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <HAL_PCD_EP_DB_Transmit+0x738>
 8002928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800292a:	3301      	adds	r3, #1
 800292c:	66bb      	str	r3, [r7, #104]	; 0x68
 800292e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29a      	uxth	r2, r3
 8002934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002936:	b29b      	uxth	r3, r3
 8002938:	029b      	lsls	r3, r3, #10
 800293a:	b29b      	uxth	r3, r3
 800293c:	4313      	orrs	r3, r2
 800293e:	b29a      	uxth	r2, r3
 8002940:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002942:	801a      	strh	r2, [r3, #0]
 8002944:	e019      	b.n	800297a <HAL_PCD_EP_DB_Transmit+0x784>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	785b      	ldrb	r3, [r3, #1]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d115      	bne.n	800297a <HAL_PCD_EP_DB_Transmit+0x784>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002956:	b29b      	uxth	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800295c:	4413      	add	r3, r2
 800295e:	657b      	str	r3, [r7, #84]	; 0x54
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	011a      	lsls	r2, r3, #4
 8002966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002968:	4413      	add	r3, r2
 800296a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800296e:	653b      	str	r3, [r7, #80]	; 0x50
 8002970:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002974:	b29a      	uxth	r2, r3
 8002976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002978:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	6959      	ldr	r1, [r3, #20]
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	895a      	ldrh	r2, [r3, #10]
 8002986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800298a:	b29b      	uxth	r3, r3
 800298c:	f004 f91f 	bl	8006bce <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029aa:	82bb      	strh	r3, [r7, #20]
 80029ac:	8abb      	ldrh	r3, [r7, #20]
 80029ae:	f083 0310 	eor.w	r3, r3, #16
 80029b2:	82bb      	strh	r3, [r7, #20]
 80029b4:	8abb      	ldrh	r3, [r7, #20]
 80029b6:	f083 0320 	eor.w	r3, r3, #32
 80029ba:	82bb      	strh	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	441a      	add	r2, r3
 80029ca:	8abb      	ldrh	r3, [r7, #20]
 80029cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029dc:	b29b      	uxth	r3, r3
 80029de:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3790      	adds	r7, #144	; 0x90
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b087      	sub	sp, #28
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	817b      	strh	r3, [r7, #10]
 80029f8:	4613      	mov	r3, r2
 80029fa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80029fc:	897b      	ldrh	r3, [r7, #10]
 80029fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00b      	beq.n	8002a20 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a08:	897b      	ldrh	r3, [r7, #10]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	e009      	b.n	8002a34 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a20:	897a      	ldrh	r2, [r7, #10]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4413      	add	r3, r2
 8002a32:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a34:	893b      	ldrh	r3, [r7, #8]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d107      	bne.n	8002a4a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	80da      	strh	r2, [r3, #6]
 8002a48:	e00b      	b.n	8002a62 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e272      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8087 	beq.w	8002b9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a90:	4b92      	ldr	r3, [pc, #584]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a9c:	4b8f      	ldr	r3, [pc, #572]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d112      	bne.n	8002ace <HAL_RCC_OscConfig+0x5e>
 8002aa8:	4b8c      	ldr	r3, [pc, #560]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d10b      	bne.n	8002ace <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab6:	4b89      	ldr	r3, [pc, #548]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d06c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x12c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d168      	bne.n	8002b9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e24c      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x76>
 8002ad8:	4b80      	ldr	r3, [pc, #512]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a7f      	ldr	r2, [pc, #508]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	e02e      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x98>
 8002aee:	4b7b      	ldr	r3, [pc, #492]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a7a      	ldr	r2, [pc, #488]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b78      	ldr	r3, [pc, #480]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a77      	ldr	r2, [pc, #476]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e01d      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0xbc>
 8002b12:	4b72      	ldr	r3, [pc, #456]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a71      	ldr	r2, [pc, #452]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b6f      	ldr	r3, [pc, #444]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002b2c:	4b6b      	ldr	r3, [pc, #428]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a67      	ldr	r2, [pc, #412]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fd fed2 	bl	80008f4 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7fd fece 	bl	80008f4 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e200      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b5d      	ldr	r3, [pc, #372]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0xe4>
 8002b72:	e014      	b.n	8002b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fd febe 	bl	80008f4 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7fd feba 	bl	80008f4 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1ec      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x10c>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002baa:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bb6:	4b49      	ldr	r3, [pc, #292]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d11c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x18c>
 8002bc2:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x176>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e1c0      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4939      	ldr	r1, [pc, #228]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	e03a      	b.n	8002c72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c04:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7fd fe73 	bl	80008f4 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c12:	f7fd fe6f 	bl	80008f4 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1a1      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4927      	ldr	r1, [pc, #156]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fd fe52 	bl	80008f4 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c54:	f7fd fe4e 	bl	80008f4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e180      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03a      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d019      	beq.n	8002cba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <HAL_RCC_OscConfig+0x274>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7fd fe32 	bl	80008f4 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c94:	f7fd fe2e 	bl	80008f4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e160      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f000 face 	bl	8003254 <RCC_Delay>
 8002cb8:	e01c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc0:	f7fd fe18 	bl	80008f4 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7fd fe14 	bl	80008f4 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d908      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e146      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	42420000 	.word	0x42420000
 8002ce4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce8:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e9      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a6 	beq.w	8002e4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d02:	2300      	movs	r3, #0
 8002d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d06:	4b8b      	ldr	r3, [pc, #556]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10d      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4a87      	ldr	r2, [pc, #540]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	61d3      	str	r3, [r2, #28]
 8002d1e:	4b85      	ldr	r3, [pc, #532]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	4b82      	ldr	r3, [pc, #520]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d118      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3a:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d46:	f7fd fdd5 	bl	80008f4 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7fd fdd1 	bl	80008f4 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b64      	cmp	r3, #100	; 0x64
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e103      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	4b75      	ldr	r3, [pc, #468]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x312>
 8002d74:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	e02d      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x334>
 8002d8a:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a69      	ldr	r2, [pc, #420]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	6213      	str	r3, [r2, #32]
 8002da2:	e01c      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d10c      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x356>
 8002dac:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a60      	ldr	r2, [pc, #384]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6213      	str	r3, [r2, #32]
 8002db8:	4b5e      	ldr	r3, [pc, #376]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a5d      	ldr	r2, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6213      	str	r3, [r2, #32]
 8002dc4:	e00b      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002dc6:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a5a      	ldr	r2, [pc, #360]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a57      	ldr	r2, [pc, #348]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d015      	beq.n	8002e12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fd fd85 	bl	80008f4 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fd fd81 	bl	80008f4 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0b1      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ee      	beq.n	8002dee <HAL_RCC_OscConfig+0x37e>
 8002e10:	e014      	b.n	8002e3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e12:	f7fd fd6f 	bl	80008f4 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7fd fd6b 	bl	80008f4 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e09b      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e30:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ee      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d105      	bne.n	8002e4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e42:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4a3b      	ldr	r2, [pc, #236]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8087 	beq.w	8002f66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d061      	beq.n	8002f28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d146      	bne.n	8002efa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6c:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fd fd3f 	bl	80008f4 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fd fd3b 	bl	80008f4 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e06d      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8c:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4921      	ldr	r1, [pc, #132]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a19      	ldr	r1, [r3, #32]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	491b      	ldr	r1, [pc, #108]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7fd fd0f 	bl	80008f4 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fd fd0b 	bl	80008f4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e03d      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x46a>
 8002ef8:	e035      	b.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7fd fcf8 	bl	80008f4 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fd fcf4 	bl	80008f4 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e026      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x498>
 8002f26:	e01e      	b.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d107      	bne.n	8002f40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e019      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x500>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000

08002f74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0d0      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b67      	ldr	r3, [pc, #412]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	4965      	ldr	r1, [pc, #404]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0b8      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd0:	4b59      	ldr	r3, [pc, #356]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ff2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	494d      	ldr	r1, [pc, #308]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d040      	beq.n	8003094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d115      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07f      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e073      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06b      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4936      	ldr	r1, [pc, #216]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003064:	f7fd fc46 	bl	80008f4 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7fd fc42 	bl	80008f4 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e053      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d210      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	4922      	ldr	r1, [pc, #136]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e032      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4916      	ldr	r1, [pc, #88]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003102:	f000 f821 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8003106:	4602      	mov	r2, r0
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	490a      	ldr	r1, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	5ccb      	ldrb	r3, [r1, r3]
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1cc>)
 800311c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1d0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fba4 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40022000 	.word	0x40022000
 8003138:	40021000 	.word	0x40021000
 800313c:	08009da4 	.word	0x08009da4
 8003140:	20000000 	.word	0x20000000
 8003144:	20000004 	.word	0x20000004

08003148 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	2300      	movs	r3, #0
 800315c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003162:	4b1e      	ldr	r3, [pc, #120]	; (80031dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b04      	cmp	r3, #4
 8003170:	d002      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x30>
 8003172:	2b08      	cmp	r3, #8
 8003174:	d003      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x36>
 8003176:	e027      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800317a:	613b      	str	r3, [r7, #16]
      break;
 800317c:	e027      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	0c9b      	lsrs	r3, r3, #18
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003188:	5cd3      	ldrb	r3, [r2, r3]
 800318a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d010      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003196:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	0c5b      	lsrs	r3, r3, #17
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	4a11      	ldr	r2, [pc, #68]	; (80031e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031a2:	5cd3      	ldrb	r3, [r2, r3]
 80031a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80031aa:	fb03 f202 	mul.w	r2, r3, r2
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	e004      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a0c      	ldr	r2, [pc, #48]	; (80031ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80031bc:	fb02 f303 	mul.w	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	613b      	str	r3, [r7, #16]
      break;
 80031c6:	e002      	b.n	80031ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ca:	613b      	str	r3, [r7, #16]
      break;
 80031cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ce:	693b      	ldr	r3, [r7, #16]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	007a1200 	.word	0x007a1200
 80031e4:	08009dbc 	.word	0x08009dbc
 80031e8:	08009dcc 	.word	0x08009dcc
 80031ec:	003d0900 	.word	0x003d0900

080031f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f4:	4b02      	ldr	r3, [pc, #8]	; (8003200 <HAL_RCC_GetHCLKFreq+0x10>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	20000000 	.word	0x20000000

08003204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003208:	f7ff fff2 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	; (8003228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	08009db4 	.word	0x08009db4

0800322c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003230:	f7ff ffde 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003234:	4602      	mov	r2, r0
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	0adb      	lsrs	r3, r3, #11
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	4903      	ldr	r1, [pc, #12]	; (8003250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003242:	5ccb      	ldrb	r3, [r1, r3]
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	08009db4 	.word	0x08009db4

08003254 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <RCC_Delay+0x34>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <RCC_Delay+0x38>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0a5b      	lsrs	r3, r3, #9
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003270:	bf00      	nop
  }
  while (Delay --);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1e5a      	subs	r2, r3, #1
 8003276:	60fa      	str	r2, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f9      	bne.n	8003270 <RCC_Delay+0x1c>
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	20000000 	.word	0x20000000
 800328c:	10624dd3 	.word	0x10624dd3

08003290 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d07d      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032ac:	2300      	movs	r3, #0
 80032ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b0:	4b4f      	ldr	r3, [pc, #316]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10d      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032bc:	4b4c      	ldr	r3, [pc, #304]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	4a4b      	ldr	r2, [pc, #300]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c6:	61d3      	str	r3, [r2, #28]
 80032c8:	4b49      	ldr	r3, [pc, #292]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d4:	2301      	movs	r3, #1
 80032d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d8:	4b46      	ldr	r3, [pc, #280]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d118      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e4:	4b43      	ldr	r3, [pc, #268]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a42      	ldr	r2, [pc, #264]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f0:	f7fd fb00 	bl	80008f4 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f6:	e008      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f8:	f7fd fafc 	bl	80008f4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e06d      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	4b3a      	ldr	r3, [pc, #232]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003316:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d02e      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	429a      	cmp	r2, r3
 8003332:	d027      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003334:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800333e:	4b2e      	ldr	r3, [pc, #184]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003344:	4b2c      	ldr	r3, [pc, #176]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800334a:	4a29      	ldr	r2, [pc, #164]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d014      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335a:	f7fd facb 	bl	80008f4 <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003360:	e00a      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7fd fac7 	bl	80008f4 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003370:	4293      	cmp	r3, r2
 8003372:	d901      	bls.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e036      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003378:	4b1d      	ldr	r3, [pc, #116]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ee      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4917      	ldr	r1, [pc, #92]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	4313      	orrs	r3, r2
 8003394:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003396:	7dfb      	ldrb	r3, [r7, #23]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d105      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339c:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	4a13      	ldr	r2, [pc, #76]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b4:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	490b      	ldr	r1, [pc, #44]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033d2:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	4904      	ldr	r1, [pc, #16]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
 80033f8:	42420440 	.word	0x42420440

080033fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e041      	b.n	8003492 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd f90c 	bl	8000640 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3304      	adds	r3, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f000 f8f0 	bl	8003620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e0ae      	b.n	8003618 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b0c      	cmp	r3, #12
 80034c6:	f200 809f 	bhi.w	8003608 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034ca:	a201      	add	r2, pc, #4	; (adr r2, 80034d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d0:	08003505 	.word	0x08003505
 80034d4:	08003609 	.word	0x08003609
 80034d8:	08003609 	.word	0x08003609
 80034dc:	08003609 	.word	0x08003609
 80034e0:	08003545 	.word	0x08003545
 80034e4:	08003609 	.word	0x08003609
 80034e8:	08003609 	.word	0x08003609
 80034ec:	08003609 	.word	0x08003609
 80034f0:	08003587 	.word	0x08003587
 80034f4:	08003609 	.word	0x08003609
 80034f8:	08003609 	.word	0x08003609
 80034fc:	08003609 	.word	0x08003609
 8003500:	080035c7 	.word	0x080035c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f8ea 	bl	80036e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699a      	ldr	r2, [r3, #24]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0208 	orr.w	r2, r2, #8
 800351e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0204 	bic.w	r2, r2, #4
 800352e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6999      	ldr	r1, [r3, #24]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	619a      	str	r2, [r3, #24]
      break;
 8003542:	e064      	b.n	800360e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f930 	bl	80037b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800355e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6999      	ldr	r1, [r3, #24]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	021a      	lsls	r2, r3, #8
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	619a      	str	r2, [r3, #24]
      break;
 8003584:	e043      	b.n	800360e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 f979 	bl	8003884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0208 	orr.w	r2, r2, #8
 80035a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0204 	bic.w	r2, r2, #4
 80035b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69d9      	ldr	r1, [r3, #28]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	61da      	str	r2, [r3, #28]
      break;
 80035c4:	e023      	b.n	800360e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68b9      	ldr	r1, [r7, #8]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 f9c3 	bl	8003958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69da      	ldr	r2, [r3, #28]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	69d9      	ldr	r1, [r3, #28]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	021a      	lsls	r2, r3, #8
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	61da      	str	r2, [r3, #28]
      break;
 8003606:	e002      	b.n	800360e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	75fb      	strb	r3, [r7, #23]
      break;
 800360c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003616:	7dfb      	ldrb	r3, [r7, #23]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3718      	adds	r7, #24
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a29      	ldr	r2, [pc, #164]	; (80036d8 <TIM_Base_SetConfig+0xb8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00b      	beq.n	8003650 <TIM_Base_SetConfig+0x30>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363e:	d007      	beq.n	8003650 <TIM_Base_SetConfig+0x30>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a26      	ldr	r2, [pc, #152]	; (80036dc <TIM_Base_SetConfig+0xbc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_Base_SetConfig+0x30>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a25      	ldr	r2, [pc, #148]	; (80036e0 <TIM_Base_SetConfig+0xc0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d108      	bne.n	8003662 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a1c      	ldr	r2, [pc, #112]	; (80036d8 <TIM_Base_SetConfig+0xb8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00b      	beq.n	8003682 <TIM_Base_SetConfig+0x62>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003670:	d007      	beq.n	8003682 <TIM_Base_SetConfig+0x62>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a19      	ldr	r2, [pc, #100]	; (80036dc <TIM_Base_SetConfig+0xbc>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d003      	beq.n	8003682 <TIM_Base_SetConfig+0x62>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <TIM_Base_SetConfig+0xc0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d108      	bne.n	8003694 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <TIM_Base_SetConfig+0xb8>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d103      	bne.n	80036c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	615a      	str	r2, [r3, #20]
}
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	40012c00 	.word	0x40012c00
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800

080036e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f023 0201 	bic.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0303 	bic.w	r3, r3, #3
 800371a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f023 0302 	bic.w	r3, r3, #2
 800372c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a1c      	ldr	r2, [pc, #112]	; (80037ac <TIM_OC1_SetConfig+0xc8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d10c      	bne.n	800375a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0308 	bic.w	r3, r3, #8
 8003746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a13      	ldr	r2, [pc, #76]	; (80037ac <TIM_OC1_SetConfig+0xc8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d111      	bne.n	8003786 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	621a      	str	r2, [r3, #32]
}
 80037a0:	bf00      	nop
 80037a2:	371c      	adds	r7, #28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40012c00 	.word	0x40012c00

080037b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f023 0210 	bic.w	r2, r3, #16
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f023 0320 	bic.w	r3, r3, #32
 80037fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	4313      	orrs	r3, r2
 8003806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <TIM_OC2_SetConfig+0xd0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d10d      	bne.n	800382c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a14      	ldr	r2, [pc, #80]	; (8003880 <TIM_OC2_SetConfig+0xd0>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d113      	bne.n	800385c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800383a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	621a      	str	r2, [r3, #32]
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	40012c00 	.word	0x40012c00

08003884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <TIM_OC3_SetConfig+0xd0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d10d      	bne.n	80038fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a14      	ldr	r2, [pc, #80]	; (8003954 <TIM_OC3_SetConfig+0xd0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d113      	bne.n	800392e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800390c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	621a      	str	r2, [r3, #32]
}
 8003948:	bf00      	nop
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40012c00 	.word	0x40012c00

08003958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	031b      	lsls	r3, r3, #12
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a0f      	ldr	r2, [pc, #60]	; (80039f0 <TIM_OC4_SetConfig+0x98>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d109      	bne.n	80039cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	621a      	str	r2, [r3, #32]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr
 80039f0:	40012c00 	.word	0x40012c00

080039f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e046      	b.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a16      	ldr	r2, [pc, #88]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00e      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d009      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a10      	ldr	r2, [pc, #64]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10c      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800

08003ab0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e042      	b.n	8003b48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fc fdfe 	bl	80006d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2224      	movs	r2, #36	; 0x24
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 fcd5 	bl	80044a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d112      	bne.n	8003b90 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_UART_Receive_IT+0x26>
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e00b      	b.n	8003b92 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b80:	88fb      	ldrh	r3, [r7, #6]
 8003b82:	461a      	mov	r2, r3
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fab7 	bl	80040fa <UART_Start_Receive_IT>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	e000      	b.n	8003b92 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b0ba      	sub	sp, #232	; 0xe8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003bda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10f      	bne.n	8003c02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_UART_IRQHandler+0x66>
 8003bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fb93 	bl	8004326 <UART_Receive_IT>
      return;
 8003c00:	e25b      	b.n	80040ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80de 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x22c>
 8003c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d106      	bne.n	8003c26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80d1 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_UART_IRQHandler+0xae>
 8003c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	f043 0201 	orr.w	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00b      	beq.n	8003c6e <HAL_UART_IRQHandler+0xd2>
 8003c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	f043 0202 	orr.w	r2, r3, #2
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <HAL_UART_IRQHandler+0xf6>
 8003c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	f043 0204 	orr.w	r2, r3, #4
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d011      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x126>
 8003c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d105      	bne.n	8003cb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f043 0208 	orr.w	r2, r3, #8
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 81f2 	beq.w	80040b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_UART_IRQHandler+0x14e>
 8003cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fb1e 	bl	8004326 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <HAL_UART_IRQHandler+0x17a>
 8003d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d04f      	beq.n	8003db6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa28 	bl	800416c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d041      	beq.n	8003dae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3314      	adds	r3, #20
 8003d52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d56:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d66:	e841 2300 	strex	r3, r2, [r1]
 8003d6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1d9      	bne.n	8003d2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d013      	beq.n	8003da6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	4a7e      	ldr	r2, [pc, #504]	; (8003f7c <HAL_UART_IRQHandler+0x3e0>)
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc ff04 	bl	8000b98 <HAL_DMA_Abort_IT>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d016      	beq.n	8003dc4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003da0:	4610      	mov	r0, r2
 8003da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da4:	e00e      	b.n	8003dc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f993 	bl	80040d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	e00a      	b.n	8003dc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f98f 	bl	80040d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db4:	e006      	b.n	8003dc4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f98b 	bl	80040d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003dc2:	e175      	b.n	80040b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc4:	bf00      	nop
    return;
 8003dc6:	e173      	b.n	80040b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	f040 814f 	bne.w	8004070 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8148 	beq.w	8004070 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8141 	beq.w	8004070 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 80b6 	beq.w	8003f80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8145 	beq.w	80040b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e32:	429a      	cmp	r2, r3
 8003e34:	f080 813e 	bcs.w	80040b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e3e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	f000 8088 	beq.w	8003f5c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003e78:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e84:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1d9      	bne.n	8003e4c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	3314      	adds	r3, #20
 8003e9e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3314      	adds	r3, #20
 8003eb8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ebc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ec4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ec8:	e841 2300 	strex	r3, r2, [r1]
 8003ecc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ece:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1e1      	bne.n	8003e98 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3314      	adds	r3, #20
 8003eda:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003edc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ede:	e853 3f00 	ldrex	r3, [r3]
 8003ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3314      	adds	r3, #20
 8003ef4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ef8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003efa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003efe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e3      	bne.n	8003ed4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2c:	f023 0310 	bic.w	r3, r3, #16
 8003f30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003f3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f40:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e3      	bne.n	8003f1a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc fde3 	bl	8000b22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	4619      	mov	r1, r3
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8b6 	bl	80040e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f78:	e09c      	b.n	80040b4 <HAL_UART_IRQHandler+0x518>
 8003f7a:	bf00      	nop
 8003f7c:	08004231 	.word	0x08004231
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 808e 	beq.w	80040b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8089 	beq.w	80040b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	330c      	adds	r3, #12
 8003fac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	330c      	adds	r3, #12
 8003fc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003fca:	647a      	str	r2, [r7, #68]	; 0x44
 8003fcc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e3      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	623b      	str	r3, [r7, #32]
   return(result);
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004002:	633a      	str	r2, [r7, #48]	; 0x30
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e3      	bne.n	8003fde <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	330c      	adds	r3, #12
 800402a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	60fb      	str	r3, [r7, #12]
   return(result);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0310 	bic.w	r3, r3, #16
 800403a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004048:	61fa      	str	r2, [r7, #28]
 800404a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	69b9      	ldr	r1, [r7, #24]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	617b      	str	r3, [r7, #20]
   return(result);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e3      	bne.n	8004024 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004062:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f83b 	bl	80040e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800406e:	e023      	b.n	80040b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <HAL_UART_IRQHandler+0x4f4>
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f8e5 	bl	8004258 <UART_Transmit_IT>
    return;
 800408e:	e014      	b.n	80040ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00e      	beq.n	80040ba <HAL_UART_IRQHandler+0x51e>
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f924 	bl	80042f6 <UART_EndTransmit_IT>
    return;
 80040ae:	e004      	b.n	80040ba <HAL_UART_IRQHandler+0x51e>
    return;
 80040b0:	bf00      	nop
 80040b2:	e002      	b.n	80040ba <HAL_UART_IRQHandler+0x51e>
      return;
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <HAL_UART_IRQHandler+0x51e>
      return;
 80040b8:	bf00      	nop
  }
}
 80040ba:	37e8      	adds	r7, #232	; 0xe8
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr

080040d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b085      	sub	sp, #20
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	4613      	mov	r3, r2
 8004106:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	88fa      	ldrh	r2, [r7, #6]
 8004112:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	88fa      	ldrh	r2, [r7, #6]
 8004118:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2222      	movs	r2, #34	; 0x22
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800413e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0220 	orr.w	r2, r2, #32
 800415e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800416c:	b480      	push	{r7}
 800416e:	b095      	sub	sp, #84	; 0x54
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417e:	e853 3f00 	ldrex	r3, [r3]
 8004182:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800418a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004194:	643a      	str	r2, [r7, #64]	; 0x40
 8004196:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004198:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800419a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800419c:	e841 2300 	strex	r3, r2, [r1]
 80041a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1e5      	bne.n	8004174 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3314      	adds	r3, #20
 80041ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	e853 3f00 	ldrex	r3, [r3]
 80041b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f023 0301 	bic.w	r3, r3, #1
 80041be:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3314      	adds	r3, #20
 80041c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041d0:	e841 2300 	strex	r3, r2, [r1]
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e5      	bne.n	80041a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d119      	bne.n	8004218 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	330c      	adds	r3, #12
 80041ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	e853 3f00 	ldrex	r3, [r3]
 80041f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f023 0310 	bic.w	r3, r3, #16
 80041fa:	647b      	str	r3, [r7, #68]	; 0x44
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	330c      	adds	r3, #12
 8004202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004204:	61ba      	str	r2, [r7, #24]
 8004206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	6979      	ldr	r1, [r7, #20]
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	613b      	str	r3, [r7, #16]
   return(result);
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e5      	bne.n	80041e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004226:	bf00      	nop
 8004228:	3754      	adds	r7, #84	; 0x54
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff ff41 	bl	80040d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004250:	bf00      	nop
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b21      	cmp	r3, #33	; 0x21
 800426a:	d13e      	bne.n	80042ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004274:	d114      	bne.n	80042a0 <UART_Transmit_IT+0x48>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d110      	bne.n	80042a0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004292:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	1c9a      	adds	r2, r3, #2
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	621a      	str	r2, [r3, #32]
 800429e:	e008      	b.n	80042b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	1c59      	adds	r1, r3, #1
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6211      	str	r1, [r2, #32]
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	4619      	mov	r1, r3
 80042c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10f      	bne.n	80042e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e000      	b.n	80042ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042ea:	2302      	movs	r3, #2
  }
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff fed2 	bl	80040c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b08c      	sub	sp, #48	; 0x30
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b22      	cmp	r3, #34	; 0x22
 8004338:	f040 80ae 	bne.w	8004498 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004344:	d117      	bne.n	8004376 <UART_Receive_IT+0x50>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d113      	bne.n	8004376 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004364:	b29a      	uxth	r2, r3
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436e:	1c9a      	adds	r2, r3, #2
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	629a      	str	r2, [r3, #40]	; 0x28
 8004374:	e026      	b.n	80043c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800437c:	2300      	movs	r3, #0
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004388:	d007      	beq.n	800439a <UART_Receive_IT+0x74>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <UART_Receive_IT+0x82>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e008      	b.n	80043ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4619      	mov	r1, r3
 80043d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d15d      	bne.n	8004494 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0220 	bic.w	r2, r2, #32
 80043e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2220      	movs	r2, #32
 800440c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	2b01      	cmp	r3, #1
 800441c:	d135      	bne.n	800448a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	330c      	adds	r3, #12
 800442a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	e853 3f00 	ldrex	r3, [r3]
 8004432:	613b      	str	r3, [r7, #16]
   return(result);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f023 0310 	bic.w	r3, r3, #16
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004444:	623a      	str	r2, [r7, #32]
 8004446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004448:	69f9      	ldr	r1, [r7, #28]
 800444a:	6a3a      	ldr	r2, [r7, #32]
 800444c:	e841 2300 	strex	r3, r2, [r1]
 8004450:	61bb      	str	r3, [r7, #24]
   return(result);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1e5      	bne.n	8004424 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b10      	cmp	r3, #16
 8004464:	d10a      	bne.n	800447c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004480:	4619      	mov	r1, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff fe2e 	bl	80040e4 <HAL_UARTEx_RxEventCallback>
 8004488:	e002      	b.n	8004490 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fb fe60 	bl	8000150 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e002      	b.n	800449a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	e000      	b.n	800449a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004498:	2302      	movs	r3, #2
  }
}
 800449a:	4618      	mov	r0, r3
 800449c:	3730      	adds	r7, #48	; 0x30
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044de:	f023 030c 	bic.w	r3, r3, #12
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	430b      	orrs	r3, r1
 80044ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <UART_SetConfig+0x114>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d103      	bne.n	8004514 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7fe fe8e 	bl	800322c <HAL_RCC_GetPCLK2Freq>
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	e002      	b.n	800451a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004514:	f7fe fe76 	bl	8003204 <HAL_RCC_GetPCLK1Freq>
 8004518:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	009a      	lsls	r2, r3, #2
 8004524:	441a      	add	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004530:	4a22      	ldr	r2, [pc, #136]	; (80045bc <UART_SetConfig+0x118>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	0119      	lsls	r1, r3, #4
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009a      	lsls	r2, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004550:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <UART_SetConfig+0x118>)
 8004552:	fba3 0302 	umull	r0, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	2064      	movs	r0, #100	; 0x64
 800455a:	fb00 f303 	mul.w	r3, r0, r3
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	3332      	adds	r3, #50	; 0x32
 8004564:	4a15      	ldr	r2, [pc, #84]	; (80045bc <UART_SetConfig+0x118>)
 8004566:	fba2 2303 	umull	r2, r3, r2, r3
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004570:	4419      	add	r1, r3
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009a      	lsls	r2, r3, #2
 800457c:	441a      	add	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	fbb2 f2f3 	udiv	r2, r2, r3
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <UART_SetConfig+0x118>)
 800458a:	fba3 0302 	umull	r0, r3, r3, r2
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	2064      	movs	r0, #100	; 0x64
 8004592:	fb00 f303 	mul.w	r3, r0, r3
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	3332      	adds	r3, #50	; 0x32
 800459c:	4a07      	ldr	r2, [pc, #28]	; (80045bc <UART_SetConfig+0x118>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	f003 020f 	and.w	r2, r3, #15
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	440a      	add	r2, r1
 80045ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40013800 	.word	0x40013800
 80045bc:	51eb851f 	.word	0x51eb851f

080045c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045c0:	b084      	sub	sp, #16
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	f107 0014 	add.w	r0, r7, #20
 80045ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	b004      	add	sp, #16
 80045de:	4770      	bx	lr

080045e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80045f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004614:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004618:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	b29b      	uxth	r3, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	b29b      	uxth	r3, r3
 800462a:	4013      	ands	r3, r2
 800462c:	b29a      	uxth	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr

08004640 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr

08004658 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004658:	b084      	sub	sp, #16
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	f107 0014 	add.w	r0, r7, #20
 8004666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	b004      	add	sp, #16
 8004696:	4770      	bx	lr

08004698 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004698:	b480      	push	{r7}
 800469a:	b09d      	sub	sp, #116	; 0x74
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80046ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	78db      	ldrb	r3, [r3, #3]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d81f      	bhi.n	800470a <USB_ActivateEndpoint+0x72>
 80046ca:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <USB_ActivateEndpoint+0x38>)
 80046cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d0:	080046e1 	.word	0x080046e1
 80046d4:	080046fd 	.word	0x080046fd
 80046d8:	08004713 	.word	0x08004713
 80046dc:	080046ef 	.word	0x080046ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80046ec:	e012      	b.n	8004714 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80046f2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80046f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80046fa:	e00b      	b.n	8004714 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004700:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004704:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004708:	e004      	b.n	8004714 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004710:	e000      	b.n	8004714 <USB_ActivateEndpoint+0x7c>
      break;
 8004712:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800472a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004732:	b29b      	uxth	r3, r3
 8004734:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474c:	b29a      	uxth	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	b29b      	uxth	r3, r3
 8004754:	4313      	orrs	r3, r2
 8004756:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	441a      	add	r2, r3
 8004764:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004778:	b29b      	uxth	r3, r3
 800477a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	7b1b      	ldrb	r3, [r3, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f040 8178 	bne.w	8004a76 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	785b      	ldrb	r3, [r3, #1]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8084 	beq.w	8004898 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800479a:	b29b      	uxth	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	4413      	add	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	011a      	lsls	r2, r3, #4
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	88db      	ldrh	r3, [r3, #6]
 80047b8:	085b      	lsrs	r3, r3, #1
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	827b      	strh	r3, [r7, #18]
 80047d2:	8a7b      	ldrh	r3, [r7, #18]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01b      	beq.n	8004814 <USB_ActivateEndpoint+0x17c>
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	881b      	ldrh	r3, [r3, #0]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f2:	823b      	strh	r3, [r7, #16]
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	441a      	add	r2, r3
 80047fe:	8a3b      	ldrh	r3, [r7, #16]
 8004800:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004804:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800480c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004810:	b29b      	uxth	r3, r3
 8004812:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	78db      	ldrb	r3, [r3, #3]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d020      	beq.n	800485e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	b29b      	uxth	r3, r3
 800482a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004832:	81bb      	strh	r3, [r7, #12]
 8004834:	89bb      	ldrh	r3, [r7, #12]
 8004836:	f083 0320 	eor.w	r3, r3, #32
 800483a:	81bb      	strh	r3, [r7, #12]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	441a      	add	r2, r3
 8004846:	89bb      	ldrh	r3, [r7, #12]
 8004848:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800484c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004858:	b29b      	uxth	r3, r3
 800485a:	8013      	strh	r3, [r2, #0]
 800485c:	e2d5      	b.n	8004e0a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	b29b      	uxth	r3, r3
 800486c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004874:	81fb      	strh	r3, [r7, #14]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	441a      	add	r2, r3
 8004880:	89fb      	ldrh	r3, [r7, #14]
 8004882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800488a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800488e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004892:	b29b      	uxth	r3, r3
 8004894:	8013      	strh	r3, [r2, #0]
 8004896:	e2b8      	b.n	8004e0a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	4413      	add	r3, r2
 80048aa:	633b      	str	r3, [r7, #48]	; 0x30
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	011a      	lsls	r2, r3, #4
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80048ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	88db      	ldrh	r3, [r3, #6]
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	005b      	lsls	r3, r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	4413      	add	r3, r2
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	011a      	lsls	r2, r3, #4
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	4413      	add	r3, r2
 80048ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	801a      	strh	r2, [r3, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	2b3e      	cmp	r3, #62	; 0x3e
 8004906:	d91d      	bls.n	8004944 <USB_ActivateEndpoint+0x2ac>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2b00      	cmp	r3, #0
 800491a:	d102      	bne.n	8004922 <USB_ActivateEndpoint+0x28a>
 800491c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800491e:	3b01      	subs	r3, #1
 8004920:	66bb      	str	r3, [r7, #104]	; 0x68
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29a      	uxth	r2, r3
 8004928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800492a:	b29b      	uxth	r3, r3
 800492c:	029b      	lsls	r3, r3, #10
 800492e:	b29b      	uxth	r3, r3
 8004930:	4313      	orrs	r3, r2
 8004932:	b29b      	uxth	r3, r3
 8004934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493c:	b29a      	uxth	r2, r3
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	801a      	strh	r2, [r3, #0]
 8004942:	e026      	b.n	8004992 <USB_ActivateEndpoint+0x2fa>
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <USB_ActivateEndpoint+0x2ca>
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	b29b      	uxth	r3, r3
 8004952:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004956:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800495a:	b29a      	uxth	r2, r3
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	801a      	strh	r2, [r3, #0]
 8004960:	e017      	b.n	8004992 <USB_ActivateEndpoint+0x2fa>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	66bb      	str	r3, [r7, #104]	; 0x68
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <USB_ActivateEndpoint+0x2e4>
 8004976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004978:	3301      	adds	r3, #1
 800497a:	66bb      	str	r3, [r7, #104]	; 0x68
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29a      	uxth	r2, r3
 8004982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004984:	b29b      	uxth	r3, r3
 8004986:	029b      	lsls	r3, r3, #10
 8004988:	b29b      	uxth	r3, r3
 800498a:	4313      	orrs	r3, r2
 800498c:	b29a      	uxth	r2, r3
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	847b      	strh	r3, [r7, #34]	; 0x22
 80049a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01b      	beq.n	80049e2 <USB_ActivateEndpoint+0x34a>
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c0:	843b      	strh	r3, [r7, #32]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	8c3b      	ldrh	r3, [r7, #32]
 80049ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049de:	b29b      	uxth	r3, r3
 80049e0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d124      	bne.n	8004a34 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a00:	83bb      	strh	r3, [r7, #28]
 8004a02:	8bbb      	ldrh	r3, [r7, #28]
 8004a04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a08:	83bb      	strh	r3, [r7, #28]
 8004a0a:	8bbb      	ldrh	r3, [r7, #28]
 8004a0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a10:	83bb      	strh	r3, [r7, #28]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	441a      	add	r2, r3
 8004a1c:	8bbb      	ldrh	r3, [r7, #28]
 8004a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	8013      	strh	r3, [r2, #0]
 8004a32:	e1ea      	b.n	8004e0a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	83fb      	strh	r3, [r7, #30]
 8004a4c:	8bfb      	ldrh	r3, [r7, #30]
 8004a4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a52:	83fb      	strh	r3, [r7, #30]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	441a      	add	r2, r3
 8004a5e:	8bfb      	ldrh	r3, [r7, #30]
 8004a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	8013      	strh	r3, [r2, #0]
 8004a74:	e1c9      	b.n	8004e0a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	78db      	ldrb	r3, [r3, #3]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d11e      	bne.n	8004abc <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a94:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	441a      	add	r2, r3
 8004aa2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	8013      	strh	r3, [r2, #0]
 8004aba:	e01d      	b.n	8004af8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	441a      	add	r2, r3
 8004ae0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b08:	4413      	add	r3, r2
 8004b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	011a      	lsls	r2, r3, #4
 8004b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	891b      	ldrh	r3, [r3, #8]
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b2a:	801a      	strh	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	461a      	mov	r2, r3
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3c:	4413      	add	r3, r2
 8004b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	011a      	lsls	r2, r3, #4
 8004b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	895b      	ldrh	r3, [r3, #10]
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b5e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	785b      	ldrb	r3, [r3, #1]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f040 8093 	bne.w	8004c90 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d01b      	beq.n	8004bbe <USB_ActivateEndpoint+0x526>
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004baa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004bcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d01b      	beq.n	8004c0e <USB_ActivateEndpoint+0x576>
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bec:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	441a      	add	r2, r3
 8004bf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c24:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c34:	873b      	strh	r3, [r7, #56]	; 0x38
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	441a      	add	r2, r3
 8004c40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c6c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	8013      	strh	r3, [r2, #0]
 8004c8e:	e0bc      	b.n	8004e0a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01d      	beq.n	8004ce8 <USB_ActivateEndpoint+0x650>
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	441a      	add	r2, r3
 8004cd0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004cf8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01d      	beq.n	8004d40 <USB_ActivateEndpoint+0x6a8>
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	441a      	add	r2, r3
 8004d28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	78db      	ldrb	r3, [r3, #3]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d024      	beq.n	8004d92 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d66:	f083 0320 	eor.w	r3, r3, #32
 8004d6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	441a      	add	r2, r3
 8004d78:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	8013      	strh	r3, [r2, #0]
 8004d90:	e01d      	b.n	8004dce <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	4413      	add	r3, r2
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004da8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	441a      	add	r2, r3
 8004db6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	441a      	add	r2, r3
 8004df2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004e0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3774      	adds	r7, #116	; 0x74
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b08d      	sub	sp, #52	; 0x34
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	7b1b      	ldrb	r3, [r3, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f040 808e 	bne.w	8004f48 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	785b      	ldrb	r3, [r3, #1]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d044      	beq.n	8004ebe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	81bb      	strh	r3, [r7, #12]
 8004e42:	89bb      	ldrh	r3, [r7, #12]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01b      	beq.n	8004e84 <USB_DeactivateEndpoint+0x6c>
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	817b      	strh	r3, [r7, #10]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	441a      	add	r2, r3
 8004e6e:	897b      	ldrh	r3, [r7, #10]
 8004e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9a:	813b      	strh	r3, [r7, #8]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	893b      	ldrh	r3, [r7, #8]
 8004ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8013      	strh	r3, [r2, #0]
 8004ebc:	e192      	b.n	80051e4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	827b      	strh	r3, [r7, #18]
 8004ecc:	8a7b      	ldrh	r3, [r7, #18]
 8004ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01b      	beq.n	8004f0e <USB_DeactivateEndpoint+0xf6>
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eec:	823b      	strh	r3, [r7, #16]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	441a      	add	r2, r3
 8004ef8:	8a3b      	ldrh	r3, [r7, #16]
 8004efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f24:	81fb      	strh	r3, [r7, #14]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	89fb      	ldrh	r3, [r7, #14]
 8004f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]
 8004f46:	e14d      	b.n	80051e4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	785b      	ldrb	r3, [r3, #1]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f040 80a5 	bne.w	800509c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	843b      	strh	r3, [r7, #32]
 8004f60:	8c3b      	ldrh	r3, [r7, #32]
 8004f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01b      	beq.n	8004fa2 <USB_DeactivateEndpoint+0x18a>
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f80:	83fb      	strh	r3, [r7, #30]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	441a      	add	r2, r3
 8004f8c:	8bfb      	ldrh	r3, [r7, #30]
 8004f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	83bb      	strh	r3, [r7, #28]
 8004fb0:	8bbb      	ldrh	r3, [r7, #28]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01b      	beq.n	8004ff2 <USB_DeactivateEndpoint+0x1da>
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd0:	837b      	strh	r3, [r7, #26]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	441a      	add	r2, r3
 8004fdc:	8b7b      	ldrh	r3, [r7, #26]
 8004fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005008:	833b      	strh	r3, [r7, #24]
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	441a      	add	r2, r3
 8005014:	8b3b      	ldrh	r3, [r7, #24]
 8005016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800501e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005022:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005026:	b29b      	uxth	r3, r3
 8005028:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800503c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005040:	82fb      	strh	r3, [r7, #22]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	8afb      	ldrh	r3, [r7, #22]
 800504e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800505a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505e:	b29b      	uxth	r3, r3
 8005060:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005074:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005078:	82bb      	strh	r3, [r7, #20]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	8abb      	ldrh	r3, [r7, #20]
 8005086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]
 800509a:	e0a3      	b.n	80051e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d01b      	beq.n	80050ec <USB_DeactivateEndpoint+0x2d4>
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80050fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80050fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <USB_DeactivateEndpoint+0x324>
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	b29b      	uxth	r3, r3
 8005112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	853b      	strh	r3, [r7, #40]	; 0x28
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	441a      	add	r2, r3
 8005126:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800512c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005130:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005134:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005138:	b29b      	uxth	r3, r3
 800513a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	441a      	add	r2, r3
 800515e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005168:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800516c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005170:	b29b      	uxth	r3, r3
 8005172:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800518a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800519c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	4413      	add	r3, r2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	441a      	add	r2, r3
 80051ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80051d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3734      	adds	r7, #52	; 0x34
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b0c2      	sub	sp, #264	; 0x108
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051fe:	6018      	str	r0, [r3, #0]
 8005200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005208:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800520a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	785b      	ldrb	r3, [r3, #1]
 8005216:	2b01      	cmp	r3, #1
 8005218:	f040 86b7 	bne.w	8005f8a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800521c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	429a      	cmp	r2, r3
 8005236:	d908      	bls.n	800524a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005248:	e007      	b.n	800525a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800524a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800525a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	7b1b      	ldrb	r3, [r3, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d13a      	bne.n	80052e0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800526a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6959      	ldr	r1, [r3, #20]
 8005276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800527a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	88da      	ldrh	r2, [r3, #6]
 8005282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005286:	b29b      	uxth	r3, r3
 8005288:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800528c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005290:	6800      	ldr	r0, [r0, #0]
 8005292:	f001 fc9c 	bl	8006bce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800529a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	011a      	lsls	r2, r3, #4
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	4413      	add	r3, r2
 80052cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	801a      	strh	r2, [r3, #0]
 80052dc:	f000 be1f 	b.w	8005f1e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80052e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	78db      	ldrb	r3, [r3, #3]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	f040 8462 	bne.w	8005bb6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80052f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	429a      	cmp	r2, r3
 800530c:	f240 83df 	bls.w	8005ace <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005314:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800533a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800533e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	441a      	add	r2, r3
 8005354:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005360:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005368:	b29b      	uxth	r3, r3
 800536a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800536c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6a1a      	ldr	r2, [r3, #32]
 8005378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800537c:	1ad2      	subs	r2, r2, r3
 800537e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800538a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800538e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 81c7 	beq.w	8005740 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80053b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	633b      	str	r3, [r7, #48]	; 0x30
 80053be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	785b      	ldrb	r3, [r3, #1]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d177      	bne.n	80054be <USB_EPStartXfer+0x2ce>
 80053ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	461a      	mov	r2, r3
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	4413      	add	r3, r2
 80053f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	011a      	lsls	r2, r3, #4
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	4413      	add	r3, r2
 8005404:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b29b      	uxth	r3, r3
 8005410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005414:	b29a      	uxth	r2, r3
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	801a      	strh	r2, [r3, #0]
 800541a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800541e:	2b3e      	cmp	r3, #62	; 0x3e
 8005420:	d921      	bls.n	8005466 <USB_EPStartXfer+0x276>
 8005422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800542c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	2b00      	cmp	r3, #0
 8005436:	d104      	bne.n	8005442 <USB_EPStartXfer+0x252>
 8005438:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800543c:	3b01      	subs	r3, #1
 800543e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29a      	uxth	r2, r3
 8005448:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800544c:	b29b      	uxth	r3, r3
 800544e:	029b      	lsls	r3, r3, #10
 8005450:	b29b      	uxth	r3, r3
 8005452:	4313      	orrs	r3, r2
 8005454:	b29b      	uxth	r3, r3
 8005456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545e:	b29a      	uxth	r2, r3
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	801a      	strh	r2, [r3, #0]
 8005464:	e050      	b.n	8005508 <USB_EPStartXfer+0x318>
 8005466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <USB_EPStartXfer+0x294>
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800547c:	b29a      	uxth	r2, r3
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	801a      	strh	r2, [r3, #0]
 8005482:	e041      	b.n	8005508 <USB_EPStartXfer+0x318>
 8005484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005488:	085b      	lsrs	r3, r3, #1
 800548a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800548e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <USB_EPStartXfer+0x2b4>
 800549a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800549e:	3301      	adds	r3, #1
 80054a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	029b      	lsls	r3, r3, #10
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	801a      	strh	r2, [r3, #0]
 80054bc:	e024      	b.n	8005508 <USB_EPStartXfer+0x318>
 80054be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	785b      	ldrb	r3, [r3, #1]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d11c      	bne.n	8005508 <USB_EPStartXfer+0x318>
 80054ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054dc:	b29b      	uxth	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	4413      	add	r3, r2
 80054e4:	633b      	str	r3, [r7, #48]	; 0x30
 80054e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	011a      	lsls	r2, r3, #4
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	4413      	add	r3, r2
 80054f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005502:	b29a      	uxth	r2, r3
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800550c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	895b      	ldrh	r3, [r3, #10]
 8005514:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6959      	ldr	r1, [r3, #20]
 8005524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005528:	b29b      	uxth	r3, r3
 800552a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800552e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005532:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005536:	6800      	ldr	r0, [r0, #0]
 8005538:	f001 fb49 	bl	8006bce <USB_WritePMA>
            ep->xfer_buff += len;
 800553c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695a      	ldr	r2, [r3, #20]
 8005548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554c:	441a      	add	r2, r3
 800554e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800555a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6a1a      	ldr	r2, [r3, #32]
 8005566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	429a      	cmp	r2, r3
 8005574:	d90f      	bls.n	8005596 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6a1a      	ldr	r2, [r3, #32]
 8005582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005586:	1ad2      	subs	r2, r2, r3
 8005588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	621a      	str	r2, [r3, #32]
 8005594:	e00e      	b.n	80055b4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80055a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2200      	movs	r2, #0
 80055b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d177      	bne.n	80056b4 <USB_EPStartXfer+0x4c4>
 80055c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055de:	b29b      	uxth	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	4413      	add	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
 80055e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	011a      	lsls	r2, r3, #4
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	4413      	add	r3, r2
 80055fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800560a:	b29a      	uxth	r2, r3
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	801a      	strh	r2, [r3, #0]
 8005610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005614:	2b3e      	cmp	r3, #62	; 0x3e
 8005616:	d921      	bls.n	800565c <USB_EPStartXfer+0x46c>
 8005618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <USB_EPStartXfer+0x448>
 800562e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005632:	3b01      	subs	r3, #1
 8005634:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	b29a      	uxth	r2, r3
 800563e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005642:	b29b      	uxth	r3, r3
 8005644:	029b      	lsls	r3, r3, #10
 8005646:	b29b      	uxth	r3, r3
 8005648:	4313      	orrs	r3, r2
 800564a:	b29b      	uxth	r3, r3
 800564c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005650:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005654:	b29a      	uxth	r2, r3
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	801a      	strh	r2, [r3, #0]
 800565a:	e056      	b.n	800570a <USB_EPStartXfer+0x51a>
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <USB_EPStartXfer+0x48a>
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005672:	b29a      	uxth	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	801a      	strh	r2, [r3, #0]
 8005678:	e047      	b.n	800570a <USB_EPStartXfer+0x51a>
 800567a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d004      	beq.n	800569a <USB_EPStartXfer+0x4aa>
 8005690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005694:	3301      	adds	r3, #1
 8005696:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	881b      	ldrh	r3, [r3, #0]
 800569e:	b29a      	uxth	r2, r3
 80056a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	029b      	lsls	r3, r3, #10
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	4313      	orrs	r3, r2
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	801a      	strh	r2, [r3, #0]
 80056b2:	e02a      	b.n	800570a <USB_EPStartXfer+0x51a>
 80056b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d122      	bne.n	800570a <USB_EPStartXfer+0x51a>
 80056c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	623b      	str	r3, [r7, #32]
 80056d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056de:	b29b      	uxth	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	4413      	add	r3, r2
 80056e6:	623b      	str	r3, [r7, #32]
 80056e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	011a      	lsls	r2, r3, #4
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	4413      	add	r3, r2
 80056fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005704:	b29a      	uxth	r2, r3
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800570a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800570e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	891b      	ldrh	r3, [r3, #8]
 8005716:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800571a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800571e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6959      	ldr	r1, [r3, #20]
 8005726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572a:	b29b      	uxth	r3, r3
 800572c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005730:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005734:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005738:	6800      	ldr	r0, [r0, #0]
 800573a:	f001 fa48 	bl	8006bce <USB_WritePMA>
 800573e:	e3ee      	b.n	8005f1e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	785b      	ldrb	r3, [r3, #1]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d177      	bne.n	8005840 <USB_EPStartXfer+0x650>
 8005750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	64bb      	str	r3, [r7, #72]	; 0x48
 800575c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576a:	b29b      	uxth	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005770:	4413      	add	r3, r2
 8005772:	64bb      	str	r3, [r7, #72]	; 0x48
 8005774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	011a      	lsls	r2, r3, #4
 8005782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005784:	4413      	add	r3, r2
 8005786:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800578a:	647b      	str	r3, [r7, #68]	; 0x44
 800578c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005796:	b29a      	uxth	r2, r3
 8005798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800579a:	801a      	strh	r2, [r3, #0]
 800579c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a0:	2b3e      	cmp	r3, #62	; 0x3e
 80057a2:	d921      	bls.n	80057e8 <USB_EPStartXfer+0x5f8>
 80057a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <USB_EPStartXfer+0x5d4>
 80057ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057be:	3b01      	subs	r3, #1
 80057c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057c6:	881b      	ldrh	r3, [r3, #0]
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	029b      	lsls	r3, r3, #10
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	4313      	orrs	r3, r2
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	e056      	b.n	8005896 <USB_EPStartXfer+0x6a6>
 80057e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <USB_EPStartXfer+0x616>
 80057f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057fe:	b29a      	uxth	r2, r3
 8005800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005802:	801a      	strh	r2, [r3, #0]
 8005804:	e047      	b.n	8005896 <USB_EPStartXfer+0x6a6>
 8005806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d004      	beq.n	8005826 <USB_EPStartXfer+0x636>
 800581c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005820:	3301      	adds	r3, #1
 8005822:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29a      	uxth	r2, r3
 800582c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005830:	b29b      	uxth	r3, r3
 8005832:	029b      	lsls	r3, r3, #10
 8005834:	b29b      	uxth	r3, r3
 8005836:	4313      	orrs	r3, r2
 8005838:	b29a      	uxth	r2, r3
 800583a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	e02a      	b.n	8005896 <USB_EPStartXfer+0x6a6>
 8005840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	785b      	ldrb	r3, [r3, #1]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d122      	bne.n	8005896 <USB_EPStartXfer+0x6a6>
 8005850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005854:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	653b      	str	r3, [r7, #80]	; 0x50
 800585c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800586a:	b29b      	uxth	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005870:	4413      	add	r3, r2
 8005872:	653b      	str	r3, [r7, #80]	; 0x50
 8005874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005878:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	011a      	lsls	r2, r3, #4
 8005882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005884:	4413      	add	r3, r2
 8005886:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800588a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800588c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005890:	b29a      	uxth	r2, r3
 8005892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005894:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800589a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	891b      	ldrh	r3, [r3, #8]
 80058a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6959      	ldr	r1, [r3, #20]
 80058b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058c4:	6800      	ldr	r0, [r0, #0]
 80058c6:	f001 f982 	bl	8006bce <USB_WritePMA>
            ep->xfer_buff += len;
 80058ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058da:	441a      	add	r2, r3
 80058dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a1a      	ldr	r2, [r3, #32]
 80058f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d90f      	bls.n	8005924 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1a      	ldr	r2, [r3, #32]
 8005910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005914:	1ad2      	subs	r2, r2, r3
 8005916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	621a      	str	r2, [r3, #32]
 8005922:	e00e      	b.n	8005942 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2200      	movs	r2, #0
 8005940:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	643b      	str	r3, [r7, #64]	; 0x40
 800594e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d177      	bne.n	8005a4e <USB_EPStartXfer+0x85e>
 800595e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	63bb      	str	r3, [r7, #56]	; 0x38
 800596a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005978:	b29b      	uxth	r3, r3
 800597a:	461a      	mov	r2, r3
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	4413      	add	r3, r2
 8005980:	63bb      	str	r3, [r7, #56]	; 0x38
 8005982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	011a      	lsls	r2, r3, #4
 8005990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005992:	4413      	add	r3, r2
 8005994:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
 800599a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059ae:	2b3e      	cmp	r3, #62	; 0x3e
 80059b0:	d921      	bls.n	80059f6 <USB_EPStartXfer+0x806>
 80059b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d104      	bne.n	80059d2 <USB_EPStartXfer+0x7e2>
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059cc:	3b01      	subs	r3, #1
 80059ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059dc:	b29b      	uxth	r3, r3
 80059de:	029b      	lsls	r3, r3, #10
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	4313      	orrs	r3, r2
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f2:	801a      	strh	r2, [r3, #0]
 80059f4:	e050      	b.n	8005a98 <USB_EPStartXfer+0x8a8>
 80059f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <USB_EPStartXfer+0x824>
 80059fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a10:	801a      	strh	r2, [r3, #0]
 8005a12:	e041      	b.n	8005a98 <USB_EPStartXfer+0x8a8>
 8005a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a18:	085b      	lsrs	r3, r3, #1
 8005a1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d004      	beq.n	8005a34 <USB_EPStartXfer+0x844>
 8005a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2e:	3301      	adds	r3, #1
 8005a30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	029b      	lsls	r3, r3, #10
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	4313      	orrs	r3, r2
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	e024      	b.n	8005a98 <USB_EPStartXfer+0x8a8>
 8005a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	785b      	ldrb	r3, [r3, #1]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d11c      	bne.n	8005a98 <USB_EPStartXfer+0x8a8>
 8005a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a72:	4413      	add	r3, r2
 8005a74:	643b      	str	r3, [r7, #64]	; 0x40
 8005a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	011a      	lsls	r2, r3, #4
 8005a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a86:	4413      	add	r3, r2
 8005a88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	895b      	ldrh	r3, [r3, #10]
 8005aa4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6959      	ldr	r1, [r3, #20]
 8005ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005abe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ac2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ac6:	6800      	ldr	r0, [r0, #0]
 8005ac8:	f001 f881 	bl	8006bce <USB_WritePMA>
 8005acc:	e227      	b.n	8005f1e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b04:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b5a:	4413      	add	r3, r2
 8005b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	011a      	lsls	r2, r3, #4
 8005b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b6e:	4413      	add	r3, r2
 8005b70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b74:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	891b      	ldrh	r3, [r3, #8]
 8005b8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6959      	ldr	r1, [r3, #20]
 8005b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ba6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005baa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bae:	6800      	ldr	r0, [r0, #0]
 8005bb0:	f001 f80d 	bl	8006bce <USB_WritePMA>
 8005bb4:	e1b3      	b.n	8005f1e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6a1a      	ldr	r2, [r3, #32]
 8005bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc6:	1ad2      	subs	r2, r2, r3
 8005bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 80c6 	beq.w	8005d88 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	673b      	str	r3, [r7, #112]	; 0x70
 8005c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	785b      	ldrb	r3, [r3, #1]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d177      	bne.n	8005d08 <USB_EPStartXfer+0xb18>
 8005c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c38:	4413      	add	r3, r2
 8005c3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	011a      	lsls	r2, r3, #4
 8005c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c52:	667b      	str	r3, [r7, #100]	; 0x64
 8005c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c62:	801a      	strh	r2, [r3, #0]
 8005c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c68:	2b3e      	cmp	r3, #62	; 0x3e
 8005c6a:	d921      	bls.n	8005cb0 <USB_EPStartXfer+0xac0>
 8005c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c7a:	f003 031f 	and.w	r3, r3, #31
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d104      	bne.n	8005c8c <USB_EPStartXfer+0xa9c>
 8005c82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c86:	3b01      	subs	r3, #1
 8005c88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	029b      	lsls	r3, r3, #10
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	e050      	b.n	8005d52 <USB_EPStartXfer+0xb62>
 8005cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <USB_EPStartXfer+0xade>
 8005cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	e041      	b.n	8005d52 <USB_EPStartXfer+0xb62>
 8005cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd2:	085b      	lsrs	r3, r3, #1
 8005cd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <USB_EPStartXfer+0xafe>
 8005ce4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005ce8:	3301      	adds	r3, #1
 8005cea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005cee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	029b      	lsls	r3, r3, #10
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d04:	801a      	strh	r2, [r3, #0]
 8005d06:	e024      	b.n	8005d52 <USB_EPStartXfer+0xb62>
 8005d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	785b      	ldrb	r3, [r3, #1]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d11c      	bne.n	8005d52 <USB_EPStartXfer+0xb62>
 8005d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d2c:	4413      	add	r3, r2
 8005d2e:	673b      	str	r3, [r7, #112]	; 0x70
 8005d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	011a      	lsls	r2, r3, #4
 8005d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d40:	4413      	add	r3, r2
 8005d42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	895b      	ldrh	r3, [r3, #10]
 8005d5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6959      	ldr	r1, [r3, #20]
 8005d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005d7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005d80:	6800      	ldr	r0, [r0, #0]
 8005d82:	f000 ff24 	bl	8006bce <USB_WritePMA>
 8005d86:	e0ca      	b.n	8005f1e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d177      	bne.n	8005e88 <USB_EPStartXfer+0xc98>
 8005d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	461a      	mov	r2, r3
 8005db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005db8:	4413      	add	r3, r2
 8005dba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	011a      	lsls	r2, r3, #4
 8005dca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005dcc:	4413      	add	r3, r2
 8005dce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005de8:	2b3e      	cmp	r3, #62	; 0x3e
 8005dea:	d921      	bls.n	8005e30 <USB_EPStartXfer+0xc40>
 8005dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <USB_EPStartXfer+0xc1c>
 8005e02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e06:	3b01      	subs	r3, #1
 8005e08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	029b      	lsls	r3, r3, #10
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e2c:	801a      	strh	r2, [r3, #0]
 8005e2e:	e05c      	b.n	8005eea <USB_EPStartXfer+0xcfa>
 8005e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <USB_EPStartXfer+0xc5e>
 8005e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e4a:	801a      	strh	r2, [r3, #0]
 8005e4c:	e04d      	b.n	8005eea <USB_EPStartXfer+0xcfa>
 8005e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d004      	beq.n	8005e6e <USB_EPStartXfer+0xc7e>
 8005e64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e68:	3301      	adds	r3, #1
 8005e6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	029b      	lsls	r3, r3, #10
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e84:	801a      	strh	r2, [r3, #0]
 8005e86:	e030      	b.n	8005eea <USB_EPStartXfer+0xcfa>
 8005e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d128      	bne.n	8005eea <USB_EPStartXfer+0xcfa>
 8005e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	011a      	lsls	r2, r3, #4
 8005ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ee8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	891b      	ldrh	r3, [r3, #8]
 8005ef6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6959      	ldr	r1, [r3, #20]
 8005f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005f10:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005f14:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005f18:	6800      	ldr	r0, [r0, #0]
 8005f1a:	f000 fe58 	bl	8006bce <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	881b      	ldrh	r3, [r3, #0]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f44:	817b      	strh	r3, [r7, #10]
 8005f46:	897b      	ldrh	r3, [r7, #10]
 8005f48:	f083 0310 	eor.w	r3, r3, #16
 8005f4c:	817b      	strh	r3, [r7, #10]
 8005f4e:	897b      	ldrh	r3, [r7, #10]
 8005f50:	f083 0320 	eor.w	r3, r3, #32
 8005f54:	817b      	strh	r3, [r7, #10]
 8005f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	441a      	add	r2, r3
 8005f70:	897b      	ldrh	r3, [r7, #10]
 8005f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8013      	strh	r3, [r2, #0]
 8005f86:	f000 bcde 	b.w	8006946 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	7b1b      	ldrb	r3, [r3, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f040 80bb 	bne.w	8006112 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	699a      	ldr	r2, [r3, #24]
 8005fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d917      	bls.n	8005fe8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fd8:	1ad2      	subs	r2, r2, r3
 8005fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	619a      	str	r2, [r3, #24]
 8005fe6:	e00e      	b.n	8006006 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2200      	movs	r2, #0
 8006004:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800600a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006022:	b29b      	uxth	r3, r3
 8006024:	461a      	mov	r2, r3
 8006026:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800602a:	4413      	add	r3, r2
 800602c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	011a      	lsls	r2, r3, #4
 800603e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006042:	4413      	add	r3, r2
 8006044:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006048:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800604c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006058:	b29a      	uxth	r2, r3
 800605a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006064:	2b3e      	cmp	r3, #62	; 0x3e
 8006066:	d924      	bls.n	80060b2 <USB_EPStartXfer+0xec2>
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2b00      	cmp	r3, #0
 800607c:	d104      	bne.n	8006088 <USB_EPStartXfer+0xe98>
 800607e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006082:	3b01      	subs	r3, #1
 8006084:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006088:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29a      	uxth	r2, r3
 8006090:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006094:	b29b      	uxth	r3, r3
 8006096:	029b      	lsls	r3, r3, #10
 8006098:	b29b      	uxth	r3, r3
 800609a:	4313      	orrs	r3, r2
 800609c:	b29b      	uxth	r3, r3
 800609e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060ac:	801a      	strh	r2, [r3, #0]
 80060ae:	f000 bc10 	b.w	80068d2 <USB_EPStartXfer+0x16e2>
 80060b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10c      	bne.n	80060d4 <USB_EPStartXfer+0xee4>
 80060ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060d0:	801a      	strh	r2, [r3, #0]
 80060d2:	e3fe      	b.n	80068d2 <USB_EPStartXfer+0x16e2>
 80060d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d8:	085b      	lsrs	r3, r3, #1
 80060da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d004      	beq.n	80060f4 <USB_EPStartXfer+0xf04>
 80060ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060ee:	3301      	adds	r3, #1
 80060f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006100:	b29b      	uxth	r3, r3
 8006102:	029b      	lsls	r3, r3, #10
 8006104:	b29b      	uxth	r3, r3
 8006106:	4313      	orrs	r3, r2
 8006108:	b29a      	uxth	r2, r3
 800610a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800610e:	801a      	strh	r2, [r3, #0]
 8006110:	e3df      	b.n	80068d2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	78db      	ldrb	r3, [r3, #3]
 800611e:	2b02      	cmp	r3, #2
 8006120:	f040 8218 	bne.w	8006554 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f040 809d 	bne.w	8006270 <USB_EPStartXfer+0x1080>
 8006136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800613a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006152:	b29b      	uxth	r3, r3
 8006154:	461a      	mov	r2, r3
 8006156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800615a:	4413      	add	r3, r2
 800615c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	011a      	lsls	r2, r3, #4
 800616e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006172:	4413      	add	r3, r2
 8006174:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800617c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	b29b      	uxth	r3, r3
 8006184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006188:	b29a      	uxth	r2, r3
 800618a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b3e      	cmp	r3, #62	; 0x3e
 800619e:	d92b      	bls.n	80061f8 <USB_EPStartXfer+0x1008>
 80061a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <USB_EPStartXfer+0xfe0>
 80061c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ca:	3b01      	subs	r3, #1
 80061cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061dc:	b29b      	uxth	r3, r3
 80061de:	029b      	lsls	r3, r3, #10
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	4313      	orrs	r3, r2
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061f4:	801a      	strh	r2, [r3, #0]
 80061f6:	e070      	b.n	80062da <USB_EPStartXfer+0x10ea>
 80061f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10c      	bne.n	8006222 <USB_EPStartXfer+0x1032>
 8006208:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	b29b      	uxth	r3, r3
 8006210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006218:	b29a      	uxth	r2, r3
 800621a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800621e:	801a      	strh	r2, [r3, #0]
 8006220:	e05b      	b.n	80062da <USB_EPStartXfer+0x10ea>
 8006222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d004      	beq.n	8006252 <USB_EPStartXfer+0x1062>
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624c:	3301      	adds	r3, #1
 800624e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b29a      	uxth	r2, r3
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800625e:	b29b      	uxth	r3, r3
 8006260:	029b      	lsls	r3, r3, #10
 8006262:	b29b      	uxth	r3, r3
 8006264:	4313      	orrs	r3, r2
 8006266:	b29a      	uxth	r2, r3
 8006268:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800626c:	801a      	strh	r2, [r3, #0]
 800626e:	e034      	b.n	80062da <USB_EPStartXfer+0x10ea>
 8006270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d12c      	bne.n	80062da <USB_EPStartXfer+0x10ea>
 8006280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006284:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800628e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800629c:	b29b      	uxth	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062a4:	4413      	add	r3, r2
 80062a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	011a      	lsls	r2, r3, #4
 80062b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062bc:	4413      	add	r3, r2
 80062be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062d8:	801a      	strh	r2, [r3, #0]
 80062da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	785b      	ldrb	r3, [r3, #1]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f040 809d 	bne.w	8006434 <USB_EPStartXfer+0x1244>
 80062fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006316:	b29b      	uxth	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800631e:	4413      	add	r3, r2
 8006320:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	011a      	lsls	r2, r3, #4
 8006332:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006336:	4413      	add	r3, r2
 8006338:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800633c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800634c:	b29a      	uxth	r2, r3
 800634e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006352:	801a      	strh	r2, [r3, #0]
 8006354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b3e      	cmp	r3, #62	; 0x3e
 8006362:	d92b      	bls.n	80063bc <USB_EPStartXfer+0x11cc>
 8006364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	095b      	lsrs	r3, r3, #5
 8006372:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800637a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 031f 	and.w	r3, r3, #31
 8006386:	2b00      	cmp	r3, #0
 8006388:	d104      	bne.n	8006394 <USB_EPStartXfer+0x11a4>
 800638a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800638e:	3b01      	subs	r3, #1
 8006390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006398:	881b      	ldrh	r3, [r3, #0]
 800639a:	b29a      	uxth	r2, r3
 800639c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	029b      	lsls	r3, r3, #10
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	4313      	orrs	r3, r2
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	e069      	b.n	8006490 <USB_EPStartXfer+0x12a0>
 80063bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d10c      	bne.n	80063e6 <USB_EPStartXfer+0x11f6>
 80063cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063dc:	b29a      	uxth	r2, r3
 80063de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063e2:	801a      	strh	r2, [r3, #0]
 80063e4:	e054      	b.n	8006490 <USB_EPStartXfer+0x12a0>
 80063e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <USB_EPStartXfer+0x1226>
 800640c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006410:	3301      	adds	r3, #1
 8006412:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006416:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29a      	uxth	r2, r3
 800641e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006422:	b29b      	uxth	r3, r3
 8006424:	029b      	lsls	r3, r3, #10
 8006426:	b29b      	uxth	r3, r3
 8006428:	4313      	orrs	r3, r2
 800642a:	b29a      	uxth	r2, r3
 800642c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	e02d      	b.n	8006490 <USB_EPStartXfer+0x12a0>
 8006434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	785b      	ldrb	r3, [r3, #1]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d125      	bne.n	8006490 <USB_EPStartXfer+0x12a0>
 8006444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006452:	b29b      	uxth	r3, r3
 8006454:	461a      	mov	r2, r3
 8006456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800645a:	4413      	add	r3, r2
 800645c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	011a      	lsls	r2, r3, #4
 800646e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006472:	4413      	add	r3, r2
 8006474:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006478:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800647c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	b29a      	uxth	r2, r3
 800648a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800648e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69db      	ldr	r3, [r3, #28]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 8218 	beq.w	80068d2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80064a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <USB_EPStartXfer+0x12ea>
 80064ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10d      	bne.n	80064f6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f040 81f5 	bne.w	80068d2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80064ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f040 81ee 	bne.w	80068d2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80064f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	881b      	ldrh	r3, [r3, #0]
 8006512:	b29b      	uxth	r3, r3
 8006514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800652e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	441a      	add	r2, r3
 800653a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800653e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800654a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800654e:	b29b      	uxth	r3, r3
 8006550:	8013      	strh	r3, [r2, #0]
 8006552:	e1be      	b.n	80068d2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	78db      	ldrb	r3, [r3, #3]
 8006560:	2b01      	cmp	r3, #1
 8006562:	f040 81b4 	bne.w	80068ce <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800656a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006576:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	429a      	cmp	r2, r3
 8006580:	d917      	bls.n	80065b2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a2:	1ad2      	subs	r2, r2, r3
 80065a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	619a      	str	r2, [r3, #24]
 80065b0:	e00e      	b.n	80065d0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80065b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80065c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2200      	movs	r2, #0
 80065ce:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	785b      	ldrb	r3, [r3, #1]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f040 8085 	bne.w	80066ec <USB_EPStartXfer+0x14fc>
 80065e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065fe:	b29b      	uxth	r3, r3
 8006600:	461a      	mov	r2, r3
 8006602:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006606:	4413      	add	r3, r2
 8006608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800660c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	011a      	lsls	r2, r3, #4
 800661a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800661e:	4413      	add	r3, r2
 8006620:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006624:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006634:	b29a      	uxth	r2, r3
 8006636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800663a:	801a      	strh	r2, [r3, #0]
 800663c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006640:	2b3e      	cmp	r3, #62	; 0x3e
 8006642:	d923      	bls.n	800668c <USB_EPStartXfer+0x149c>
 8006644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006648:	095b      	lsrs	r3, r3, #5
 800664a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800664e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006652:	f003 031f 	and.w	r3, r3, #31
 8006656:	2b00      	cmp	r3, #0
 8006658:	d104      	bne.n	8006664 <USB_EPStartXfer+0x1474>
 800665a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800665e:	3b01      	subs	r3, #1
 8006660:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006664:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29a      	uxth	r2, r3
 800666c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006670:	b29b      	uxth	r3, r3
 8006672:	029b      	lsls	r3, r3, #10
 8006674:	b29b      	uxth	r3, r3
 8006676:	4313      	orrs	r3, r2
 8006678:	b29b      	uxth	r3, r3
 800667a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006682:	b29a      	uxth	r2, r3
 8006684:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	e060      	b.n	800674e <USB_EPStartXfer+0x155e>
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10c      	bne.n	80066ae <USB_EPStartXfer+0x14be>
 8006694:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	b29b      	uxth	r3, r3
 800669c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066aa:	801a      	strh	r2, [r3, #0]
 80066ac:	e04f      	b.n	800674e <USB_EPStartXfer+0x155e>
 80066ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d004      	beq.n	80066ce <USB_EPStartXfer+0x14de>
 80066c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c8:	3301      	adds	r3, #1
 80066ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066da:	b29b      	uxth	r3, r3
 80066dc:	029b      	lsls	r3, r3, #10
 80066de:	b29b      	uxth	r3, r3
 80066e0:	4313      	orrs	r3, r2
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	e030      	b.n	800674e <USB_EPStartXfer+0x155e>
 80066ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d128      	bne.n	800674e <USB_EPStartXfer+0x155e>
 80066fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800670a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800670e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006718:	b29b      	uxth	r3, r3
 800671a:	461a      	mov	r2, r3
 800671c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006720:	4413      	add	r3, r2
 8006722:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	011a      	lsls	r2, r3, #4
 8006734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006738:	4413      	add	r3, r2
 800673a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800673e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006746:	b29a      	uxth	r2, r3
 8006748:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800674c:	801a      	strh	r2, [r3, #0]
 800674e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800675c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	785b      	ldrb	r3, [r3, #1]
 8006768:	2b00      	cmp	r3, #0
 800676a:	f040 8085 	bne.w	8006878 <USB_EPStartXfer+0x1688>
 800676e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800677c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678a:	b29b      	uxth	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006792:	4413      	add	r3, r2
 8006794:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800679c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	011a      	lsls	r2, r3, #4
 80067a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067aa:	4413      	add	r3, r2
 80067ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067c6:	801a      	strh	r2, [r3, #0]
 80067c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067cc:	2b3e      	cmp	r3, #62	; 0x3e
 80067ce:	d923      	bls.n	8006818 <USB_EPStartXfer+0x1628>
 80067d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d104      	bne.n	80067f0 <USB_EPStartXfer+0x1600>
 80067e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067ea:	3b01      	subs	r3, #1
 80067ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	029b      	lsls	r3, r3, #10
 8006800:	b29b      	uxth	r3, r3
 8006802:	4313      	orrs	r3, r2
 8006804:	b29b      	uxth	r3, r3
 8006806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800680a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800680e:	b29a      	uxth	r2, r3
 8006810:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006814:	801a      	strh	r2, [r3, #0]
 8006816:	e05c      	b.n	80068d2 <USB_EPStartXfer+0x16e2>
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10c      	bne.n	800683a <USB_EPStartXfer+0x164a>
 8006820:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006824:	881b      	ldrh	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006830:	b29a      	uxth	r2, r3
 8006832:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006836:	801a      	strh	r2, [r3, #0]
 8006838:	e04b      	b.n	80068d2 <USB_EPStartXfer+0x16e2>
 800683a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800683e:	085b      	lsrs	r3, r3, #1
 8006840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	d004      	beq.n	800685a <USB_EPStartXfer+0x166a>
 8006850:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006854:	3301      	adds	r3, #1
 8006856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800685a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800685e:	881b      	ldrh	r3, [r3, #0]
 8006860:	b29a      	uxth	r2, r3
 8006862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006866:	b29b      	uxth	r3, r3
 8006868:	029b      	lsls	r3, r3, #10
 800686a:	b29b      	uxth	r3, r3
 800686c:	4313      	orrs	r3, r2
 800686e:	b29a      	uxth	r2, r3
 8006870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006874:	801a      	strh	r2, [r3, #0]
 8006876:	e02c      	b.n	80068d2 <USB_EPStartXfer+0x16e2>
 8006878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d124      	bne.n	80068d2 <USB_EPStartXfer+0x16e2>
 8006888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800688c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006896:	b29b      	uxth	r3, r3
 8006898:	461a      	mov	r2, r3
 800689a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800689e:	4413      	add	r3, r2
 80068a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	011a      	lsls	r2, r3, #4
 80068b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068b6:	4413      	add	r3, r2
 80068b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068ca:	801a      	strh	r2, [r3, #0]
 80068cc:	e001      	b.n	80068d2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e03a      	b.n	8006948 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	4413      	add	r3, r2
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80068fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006900:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006904:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006908:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800690c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006910:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006918:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	441a      	add	r2, r3
 800692e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800693a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006942:	b29b      	uxth	r3, r3
 8006944:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006952:	b480      	push	{r7}
 8006954:	b085      	sub	sp, #20
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	785b      	ldrb	r3, [r3, #1]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d020      	beq.n	80069a6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	881b      	ldrh	r3, [r3, #0]
 8006970:	b29b      	uxth	r3, r3
 8006972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006976:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800697a:	81bb      	strh	r3, [r7, #12]
 800697c:	89bb      	ldrh	r3, [r7, #12]
 800697e:	f083 0310 	eor.w	r3, r3, #16
 8006982:	81bb      	strh	r3, [r7, #12]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	441a      	add	r2, r3
 800698e:	89bb      	ldrh	r3, [r7, #12]
 8006990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	8013      	strh	r3, [r2, #0]
 80069a4:	e01f      	b.n	80069e6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069bc:	81fb      	strh	r3, [r7, #14]
 80069be:	89fb      	ldrh	r3, [r7, #14]
 80069c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069c4:	81fb      	strh	r3, [r7, #14]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	441a      	add	r2, r3
 80069d0:	89fb      	ldrh	r3, [r7, #14]
 80069d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc80      	pop	{r7}
 80069f0:	4770      	bx	lr

080069f2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b087      	sub	sp, #28
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	7b1b      	ldrb	r3, [r3, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f040 809d 	bne.w	8006b40 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	785b      	ldrb	r3, [r3, #1]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d04c      	beq.n	8006aa8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	823b      	strh	r3, [r7, #16]
 8006a1c:	8a3b      	ldrh	r3, [r7, #16]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01b      	beq.n	8006a5e <USB_EPClearStall+0x6c>
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3c:	81fb      	strh	r3, [r7, #14]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	441a      	add	r2, r3
 8006a48:	89fb      	ldrh	r3, [r7, #14]
 8006a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	78db      	ldrb	r3, [r3, #3]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d06c      	beq.n	8006b40 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a7c:	81bb      	strh	r3, [r7, #12]
 8006a7e:	89bb      	ldrh	r3, [r7, #12]
 8006a80:	f083 0320 	eor.w	r3, r3, #32
 8006a84:	81bb      	strh	r3, [r7, #12]
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	441a      	add	r2, r3
 8006a90:	89bb      	ldrh	r3, [r7, #12]
 8006a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]
 8006aa6:	e04b      	b.n	8006b40 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	82fb      	strh	r3, [r7, #22]
 8006ab6:	8afb      	ldrh	r3, [r7, #22]
 8006ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01b      	beq.n	8006af8 <USB_EPClearStall+0x106>
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	82bb      	strh	r3, [r7, #20]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	441a      	add	r2, r3
 8006ae2:	8abb      	ldrh	r3, [r7, #20]
 8006ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0e:	827b      	strh	r3, [r7, #18]
 8006b10:	8a7b      	ldrh	r3, [r7, #18]
 8006b12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b16:	827b      	strh	r3, [r7, #18]
 8006b18:	8a7b      	ldrh	r3, [r7, #18]
 8006b1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b1e:	827b      	strh	r3, [r7, #18]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	441a      	add	r2, r3
 8006b2a:	8a7b      	ldrh	r3, [r7, #18]
 8006b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	460b      	mov	r3, r1
 8006b56:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b58:	78fb      	ldrb	r3, [r7, #3]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2280      	movs	r2, #128	; 0x80
 8006b62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bc80      	pop	{r7}
 8006b84:	4770      	bx	lr

08006b86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b083      	sub	sp, #12
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr

08006b9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b085      	sub	sp, #20
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006bac:	68fb      	ldr	r3, [r7, #12]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bc80      	pop	{r7}
 8006bb6:	4770      	bx	lr

08006bb8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	4770      	bx	lr

08006bce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b08b      	sub	sp, #44	; 0x2c
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	60f8      	str	r0, [r7, #12]
 8006bd6:	60b9      	str	r1, [r7, #8]
 8006bd8:	4611      	mov	r1, r2
 8006bda:	461a      	mov	r2, r3
 8006bdc:	460b      	mov	r3, r1
 8006bde:	80fb      	strh	r3, [r7, #6]
 8006be0:	4613      	mov	r3, r2
 8006be2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006be4:	88bb      	ldrh	r3, [r7, #4]
 8006be6:	3301      	adds	r3, #1
 8006be8:	085b      	lsrs	r3, r3, #1
 8006bea:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bf4:	88fb      	ldrh	r3, [r7, #6]
 8006bf6:	005a      	lsls	r2, r3, #1
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c00:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
 8006c06:	e01e      	b.n	8006c46 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	3301      	adds	r3, #1
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	b21a      	sxth	r2, r3
 8006c18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	b21b      	sxth	r3, r3
 8006c20:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	8a7a      	ldrh	r2, [r7, #18]
 8006c26:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	3302      	adds	r3, #2
 8006c2c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	3302      	adds	r3, #2
 8006c32:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	3301      	adds	r3, #1
 8006c38:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	3b01      	subs	r3, #1
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1dd      	bne.n	8006c08 <USB_WritePMA+0x3a>
  }
}
 8006c4c:	bf00      	nop
 8006c4e:	bf00      	nop
 8006c50:	372c      	adds	r7, #44	; 0x2c
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr

08006c58 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b08b      	sub	sp, #44	; 0x2c
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	4611      	mov	r1, r2
 8006c64:	461a      	mov	r2, r3
 8006c66:	460b      	mov	r3, r1
 8006c68:	80fb      	strh	r3, [r7, #6]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c6e:	88bb      	ldrh	r3, [r7, #4]
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	005a      	lsls	r2, r3, #1
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c8a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c90:	e01b      	b.n	8006cca <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	3302      	adds	r3, #2
 8006c9e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	b2da      	uxtb	r2, r3
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	3301      	adds	r3, #1
 8006cac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	0a1b      	lsrs	r3, r3, #8
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	3302      	adds	r3, #2
 8006cc2:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e0      	bne.n	8006c92 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006cd0:	88bb      	ldrh	r3, [r7, #4]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d007      	beq.n	8006cec <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	701a      	strb	r2, [r3, #0]
  }
}
 8006cec:	bf00      	nop
 8006cee:	372c      	adds	r7, #44	; 0x2c
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bc80      	pop	{r7}
 8006cf4:	4770      	bx	lr

08006cf6 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b082      	sub	sp, #8
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	460b      	mov	r3, r1
 8006d00:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006d02:	2304      	movs	r3, #4
 8006d04:	2203      	movs	r2, #3
 8006d06:	2181      	movs	r1, #129	; 0x81
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f002 fe7a 	bl	8009a02 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006d14:	2010      	movs	r0, #16
 8006d16:	f002 ff89 	bl	8009c2c <USBD_static_malloc>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e005      	b.n	8006d3c <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d36:	2200      	movs	r2, #0
 8006d38:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006d50:	2181      	movs	r1, #129	; 0x81
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f002 fe7b 	bl	8009a4e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f002 ff68 	bl	8009c44 <USBD_static_free>
    pdev->pClassData = NULL;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d98:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d045      	beq.n	8006e42 <USBD_HID_Setup+0xba>
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	f040 80d3 	bne.w	8006f62 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	3b02      	subs	r3, #2
 8006dc2:	2b09      	cmp	r3, #9
 8006dc4:	d835      	bhi.n	8006e32 <USBD_HID_Setup+0xaa>
 8006dc6:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <USBD_HID_Setup+0x44>)
 8006dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dcc:	08006e23 	.word	0x08006e23
 8006dd0:	08006e03 	.word	0x08006e03
 8006dd4:	08006e33 	.word	0x08006e33
 8006dd8:	08006e33 	.word	0x08006e33
 8006ddc:	08006e33 	.word	0x08006e33
 8006de0:	08006e33 	.word	0x08006e33
 8006de4:	08006e33 	.word	0x08006e33
 8006de8:	08006e33 	.word	0x08006e33
 8006dec:	08006e11 	.word	0x08006e11
 8006df0:	08006df5 	.word	0x08006df5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	885b      	ldrh	r3, [r3, #2]
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	601a      	str	r2, [r3, #0]
          break;
 8006e00:	e01e      	b.n	8006e40 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	2201      	movs	r2, #1
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 f944 	bl	8008096 <USBD_CtlSendData>
          break;
 8006e0e:	e017      	b.n	8006e40 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	885b      	ldrh	r3, [r3, #2]
 8006e14:	0a1b      	lsrs	r3, r3, #8
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	605a      	str	r2, [r3, #4]
          break;
 8006e20:	e00e      	b.n	8006e40 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	3304      	adds	r3, #4
 8006e26:	2201      	movs	r2, #1
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f001 f933 	bl	8008096 <USBD_CtlSendData>
          break;
 8006e30:	e006      	b.n	8006e40 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f001 f8c4 	bl	8007fc2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e3e:	bf00      	nop
      }
      break;
 8006e40:	e096      	b.n	8006f70 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	2b0b      	cmp	r3, #11
 8006e48:	f200 8083 	bhi.w	8006f52 <USBD_HID_Setup+0x1ca>
 8006e4c:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <USBD_HID_Setup+0xcc>)
 8006e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e52:	bf00      	nop
 8006e54:	08006e85 	.word	0x08006e85
 8006e58:	08006f53 	.word	0x08006f53
 8006e5c:	08006f53 	.word	0x08006f53
 8006e60:	08006f53 	.word	0x08006f53
 8006e64:	08006f53 	.word	0x08006f53
 8006e68:	08006f53 	.word	0x08006f53
 8006e6c:	08006ead 	.word	0x08006ead
 8006e70:	08006f53 	.word	0x08006f53
 8006e74:	08006f53 	.word	0x08006f53
 8006e78:	08006f53 	.word	0x08006f53
 8006e7c:	08006f05 	.word	0x08006f05
 8006e80:	08006f2d 	.word	0x08006f2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d107      	bne.n	8006e9e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e8e:	f107 030e 	add.w	r3, r7, #14
 8006e92:	2202      	movs	r2, #2
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 f8fd 	bl	8008096 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e9c:	e060      	b.n	8006f60 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f001 f88e 	bl	8007fc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	75fb      	strb	r3, [r7, #23]
          break;
 8006eaa:	e059      	b.n	8006f60 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	885b      	ldrh	r3, [r3, #2]
 8006eb0:	0a1b      	lsrs	r3, r3, #8
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b22      	cmp	r3, #34	; 0x22
 8006eb6:	d108      	bne.n	8006eca <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	88db      	ldrh	r3, [r3, #6]
 8006ebc:	2b3f      	cmp	r3, #63	; 0x3f
 8006ebe:	bf28      	it	cs
 8006ec0:	233f      	movcs	r3, #63	; 0x3f
 8006ec2:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006ec4:	4b2d      	ldr	r3, [pc, #180]	; (8006f7c <USBD_HID_Setup+0x1f4>)
 8006ec6:	61bb      	str	r3, [r7, #24]
 8006ec8:	e015      	b.n	8006ef6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	885b      	ldrh	r3, [r3, #2]
 8006ece:	0a1b      	lsrs	r3, r3, #8
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b21      	cmp	r3, #33	; 0x21
 8006ed4:	d108      	bne.n	8006ee8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006ed6:	4b2a      	ldr	r3, [pc, #168]	; (8006f80 <USBD_HID_Setup+0x1f8>)
 8006ed8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	88db      	ldrh	r3, [r3, #6]
 8006ede:	2b09      	cmp	r3, #9
 8006ee0:	bf28      	it	cs
 8006ee2:	2309      	movcs	r3, #9
 8006ee4:	83fb      	strh	r3, [r7, #30]
 8006ee6:	e006      	b.n	8006ef6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f001 f869 	bl	8007fc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	75fb      	strb	r3, [r7, #23]
            break;
 8006ef4:	e034      	b.n	8006f60 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006ef6:	8bfb      	ldrh	r3, [r7, #30]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	69b9      	ldr	r1, [r7, #24]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 f8ca 	bl	8008096 <USBD_CtlSendData>
          break;
 8006f02:	e02d      	b.n	8006f60 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d107      	bne.n	8006f1e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	3308      	adds	r3, #8
 8006f12:	2201      	movs	r2, #1
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f001 f8bd 	bl	8008096 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f1c:	e020      	b.n	8006f60 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f001 f84e 	bl	8007fc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f26:	2302      	movs	r3, #2
 8006f28:	75fb      	strb	r3, [r7, #23]
          break;
 8006f2a:	e019      	b.n	8006f60 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d106      	bne.n	8006f44 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	885b      	ldrh	r3, [r3, #2]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f42:	e00d      	b.n	8006f60 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 f83b 	bl	8007fc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	75fb      	strb	r3, [r7, #23]
          break;
 8006f50:	e006      	b.n	8006f60 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 f834 	bl	8007fc2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8006f5e:	bf00      	nop
      }
      break;
 8006f60:	e006      	b.n	8006f70 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 f82c 	bl	8007fc2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6e:	bf00      	nop
  }

  return ret;
 8006f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3720      	adds	r7, #32
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	200000c8 	.word	0x200000c8
 8006f80:	200000b0 	.word	0x200000b0

08006f84 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f98:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d10c      	bne.n	8006fbe <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	7b1b      	ldrb	r3, [r3, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d108      	bne.n	8006fbe <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	2181      	movs	r1, #129	; 0x81
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f002 fdf0 	bl	8009b9e <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2222      	movs	r2, #34	; 0x22
 8006fd4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006fd6:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000044 	.word	0x20000044

08006fe8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2222      	movs	r2, #34	; 0x22
 8006ff4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006ff6:	4b03      	ldr	r3, [pc, #12]	; (8007004 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bc80      	pop	{r7}
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	20000068 	.word	0x20000068

08007008 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2222      	movs	r2, #34	; 0x22
 8007014:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007016:	4b03      	ldr	r3, [pc, #12]	; (8007024 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	bc80      	pop	{r7}
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	2000008c 	.word	0x2000008c

08007028 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800703a:	2200      	movs	r2, #0
 800703c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	bc80      	pop	{r7}
 8007048:	4770      	bx	lr
	...

0800704c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	220a      	movs	r2, #10
 8007058:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 800705a:	4b03      	ldr	r3, [pc, #12]	; (8007068 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	bc80      	pop	{r7}
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	200000bc 	.word	0x200000bc

0800706c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	4613      	mov	r3, r2
 8007078:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007080:	2302      	movs	r3, #2
 8007082:	e01a      	b.n	80070ba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	79fa      	ldrb	r2, [r7, #7]
 80070b0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f002 fc42 	bl	800993c <USBD_LL_Init>

  return USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d006      	beq.n	80070e4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
 80070e2:	e001      	b.n	80070e8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80070e4:	2302      	movs	r3, #2
 80070e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr

080070f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f002 fc65 	bl	80099cc <USBD_LL_Start>

  return USBD_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	bc80      	pop	{r7}
 800711e:	4770      	bx	lr

08007120 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800712c:	2302      	movs	r3, #2
 800712e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00c      	beq.n	8007154 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	78fa      	ldrb	r2, [r7, #3]
 8007144:	4611      	mov	r1, r2
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	4798      	blx	r3
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	78fa      	ldrb	r2, [r7, #3]
 8007174:	4611      	mov	r1, r2
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	4798      	blx	r3

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f000 fed7 	bl	8007f4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071aa:	461a      	mov	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071b8:	f003 031f 	and.w	r3, r3, #31
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d016      	beq.n	80071ee <USBD_LL_SetupStage+0x6a>
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d81c      	bhi.n	80071fe <USBD_LL_SetupStage+0x7a>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <USBD_LL_SetupStage+0x4a>
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d008      	beq.n	80071de <USBD_LL_SetupStage+0x5a>
 80071cc:	e017      	b.n	80071fe <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071d4:	4619      	mov	r1, r3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f9ca 	bl	8007570 <USBD_StdDevReq>
      break;
 80071dc:	e01a      	b.n	8007214 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa2c 	bl	8007644 <USBD_StdItfReq>
      break;
 80071ec:	e012      	b.n	8007214 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa6c 	bl	80076d4 <USBD_StdEPReq>
      break;
 80071fc:	e00a      	b.n	8007214 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007204:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007208:	b2db      	uxtb	r3, r3
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f002 fc3d 	bl	8009a8c <USBD_LL_StallEP>
      break;
 8007212:	bf00      	nop
  }

  return USBD_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b086      	sub	sp, #24
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	460b      	mov	r3, r1
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800722c:	7afb      	ldrb	r3, [r7, #11]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d14b      	bne.n	80072ca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007238:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007240:	2b03      	cmp	r3, #3
 8007242:	d134      	bne.n	80072ae <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	429a      	cmp	r2, r3
 800724e:	d919      	bls.n	8007284 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	1ad2      	subs	r2, r2, r3
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007266:	429a      	cmp	r2, r3
 8007268:	d203      	bcs.n	8007272 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800726e:	b29b      	uxth	r3, r3
 8007270:	e002      	b.n	8007278 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007276:	b29b      	uxth	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	6879      	ldr	r1, [r7, #4]
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 ff38 	bl	80080f2 <USBD_CtlContinueRx>
 8007282:	e038      	b.n	80072f6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00a      	beq.n	80072a6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007296:	2b03      	cmp	r3, #3
 8007298:	d105      	bne.n	80072a6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f000 ff35 	bl	8008116 <USBD_CtlSendStatus>
 80072ac:	e023      	b.n	80072f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072b4:	2b05      	cmp	r3, #5
 80072b6:	d11e      	bne.n	80072f6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80072c0:	2100      	movs	r1, #0
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f002 fbe2 	bl	8009a8c <USBD_LL_StallEP>
 80072c8:	e015      	b.n	80072f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00d      	beq.n	80072f2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d108      	bne.n	80072f2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	7afa      	ldrb	r2, [r7, #11]
 80072ea:	4611      	mov	r1, r2
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	4798      	blx	r3
 80072f0:	e001      	b.n	80072f6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80072f2:	2302      	movs	r3, #2
 80072f4:	e000      	b.n	80072f8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3718      	adds	r7, #24
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	460b      	mov	r3, r1
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800730e:	7afb      	ldrb	r3, [r7, #11]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d17f      	bne.n	8007414 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3314      	adds	r3, #20
 8007318:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007320:	2b02      	cmp	r3, #2
 8007322:	d15c      	bne.n	80073de <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	429a      	cmp	r2, r3
 800732e:	d915      	bls.n	800735c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	1ad2      	subs	r2, r2, r3
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	b29b      	uxth	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 fec0 	bl	80080ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800734e:	2300      	movs	r3, #0
 8007350:	2200      	movs	r2, #0
 8007352:	2100      	movs	r1, #0
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f002 fc45 	bl	8009be4 <USBD_LL_PrepareReceive>
 800735a:	e04e      	b.n	80073fa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	6912      	ldr	r2, [r2, #16]
 8007364:	fbb3 f1f2 	udiv	r1, r3, r2
 8007368:	fb01 f202 	mul.w	r2, r1, r2
 800736c:	1a9b      	subs	r3, r3, r2
 800736e:	2b00      	cmp	r3, #0
 8007370:	d11c      	bne.n	80073ac <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800737a:	429a      	cmp	r2, r3
 800737c:	d316      	bcc.n	80073ac <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007388:	429a      	cmp	r2, r3
 800738a:	d20f      	bcs.n	80073ac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800738c:	2200      	movs	r2, #0
 800738e:	2100      	movs	r1, #0
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 fe9c 	bl	80080ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800739e:	2300      	movs	r3, #0
 80073a0:	2200      	movs	r2, #0
 80073a2:	2100      	movs	r1, #0
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f002 fc1d 	bl	8009be4 <USBD_LL_PrepareReceive>
 80073aa:	e026      	b.n	80073fa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00a      	beq.n	80073ce <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d105      	bne.n	80073ce <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80073ce:	2180      	movs	r1, #128	; 0x80
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f002 fb5b 	bl	8009a8c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80073d6:	68f8      	ldr	r0, [r7, #12]
 80073d8:	f000 feb0 	bl	800813c <USBD_CtlReceiveStatus>
 80073dc:	e00d      	b.n	80073fa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d004      	beq.n	80073f2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80073f2:	2180      	movs	r1, #128	; 0x80
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f002 fb49 	bl	8009a8c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007400:	2b01      	cmp	r3, #1
 8007402:	d11d      	bne.n	8007440 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f7ff fe81 	bl	800710c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007412:	e015      	b.n	8007440 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00d      	beq.n	800743c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007426:	2b03      	cmp	r3, #3
 8007428:	d108      	bne.n	800743c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	7afa      	ldrb	r2, [r7, #11]
 8007434:	4611      	mov	r1, r2
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	4798      	blx	r3
 800743a:	e001      	b.n	8007440 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800743c:	2302      	movs	r3, #2
 800743e:	e000      	b.n	8007442 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b082      	sub	sp, #8
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007452:	2340      	movs	r3, #64	; 0x40
 8007454:	2200      	movs	r2, #0
 8007456:	2100      	movs	r1, #0
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f002 fad2 	bl	8009a02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2240      	movs	r2, #64	; 0x40
 800746a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800746e:	2340      	movs	r3, #64	; 0x40
 8007470:	2200      	movs	r2, #0
 8007472:	2180      	movs	r1, #128	; 0x80
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f002 fac4 	bl	8009a02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2240      	movs	r2, #64	; 0x40
 8007484:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6852      	ldr	r2, [r2, #4]
 80074ba:	b2d2      	uxtb	r2, r2
 80074bc:	4611      	mov	r1, r2
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
  }

  return USBD_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	78fa      	ldrb	r2, [r7, #3]
 80074dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr

080074ea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b083      	sub	sp, #12
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2204      	movs	r2, #4
 8007502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr

08007512 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007520:	2b04      	cmp	r3, #4
 8007522:	d105      	bne.n	8007530 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	370c      	adds	r7, #12
 8007536:	46bd      	mov	sp, r7
 8007538:	bc80      	pop	{r7}
 800753a:	4770      	bx	lr

0800753c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754a:	2b03      	cmp	r3, #3
 800754c:	d10b      	bne.n	8007566 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007554:	69db      	ldr	r3, [r3, #28]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007560:	69db      	ldr	r3, [r3, #28]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007566:	2300      	movs	r3, #0
}
 8007568:	4618      	mov	r0, r3
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007586:	2b40      	cmp	r3, #64	; 0x40
 8007588:	d005      	beq.n	8007596 <USBD_StdDevReq+0x26>
 800758a:	2b40      	cmp	r3, #64	; 0x40
 800758c:	d84f      	bhi.n	800762e <USBD_StdDevReq+0xbe>
 800758e:	2b00      	cmp	r3, #0
 8007590:	d009      	beq.n	80075a6 <USBD_StdDevReq+0x36>
 8007592:	2b20      	cmp	r3, #32
 8007594:	d14b      	bne.n	800762e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	4798      	blx	r3
      break;
 80075a4:	e048      	b.n	8007638 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	2b09      	cmp	r3, #9
 80075ac:	d839      	bhi.n	8007622 <USBD_StdDevReq+0xb2>
 80075ae:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <USBD_StdDevReq+0x44>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	08007605 	.word	0x08007605
 80075b8:	08007619 	.word	0x08007619
 80075bc:	08007623 	.word	0x08007623
 80075c0:	0800760f 	.word	0x0800760f
 80075c4:	08007623 	.word	0x08007623
 80075c8:	080075e7 	.word	0x080075e7
 80075cc:	080075dd 	.word	0x080075dd
 80075d0:	08007623 	.word	0x08007623
 80075d4:	080075fb 	.word	0x080075fb
 80075d8:	080075f1 	.word	0x080075f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f9dc 	bl	800799c <USBD_GetDescriptor>
          break;
 80075e4:	e022      	b.n	800762c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fb3f 	bl	8007c6c <USBD_SetAddress>
          break;
 80075ee:	e01d      	b.n	800762c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fb7e 	bl	8007cf4 <USBD_SetConfig>
          break;
 80075f8:	e018      	b.n	800762c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fc07 	bl	8007e10 <USBD_GetConfig>
          break;
 8007602:	e013      	b.n	800762c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fc37 	bl	8007e7a <USBD_GetStatus>
          break;
 800760c:	e00e      	b.n	800762c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fc65 	bl	8007ee0 <USBD_SetFeature>
          break;
 8007616:	e009      	b.n	800762c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fc74 	bl	8007f08 <USBD_ClrFeature>
          break;
 8007620:	e004      	b.n	800762c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fccc 	bl	8007fc2 <USBD_CtlError>
          break;
 800762a:	bf00      	nop
      }
      break;
 800762c:	e004      	b.n	8007638 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fcc6 	bl	8007fc2 <USBD_CtlError>
      break;
 8007636:	bf00      	nop
  }

  return ret;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop

08007644 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800765a:	2b40      	cmp	r3, #64	; 0x40
 800765c:	d005      	beq.n	800766a <USBD_StdItfReq+0x26>
 800765e:	2b40      	cmp	r3, #64	; 0x40
 8007660:	d82e      	bhi.n	80076c0 <USBD_StdItfReq+0x7c>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <USBD_StdItfReq+0x26>
 8007666:	2b20      	cmp	r3, #32
 8007668:	d12a      	bne.n	80076c0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007670:	3b01      	subs	r3, #1
 8007672:	2b02      	cmp	r3, #2
 8007674:	d81d      	bhi.n	80076b2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	889b      	ldrh	r3, [r3, #4]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b01      	cmp	r3, #1
 800767e:	d813      	bhi.n	80076a8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	4798      	blx	r3
 800768e:	4603      	mov	r3, r0
 8007690:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	88db      	ldrh	r3, [r3, #6]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d110      	bne.n	80076bc <USBD_StdItfReq+0x78>
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10d      	bne.n	80076bc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fd38 	bl	8008116 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076a6:	e009      	b.n	80076bc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fc89 	bl	8007fc2 <USBD_CtlError>
          break;
 80076b0:	e004      	b.n	80076bc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fc84 	bl	8007fc2 <USBD_CtlError>
          break;
 80076ba:	e000      	b.n	80076be <USBD_StdItfReq+0x7a>
          break;
 80076bc:	bf00      	nop
      }
      break;
 80076be:	e004      	b.n	80076ca <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fc7d 	bl	8007fc2 <USBD_CtlError>
      break;
 80076c8:	bf00      	nop
  }

  return USBD_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	889b      	ldrh	r3, [r3, #4]
 80076e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076f0:	2b40      	cmp	r3, #64	; 0x40
 80076f2:	d007      	beq.n	8007704 <USBD_StdEPReq+0x30>
 80076f4:	2b40      	cmp	r3, #64	; 0x40
 80076f6:	f200 8146 	bhi.w	8007986 <USBD_StdEPReq+0x2b2>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <USBD_StdEPReq+0x40>
 80076fe:	2b20      	cmp	r3, #32
 8007700:	f040 8141 	bne.w	8007986 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	4798      	blx	r3
      break;
 8007712:	e13d      	b.n	8007990 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800771c:	2b20      	cmp	r3, #32
 800771e:	d10a      	bne.n	8007736 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	4798      	blx	r3
 800772e:	4603      	mov	r3, r0
 8007730:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	e12d      	b.n	8007992 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	2b03      	cmp	r3, #3
 800773c:	d007      	beq.n	800774e <USBD_StdEPReq+0x7a>
 800773e:	2b03      	cmp	r3, #3
 8007740:	f300 811b 	bgt.w	800797a <USBD_StdEPReq+0x2a6>
 8007744:	2b00      	cmp	r3, #0
 8007746:	d072      	beq.n	800782e <USBD_StdEPReq+0x15a>
 8007748:	2b01      	cmp	r3, #1
 800774a:	d03a      	beq.n	80077c2 <USBD_StdEPReq+0xee>
 800774c:	e115      	b.n	800797a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007754:	2b02      	cmp	r3, #2
 8007756:	d002      	beq.n	800775e <USBD_StdEPReq+0x8a>
 8007758:	2b03      	cmp	r3, #3
 800775a:	d015      	beq.n	8007788 <USBD_StdEPReq+0xb4>
 800775c:	e02b      	b.n	80077b6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00c      	beq.n	800777e <USBD_StdEPReq+0xaa>
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	2b80      	cmp	r3, #128	; 0x80
 8007768:	d009      	beq.n	800777e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800776a:	7bbb      	ldrb	r3, [r7, #14]
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f002 f98c 	bl	8009a8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007774:	2180      	movs	r1, #128	; 0x80
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f002 f988 	bl	8009a8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800777c:	e020      	b.n	80077c0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fc1e 	bl	8007fc2 <USBD_CtlError>
              break;
 8007786:	e01b      	b.n	80077c0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	885b      	ldrh	r3, [r3, #2]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10e      	bne.n	80077ae <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007790:	7bbb      	ldrb	r3, [r7, #14]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00b      	beq.n	80077ae <USBD_StdEPReq+0xda>
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	2b80      	cmp	r3, #128	; 0x80
 800779a:	d008      	beq.n	80077ae <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	88db      	ldrh	r3, [r3, #6]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d104      	bne.n	80077ae <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f002 f96f 	bl	8009a8c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fcb1 	bl	8008116 <USBD_CtlSendStatus>

              break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fc02 	bl	8007fc2 <USBD_CtlError>
              break;
 80077be:	bf00      	nop
          }
          break;
 80077c0:	e0e0      	b.n	8007984 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d002      	beq.n	80077d2 <USBD_StdEPReq+0xfe>
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d015      	beq.n	80077fc <USBD_StdEPReq+0x128>
 80077d0:	e026      	b.n	8007820 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00c      	beq.n	80077f2 <USBD_StdEPReq+0x11e>
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	2b80      	cmp	r3, #128	; 0x80
 80077dc:	d009      	beq.n	80077f2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f002 f952 	bl	8009a8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80077e8:	2180      	movs	r1, #128	; 0x80
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f002 f94e 	bl	8009a8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077f0:	e01c      	b.n	800782c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fbe4 	bl	8007fc2 <USBD_CtlError>
              break;
 80077fa:	e017      	b.n	800782c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	885b      	ldrh	r3, [r3, #2]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d112      	bne.n	800782a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007804:	7bbb      	ldrb	r3, [r7, #14]
 8007806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780a:	2b00      	cmp	r3, #0
 800780c:	d004      	beq.n	8007818 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800780e:	7bbb      	ldrb	r3, [r7, #14]
 8007810:	4619      	mov	r1, r3
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f002 f959 	bl	8009aca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fc7c 	bl	8008116 <USBD_CtlSendStatus>
              }
              break;
 800781e:	e004      	b.n	800782a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fbcd 	bl	8007fc2 <USBD_CtlError>
              break;
 8007828:	e000      	b.n	800782c <USBD_StdEPReq+0x158>
              break;
 800782a:	bf00      	nop
          }
          break;
 800782c:	e0aa      	b.n	8007984 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007834:	2b02      	cmp	r3, #2
 8007836:	d002      	beq.n	800783e <USBD_StdEPReq+0x16a>
 8007838:	2b03      	cmp	r3, #3
 800783a:	d032      	beq.n	80078a2 <USBD_StdEPReq+0x1ce>
 800783c:	e097      	b.n	800796e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d007      	beq.n	8007854 <USBD_StdEPReq+0x180>
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b80      	cmp	r3, #128	; 0x80
 8007848:	d004      	beq.n	8007854 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fbb8 	bl	8007fc2 <USBD_CtlError>
                break;
 8007852:	e091      	b.n	8007978 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007858:	2b00      	cmp	r3, #0
 800785a:	da0b      	bge.n	8007874 <USBD_StdEPReq+0x1a0>
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	3310      	adds	r3, #16
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	4413      	add	r3, r2
 8007870:	3304      	adds	r3, #4
 8007872:	e00b      	b.n	800788c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800787a:	4613      	mov	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	4413      	add	r3, r2
 800788a:	3304      	adds	r3, #4
 800788c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2202      	movs	r2, #2
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fbfb 	bl	8008096 <USBD_CtlSendData>
              break;
 80078a0:	e06a      	b.n	8007978 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	da11      	bge.n	80078ce <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	f003 020f 	and.w	r2, r3, #15
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	3318      	adds	r3, #24
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d117      	bne.n	80078f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fb7b 	bl	8007fc2 <USBD_CtlError>
                  break;
 80078cc:	e054      	b.n	8007978 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078ce:	7bbb      	ldrb	r3, [r7, #14]
 80078d0:	f003 020f 	and.w	r2, r3, #15
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	440b      	add	r3, r1
 80078e0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d104      	bne.n	80078f4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 fb68 	bl	8007fc2 <USBD_CtlError>
                  break;
 80078f2:	e041      	b.n	8007978 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	da0b      	bge.n	8007914 <USBD_StdEPReq+0x240>
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	3310      	adds	r3, #16
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	4413      	add	r3, r2
 8007910:	3304      	adds	r3, #4
 8007912:	e00b      	b.n	800792c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007914:	7bbb      	ldrb	r3, [r7, #14]
 8007916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	4413      	add	r3, r2
 800792a:	3304      	adds	r3, #4
 800792c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <USBD_StdEPReq+0x266>
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	2b80      	cmp	r3, #128	; 0x80
 8007938:	d103      	bne.n	8007942 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	e00e      	b.n	8007960 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f002 f8de 	bl	8009b08 <USBD_LL_IsStallEP>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2201      	movs	r2, #1
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	e002      	b.n	8007960 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2200      	movs	r2, #0
 800795e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2202      	movs	r2, #2
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fb95 	bl	8008096 <USBD_CtlSendData>
              break;
 800796c:	e004      	b.n	8007978 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fb26 	bl	8007fc2 <USBD_CtlError>
              break;
 8007976:	bf00      	nop
          }
          break;
 8007978:	e004      	b.n	8007984 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fb20 	bl	8007fc2 <USBD_CtlError>
          break;
 8007982:	bf00      	nop
      }
      break;
 8007984:	e004      	b.n	8007990 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fb1a 	bl	8007fc2 <USBD_CtlError>
      break;
 800798e:	bf00      	nop
  }

  return ret;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	885b      	ldrh	r3, [r3, #2]
 80079b6:	0a1b      	lsrs	r3, r3, #8
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	2b06      	cmp	r3, #6
 80079be:	f200 8128 	bhi.w	8007c12 <USBD_GetDescriptor+0x276>
 80079c2:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <USBD_GetDescriptor+0x2c>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	080079e5 	.word	0x080079e5
 80079cc:	080079fd 	.word	0x080079fd
 80079d0:	08007a3d 	.word	0x08007a3d
 80079d4:	08007c13 	.word	0x08007c13
 80079d8:	08007c13 	.word	0x08007c13
 80079dc:	08007bb3 	.word	0x08007bb3
 80079e0:	08007bdf 	.word	0x08007bdf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	7c12      	ldrb	r2, [r2, #16]
 80079f0:	f107 0108 	add.w	r1, r7, #8
 80079f4:	4610      	mov	r0, r2
 80079f6:	4798      	blx	r3
 80079f8:	60f8      	str	r0, [r7, #12]
      break;
 80079fa:	e112      	b.n	8007c22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	7c1b      	ldrb	r3, [r3, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10d      	bne.n	8007a20 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0c:	f107 0208 	add.w	r2, r7, #8
 8007a10:	4610      	mov	r0, r2
 8007a12:	4798      	blx	r3
 8007a14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a1e:	e100      	b.n	8007c22 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	f107 0208 	add.w	r2, r7, #8
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4798      	blx	r3
 8007a30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	3301      	adds	r3, #1
 8007a36:	2202      	movs	r2, #2
 8007a38:	701a      	strb	r2, [r3, #0]
      break;
 8007a3a:	e0f2      	b.n	8007c22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	885b      	ldrh	r3, [r3, #2]
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b05      	cmp	r3, #5
 8007a44:	f200 80ac 	bhi.w	8007ba0 <USBD_GetDescriptor+0x204>
 8007a48:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <USBD_GetDescriptor+0xb4>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007a69 	.word	0x08007a69
 8007a54:	08007a9d 	.word	0x08007a9d
 8007a58:	08007ad1 	.word	0x08007ad1
 8007a5c:	08007b05 	.word	0x08007b05
 8007a60:	08007b39 	.word	0x08007b39
 8007a64:	08007b6d 	.word	0x08007b6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	7c12      	ldrb	r2, [r2, #16]
 8007a80:	f107 0108 	add.w	r1, r7, #8
 8007a84:	4610      	mov	r0, r2
 8007a86:	4798      	blx	r3
 8007a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a8a:	e091      	b.n	8007bb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa97 	bl	8007fc2 <USBD_CtlError>
            err++;
 8007a94:	7afb      	ldrb	r3, [r7, #11]
 8007a96:	3301      	adds	r3, #1
 8007a98:	72fb      	strb	r3, [r7, #11]
          break;
 8007a9a:	e089      	b.n	8007bb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	7c12      	ldrb	r2, [r2, #16]
 8007ab4:	f107 0108 	add.w	r1, r7, #8
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4798      	blx	r3
 8007abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007abe:	e077      	b.n	8007bb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa7d 	bl	8007fc2 <USBD_CtlError>
            err++;
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	3301      	adds	r3, #1
 8007acc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ace:	e06f      	b.n	8007bb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	7c12      	ldrb	r2, [r2, #16]
 8007ae8:	f107 0108 	add.w	r1, r7, #8
 8007aec:	4610      	mov	r0, r2
 8007aee:	4798      	blx	r3
 8007af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007af2:	e05d      	b.n	8007bb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fa63 	bl	8007fc2 <USBD_CtlError>
            err++;
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	3301      	adds	r3, #1
 8007b00:	72fb      	strb	r3, [r7, #11]
          break;
 8007b02:	e055      	b.n	8007bb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	7c12      	ldrb	r2, [r2, #16]
 8007b1c:	f107 0108 	add.w	r1, r7, #8
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b26:	e043      	b.n	8007bb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fa49 	bl	8007fc2 <USBD_CtlError>
            err++;
 8007b30:	7afb      	ldrb	r3, [r7, #11]
 8007b32:	3301      	adds	r3, #1
 8007b34:	72fb      	strb	r3, [r7, #11]
          break;
 8007b36:	e03b      	b.n	8007bb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00b      	beq.n	8007b5c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	7c12      	ldrb	r2, [r2, #16]
 8007b50:	f107 0108 	add.w	r1, r7, #8
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
 8007b58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b5a:	e029      	b.n	8007bb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fa2f 	bl	8007fc2 <USBD_CtlError>
            err++;
 8007b64:	7afb      	ldrb	r3, [r7, #11]
 8007b66:	3301      	adds	r3, #1
 8007b68:	72fb      	strb	r3, [r7, #11]
          break;
 8007b6a:	e021      	b.n	8007bb0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00b      	beq.n	8007b90 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b7e:	699b      	ldr	r3, [r3, #24]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	7c12      	ldrb	r2, [r2, #16]
 8007b84:	f107 0108 	add.w	r1, r7, #8
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b8e:	e00f      	b.n	8007bb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa15 	bl	8007fc2 <USBD_CtlError>
            err++;
 8007b98:	7afb      	ldrb	r3, [r7, #11]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b9e:	e007      	b.n	8007bb0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa0d 	bl	8007fc2 <USBD_CtlError>
          err++;
 8007ba8:	7afb      	ldrb	r3, [r7, #11]
 8007baa:	3301      	adds	r3, #1
 8007bac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007bae:	e038      	b.n	8007c22 <USBD_GetDescriptor+0x286>
 8007bb0:	e037      	b.n	8007c22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	7c1b      	ldrb	r3, [r3, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d109      	bne.n	8007bce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc2:	f107 0208 	add.w	r2, r7, #8
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	4798      	blx	r3
 8007bca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bcc:	e029      	b.n	8007c22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f9f6 	bl	8007fc2 <USBD_CtlError>
        err++;
 8007bd6:	7afb      	ldrb	r3, [r7, #11]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	72fb      	strb	r3, [r7, #11]
      break;
 8007bdc:	e021      	b.n	8007c22 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	7c1b      	ldrb	r3, [r3, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10d      	bne.n	8007c02 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bee:	f107 0208 	add.w	r2, r7, #8
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	4798      	blx	r3
 8007bf6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	2207      	movs	r2, #7
 8007bfe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c00:	e00f      	b.n	8007c22 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f9dc 	bl	8007fc2 <USBD_CtlError>
        err++;
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c10:	e007      	b.n	8007c22 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f9d4 	bl	8007fc2 <USBD_CtlError>
      err++;
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c20:	bf00      	nop
  }

  if (err != 0U)
 8007c22:	7afb      	ldrb	r3, [r7, #11]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d11c      	bne.n	8007c62 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007c28:	893b      	ldrh	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d011      	beq.n	8007c52 <USBD_GetDescriptor+0x2b6>
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	88db      	ldrh	r3, [r3, #6]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00d      	beq.n	8007c52 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	88da      	ldrh	r2, [r3, #6]
 8007c3a:	893b      	ldrh	r3, [r7, #8]
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	bf28      	it	cs
 8007c40:	4613      	movcs	r3, r2
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c46:	893b      	ldrh	r3, [r7, #8]
 8007c48:	461a      	mov	r2, r3
 8007c4a:	68f9      	ldr	r1, [r7, #12]
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fa22 	bl	8008096 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	88db      	ldrh	r3, [r3, #6]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d104      	bne.n	8007c64 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa5b 	bl	8008116 <USBD_CtlSendStatus>
 8007c60:	e000      	b.n	8007c64 <USBD_GetDescriptor+0x2c8>
    return;
 8007c62:	bf00      	nop
    }
  }
}
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop

08007c6c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	889b      	ldrh	r3, [r3, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d130      	bne.n	8007ce0 <USBD_SetAddress+0x74>
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	88db      	ldrh	r3, [r3, #6]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d12c      	bne.n	8007ce0 <USBD_SetAddress+0x74>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	885b      	ldrh	r3, [r3, #2]
 8007c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c8c:	d828      	bhi.n	8007ce0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	885b      	ldrh	r3, [r3, #2]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d104      	bne.n	8007cae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f98b 	bl	8007fc2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cac:	e01d      	b.n	8007cea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	7bfa      	ldrb	r2, [r7, #15]
 8007cb2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f001 ff50 	bl	8009b60 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fa28 	bl	8008116 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cc6:	7bfb      	ldrb	r3, [r7, #15]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d004      	beq.n	8007cd6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cd4:	e009      	b.n	8007cea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cde:	e004      	b.n	8007cea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f96d 	bl	8007fc2 <USBD_CtlError>
  }
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	885b      	ldrh	r3, [r3, #2]
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	4b41      	ldr	r3, [pc, #260]	; (8007e0c <USBD_SetConfig+0x118>)
 8007d06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d08:	4b40      	ldr	r3, [pc, #256]	; (8007e0c <USBD_SetConfig+0x118>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d904      	bls.n	8007d1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f955 	bl	8007fc2 <USBD_CtlError>
 8007d18:	e075      	b.n	8007e06 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d002      	beq.n	8007d2a <USBD_SetConfig+0x36>
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d023      	beq.n	8007d70 <USBD_SetConfig+0x7c>
 8007d28:	e062      	b.n	8007df0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007d2a:	4b38      	ldr	r3, [pc, #224]	; (8007e0c <USBD_SetConfig+0x118>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d01a      	beq.n	8007d68 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007d32:	4b36      	ldr	r3, [pc, #216]	; (8007e0c <USBD_SetConfig+0x118>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2203      	movs	r2, #3
 8007d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d44:	4b31      	ldr	r3, [pc, #196]	; (8007e0c <USBD_SetConfig+0x118>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff f9e8 	bl	8007120 <USBD_SetClassConfig>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d104      	bne.n	8007d60 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f932 	bl	8007fc2 <USBD_CtlError>
            return;
 8007d5e:	e052      	b.n	8007e06 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f9d8 	bl	8008116 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d66:	e04e      	b.n	8007e06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f9d4 	bl	8008116 <USBD_CtlSendStatus>
        break;
 8007d6e:	e04a      	b.n	8007e06 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007d70:	4b26      	ldr	r3, [pc, #152]	; (8007e0c <USBD_SetConfig+0x118>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d112      	bne.n	8007d9e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007d80:	4b22      	ldr	r3, [pc, #136]	; (8007e0c <USBD_SetConfig+0x118>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	461a      	mov	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007d8a:	4b20      	ldr	r3, [pc, #128]	; (8007e0c <USBD_SetConfig+0x118>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7ff f9e4 	bl	800715e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f9bd 	bl	8008116 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d9c:	e033      	b.n	8007e06 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007d9e:	4b1b      	ldr	r3, [pc, #108]	; (8007e0c <USBD_SetConfig+0x118>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d01d      	beq.n	8007de8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff f9d2 	bl	800715e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007dba:	4b14      	ldr	r3, [pc, #80]	; (8007e0c <USBD_SetConfig+0x118>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007dc4:	4b11      	ldr	r3, [pc, #68]	; (8007e0c <USBD_SetConfig+0x118>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7ff f9a8 	bl	8007120 <USBD_SetClassConfig>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d104      	bne.n	8007de0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007dd6:	6839      	ldr	r1, [r7, #0]
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f8f2 	bl	8007fc2 <USBD_CtlError>
            return;
 8007dde:	e012      	b.n	8007e06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f998 	bl	8008116 <USBD_CtlSendStatus>
        break;
 8007de6:	e00e      	b.n	8007e06 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f994 	bl	8008116 <USBD_CtlSendStatus>
        break;
 8007dee:	e00a      	b.n	8007e06 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f8e5 	bl	8007fc2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007df8:	4b04      	ldr	r3, [pc, #16]	; (8007e0c <USBD_SetConfig+0x118>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff f9ad 	bl	800715e <USBD_ClrClassConfig>
        break;
 8007e04:	bf00      	nop
    }
  }
}
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	2000046c 	.word	0x2000046c

08007e10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88db      	ldrh	r3, [r3, #6]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d004      	beq.n	8007e2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8cc 	bl	8007fc2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e2a:	e022      	b.n	8007e72 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	dc02      	bgt.n	8007e3c <USBD_GetConfig+0x2c>
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	dc03      	bgt.n	8007e42 <USBD_GetConfig+0x32>
 8007e3a:	e015      	b.n	8007e68 <USBD_GetConfig+0x58>
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d00b      	beq.n	8007e58 <USBD_GetConfig+0x48>
 8007e40:	e012      	b.n	8007e68 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f920 	bl	8008096 <USBD_CtlSendData>
        break;
 8007e56:	e00c      	b.n	8007e72 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f918 	bl	8008096 <USBD_CtlSendData>
        break;
 8007e66:	e004      	b.n	8007e72 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f8a9 	bl	8007fc2 <USBD_CtlError>
        break;
 8007e70:	bf00      	nop
}
 8007e72:	bf00      	nop
 8007e74:	3708      	adds	r7, #8
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b082      	sub	sp, #8
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d81e      	bhi.n	8007ece <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	88db      	ldrh	r3, [r3, #6]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d004      	beq.n	8007ea2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f891 	bl	8007fc2 <USBD_CtlError>
        break;
 8007ea0:	e01a      	b.n	8007ed8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d005      	beq.n	8007ebe <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	f043 0202 	orr.w	r2, r3, #2
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	330c      	adds	r3, #12
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f8e5 	bl	8008096 <USBD_CtlSendData>
      break;
 8007ecc:	e004      	b.n	8007ed8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f876 	bl	8007fc2 <USBD_CtlError>
      break;
 8007ed6:	bf00      	nop
  }
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	885b      	ldrh	r3, [r3, #2]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d106      	bne.n	8007f00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f90b 	bl	8008116 <USBD_CtlSendStatus>
  }
}
 8007f00:	bf00      	nop
 8007f02:	3708      	adds	r7, #8
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d80b      	bhi.n	8007f36 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d10c      	bne.n	8007f40 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f8f1 	bl	8008116 <USBD_CtlSendStatus>
      }
      break;
 8007f34:	e004      	b.n	8007f40 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f842 	bl	8007fc2 <USBD_CtlError>
      break;
 8007f3e:	e000      	b.n	8007f42 <USBD_ClrFeature+0x3a>
      break;
 8007f40:	bf00      	nop
  }
}
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
 8007f52:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781a      	ldrb	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	785a      	ldrb	r2, [r3, #1]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	3302      	adds	r3, #2
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	3303      	adds	r3, #3
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	021b      	lsls	r3, r3, #8
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	4413      	add	r3, r2
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	3304      	adds	r3, #4
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	b29a      	uxth	r2, r3
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	3305      	adds	r3, #5
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	021b      	lsls	r3, r3, #8
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	4413      	add	r3, r2
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	3306      	adds	r3, #6
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	b29a      	uxth	r2, r3
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	3307      	adds	r3, #7
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	4413      	add	r3, r2
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	80da      	strh	r2, [r3, #6]

}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bc80      	pop	{r7}
 8007fc0:	4770      	bx	lr

08007fc2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007fcc:	2180      	movs	r1, #128	; 0x80
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 fd5c 	bl	8009a8c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f001 fd58 	bl	8009a8c <USBD_LL_StallEP>
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d032      	beq.n	8008060 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f834 	bl	8008068 <USBD_GetLen>
 8008000:	4603      	mov	r3, r0
 8008002:	3301      	adds	r3, #1
 8008004:	b29b      	uxth	r3, r3
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	75fa      	strb	r2, [r7, #23]
 8008014:	461a      	mov	r2, r3
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	4413      	add	r3, r2
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	7812      	ldrb	r2, [r2, #0]
 800801e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008020:	7dfb      	ldrb	r3, [r7, #23]
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	75fa      	strb	r2, [r7, #23]
 8008026:	461a      	mov	r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	4413      	add	r3, r2
 800802c:	2203      	movs	r2, #3
 800802e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008030:	e012      	b.n	8008058 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	1c5a      	adds	r2, r3, #1
 8008036:	60fa      	str	r2, [r7, #12]
 8008038:	7dfa      	ldrb	r2, [r7, #23]
 800803a:	1c51      	adds	r1, r2, #1
 800803c:	75f9      	strb	r1, [r7, #23]
 800803e:	4611      	mov	r1, r2
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	440a      	add	r2, r1
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	75fa      	strb	r2, [r7, #23]
 800804e:	461a      	mov	r2, r3
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	4413      	add	r3, r2
 8008054:	2200      	movs	r2, #0
 8008056:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1e8      	bne.n	8008032 <USBD_GetString+0x4e>
    }
  }
}
 8008060:	bf00      	nop
 8008062:	3718      	adds	r7, #24
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008074:	e005      	b.n	8008082 <USBD_GetLen+0x1a>
  {
    len++;
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	3301      	adds	r3, #1
 800807a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3301      	adds	r3, #1
 8008080:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1f5      	bne.n	8008076 <USBD_GetLen+0xe>
  }

  return len;
 800808a:	7bfb      	ldrb	r3, [r7, #15]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr

08008096 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	60f8      	str	r0, [r7, #12]
 800809e:	60b9      	str	r1, [r7, #8]
 80080a0:	4613      	mov	r3, r2
 80080a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080ac:	88fa      	ldrh	r2, [r7, #6]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80080b2:	88fa      	ldrh	r2, [r7, #6]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080b8:	88fb      	ldrh	r3, [r7, #6]
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	2100      	movs	r1, #0
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f001 fd6d 	bl	8009b9e <USBD_LL_Transmit>

  return USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	4613      	mov	r3, r2
 80080da:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	2100      	movs	r1, #0
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f001 fd5b 	bl	8009b9e <USBD_LL_Transmit>

  return USBD_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	4613      	mov	r3, r2
 80080fe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008100:	88fb      	ldrh	r3, [r7, #6]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	2100      	movs	r1, #0
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f001 fd6c 	bl	8009be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2204      	movs	r2, #4
 8008122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008126:	2300      	movs	r3, #0
 8008128:	2200      	movs	r2, #0
 800812a:	2100      	movs	r1, #0
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 fd36 	bl	8009b9e <USBD_LL_Transmit>

  return USBD_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2205      	movs	r2, #5
 8008148:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800814c:	2300      	movs	r3, #0
 800814e:	2200      	movs	r2, #0
 8008150:	2100      	movs	r1, #0
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f001 fd46 	bl	8009be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008162:	b480      	push	{r7}
 8008164:	b085      	sub	sp, #20
 8008166:	af00      	add	r7, sp, #0
 8008168:	4603      	mov	r3, r0
 800816a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008174:	2b84      	cmp	r3, #132	; 0x84
 8008176:	d005      	beq.n	8008184 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008178:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4413      	add	r3, r2
 8008180:	3303      	adds	r3, #3
 8008182:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008184:	68fb      	ldr	r3, [r7, #12]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3714      	adds	r7, #20
 800818a:	46bd      	mov	sp, r7
 800818c:	bc80      	pop	{r7}
 800818e:	4770      	bx	lr

08008190 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008194:	f000 fad0 	bl	8008738 <vTaskStartScheduler>
  
  return osOK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	bd80      	pop	{r7, pc}

0800819e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800819e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081a0:	b089      	sub	sp, #36	; 0x24
 80081a2:	af04      	add	r7, sp, #16
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d020      	beq.n	80081f2 <osThreadCreate+0x54>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01c      	beq.n	80081f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685c      	ldr	r4, [r3, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	691e      	ldr	r6, [r3, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff ffc9 	bl	8008162 <makeFreeRtosPriority>
 80081d0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081da:	9202      	str	r2, [sp, #8]
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	9100      	str	r1, [sp, #0]
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	4632      	mov	r2, r6
 80081e4:	4629      	mov	r1, r5
 80081e6:	4620      	mov	r0, r4
 80081e8:	f000 f8e8 	bl	80083bc <xTaskCreateStatic>
 80081ec:	4603      	mov	r3, r0
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	e01c      	b.n	800822c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685c      	ldr	r4, [r3, #4]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081fe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff ffab 	bl	8008162 <makeFreeRtosPriority>
 800820c:	4602      	mov	r2, r0
 800820e:	f107 030c 	add.w	r3, r7, #12
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	9200      	str	r2, [sp, #0]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	4632      	mov	r2, r6
 800821a:	4629      	mov	r1, r5
 800821c:	4620      	mov	r0, r4
 800821e:	f000 f929 	bl	8008474 <xTaskCreate>
 8008222:	4603      	mov	r3, r0
 8008224:	2b01      	cmp	r3, #1
 8008226:	d001      	beq.n	800822c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008228:	2300      	movs	r3, #0
 800822a:	e000      	b.n	800822e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800822c:	68fb      	ldr	r3, [r7, #12]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008236 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <osDelay+0x16>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	e000      	b.n	800824e <osDelay+0x18>
 800824c:	2301      	movs	r3, #1
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fa3e 	bl	80086d0 <vTaskDelay>
  
  return osOK;
 8008254:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f103 0208 	add.w	r2, r3, #8
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008276:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f103 0208 	add.w	r2, r3, #8
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f103 0208 	add.w	r2, r3, #8
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008292:	bf00      	nop
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	bc80      	pop	{r7}
 800829a:	4770      	bx	lr

0800829c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bc80      	pop	{r7}
 80082b2:	4770      	bx	lr

080082b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082b4:	b480      	push	{r7}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	601a      	str	r2, [r3, #0]
}
 80082f0:	bf00      	nop
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bc80      	pop	{r7}
 80082f8:	4770      	bx	lr

080082fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082fa:	b480      	push	{r7}
 80082fc:	b085      	sub	sp, #20
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
 8008302:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008310:	d103      	bne.n	800831a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	e00c      	b.n	8008334 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3308      	adds	r3, #8
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	e002      	b.n	8008328 <vListInsert+0x2e>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	429a      	cmp	r2, r3
 8008332:	d2f6      	bcs.n	8008322 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	683a      	ldr	r2, [r7, #0]
 8008342:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	601a      	str	r2, [r3, #0]
}
 8008360:	bf00      	nop
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr

0800836a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800836a:	b480      	push	{r7}
 800836c:	b085      	sub	sp, #20
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	6892      	ldr	r2, [r2, #8]
 8008380:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	6852      	ldr	r2, [r2, #4]
 800838a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	429a      	cmp	r2, r3
 8008394:	d103      	bne.n	800839e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	689a      	ldr	r2, [r3, #8]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	1e5a      	subs	r2, r3, #1
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bc80      	pop	{r7}
 80083ba:	4770      	bx	lr

080083bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08e      	sub	sp, #56	; 0x38
 80083c0:	af04      	add	r7, sp, #16
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80083ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10a      	bne.n	8008402 <xTaskCreateStatic+0x46>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	61fb      	str	r3, [r7, #28]
}
 80083fe:	bf00      	nop
 8008400:	e7fe      	b.n	8008400 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008402:	2354      	movs	r3, #84	; 0x54
 8008404:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b54      	cmp	r3, #84	; 0x54
 800840a:	d00a      	beq.n	8008422 <xTaskCreateStatic+0x66>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	61bb      	str	r3, [r7, #24]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008424:	2b00      	cmp	r3, #0
 8008426:	d01e      	beq.n	8008466 <xTaskCreateStatic+0xaa>
 8008428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842a:	2b00      	cmp	r3, #0
 800842c:	d01b      	beq.n	8008466 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800842e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008436:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	2202      	movs	r2, #2
 800843c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008440:	2300      	movs	r3, #0
 8008442:	9303      	str	r3, [sp, #12]
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	9302      	str	r3, [sp, #8]
 8008448:	f107 0314 	add.w	r3, r7, #20
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 f850 	bl	80084fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800845e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008460:	f000 f8cc 	bl	80085fc <prvAddNewTaskToReadyList>
 8008464:	e001      	b.n	800846a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800846a:	697b      	ldr	r3, [r7, #20]
	}
 800846c:	4618      	mov	r0, r3
 800846e:	3728      	adds	r7, #40	; 0x28
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08c      	sub	sp, #48	; 0x30
 8008478:	af04      	add	r7, sp, #16
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	603b      	str	r3, [r7, #0]
 8008480:	4613      	mov	r3, r2
 8008482:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008484:	88fb      	ldrh	r3, [r7, #6]
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fe89 	bl	80091a0 <pvPortMalloc>
 800848e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00e      	beq.n	80084b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008496:	2054      	movs	r0, #84	; 0x54
 8008498:	f000 fe82 	bl	80091a0 <pvPortMalloc>
 800849c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	631a      	str	r2, [r3, #48]	; 0x30
 80084aa:	e005      	b.n	80084b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084ac:	6978      	ldr	r0, [r7, #20]
 80084ae:	f000 ff3b 	bl	8009328 <vPortFree>
 80084b2:	e001      	b.n	80084b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80084b4:	2300      	movs	r3, #0
 80084b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d017      	beq.n	80084ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80084c6:	88fa      	ldrh	r2, [r7, #6]
 80084c8:	2300      	movs	r3, #0
 80084ca:	9303      	str	r3, [sp, #12]
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	9302      	str	r3, [sp, #8]
 80084d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d2:	9301      	str	r3, [sp, #4]
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 f80e 	bl	80084fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084e2:	69f8      	ldr	r0, [r7, #28]
 80084e4:	f000 f88a 	bl	80085fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084e8:	2301      	movs	r3, #1
 80084ea:	61bb      	str	r3, [r7, #24]
 80084ec:	e002      	b.n	80084f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084f4:	69bb      	ldr	r3, [r7, #24]
	}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3720      	adds	r7, #32
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b088      	sub	sp, #32
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	607a      	str	r2, [r7, #4]
 800850a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800850c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008516:	3b01      	subs	r3, #1
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	f023 0307 	bic.w	r3, r3, #7
 8008524:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00a      	beq.n	8008546 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008534:	f383 8811 	msr	BASEPRI, r3
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	617b      	str	r3, [r7, #20]
}
 8008542:	bf00      	nop
 8008544:	e7fe      	b.n	8008544 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008546:	2300      	movs	r3, #0
 8008548:	61fb      	str	r3, [r7, #28]
 800854a:	e012      	b.n	8008572 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	4413      	add	r3, r2
 8008552:	7819      	ldrb	r1, [r3, #0]
 8008554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	4413      	add	r3, r2
 800855a:	3334      	adds	r3, #52	; 0x34
 800855c:	460a      	mov	r2, r1
 800855e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	4413      	add	r3, r2
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d006      	beq.n	800857a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	3301      	adds	r3, #1
 8008570:	61fb      	str	r3, [r7, #28]
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	2b0f      	cmp	r3, #15
 8008576:	d9e9      	bls.n	800854c <prvInitialiseNewTask+0x4e>
 8008578:	e000      	b.n	800857c <prvInitialiseNewTask+0x7e>
		{
			break;
 800857a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	2b06      	cmp	r3, #6
 8008588:	d901      	bls.n	800858e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800858a:	2306      	movs	r3, #6
 800858c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008592:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008598:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859c:	2200      	movs	r2, #0
 800859e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	3304      	adds	r3, #4
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7ff fe79 	bl	800829c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	3318      	adds	r3, #24
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7ff fe74 	bl	800829c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085bc:	f1c3 0207 	rsb	r2, r3, #7
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	2200      	movs	r2, #0
 80085ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	68f9      	ldr	r1, [r7, #12]
 80085dc:	69b8      	ldr	r0, [r7, #24]
 80085de:	f000 fc2b 	bl	8008e38 <pxPortInitialiseStack>
 80085e2:	4602      	mov	r2, r0
 80085e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085f4:	bf00      	nop
 80085f6:	3720      	adds	r7, #32
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008604:	f000 fd0a 	bl	800901c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008608:	4b2a      	ldr	r3, [pc, #168]	; (80086b4 <prvAddNewTaskToReadyList+0xb8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3301      	adds	r3, #1
 800860e:	4a29      	ldr	r2, [pc, #164]	; (80086b4 <prvAddNewTaskToReadyList+0xb8>)
 8008610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008612:	4b29      	ldr	r3, [pc, #164]	; (80086b8 <prvAddNewTaskToReadyList+0xbc>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d109      	bne.n	800862e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800861a:	4a27      	ldr	r2, [pc, #156]	; (80086b8 <prvAddNewTaskToReadyList+0xbc>)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008620:	4b24      	ldr	r3, [pc, #144]	; (80086b4 <prvAddNewTaskToReadyList+0xb8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d110      	bne.n	800864a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008628:	f000 fac0 	bl	8008bac <prvInitialiseTaskLists>
 800862c:	e00d      	b.n	800864a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800862e:	4b23      	ldr	r3, [pc, #140]	; (80086bc <prvAddNewTaskToReadyList+0xc0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d109      	bne.n	800864a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008636:	4b20      	ldr	r3, [pc, #128]	; (80086b8 <prvAddNewTaskToReadyList+0xbc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	429a      	cmp	r2, r3
 8008642:	d802      	bhi.n	800864a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008644:	4a1c      	ldr	r2, [pc, #112]	; (80086b8 <prvAddNewTaskToReadyList+0xbc>)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800864a:	4b1d      	ldr	r3, [pc, #116]	; (80086c0 <prvAddNewTaskToReadyList+0xc4>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3301      	adds	r3, #1
 8008650:	4a1b      	ldr	r2, [pc, #108]	; (80086c0 <prvAddNewTaskToReadyList+0xc4>)
 8008652:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008658:	2201      	movs	r2, #1
 800865a:	409a      	lsls	r2, r3
 800865c:	4b19      	ldr	r3, [pc, #100]	; (80086c4 <prvAddNewTaskToReadyList+0xc8>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4313      	orrs	r3, r2
 8008662:	4a18      	ldr	r2, [pc, #96]	; (80086c4 <prvAddNewTaskToReadyList+0xc8>)
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866a:	4613      	mov	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	4413      	add	r3, r2
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4a15      	ldr	r2, [pc, #84]	; (80086c8 <prvAddNewTaskToReadyList+0xcc>)
 8008674:	441a      	add	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3304      	adds	r3, #4
 800867a:	4619      	mov	r1, r3
 800867c:	4610      	mov	r0, r2
 800867e:	f7ff fe19 	bl	80082b4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008682:	f000 fcfb 	bl	800907c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008686:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <prvAddNewTaskToReadyList+0xc0>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00e      	beq.n	80086ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800868e:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <prvAddNewTaskToReadyList+0xbc>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	429a      	cmp	r2, r3
 800869a:	d207      	bcs.n	80086ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800869c:	4b0b      	ldr	r3, [pc, #44]	; (80086cc <prvAddNewTaskToReadyList+0xd0>)
 800869e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086ac:	bf00      	nop
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20000570 	.word	0x20000570
 80086b8:	20000470 	.word	0x20000470
 80086bc:	2000057c 	.word	0x2000057c
 80086c0:	2000058c 	.word	0x2000058c
 80086c4:	20000578 	.word	0x20000578
 80086c8:	20000474 	.word	0x20000474
 80086cc:	e000ed04 	.word	0xe000ed04

080086d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d017      	beq.n	8008712 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086e2:	4b13      	ldr	r3, [pc, #76]	; (8008730 <vTaskDelay+0x60>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <vTaskDelay+0x30>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	60bb      	str	r3, [r7, #8]
}
 80086fc:	bf00      	nop
 80086fe:	e7fe      	b.n	80086fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008700:	f000 f87a 	bl	80087f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008704:	2100      	movs	r1, #0
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fb30 	bl	8008d6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800870c:	f000 f882 	bl	8008814 <xTaskResumeAll>
 8008710:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d107      	bne.n	8008728 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008718:	4b06      	ldr	r3, [pc, #24]	; (8008734 <vTaskDelay+0x64>)
 800871a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008728:	bf00      	nop
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	20000598 	.word	0x20000598
 8008734:	e000ed04 	.word	0xe000ed04

08008738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b08a      	sub	sp, #40	; 0x28
 800873c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800873e:	2300      	movs	r3, #0
 8008740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008742:	2300      	movs	r3, #0
 8008744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008746:	463a      	mov	r2, r7
 8008748:	1d39      	adds	r1, r7, #4
 800874a:	f107 0308 	add.w	r3, r7, #8
 800874e:	4618      	mov	r0, r3
 8008750:	f7f7 fd1c 	bl	800018c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	9202      	str	r2, [sp, #8]
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	2300      	movs	r3, #0
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	2300      	movs	r3, #0
 8008764:	460a      	mov	r2, r1
 8008766:	491e      	ldr	r1, [pc, #120]	; (80087e0 <vTaskStartScheduler+0xa8>)
 8008768:	481e      	ldr	r0, [pc, #120]	; (80087e4 <vTaskStartScheduler+0xac>)
 800876a:	f7ff fe27 	bl	80083bc <xTaskCreateStatic>
 800876e:	4603      	mov	r3, r0
 8008770:	4a1d      	ldr	r2, [pc, #116]	; (80087e8 <vTaskStartScheduler+0xb0>)
 8008772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008774:	4b1c      	ldr	r3, [pc, #112]	; (80087e8 <vTaskStartScheduler+0xb0>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800877c:	2301      	movs	r3, #1
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	e001      	b.n	8008786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008782:	2300      	movs	r3, #0
 8008784:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d116      	bne.n	80087ba <vTaskStartScheduler+0x82>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	613b      	str	r3, [r7, #16]
}
 800879e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80087a0:	4b12      	ldr	r3, [pc, #72]	; (80087ec <vTaskStartScheduler+0xb4>)
 80087a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087a8:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <vTaskStartScheduler+0xb8>)
 80087aa:	2201      	movs	r2, #1
 80087ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80087ae:	4b11      	ldr	r3, [pc, #68]	; (80087f4 <vTaskStartScheduler+0xbc>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087b4:	f000 fbc0 	bl	8008f38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087b8:	e00e      	b.n	80087d8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087c0:	d10a      	bne.n	80087d8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80087c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c6:	f383 8811 	msr	BASEPRI, r3
 80087ca:	f3bf 8f6f 	isb	sy
 80087ce:	f3bf 8f4f 	dsb	sy
 80087d2:	60fb      	str	r3, [r7, #12]
}
 80087d4:	bf00      	nop
 80087d6:	e7fe      	b.n	80087d6 <vTaskStartScheduler+0x9e>
}
 80087d8:	bf00      	nop
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	08009d5c 	.word	0x08009d5c
 80087e4:	08008b7d 	.word	0x08008b7d
 80087e8:	20000594 	.word	0x20000594
 80087ec:	20000590 	.word	0x20000590
 80087f0:	2000057c 	.word	0x2000057c
 80087f4:	20000574 	.word	0x20000574

080087f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087f8:	b480      	push	{r7}
 80087fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80087fc:	4b04      	ldr	r3, [pc, #16]	; (8008810 <vTaskSuspendAll+0x18>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3301      	adds	r3, #1
 8008802:	4a03      	ldr	r2, [pc, #12]	; (8008810 <vTaskSuspendAll+0x18>)
 8008804:	6013      	str	r3, [r2, #0]
}
 8008806:	bf00      	nop
 8008808:	46bd      	mov	sp, r7
 800880a:	bc80      	pop	{r7}
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	20000598 	.word	0x20000598

08008814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800881e:	2300      	movs	r3, #0
 8008820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008822:	4b41      	ldr	r3, [pc, #260]	; (8008928 <xTaskResumeAll+0x114>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10a      	bne.n	8008840 <xTaskResumeAll+0x2c>
	__asm volatile
 800882a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882e:	f383 8811 	msr	BASEPRI, r3
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	f3bf 8f4f 	dsb	sy
 800883a:	603b      	str	r3, [r7, #0]
}
 800883c:	bf00      	nop
 800883e:	e7fe      	b.n	800883e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008840:	f000 fbec 	bl	800901c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008844:	4b38      	ldr	r3, [pc, #224]	; (8008928 <xTaskResumeAll+0x114>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3b01      	subs	r3, #1
 800884a:	4a37      	ldr	r2, [pc, #220]	; (8008928 <xTaskResumeAll+0x114>)
 800884c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800884e:	4b36      	ldr	r3, [pc, #216]	; (8008928 <xTaskResumeAll+0x114>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d161      	bne.n	800891a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008856:	4b35      	ldr	r3, [pc, #212]	; (800892c <xTaskResumeAll+0x118>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d05d      	beq.n	800891a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800885e:	e02e      	b.n	80088be <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008860:	4b33      	ldr	r3, [pc, #204]	; (8008930 <xTaskResumeAll+0x11c>)
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3318      	adds	r3, #24
 800886c:	4618      	mov	r0, r3
 800886e:	f7ff fd7c 	bl	800836a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	3304      	adds	r3, #4
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff fd77 	bl	800836a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008880:	2201      	movs	r2, #1
 8008882:	409a      	lsls	r2, r3
 8008884:	4b2b      	ldr	r3, [pc, #172]	; (8008934 <xTaskResumeAll+0x120>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4313      	orrs	r3, r2
 800888a:	4a2a      	ldr	r2, [pc, #168]	; (8008934 <xTaskResumeAll+0x120>)
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008892:	4613      	mov	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4a27      	ldr	r2, [pc, #156]	; (8008938 <xTaskResumeAll+0x124>)
 800889c:	441a      	add	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3304      	adds	r3, #4
 80088a2:	4619      	mov	r1, r3
 80088a4:	4610      	mov	r0, r2
 80088a6:	f7ff fd05 	bl	80082b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ae:	4b23      	ldr	r3, [pc, #140]	; (800893c <xTaskResumeAll+0x128>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d302      	bcc.n	80088be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80088b8:	4b21      	ldr	r3, [pc, #132]	; (8008940 <xTaskResumeAll+0x12c>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088be:	4b1c      	ldr	r3, [pc, #112]	; (8008930 <xTaskResumeAll+0x11c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1cc      	bne.n	8008860 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088cc:	f000 fa0c 	bl	8008ce8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80088d0:	4b1c      	ldr	r3, [pc, #112]	; (8008944 <xTaskResumeAll+0x130>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d010      	beq.n	80088fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088dc:	f000 f836 	bl	800894c <xTaskIncrementTick>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80088e6:	4b16      	ldr	r3, [pc, #88]	; (8008940 <xTaskResumeAll+0x12c>)
 80088e8:	2201      	movs	r2, #1
 80088ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3b01      	subs	r3, #1
 80088f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1f1      	bne.n	80088dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80088f8:	4b12      	ldr	r3, [pc, #72]	; (8008944 <xTaskResumeAll+0x130>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088fe:	4b10      	ldr	r3, [pc, #64]	; (8008940 <xTaskResumeAll+0x12c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d009      	beq.n	800891a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008906:	2301      	movs	r3, #1
 8008908:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800890a:	4b0f      	ldr	r3, [pc, #60]	; (8008948 <xTaskResumeAll+0x134>)
 800890c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	f3bf 8f4f 	dsb	sy
 8008916:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800891a:	f000 fbaf 	bl	800907c <vPortExitCritical>

	return xAlreadyYielded;
 800891e:	68bb      	ldr	r3, [r7, #8]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	20000598 	.word	0x20000598
 800892c:	20000570 	.word	0x20000570
 8008930:	20000530 	.word	0x20000530
 8008934:	20000578 	.word	0x20000578
 8008938:	20000474 	.word	0x20000474
 800893c:	20000470 	.word	0x20000470
 8008940:	20000584 	.word	0x20000584
 8008944:	20000580 	.word	0x20000580
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008952:	2300      	movs	r3, #0
 8008954:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008956:	4b51      	ldr	r3, [pc, #324]	; (8008a9c <xTaskIncrementTick+0x150>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	f040 808d 	bne.w	8008a7a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008960:	4b4f      	ldr	r3, [pc, #316]	; (8008aa0 <xTaskIncrementTick+0x154>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3301      	adds	r3, #1
 8008966:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008968:	4a4d      	ldr	r2, [pc, #308]	; (8008aa0 <xTaskIncrementTick+0x154>)
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d120      	bne.n	80089b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008974:	4b4b      	ldr	r3, [pc, #300]	; (8008aa4 <xTaskIncrementTick+0x158>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <xTaskIncrementTick+0x48>
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	603b      	str	r3, [r7, #0]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <xTaskIncrementTick+0x46>
 8008994:	4b43      	ldr	r3, [pc, #268]	; (8008aa4 <xTaskIncrementTick+0x158>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	4b43      	ldr	r3, [pc, #268]	; (8008aa8 <xTaskIncrementTick+0x15c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a41      	ldr	r2, [pc, #260]	; (8008aa4 <xTaskIncrementTick+0x158>)
 80089a0:	6013      	str	r3, [r2, #0]
 80089a2:	4a41      	ldr	r2, [pc, #260]	; (8008aa8 <xTaskIncrementTick+0x15c>)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	4b40      	ldr	r3, [pc, #256]	; (8008aac <xTaskIncrementTick+0x160>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3301      	adds	r3, #1
 80089ae:	4a3f      	ldr	r2, [pc, #252]	; (8008aac <xTaskIncrementTick+0x160>)
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	f000 f999 	bl	8008ce8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089b6:	4b3e      	ldr	r3, [pc, #248]	; (8008ab0 <xTaskIncrementTick+0x164>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d34d      	bcc.n	8008a5c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089c0:	4b38      	ldr	r3, [pc, #224]	; (8008aa4 <xTaskIncrementTick+0x158>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <xTaskIncrementTick+0x82>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <xTaskIncrementTick+0x84>
 80089ce:	2300      	movs	r3, #0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d004      	beq.n	80089de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089d4:	4b36      	ldr	r3, [pc, #216]	; (8008ab0 <xTaskIncrementTick+0x164>)
 80089d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089da:	601a      	str	r2, [r3, #0]
					break;
 80089dc:	e03e      	b.n	8008a5c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80089de:	4b31      	ldr	r3, [pc, #196]	; (8008aa4 <xTaskIncrementTick+0x158>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d203      	bcs.n	80089fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089f6:	4a2e      	ldr	r2, [pc, #184]	; (8008ab0 <xTaskIncrementTick+0x164>)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6013      	str	r3, [r2, #0]
						break;
 80089fc:	e02e      	b.n	8008a5c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	3304      	adds	r3, #4
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff fcb1 	bl	800836a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d004      	beq.n	8008a1a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	3318      	adds	r3, #24
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff fca8 	bl	800836a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1e:	2201      	movs	r2, #1
 8008a20:	409a      	lsls	r2, r3
 8008a22:	4b24      	ldr	r3, [pc, #144]	; (8008ab4 <xTaskIncrementTick+0x168>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	4a22      	ldr	r2, [pc, #136]	; (8008ab4 <xTaskIncrementTick+0x168>)
 8008a2a:	6013      	str	r3, [r2, #0]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4a1f      	ldr	r2, [pc, #124]	; (8008ab8 <xTaskIncrementTick+0x16c>)
 8008a3a:	441a      	add	r2, r3
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	3304      	adds	r3, #4
 8008a40:	4619      	mov	r1, r3
 8008a42:	4610      	mov	r0, r2
 8008a44:	f7ff fc36 	bl	80082b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4c:	4b1b      	ldr	r3, [pc, #108]	; (8008abc <xTaskIncrementTick+0x170>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d3b4      	bcc.n	80089c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008a56:	2301      	movs	r3, #1
 8008a58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a5a:	e7b1      	b.n	80089c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a5c:	4b17      	ldr	r3, [pc, #92]	; (8008abc <xTaskIncrementTick+0x170>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a62:	4915      	ldr	r1, [pc, #84]	; (8008ab8 <xTaskIncrementTick+0x16c>)
 8008a64:	4613      	mov	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	440b      	add	r3, r1
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d907      	bls.n	8008a84 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008a74:	2301      	movs	r3, #1
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	e004      	b.n	8008a84 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008a7a:	4b11      	ldr	r3, [pc, #68]	; (8008ac0 <xTaskIncrementTick+0x174>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	4a0f      	ldr	r2, [pc, #60]	; (8008ac0 <xTaskIncrementTick+0x174>)
 8008a82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008a84:	4b0f      	ldr	r3, [pc, #60]	; (8008ac4 <xTaskIncrementTick+0x178>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008a90:	697b      	ldr	r3, [r7, #20]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	20000598 	.word	0x20000598
 8008aa0:	20000574 	.word	0x20000574
 8008aa4:	20000528 	.word	0x20000528
 8008aa8:	2000052c 	.word	0x2000052c
 8008aac:	20000588 	.word	0x20000588
 8008ab0:	20000590 	.word	0x20000590
 8008ab4:	20000578 	.word	0x20000578
 8008ab8:	20000474 	.word	0x20000474
 8008abc:	20000470 	.word	0x20000470
 8008ac0:	20000580 	.word	0x20000580
 8008ac4:	20000584 	.word	0x20000584

08008ac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b087      	sub	sp, #28
 8008acc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ace:	4b26      	ldr	r3, [pc, #152]	; (8008b68 <vTaskSwitchContext+0xa0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ad6:	4b25      	ldr	r3, [pc, #148]	; (8008b6c <vTaskSwitchContext+0xa4>)
 8008ad8:	2201      	movs	r2, #1
 8008ada:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008adc:	e03f      	b.n	8008b5e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008ade:	4b23      	ldr	r3, [pc, #140]	; (8008b6c <vTaskSwitchContext+0xa4>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008ae4:	4b22      	ldr	r3, [pc, #136]	; (8008b70 <vTaskSwitchContext+0xa8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	fab3 f383 	clz	r3, r3
 8008af0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008af2:	7afb      	ldrb	r3, [r7, #11]
 8008af4:	f1c3 031f 	rsb	r3, r3, #31
 8008af8:	617b      	str	r3, [r7, #20]
 8008afa:	491e      	ldr	r1, [pc, #120]	; (8008b74 <vTaskSwitchContext+0xac>)
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	4613      	mov	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	440b      	add	r3, r1
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	607b      	str	r3, [r7, #4]
}
 8008b20:	bf00      	nop
 8008b22:	e7fe      	b.n	8008b22 <vTaskSwitchContext+0x5a>
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4a11      	ldr	r2, [pc, #68]	; (8008b74 <vTaskSwitchContext+0xac>)
 8008b30:	4413      	add	r3, r2
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	685a      	ldr	r2, [r3, #4]
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	605a      	str	r2, [r3, #4]
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	3308      	adds	r3, #8
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d104      	bne.n	8008b54 <vTaskSwitchContext+0x8c>
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	605a      	str	r2, [r3, #4]
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	4a07      	ldr	r2, [pc, #28]	; (8008b78 <vTaskSwitchContext+0xb0>)
 8008b5c:	6013      	str	r3, [r2, #0]
}
 8008b5e:	bf00      	nop
 8008b60:	371c      	adds	r7, #28
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bc80      	pop	{r7}
 8008b66:	4770      	bx	lr
 8008b68:	20000598 	.word	0x20000598
 8008b6c:	20000584 	.word	0x20000584
 8008b70:	20000578 	.word	0x20000578
 8008b74:	20000474 	.word	0x20000474
 8008b78:	20000470 	.word	0x20000470

08008b7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b84:	f000 f852 	bl	8008c2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b88:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <prvIdleTask+0x28>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d9f9      	bls.n	8008b84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b90:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <prvIdleTask+0x2c>)
 8008b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ba0:	e7f0      	b.n	8008b84 <prvIdleTask+0x8>
 8008ba2:	bf00      	nop
 8008ba4:	20000474 	.word	0x20000474
 8008ba8:	e000ed04 	.word	0xe000ed04

08008bac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	607b      	str	r3, [r7, #4]
 8008bb6:	e00c      	b.n	8008bd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	4613      	mov	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	4413      	add	r3, r2
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4a12      	ldr	r2, [pc, #72]	; (8008c0c <prvInitialiseTaskLists+0x60>)
 8008bc4:	4413      	add	r3, r2
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff fb49 	bl	800825e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	607b      	str	r3, [r7, #4]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b06      	cmp	r3, #6
 8008bd6:	d9ef      	bls.n	8008bb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bd8:	480d      	ldr	r0, [pc, #52]	; (8008c10 <prvInitialiseTaskLists+0x64>)
 8008bda:	f7ff fb40 	bl	800825e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008bde:	480d      	ldr	r0, [pc, #52]	; (8008c14 <prvInitialiseTaskLists+0x68>)
 8008be0:	f7ff fb3d 	bl	800825e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008be4:	480c      	ldr	r0, [pc, #48]	; (8008c18 <prvInitialiseTaskLists+0x6c>)
 8008be6:	f7ff fb3a 	bl	800825e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008bea:	480c      	ldr	r0, [pc, #48]	; (8008c1c <prvInitialiseTaskLists+0x70>)
 8008bec:	f7ff fb37 	bl	800825e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008bf0:	480b      	ldr	r0, [pc, #44]	; (8008c20 <prvInitialiseTaskLists+0x74>)
 8008bf2:	f7ff fb34 	bl	800825e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008bf6:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <prvInitialiseTaskLists+0x78>)
 8008bf8:	4a05      	ldr	r2, [pc, #20]	; (8008c10 <prvInitialiseTaskLists+0x64>)
 8008bfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008bfc:	4b0a      	ldr	r3, [pc, #40]	; (8008c28 <prvInitialiseTaskLists+0x7c>)
 8008bfe:	4a05      	ldr	r2, [pc, #20]	; (8008c14 <prvInitialiseTaskLists+0x68>)
 8008c00:	601a      	str	r2, [r3, #0]
}
 8008c02:	bf00      	nop
 8008c04:	3708      	adds	r7, #8
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	20000474 	.word	0x20000474
 8008c10:	20000500 	.word	0x20000500
 8008c14:	20000514 	.word	0x20000514
 8008c18:	20000530 	.word	0x20000530
 8008c1c:	20000544 	.word	0x20000544
 8008c20:	2000055c 	.word	0x2000055c
 8008c24:	20000528 	.word	0x20000528
 8008c28:	2000052c 	.word	0x2000052c

08008c2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c32:	e019      	b.n	8008c68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c34:	f000 f9f2 	bl	800901c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008c38:	4b10      	ldr	r3, [pc, #64]	; (8008c7c <prvCheckTasksWaitingTermination+0x50>)
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3304      	adds	r3, #4
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff fb90 	bl	800836a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c4a:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <prvCheckTasksWaitingTermination+0x54>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	4a0b      	ldr	r2, [pc, #44]	; (8008c80 <prvCheckTasksWaitingTermination+0x54>)
 8008c52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c54:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <prvCheckTasksWaitingTermination+0x58>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	4a0a      	ldr	r2, [pc, #40]	; (8008c84 <prvCheckTasksWaitingTermination+0x58>)
 8008c5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c5e:	f000 fa0d 	bl	800907c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f810 	bl	8008c88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c68:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <prvCheckTasksWaitingTermination+0x58>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1e1      	bne.n	8008c34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000544 	.word	0x20000544
 8008c80:	20000570 	.word	0x20000570
 8008c84:	20000558 	.word	0x20000558

08008c88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d108      	bne.n	8008cac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fb42 	bl	8009328 <vPortFree>
				vPortFree( pxTCB );
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fb3f 	bl	8009328 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008caa:	e018      	b.n	8008cde <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d103      	bne.n	8008cbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fb36 	bl	8009328 <vPortFree>
	}
 8008cbc:	e00f      	b.n	8008cde <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d00a      	beq.n	8008cde <prvDeleteTCB+0x56>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	60fb      	str	r3, [r7, #12]
}
 8008cda:	bf00      	nop
 8008cdc:	e7fe      	b.n	8008cdc <prvDeleteTCB+0x54>
	}
 8008cde:	bf00      	nop
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cee:	4b0e      	ldr	r3, [pc, #56]	; (8008d28 <prvResetNextTaskUnblockTime+0x40>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <prvResetNextTaskUnblockTime+0x14>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e000      	b.n	8008cfe <prvResetNextTaskUnblockTime+0x16>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d004      	beq.n	8008d0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d02:	4b0a      	ldr	r3, [pc, #40]	; (8008d2c <prvResetNextTaskUnblockTime+0x44>)
 8008d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d0a:	e008      	b.n	8008d1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <prvResetNextTaskUnblockTime+0x40>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	4a04      	ldr	r2, [pc, #16]	; (8008d2c <prvResetNextTaskUnblockTime+0x44>)
 8008d1c:	6013      	str	r3, [r2, #0]
}
 8008d1e:	bf00      	nop
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bc80      	pop	{r7}
 8008d26:	4770      	bx	lr
 8008d28:	20000528 	.word	0x20000528
 8008d2c:	20000590 	.word	0x20000590

08008d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d36:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <xTaskGetSchedulerState+0x34>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d102      	bne.n	8008d44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	607b      	str	r3, [r7, #4]
 8008d42:	e008      	b.n	8008d56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d44:	4b08      	ldr	r3, [pc, #32]	; (8008d68 <xTaskGetSchedulerState+0x38>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d102      	bne.n	8008d52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	607b      	str	r3, [r7, #4]
 8008d50:	e001      	b.n	8008d56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d52:	2300      	movs	r3, #0
 8008d54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d56:	687b      	ldr	r3, [r7, #4]
	}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bc80      	pop	{r7}
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	2000057c 	.word	0x2000057c
 8008d68:	20000598 	.word	0x20000598

08008d6c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d76:	4b29      	ldr	r3, [pc, #164]	; (8008e1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d7c:	4b28      	ldr	r3, [pc, #160]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff faf1 	bl	800836a <uxListRemove>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10b      	bne.n	8008da6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008d8e:	4b24      	ldr	r3, [pc, #144]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	2201      	movs	r2, #1
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	43da      	mvns	r2, r3
 8008d9c:	4b21      	ldr	r3, [pc, #132]	; (8008e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4013      	ands	r3, r2
 8008da2:	4a20      	ldr	r2, [pc, #128]	; (8008e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008da4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dac:	d10a      	bne.n	8008dc4 <prvAddCurrentTaskToDelayedList+0x58>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d007      	beq.n	8008dc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008db4:	4b1a      	ldr	r3, [pc, #104]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3304      	adds	r3, #4
 8008dba:	4619      	mov	r1, r3
 8008dbc:	481a      	ldr	r0, [pc, #104]	; (8008e28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008dbe:	f7ff fa79 	bl	80082b4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008dc2:	e026      	b.n	8008e12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4413      	add	r3, r2
 8008dca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008dcc:	4b14      	ldr	r3, [pc, #80]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d209      	bcs.n	8008df0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ddc:	4b13      	ldr	r3, [pc, #76]	; (8008e2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	3304      	adds	r3, #4
 8008de6:	4619      	mov	r1, r3
 8008de8:	4610      	mov	r0, r2
 8008dea:	f7ff fa86 	bl	80082fa <vListInsert>
}
 8008dee:	e010      	b.n	8008e12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008df0:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	4b0a      	ldr	r3, [pc, #40]	; (8008e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3304      	adds	r3, #4
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	f7ff fa7c 	bl	80082fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e02:	4b0c      	ldr	r3, [pc, #48]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d202      	bcs.n	8008e12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008e0c:	4a09      	ldr	r2, [pc, #36]	; (8008e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	6013      	str	r3, [r2, #0]
}
 8008e12:	bf00      	nop
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000574 	.word	0x20000574
 8008e20:	20000470 	.word	0x20000470
 8008e24:	20000578 	.word	0x20000578
 8008e28:	2000055c 	.word	0x2000055c
 8008e2c:	2000052c 	.word	0x2000052c
 8008e30:	20000528 	.word	0x20000528
 8008e34:	20000590 	.word	0x20000590

08008e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	3b04      	subs	r3, #4
 8008e48:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3b04      	subs	r3, #4
 8008e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f023 0201 	bic.w	r2, r3, #1
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3b04      	subs	r3, #4
 8008e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e68:	4a08      	ldr	r2, [pc, #32]	; (8008e8c <pxPortInitialiseStack+0x54>)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3b14      	subs	r3, #20
 8008e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3b20      	subs	r3, #32
 8008e7e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e80:	68fb      	ldr	r3, [r7, #12]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bc80      	pop	{r7}
 8008e8a:	4770      	bx	lr
 8008e8c:	08008e91 	.word	0x08008e91

08008e90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008e96:	2300      	movs	r3, #0
 8008e98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e9a:	4b12      	ldr	r3, [pc, #72]	; (8008ee4 <prvTaskExitError+0x54>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ea2:	d00a      	beq.n	8008eba <prvTaskExitError+0x2a>
	__asm volatile
 8008ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea8:	f383 8811 	msr	BASEPRI, r3
 8008eac:	f3bf 8f6f 	isb	sy
 8008eb0:	f3bf 8f4f 	dsb	sy
 8008eb4:	60fb      	str	r3, [r7, #12]
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <prvTaskExitError+0x28>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	60bb      	str	r3, [r7, #8]
}
 8008ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ece:	bf00      	nop
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d0fc      	beq.n	8008ed0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ed6:	bf00      	nop
 8008ed8:	bf00      	nop
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bc80      	pop	{r7}
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	20000108 	.word	0x20000108
	...

08008ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ef0:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <pxCurrentTCBConst2>)
 8008ef2:	6819      	ldr	r1, [r3, #0]
 8008ef4:	6808      	ldr	r0, [r1, #0]
 8008ef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008efa:	f380 8809 	msr	PSP, r0
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f04f 0000 	mov.w	r0, #0
 8008f06:	f380 8811 	msr	BASEPRI, r0
 8008f0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008f0e:	4770      	bx	lr

08008f10 <pxCurrentTCBConst2>:
 8008f10:	20000470 	.word	0x20000470
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop

08008f18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008f18:	4806      	ldr	r0, [pc, #24]	; (8008f34 <prvPortStartFirstTask+0x1c>)
 8008f1a:	6800      	ldr	r0, [r0, #0]
 8008f1c:	6800      	ldr	r0, [r0, #0]
 8008f1e:	f380 8808 	msr	MSP, r0
 8008f22:	b662      	cpsie	i
 8008f24:	b661      	cpsie	f
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	df00      	svc	0
 8008f30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f32:	bf00      	nop
 8008f34:	e000ed08 	.word	0xe000ed08

08008f38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f3e:	4b32      	ldr	r3, [pc, #200]	; (8009008 <xPortStartScheduler+0xd0>)
 8008f40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	22ff      	movs	r2, #255	; 0xff
 8008f4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f58:	78fb      	ldrb	r3, [r7, #3]
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	4b2a      	ldr	r3, [pc, #168]	; (800900c <xPortStartScheduler+0xd4>)
 8008f64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f66:	4b2a      	ldr	r3, [pc, #168]	; (8009010 <xPortStartScheduler+0xd8>)
 8008f68:	2207      	movs	r2, #7
 8008f6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f6c:	e009      	b.n	8008f82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008f6e:	4b28      	ldr	r3, [pc, #160]	; (8009010 <xPortStartScheduler+0xd8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	4a26      	ldr	r2, [pc, #152]	; (8009010 <xPortStartScheduler+0xd8>)
 8008f76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f78:	78fb      	ldrb	r3, [r7, #3]
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f82:	78fb      	ldrb	r3, [r7, #3]
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f8a:	2b80      	cmp	r3, #128	; 0x80
 8008f8c:	d0ef      	beq.n	8008f6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f8e:	4b20      	ldr	r3, [pc, #128]	; (8009010 <xPortStartScheduler+0xd8>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f1c3 0307 	rsb	r3, r3, #7
 8008f96:	2b04      	cmp	r3, #4
 8008f98:	d00a      	beq.n	8008fb0 <xPortStartScheduler+0x78>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	60bb      	str	r3, [r7, #8]
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fb0:	4b17      	ldr	r3, [pc, #92]	; (8009010 <xPortStartScheduler+0xd8>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	021b      	lsls	r3, r3, #8
 8008fb6:	4a16      	ldr	r2, [pc, #88]	; (8009010 <xPortStartScheduler+0xd8>)
 8008fb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fba:	4b15      	ldr	r3, [pc, #84]	; (8009010 <xPortStartScheduler+0xd8>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fc2:	4a13      	ldr	r2, [pc, #76]	; (8009010 <xPortStartScheduler+0xd8>)
 8008fc4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fce:	4b11      	ldr	r3, [pc, #68]	; (8009014 <xPortStartScheduler+0xdc>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a10      	ldr	r2, [pc, #64]	; (8009014 <xPortStartScheduler+0xdc>)
 8008fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fda:	4b0e      	ldr	r3, [pc, #56]	; (8009014 <xPortStartScheduler+0xdc>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a0d      	ldr	r2, [pc, #52]	; (8009014 <xPortStartScheduler+0xdc>)
 8008fe0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fe4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fe6:	f000 f8b9 	bl	800915c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fea:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <xPortStartScheduler+0xe0>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ff0:	f7ff ff92 	bl	8008f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ff4:	f7ff fd68 	bl	8008ac8 <vTaskSwitchContext>
	prvTaskExitError();
 8008ff8:	f7ff ff4a 	bl	8008e90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	e000e400 	.word	0xe000e400
 800900c:	2000059c 	.word	0x2000059c
 8009010:	200005a0 	.word	0x200005a0
 8009014:	e000ed20 	.word	0xe000ed20
 8009018:	20000108 	.word	0x20000108

0800901c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	607b      	str	r3, [r7, #4]
}
 8009034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009036:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <vPortEnterCritical+0x58>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3301      	adds	r3, #1
 800903c:	4a0d      	ldr	r2, [pc, #52]	; (8009074 <vPortEnterCritical+0x58>)
 800903e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009040:	4b0c      	ldr	r3, [pc, #48]	; (8009074 <vPortEnterCritical+0x58>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d10f      	bne.n	8009068 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009048:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <vPortEnterCritical+0x5c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <vPortEnterCritical+0x4c>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	603b      	str	r3, [r7, #0]
}
 8009064:	bf00      	nop
 8009066:	e7fe      	b.n	8009066 <vPortEnterCritical+0x4a>
	}
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	bc80      	pop	{r7}
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	20000108 	.word	0x20000108
 8009078:	e000ed04 	.word	0xe000ed04

0800907c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009082:	4b11      	ldr	r3, [pc, #68]	; (80090c8 <vPortExitCritical+0x4c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d10a      	bne.n	80090a0 <vPortExitCritical+0x24>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	607b      	str	r3, [r7, #4]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090a0:	4b09      	ldr	r3, [pc, #36]	; (80090c8 <vPortExitCritical+0x4c>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	4a08      	ldr	r2, [pc, #32]	; (80090c8 <vPortExitCritical+0x4c>)
 80090a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090aa:	4b07      	ldr	r3, [pc, #28]	; (80090c8 <vPortExitCritical+0x4c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d105      	bne.n	80090be <vPortExitCritical+0x42>
 80090b2:	2300      	movs	r3, #0
 80090b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090be:	bf00      	nop
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bc80      	pop	{r7}
 80090c6:	4770      	bx	lr
 80090c8:	20000108 	.word	0x20000108
 80090cc:	00000000 	.word	0x00000000

080090d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090d0:	f3ef 8009 	mrs	r0, PSP
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	4b0d      	ldr	r3, [pc, #52]	; (8009110 <pxCurrentTCBConst>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80090e0:	6010      	str	r0, [r2, #0]
 80090e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80090e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090ea:	f380 8811 	msr	BASEPRI, r0
 80090ee:	f7ff fceb 	bl	8008ac8 <vTaskSwitchContext>
 80090f2:	f04f 0000 	mov.w	r0, #0
 80090f6:	f380 8811 	msr	BASEPRI, r0
 80090fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80090fe:	6819      	ldr	r1, [r3, #0]
 8009100:	6808      	ldr	r0, [r1, #0]
 8009102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009106:	f380 8809 	msr	PSP, r0
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	4770      	bx	lr

08009110 <pxCurrentTCBConst>:
 8009110:	20000470 	.word	0x20000470
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop

08009118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	607b      	str	r3, [r7, #4]
}
 8009130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009132:	f7ff fc0b 	bl	800894c <xTaskIncrementTick>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800913c:	4b06      	ldr	r3, [pc, #24]	; (8009158 <xPortSysTickHandler+0x40>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	2300      	movs	r3, #0
 8009146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f383 8811 	msr	BASEPRI, r3
}
 800914e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	e000ed04 	.word	0xe000ed04

0800915c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <vPortSetupTimerInterrupt+0x30>)
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009166:	4b0a      	ldr	r3, [pc, #40]	; (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800916c:	4b09      	ldr	r3, [pc, #36]	; (8009194 <vPortSetupTimerInterrupt+0x38>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a09      	ldr	r2, [pc, #36]	; (8009198 <vPortSetupTimerInterrupt+0x3c>)
 8009172:	fba2 2303 	umull	r2, r3, r2, r3
 8009176:	099b      	lsrs	r3, r3, #6
 8009178:	4a08      	ldr	r2, [pc, #32]	; (800919c <vPortSetupTimerInterrupt+0x40>)
 800917a:	3b01      	subs	r3, #1
 800917c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800917e:	4b03      	ldr	r3, [pc, #12]	; (800918c <vPortSetupTimerInterrupt+0x30>)
 8009180:	2207      	movs	r2, #7
 8009182:	601a      	str	r2, [r3, #0]
}
 8009184:	bf00      	nop
 8009186:	46bd      	mov	sp, r7
 8009188:	bc80      	pop	{r7}
 800918a:	4770      	bx	lr
 800918c:	e000e010 	.word	0xe000e010
 8009190:	e000e018 	.word	0xe000e018
 8009194:	20000000 	.word	0x20000000
 8009198:	10624dd3 	.word	0x10624dd3
 800919c:	e000e014 	.word	0xe000e014

080091a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	; 0x28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091a8:	2300      	movs	r3, #0
 80091aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091ac:	f7ff fb24 	bl	80087f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091b0:	4b58      	ldr	r3, [pc, #352]	; (8009314 <pvPortMalloc+0x174>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d101      	bne.n	80091bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091b8:	f000 f910 	bl	80093dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091bc:	4b56      	ldr	r3, [pc, #344]	; (8009318 <pvPortMalloc+0x178>)
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4013      	ands	r3, r2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f040 808e 	bne.w	80092e6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d01d      	beq.n	800920c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80091d0:	2208      	movs	r2, #8
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4413      	add	r3, r2
 80091d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f003 0307 	and.w	r3, r3, #7
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d014      	beq.n	800920c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f023 0307 	bic.w	r3, r3, #7
 80091e8:	3308      	adds	r3, #8
 80091ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f003 0307 	and.w	r3, r3, #7
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <pvPortMalloc+0x6c>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	617b      	str	r3, [r7, #20]
}
 8009208:	bf00      	nop
 800920a:	e7fe      	b.n	800920a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d069      	beq.n	80092e6 <pvPortMalloc+0x146>
 8009212:	4b42      	ldr	r3, [pc, #264]	; (800931c <pvPortMalloc+0x17c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	429a      	cmp	r2, r3
 800921a:	d864      	bhi.n	80092e6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800921c:	4b40      	ldr	r3, [pc, #256]	; (8009320 <pvPortMalloc+0x180>)
 800921e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009220:	4b3f      	ldr	r3, [pc, #252]	; (8009320 <pvPortMalloc+0x180>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009226:	e004      	b.n	8009232 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	429a      	cmp	r2, r3
 800923a:	d903      	bls.n	8009244 <pvPortMalloc+0xa4>
 800923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1f1      	bne.n	8009228 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009244:	4b33      	ldr	r3, [pc, #204]	; (8009314 <pvPortMalloc+0x174>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800924a:	429a      	cmp	r2, r3
 800924c:	d04b      	beq.n	80092e6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800924e:	6a3b      	ldr	r3, [r7, #32]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2208      	movs	r2, #8
 8009254:	4413      	add	r3, r2
 8009256:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	1ad2      	subs	r2, r2, r3
 8009268:	2308      	movs	r3, #8
 800926a:	005b      	lsls	r3, r3, #1
 800926c:	429a      	cmp	r2, r3
 800926e:	d91f      	bls.n	80092b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4413      	add	r3, r2
 8009276:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	f003 0307 	and.w	r3, r3, #7
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <pvPortMalloc+0xf8>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	613b      	str	r3, [r7, #16]
}
 8009294:	bf00      	nop
 8009296:	e7fe      	b.n	8009296 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	1ad2      	subs	r2, r2, r3
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092aa:	69b8      	ldr	r0, [r7, #24]
 80092ac:	f000 f8f8 	bl	80094a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092b0:	4b1a      	ldr	r3, [pc, #104]	; (800931c <pvPortMalloc+0x17c>)
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	4a18      	ldr	r2, [pc, #96]	; (800931c <pvPortMalloc+0x17c>)
 80092bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092be:	4b17      	ldr	r3, [pc, #92]	; (800931c <pvPortMalloc+0x17c>)
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	4b18      	ldr	r3, [pc, #96]	; (8009324 <pvPortMalloc+0x184>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d203      	bcs.n	80092d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092ca:	4b14      	ldr	r3, [pc, #80]	; (800931c <pvPortMalloc+0x17c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a15      	ldr	r2, [pc, #84]	; (8009324 <pvPortMalloc+0x184>)
 80092d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	685a      	ldr	r2, [r3, #4]
 80092d6:	4b10      	ldr	r3, [pc, #64]	; (8009318 <pvPortMalloc+0x178>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	431a      	orrs	r2, r3
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80092e6:	f7ff fa95 	bl	8008814 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	f003 0307 	and.w	r3, r3, #7
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00a      	beq.n	800930a <pvPortMalloc+0x16a>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	60fb      	str	r3, [r7, #12]
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <pvPortMalloc+0x168>
	return pvReturn;
 800930a:	69fb      	ldr	r3, [r7, #28]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3728      	adds	r7, #40	; 0x28
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	200011ac 	.word	0x200011ac
 8009318:	200011b8 	.word	0x200011b8
 800931c:	200011b0 	.word	0x200011b0
 8009320:	200011a4 	.word	0x200011a4
 8009324:	200011b4 	.word	0x200011b4

08009328 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b086      	sub	sp, #24
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d048      	beq.n	80093cc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800933a:	2308      	movs	r3, #8
 800933c:	425b      	negs	r3, r3
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	4413      	add	r3, r2
 8009342:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	4b21      	ldr	r3, [pc, #132]	; (80093d4 <vPortFree+0xac>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4013      	ands	r3, r2
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10a      	bne.n	800936c <vPortFree+0x44>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	60fb      	str	r3, [r7, #12]
}
 8009368:	bf00      	nop
 800936a:	e7fe      	b.n	800936a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00a      	beq.n	800938a <vPortFree+0x62>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	60bb      	str	r3, [r7, #8]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	4b11      	ldr	r3, [pc, #68]	; (80093d4 <vPortFree+0xac>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4013      	ands	r3, r2
 8009394:	2b00      	cmp	r3, #0
 8009396:	d019      	beq.n	80093cc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d115      	bne.n	80093cc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	685a      	ldr	r2, [r3, #4]
 80093a4:	4b0b      	ldr	r3, [pc, #44]	; (80093d4 <vPortFree+0xac>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	43db      	mvns	r3, r3
 80093aa:	401a      	ands	r2, r3
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093b0:	f7ff fa22 	bl	80087f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	4b07      	ldr	r3, [pc, #28]	; (80093d8 <vPortFree+0xb0>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4413      	add	r3, r2
 80093be:	4a06      	ldr	r2, [pc, #24]	; (80093d8 <vPortFree+0xb0>)
 80093c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093c2:	6938      	ldr	r0, [r7, #16]
 80093c4:	f000 f86c 	bl	80094a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80093c8:	f7ff fa24 	bl	8008814 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093cc:	bf00      	nop
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	200011b8 	.word	0x200011b8
 80093d8:	200011b0 	.word	0x200011b0

080093dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80093e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093e8:	4b27      	ldr	r3, [pc, #156]	; (8009488 <prvHeapInit+0xac>)
 80093ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f003 0307 	and.w	r3, r3, #7
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00c      	beq.n	8009410 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	3307      	adds	r3, #7
 80093fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f023 0307 	bic.w	r3, r3, #7
 8009402:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	4a1f      	ldr	r2, [pc, #124]	; (8009488 <prvHeapInit+0xac>)
 800940c:	4413      	add	r3, r2
 800940e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009414:	4a1d      	ldr	r2, [pc, #116]	; (800948c <prvHeapInit+0xb0>)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800941a:	4b1c      	ldr	r3, [pc, #112]	; (800948c <prvHeapInit+0xb0>)
 800941c:	2200      	movs	r2, #0
 800941e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	4413      	add	r3, r2
 8009426:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009428:	2208      	movs	r2, #8
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	1a9b      	subs	r3, r3, r2
 800942e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f023 0307 	bic.w	r3, r3, #7
 8009436:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4a15      	ldr	r2, [pc, #84]	; (8009490 <prvHeapInit+0xb4>)
 800943c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800943e:	4b14      	ldr	r3, [pc, #80]	; (8009490 <prvHeapInit+0xb4>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2200      	movs	r2, #0
 8009444:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009446:	4b12      	ldr	r3, [pc, #72]	; (8009490 <prvHeapInit+0xb4>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2200      	movs	r2, #0
 800944c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	1ad2      	subs	r2, r2, r3
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800945c:	4b0c      	ldr	r3, [pc, #48]	; (8009490 <prvHeapInit+0xb4>)
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	4a0a      	ldr	r2, [pc, #40]	; (8009494 <prvHeapInit+0xb8>)
 800946a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	4a09      	ldr	r2, [pc, #36]	; (8009498 <prvHeapInit+0xbc>)
 8009472:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009474:	4b09      	ldr	r3, [pc, #36]	; (800949c <prvHeapInit+0xc0>)
 8009476:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800947a:	601a      	str	r2, [r3, #0]
}
 800947c:	bf00      	nop
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	bc80      	pop	{r7}
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	200005a4 	.word	0x200005a4
 800948c:	200011a4 	.word	0x200011a4
 8009490:	200011ac 	.word	0x200011ac
 8009494:	200011b4 	.word	0x200011b4
 8009498:	200011b0 	.word	0x200011b0
 800949c:	200011b8 	.word	0x200011b8

080094a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094a8:	4b27      	ldr	r3, [pc, #156]	; (8009548 <prvInsertBlockIntoFreeList+0xa8>)
 80094aa:	60fb      	str	r3, [r7, #12]
 80094ac:	e002      	b.n	80094b4 <prvInsertBlockIntoFreeList+0x14>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d8f7      	bhi.n	80094ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	4413      	add	r3, r2
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d108      	bne.n	80094e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	685a      	ldr	r2, [r3, #4]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	441a      	add	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	441a      	add	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d118      	bne.n	8009528 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	4b14      	ldr	r3, [pc, #80]	; (800954c <prvInsertBlockIntoFreeList+0xac>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d00d      	beq.n	800951e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	441a      	add	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	601a      	str	r2, [r3, #0]
 800951c:	e008      	b.n	8009530 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800951e:	4b0b      	ldr	r3, [pc, #44]	; (800954c <prvInsertBlockIntoFreeList+0xac>)
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	e003      	b.n	8009530 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	429a      	cmp	r2, r3
 8009536:	d002      	beq.n	800953e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800953e:	bf00      	nop
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	bc80      	pop	{r7}
 8009546:	4770      	bx	lr
 8009548:	200011a4 	.word	0x200011a4
 800954c:	200011ac 	.word	0x200011ac

08009550 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009554:	2200      	movs	r2, #0
 8009556:	490e      	ldr	r1, [pc, #56]	; (8009590 <MX_USB_DEVICE_Init+0x40>)
 8009558:	480e      	ldr	r0, [pc, #56]	; (8009594 <MX_USB_DEVICE_Init+0x44>)
 800955a:	f7fd fd87 	bl	800706c <USBD_Init>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009564:	f7f7 f82e 	bl	80005c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009568:	490b      	ldr	r1, [pc, #44]	; (8009598 <MX_USB_DEVICE_Init+0x48>)
 800956a:	480a      	ldr	r0, [pc, #40]	; (8009594 <MX_USB_DEVICE_Init+0x44>)
 800956c:	f7fd fda9 	bl	80070c2 <USBD_RegisterClass>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009576:	f7f7 f825 	bl	80005c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800957a:	4806      	ldr	r0, [pc, #24]	; (8009594 <MX_USB_DEVICE_Init+0x44>)
 800957c:	f7fd fdba 	bl	80070f4 <USBD_Start>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009586:	f7f7 f81d 	bl	80005c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800958a:	bf00      	nop
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	2000010c 	.word	0x2000010c
 8009594:	200011bc 	.word	0x200011bc
 8009598:	2000000c 	.word	0x2000000c

0800959c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4603      	mov	r3, r0
 80095a4:	6039      	str	r1, [r7, #0]
 80095a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2212      	movs	r2, #18
 80095ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095ae:	4b03      	ldr	r3, [pc, #12]	; (80095bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bc80      	pop	{r7}
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	20000128 	.word	0x20000128

080095c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	4603      	mov	r3, r0
 80095c8:	6039      	str	r1, [r7, #0]
 80095ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2204      	movs	r2, #4
 80095d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095d2:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	bc80      	pop	{r7}
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	2000013c 	.word	0x2000013c

080095e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	4603      	mov	r3, r0
 80095ec:	6039      	str	r1, [r7, #0]
 80095ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d105      	bne.n	8009602 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	4907      	ldr	r1, [pc, #28]	; (8009618 <USBD_FS_ProductStrDescriptor+0x34>)
 80095fa:	4808      	ldr	r0, [pc, #32]	; (800961c <USBD_FS_ProductStrDescriptor+0x38>)
 80095fc:	f7fe fcf2 	bl	8007fe4 <USBD_GetString>
 8009600:	e004      	b.n	800960c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	4904      	ldr	r1, [pc, #16]	; (8009618 <USBD_FS_ProductStrDescriptor+0x34>)
 8009606:	4805      	ldr	r0, [pc, #20]	; (800961c <USBD_FS_ProductStrDescriptor+0x38>)
 8009608:	f7fe fcec 	bl	8007fe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800960c:	4b02      	ldr	r3, [pc, #8]	; (8009618 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	20001480 	.word	0x20001480
 800961c:	08009d64 	.word	0x08009d64

08009620 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	6039      	str	r1, [r7, #0]
 800962a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	4904      	ldr	r1, [pc, #16]	; (8009640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009630:	4804      	ldr	r0, [pc, #16]	; (8009644 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009632:	f7fe fcd7 	bl	8007fe4 <USBD_GetString>
  return USBD_StrDesc;
 8009636:	4b02      	ldr	r3, [pc, #8]	; (8009640 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	20001480 	.word	0x20001480
 8009644:	08009d74 	.word	0x08009d74

08009648 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	6039      	str	r1, [r7, #0]
 8009652:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	221a      	movs	r2, #26
 8009658:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800965a:	f000 f843 	bl	80096e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800965e:	4b02      	ldr	r3, [pc, #8]	; (8009668 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20000140 	.word	0x20000140

0800966c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	4603      	mov	r3, r0
 8009674:	6039      	str	r1, [r7, #0]
 8009676:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009678:	79fb      	ldrb	r3, [r7, #7]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d105      	bne.n	800968a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	4907      	ldr	r1, [pc, #28]	; (80096a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009682:	4808      	ldr	r0, [pc, #32]	; (80096a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009684:	f7fe fcae 	bl	8007fe4 <USBD_GetString>
 8009688:	e004      	b.n	8009694 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	4904      	ldr	r1, [pc, #16]	; (80096a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800968e:	4805      	ldr	r0, [pc, #20]	; (80096a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009690:	f7fe fca8 	bl	8007fe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009694:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20001480 	.word	0x20001480
 80096a4:	08009d88 	.word	0x08009d88

080096a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	4603      	mov	r3, r0
 80096b0:	6039      	str	r1, [r7, #0]
 80096b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d105      	bne.n	80096c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096ba:	683a      	ldr	r2, [r7, #0]
 80096bc:	4907      	ldr	r1, [pc, #28]	; (80096dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096be:	4808      	ldr	r0, [pc, #32]	; (80096e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096c0:	f7fe fc90 	bl	8007fe4 <USBD_GetString>
 80096c4:	e004      	b.n	80096d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	4904      	ldr	r1, [pc, #16]	; (80096dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096ca:	4805      	ldr	r0, [pc, #20]	; (80096e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096cc:	f7fe fc8a 	bl	8007fe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80096d0:	4b02      	ldr	r3, [pc, #8]	; (80096dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20001480 	.word	0x20001480
 80096e0:	08009d94 	.word	0x08009d94

080096e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096ea:	4b0f      	ldr	r3, [pc, #60]	; (8009728 <Get_SerialNum+0x44>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096f0:	4b0e      	ldr	r3, [pc, #56]	; (800972c <Get_SerialNum+0x48>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096f6:	4b0e      	ldr	r3, [pc, #56]	; (8009730 <Get_SerialNum+0x4c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4413      	add	r3, r2
 8009702:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d009      	beq.n	800971e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800970a:	2208      	movs	r2, #8
 800970c:	4909      	ldr	r1, [pc, #36]	; (8009734 <Get_SerialNum+0x50>)
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 f814 	bl	800973c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009714:	2204      	movs	r2, #4
 8009716:	4908      	ldr	r1, [pc, #32]	; (8009738 <Get_SerialNum+0x54>)
 8009718:	68b8      	ldr	r0, [r7, #8]
 800971a:	f000 f80f 	bl	800973c <IntToUnicode>
  }
}
 800971e:	bf00      	nop
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	1ffff7e8 	.word	0x1ffff7e8
 800972c:	1ffff7ec 	.word	0x1ffff7ec
 8009730:	1ffff7f0 	.word	0x1ffff7f0
 8009734:	20000142 	.word	0x20000142
 8009738:	20000152 	.word	0x20000152

0800973c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800973c:	b480      	push	{r7}
 800973e:	b087      	sub	sp, #28
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	4613      	mov	r3, r2
 8009748:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800974e:	2300      	movs	r3, #0
 8009750:	75fb      	strb	r3, [r7, #23]
 8009752:	e027      	b.n	80097a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	0f1b      	lsrs	r3, r3, #28
 8009758:	2b09      	cmp	r3, #9
 800975a:	d80b      	bhi.n	8009774 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	0f1b      	lsrs	r3, r3, #28
 8009760:	b2da      	uxtb	r2, r3
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	005b      	lsls	r3, r3, #1
 8009766:	4619      	mov	r1, r3
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	440b      	add	r3, r1
 800976c:	3230      	adds	r2, #48	; 0x30
 800976e:	b2d2      	uxtb	r2, r2
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	e00a      	b.n	800978a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	0f1b      	lsrs	r3, r3, #28
 8009778:	b2da      	uxtb	r2, r3
 800977a:	7dfb      	ldrb	r3, [r7, #23]
 800977c:	005b      	lsls	r3, r3, #1
 800977e:	4619      	mov	r1, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	440b      	add	r3, r1
 8009784:	3237      	adds	r2, #55	; 0x37
 8009786:	b2d2      	uxtb	r2, r2
 8009788:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	011b      	lsls	r3, r3, #4
 800978e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009790:	7dfb      	ldrb	r3, [r7, #23]
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	3301      	adds	r3, #1
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	4413      	add	r3, r2
 800979a:	2200      	movs	r2, #0
 800979c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	3301      	adds	r3, #1
 80097a2:	75fb      	strb	r3, [r7, #23]
 80097a4:	7dfa      	ldrb	r2, [r7, #23]
 80097a6:	79fb      	ldrb	r3, [r7, #7]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d3d3      	bcc.n	8009754 <IntToUnicode+0x18>
  }
}
 80097ac:	bf00      	nop
 80097ae:	bf00      	nop
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bc80      	pop	{r7}
 80097b6:	4770      	bx	lr

080097b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a0d      	ldr	r2, [pc, #52]	; (80097fc <HAL_PCD_MspInit+0x44>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d113      	bne.n	80097f2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80097ca:	4b0d      	ldr	r3, [pc, #52]	; (8009800 <HAL_PCD_MspInit+0x48>)
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	4a0c      	ldr	r2, [pc, #48]	; (8009800 <HAL_PCD_MspInit+0x48>)
 80097d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80097d4:	61d3      	str	r3, [r2, #28]
 80097d6:	4b0a      	ldr	r3, [pc, #40]	; (8009800 <HAL_PCD_MspInit+0x48>)
 80097d8:	69db      	ldr	r3, [r3, #28]
 80097da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097de:	60fb      	str	r3, [r7, #12]
 80097e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80097e2:	2200      	movs	r2, #0
 80097e4:	2105      	movs	r1, #5
 80097e6:	2014      	movs	r0, #20
 80097e8:	f7f7 f965 	bl	8000ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80097ec:	2014      	movs	r0, #20
 80097ee:	f7f7 f97e 	bl	8000aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80097f2:	bf00      	nop
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	40005c00 	.word	0x40005c00
 8009800:	40021000 	.word	0x40021000

08009804 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009818:	4619      	mov	r1, r3
 800981a:	4610      	mov	r0, r2
 800981c:	f7fd fcb2 	bl	8007184 <USBD_LL_SetupStage>
}
 8009820:	bf00      	nop
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800983a:	78fa      	ldrb	r2, [r7, #3]
 800983c:	6879      	ldr	r1, [r7, #4]
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	00db      	lsls	r3, r3, #3
 8009846:	440b      	add	r3, r1
 8009848:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	78fb      	ldrb	r3, [r7, #3]
 8009850:	4619      	mov	r1, r3
 8009852:	f7fd fce4 	bl	800721e <USBD_LL_DataOutStage>
}
 8009856:	bf00      	nop
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b082      	sub	sp, #8
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	460b      	mov	r3, r1
 8009868:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009870:	78fa      	ldrb	r2, [r7, #3]
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	4613      	mov	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	00db      	lsls	r3, r3, #3
 800987c:	440b      	add	r3, r1
 800987e:	333c      	adds	r3, #60	; 0x3c
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	78fb      	ldrb	r3, [r7, #3]
 8009884:	4619      	mov	r1, r3
 8009886:	f7fd fd3b 	bl	8007300 <USBD_LL_DataInStage>
}
 800988a:	bf00      	nop
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fd fe4b 	bl	800753c <USBD_LL_SOF>
}
 80098a6:	bf00      	nop
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098b6:	2301      	movs	r3, #1
 80098b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d001      	beq.n	80098c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80098c2:	f7f6 fe7f 	bl	80005c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80098cc:	7bfa      	ldrb	r2, [r7, #15]
 80098ce:	4611      	mov	r1, r2
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7fd fdfb 	bl	80074cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80098dc:	4618      	mov	r0, r3
 80098de:	f7fd fdb4 	bl	800744a <USBD_LL_Reset>
}
 80098e2:	bf00      	nop
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
	...

080098ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fd fdf5 	bl	80074ea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	699b      	ldr	r3, [r3, #24]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d005      	beq.n	8009914 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009908:	4b04      	ldr	r3, [pc, #16]	; (800991c <HAL_PCD_SuspendCallback+0x30>)
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	4a03      	ldr	r2, [pc, #12]	; (800991c <HAL_PCD_SuspendCallback+0x30>)
 800990e:	f043 0306 	orr.w	r3, r3, #6
 8009912:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009914:	bf00      	nop
 8009916:	3708      	adds	r7, #8
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	e000ed00 	.word	0xe000ed00

08009920 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800992e:	4618      	mov	r0, r3
 8009930:	f7fd fdef 	bl	8007512 <USBD_LL_Resume>
}
 8009934:	bf00      	nop
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009944:	4a1f      	ldr	r2, [pc, #124]	; (80099c4 <USBD_LL_Init+0x88>)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <USBD_LL_Init+0x88>)
 8009950:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009954:	4b1b      	ldr	r3, [pc, #108]	; (80099c4 <USBD_LL_Init+0x88>)
 8009956:	4a1c      	ldr	r2, [pc, #112]	; (80099c8 <USBD_LL_Init+0x8c>)
 8009958:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800995a:	4b1a      	ldr	r3, [pc, #104]	; (80099c4 <USBD_LL_Init+0x88>)
 800995c:	2208      	movs	r2, #8
 800995e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009960:	4b18      	ldr	r3, [pc, #96]	; (80099c4 <USBD_LL_Init+0x88>)
 8009962:	2202      	movs	r2, #2
 8009964:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009966:	4b17      	ldr	r3, [pc, #92]	; (80099c4 <USBD_LL_Init+0x88>)
 8009968:	2200      	movs	r2, #0
 800996a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800996c:	4b15      	ldr	r3, [pc, #84]	; (80099c4 <USBD_LL_Init+0x88>)
 800996e:	2200      	movs	r2, #0
 8009970:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009972:	4b14      	ldr	r3, [pc, #80]	; (80099c4 <USBD_LL_Init+0x88>)
 8009974:	2200      	movs	r2, #0
 8009976:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009978:	4812      	ldr	r0, [pc, #72]	; (80099c4 <USBD_LL_Init+0x88>)
 800997a:	f7f7 fb21 	bl	8000fc0 <HAL_PCD_Init>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009984:	f7f6 fe1e 	bl	80005c4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800998e:	2318      	movs	r3, #24
 8009990:	2200      	movs	r2, #0
 8009992:	2100      	movs	r1, #0
 8009994:	f7f9 f829 	bl	80029ea <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800999e:	2358      	movs	r3, #88	; 0x58
 80099a0:	2200      	movs	r2, #0
 80099a2:	2180      	movs	r1, #128	; 0x80
 80099a4:	f7f9 f821 	bl	80029ea <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80099ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099b2:	2200      	movs	r2, #0
 80099b4:	2181      	movs	r1, #129	; 0x81
 80099b6:	f7f9 f818 	bl	80029ea <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20001680 	.word	0x20001680
 80099c8:	40005c00 	.word	0x40005c00

080099cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7f7 fbeb 	bl	80011be <HAL_PCD_Start>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 f93c 	bl	8009c6c <USBD_Get_USB_Status>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	4608      	mov	r0, r1
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	461a      	mov	r2, r3
 8009a10:	4603      	mov	r3, r0
 8009a12:	70fb      	strb	r3, [r7, #3]
 8009a14:	460b      	mov	r3, r1
 8009a16:	70bb      	strb	r3, [r7, #2]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a2a:	78bb      	ldrb	r3, [r7, #2]
 8009a2c:	883a      	ldrh	r2, [r7, #0]
 8009a2e:	78f9      	ldrb	r1, [r7, #3]
 8009a30:	f7f7 fd40 	bl	80014b4 <HAL_PCD_EP_Open>
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 f916 	bl	8009c6c <USBD_Get_USB_Status>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	460b      	mov	r3, r1
 8009a58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a68:	78fa      	ldrb	r2, [r7, #3]
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7f7 fd7e 	bl	800156e <HAL_PCD_EP_Close>
 8009a72:	4603      	mov	r3, r0
 8009a74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 f8f7 	bl	8009c6c <USBD_Get_USB_Status>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	460b      	mov	r3, r1
 8009a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009aa6:	78fa      	ldrb	r2, [r7, #3]
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7f7 fe0f 	bl	80016ce <HAL_PCD_EP_SetStall>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 f8d8 	bl	8009c6c <USBD_Get_USB_Status>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ae4:	78fa      	ldrb	r2, [r7, #3]
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7f7 fe50 	bl	800178e <HAL_PCD_EP_ClrStall>
 8009aee:	4603      	mov	r3, r0
 8009af0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f000 f8b9 	bl	8009c6c <USBD_Get_USB_Status>
 8009afa:	4603      	mov	r3, r0
 8009afc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	da0c      	bge.n	8009b3e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b2a:	68f9      	ldr	r1, [r7, #12]
 8009b2c:	1c5a      	adds	r2, r3, #1
 8009b2e:	4613      	mov	r3, r2
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	00db      	lsls	r3, r3, #3
 8009b36:	440b      	add	r3, r1
 8009b38:	3302      	adds	r3, #2
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	e00b      	b.n	8009b56 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b3e:	78fb      	ldrb	r3, [r7, #3]
 8009b40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009b44:	68f9      	ldr	r1, [r7, #12]
 8009b46:	4613      	mov	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	00db      	lsls	r3, r3, #3
 8009b4e:	440b      	add	r3, r1
 8009b50:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009b54:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bc80      	pop	{r7}
 8009b5e:	4770      	bx	lr

08009b60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b7a:	78fa      	ldrb	r2, [r7, #3]
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7f7 fc73 	bl	800146a <HAL_PCD_SetAddress>
 8009b84:	4603      	mov	r3, r0
 8009b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 f86e 	bl	8009c6c <USBD_Get_USB_Status>
 8009b90:	4603      	mov	r3, r0
 8009b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b086      	sub	sp, #24
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	460b      	mov	r3, r1
 8009bac:	72fb      	strb	r3, [r7, #11]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009bc0:	893b      	ldrh	r3, [r7, #8]
 8009bc2:	7af9      	ldrb	r1, [r7, #11]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	f7f7 fd4b 	bl	8001660 <HAL_PCD_EP_Transmit>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bce:	7dfb      	ldrb	r3, [r7, #23]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 f84b 	bl	8009c6c <USBD_Get_USB_Status>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bda:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3718      	adds	r7, #24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	607a      	str	r2, [r7, #4]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	72fb      	strb	r3, [r7, #11]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009c06:	893b      	ldrh	r3, [r7, #8]
 8009c08:	7af9      	ldrb	r1, [r7, #11]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	f7f7 fcf7 	bl	80015fe <HAL_PCD_EP_Receive>
 8009c10:	4603      	mov	r3, r0
 8009c12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c14:	7dfb      	ldrb	r3, [r7, #23]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 f828 	bl	8009c6c <USBD_Get_USB_Status>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c20:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3718      	adds	r7, #24
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c34:	4b02      	ldr	r3, [pc, #8]	; (8009c40 <USBD_static_malloc+0x14>)
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bc80      	pop	{r7}
 8009c3e:	4770      	bx	lr
 8009c40:	20001970 	.word	0x20001970

08009c44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]

}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bc80      	pop	{r7}
 8009c54:	4770      	bx	lr

08009c56 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c56:	b480      	push	{r7}
 8009c58:	b083      	sub	sp, #12
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
 8009c5e:	460b      	mov	r3, r1
 8009c60:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009c62:	bf00      	nop
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bc80      	pop	{r7}
 8009c6a:	4770      	bx	lr

08009c6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	4603      	mov	r3, r0
 8009c74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d817      	bhi.n	8009cb0 <USBD_Get_USB_Status+0x44>
 8009c80:	a201      	add	r2, pc, #4	; (adr r2, 8009c88 <USBD_Get_USB_Status+0x1c>)
 8009c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c86:	bf00      	nop
 8009c88:	08009c99 	.word	0x08009c99
 8009c8c:	08009c9f 	.word	0x08009c9f
 8009c90:	08009ca5 	.word	0x08009ca5
 8009c94:	08009cab 	.word	0x08009cab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c9c:	e00b      	b.n	8009cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca2:	e008      	b.n	8009cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca8:	e005      	b.n	8009cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009caa:	2302      	movs	r3, #2
 8009cac:	73fb      	strb	r3, [r7, #15]
    break;
 8009cae:	e002      	b.n	8009cb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb4:	bf00      	nop
  }
  return usb_status;
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bc80      	pop	{r7}
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop

08009cc4 <memset>:
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	4402      	add	r2, r0
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d100      	bne.n	8009cce <memset+0xa>
 8009ccc:	4770      	bx	lr
 8009cce:	f803 1b01 	strb.w	r1, [r3], #1
 8009cd2:	e7f9      	b.n	8009cc8 <memset+0x4>

08009cd4 <__libc_init_array>:
 8009cd4:	b570      	push	{r4, r5, r6, lr}
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	4d0c      	ldr	r5, [pc, #48]	; (8009d0c <__libc_init_array+0x38>)
 8009cda:	4c0d      	ldr	r4, [pc, #52]	; (8009d10 <__libc_init_array+0x3c>)
 8009cdc:	1b64      	subs	r4, r4, r5
 8009cde:	10a4      	asrs	r4, r4, #2
 8009ce0:	42a6      	cmp	r6, r4
 8009ce2:	d109      	bne.n	8009cf8 <__libc_init_array+0x24>
 8009ce4:	f000 f81a 	bl	8009d1c <_init>
 8009ce8:	2600      	movs	r6, #0
 8009cea:	4d0a      	ldr	r5, [pc, #40]	; (8009d14 <__libc_init_array+0x40>)
 8009cec:	4c0a      	ldr	r4, [pc, #40]	; (8009d18 <__libc_init_array+0x44>)
 8009cee:	1b64      	subs	r4, r4, r5
 8009cf0:	10a4      	asrs	r4, r4, #2
 8009cf2:	42a6      	cmp	r6, r4
 8009cf4:	d105      	bne.n	8009d02 <__libc_init_array+0x2e>
 8009cf6:	bd70      	pop	{r4, r5, r6, pc}
 8009cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cfc:	4798      	blx	r3
 8009cfe:	3601      	adds	r6, #1
 8009d00:	e7ee      	b.n	8009ce0 <__libc_init_array+0xc>
 8009d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d06:	4798      	blx	r3
 8009d08:	3601      	adds	r6, #1
 8009d0a:	e7f2      	b.n	8009cf2 <__libc_init_array+0x1e>
 8009d0c:	08009dd0 	.word	0x08009dd0
 8009d10:	08009dd0 	.word	0x08009dd0
 8009d14:	08009dd0 	.word	0x08009dd0
 8009d18:	08009dd4 	.word	0x08009dd4

08009d1c <_init>:
 8009d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1e:	bf00      	nop
 8009d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d22:	bc08      	pop	{r3}
 8009d24:	469e      	mov	lr, r3
 8009d26:	4770      	bx	lr

08009d28 <_fini>:
 8009d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d2a:	bf00      	nop
 8009d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d2e:	bc08      	pop	{r3}
 8009d30:	469e      	mov	lr, r3
 8009d32:	4770      	bx	lr
