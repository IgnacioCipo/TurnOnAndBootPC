
WakeOnRemote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009924  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08009a34  08009a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ad0  08009ad0  0002015c  2**0
                  CONTENTS
  4 .ARM          00000000  08009ad0  08009ad0  0002015c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ad0  08009ad0  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ad0  08009ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ad4  08009ad4  00019ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08009ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001820  2000015c  08009c34  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000197c  08009c34  0002197c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020185  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018529  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004020  00000000  00000000  000386f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  0003c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001163  00000000  00000000  0003ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bb50  00000000  00000000  0003ef23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d1b  00000000  00000000  0005aa73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000972ed  00000000  00000000  0007478e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005da0  00000000  00000000  0010ba7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011181c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000015c 	.word	0x2000015c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a1c 	.word	0x08009a1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000160 	.word	0x20000160
 800014c:	08009a1c 	.word	0x08009a1c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000178 	.word	0x20000178
 800017c:	200001cc 	.word	0x200001cc

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b088      	sub	sp, #32
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fa6f 	bl	8000668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f81f 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f8f9 	bl	8000384 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000192:	f000 f875 	bl	8000280 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000196:	f000 f8cb 	bl	8000330 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadDef(mainTask, StartMainTask, osPriorityNormal, 0, 512);
 800019a:	4b0a      	ldr	r3, [pc, #40]	; (80001c4 <main+0x44>)
 800019c:	1d3c      	adds	r4, r7, #4
 800019e:	461d      	mov	r5, r3
 80001a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2100      	movs	r1, #0
 80001b0:	4618      	mov	r0, r3
 80001b2:	f007 fe76 	bl	8007ea2 <osThreadCreate>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <main+0x48>)
 80001ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001bc:	f007 fe6a 	bl	8007e94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c0:	e7fe      	b.n	80001c0 <main+0x40>
 80001c2:	bf00      	nop
 80001c4:	08009a40 	.word	0x08009a40
 80001c8:	2000045c 	.word	0x2000045c

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b094      	sub	sp, #80	; 0x50
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f009 fbf2 	bl	80099c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	2200      	movs	r2, #0
 80001e6:	601a      	str	r2, [r3, #0]
 80001e8:	605a      	str	r2, [r3, #4]
 80001ea:	609a      	str	r2, [r3, #8]
 80001ec:	60da      	str	r2, [r3, #12]
 80001ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001fc:	2301      	movs	r3, #1
 80001fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000204:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020a:	2301      	movs	r3, #1
 800020c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020e:	2302      	movs	r3, #2
 8000210:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000216:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000218:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800021c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000222:	4618      	mov	r0, r3
 8000224:	f002 fb1e 	bl	8002864 <HAL_RCC_OscConfig>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800022e:	f000 f8dc 	bl	80003ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000232:	230f      	movs	r3, #15
 8000234:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000242:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000248:	f107 0314 	add.w	r3, r7, #20
 800024c:	2102      	movs	r1, #2
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fd8a 	bl	8002d68 <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800025a:	f000 f8c6 	bl	80003ea <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800025e:	2310      	movs	r3, #16
 8000260:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000262:	2300      	movs	r3, #0
 8000264:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	4618      	mov	r0, r3
 800026a:	f002 ff0b 	bl	8003084 <HAL_RCCEx_PeriphCLKConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000274:	f000 f8b9 	bl	80003ea <Error_Handler>
  }
}
 8000278:	bf00      	nop
 800027a:	3750      	adds	r7, #80	; 0x50
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}

08000280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08a      	sub	sp, #40	; 0x28
 8000284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000286:	f107 0320 	add.w	r3, r7, #32
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002a2:	4b22      	ldr	r3, [pc, #136]	; (800032c <MX_TIM2_Init+0xac>)
 80002a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002aa:	4b20      	ldr	r3, [pc, #128]	; (800032c <MX_TIM2_Init+0xac>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <MX_TIM2_Init+0xac>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <MX_TIM2_Init+0xac>)
 80002b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002be:	4b1b      	ldr	r3, [pc, #108]	; (800032c <MX_TIM2_Init+0xac>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002c4:	4b19      	ldr	r3, [pc, #100]	; (800032c <MX_TIM2_Init+0xac>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80002ca:	4818      	ldr	r0, [pc, #96]	; (800032c <MX_TIM2_Init+0xac>)
 80002cc:	f002 ff90 	bl	80031f0 <HAL_TIM_PWM_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80002d6:	f000 f888 	bl	80003ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002da:	2300      	movs	r3, #0
 80002dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002de:	2300      	movs	r3, #0
 80002e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002e2:	f107 0320 	add.w	r3, r7, #32
 80002e6:	4619      	mov	r1, r3
 80002e8:	4810      	ldr	r0, [pc, #64]	; (800032c <MX_TIM2_Init+0xac>)
 80002ea:	f003 fa7d 	bl	80037e8 <HAL_TIMEx_MasterConfigSynchronization>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80002f4:	f000 f879 	bl	80003ea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002f8:	2360      	movs	r3, #96	; 0x60
 80002fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000304:	2300      	movs	r3, #0
 8000306:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	4619      	mov	r1, r3
 800030e:	4807      	ldr	r0, [pc, #28]	; (800032c <MX_TIM2_Init+0xac>)
 8000310:	f002 ffbe 	bl	8003290 <HAL_TIM_PWM_ConfigChannel>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800031a:	f000 f866 	bl	80003ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800031e:	4803      	ldr	r0, [pc, #12]	; (800032c <MX_TIM2_Init+0xac>)
 8000320:	f000 f8bc 	bl	800049c <HAL_TIM_MspPostInit>

}
 8000324:	bf00      	nop
 8000326:	3728      	adds	r7, #40	; 0x28
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200003cc 	.word	0x200003cc

08000330 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000336:	4a12      	ldr	r2, [pc, #72]	; (8000380 <MX_USART1_UART_Init+0x50>)
 8000338:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800033a:	4b10      	ldr	r3, [pc, #64]	; (800037c <MX_USART1_UART_Init+0x4c>)
 800033c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000340:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <MX_USART1_UART_Init+0x4c>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000356:	220c      	movs	r2, #12
 8000358:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <MX_USART1_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000366:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_USART1_UART_Init+0x4c>)
 8000368:	f003 fa9c 	bl	80038a4 <HAL_UART_Init>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000372:	f000 f83a 	bl	80003ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000414 	.word	0x20000414
 8000380:	40013800 	.word	0x40013800

08000384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_GPIO_Init+0x40>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <MX_GPIO_Init+0x40>)
 8000390:	f043 0320 	orr.w	r3, r3, #32
 8000394:	6193      	str	r3, [r2, #24]
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <MX_GPIO_Init+0x40>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	f003 0320 	and.w	r3, r3, #32
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <MX_GPIO_Init+0x40>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <MX_GPIO_Init+0x40>)
 80003a8:	f043 0304 	orr.w	r3, r3, #4
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <MX_GPIO_Init+0x40>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	f003 0304 	and.w	r3, r3, #4
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000

080003c8 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80003d0:	f008 ff3e 	bl	8009250 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  uint8_t received_msg_flag = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	75fb      	strb	r3, [r7, #23]
	  uint8_t KEYCODE4;
	  uint8_t KEYCODE5;
	  uint8_t KEYCODE6;
  } keyboardHID;

  keyboardHID keyboardhid = {0,0,0,0,0,0,0,0};
 80003d8:	f107 030c 	add.w	r3, r7, #12
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
  for(;;)
  {
	  if(received_msg_flag == 1){

	  }
    osDelay(1);
 80003e2:	2001      	movs	r0, #1
 80003e4:	f007 fda9 	bl	8007f3a <osDelay>
	  if(received_msg_flag == 1){
 80003e8:	e7fb      	b.n	80003e2 <StartMainTask+0x1a>

080003ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ee:	b672      	cpsid	i
}
 80003f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <Error_Handler+0x8>

080003f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b18      	ldr	r3, [pc, #96]	; (800045c <HAL_MspInit+0x68>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a17      	ldr	r2, [pc, #92]	; (800045c <HAL_MspInit+0x68>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b15      	ldr	r3, [pc, #84]	; (800045c <HAL_MspInit+0x68>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b12      	ldr	r3, [pc, #72]	; (800045c <HAL_MspInit+0x68>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a11      	ldr	r2, [pc, #68]	; (800045c <HAL_MspInit+0x68>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0f      	ldr	r3, [pc, #60]	; (800045c <HAL_MspInit+0x68>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	210f      	movs	r1, #15
 800042e:	f06f 0001 	mvn.w	r0, #1
 8000432:	f000 fa52 	bl	80008da <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <HAL_MspInit+0x6c>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	4a04      	ldr	r2, [pc, #16]	; (8000460 <HAL_MspInit+0x6c>)
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000452:	bf00      	nop
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000
 8000460:	40010000 	.word	0x40010000

08000464 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000474:	d10b      	bne.n	800048e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <HAL_TIM_PWM_MspInit+0x34>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	4a07      	ldr	r2, [pc, #28]	; (8000498 <HAL_TIM_PWM_MspInit+0x34>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	61d3      	str	r3, [r2, #28]
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <HAL_TIM_PWM_MspInit+0x34>)
 8000484:	69db      	ldr	r3, [r3, #28]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004ba:	d117      	bne.n	80004ec <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <HAL_TIM_MspPostInit+0x58>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a0c      	ldr	r2, [pc, #48]	; (80004f4 <HAL_TIM_MspPostInit+0x58>)
 80004c2:	f043 0304 	orr.w	r3, r3, #4
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <HAL_TIM_MspPostInit+0x58>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0304 	and.w	r3, r3, #4
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004d4:	2301      	movs	r3, #1
 80004d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d8:	2302      	movs	r3, #2
 80004da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2302      	movs	r3, #2
 80004de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	4619      	mov	r1, r3
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <HAL_TIM_MspPostInit+0x5c>)
 80004e8:	f000 fae0 	bl	8000aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010800 	.word	0x40010800

080004fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a20      	ldr	r2, [pc, #128]	; (8000598 <HAL_UART_MspInit+0x9c>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d139      	bne.n	8000590 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800051c:	4b1f      	ldr	r3, [pc, #124]	; (800059c <HAL_UART_MspInit+0xa0>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a1e      	ldr	r2, [pc, #120]	; (800059c <HAL_UART_MspInit+0xa0>)
 8000522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b1c      	ldr	r3, [pc, #112]	; (800059c <HAL_UART_MspInit+0xa0>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000534:	4b19      	ldr	r3, [pc, #100]	; (800059c <HAL_UART_MspInit+0xa0>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a18      	ldr	r2, [pc, #96]	; (800059c <HAL_UART_MspInit+0xa0>)
 800053a:	f043 0304 	orr.w	r3, r3, #4
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b16      	ldr	r3, [pc, #88]	; (800059c <HAL_UART_MspInit+0xa0>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0304 	and.w	r3, r3, #4
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800054c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000550:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000552:	2302      	movs	r3, #2
 8000554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000556:	2303      	movs	r3, #3
 8000558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	4619      	mov	r1, r3
 8000560:	480f      	ldr	r0, [pc, #60]	; (80005a0 <HAL_UART_MspInit+0xa4>)
 8000562:	f000 faa3 	bl	8000aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	4809      	ldr	r0, [pc, #36]	; (80005a0 <HAL_UART_MspInit+0xa4>)
 800057c:	f000 fa96 	bl	8000aac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2105      	movs	r1, #5
 8000584:	2025      	movs	r0, #37	; 0x25
 8000586:	f000 f9a8 	bl	80008da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800058a:	2025      	movs	r0, #37	; 0x25
 800058c:	f000 f9c1 	bl	8000912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40013800 	.word	0x40013800
 800059c:	40021000 	.word	0x40021000
 80005a0:	40010800 	.word	0x40010800

080005a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <NMI_Handler+0x4>

080005aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ae:	e7fe      	b.n	80005ae <HardFault_Handler+0x4>

080005b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <MemManage_Handler+0x4>

080005b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <BusFault_Handler+0x4>

080005bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <UsageFault_Handler+0x4>

080005c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d2:	f000 f88f 	bl	80006f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80005d6:	f008 fa2d 	bl	8008a34 <xTaskGetSchedulerState>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d001      	beq.n	80005e4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005e0:	f008 fc1a 	bl	8008e18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005ec:	4802      	ldr	r0, [pc, #8]	; (80005f8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005ee:	f000 fd06 	bl	8000ffe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20001678 	.word	0x20001678

080005fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000600:	4802      	ldr	r0, [pc, #8]	; (800060c <USART1_IRQHandler+0x10>)
 8000602:	f003 f99f 	bl	8003944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000414 	.word	0x20000414

08000610 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800061c:	f7ff fff8 	bl	8000610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000622:	490c      	ldr	r1, [pc, #48]	; (8000654 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000624:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a09      	ldr	r2, [pc, #36]	; (800065c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000638:	4c09      	ldr	r4, [pc, #36]	; (8000660 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000646:	f009 f9c5 	bl	80099d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fd99 	bl	8000180 <main>
  bx lr
 800064e:	4770      	bx	lr
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8000658:	08009ad8 	.word	0x08009ad8
  ldr r2, =_sbss
 800065c:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8000660:	2000197c 	.word	0x2000197c

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>
	...

08000668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <HAL_Init+0x28>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <HAL_Init+0x28>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000678:	2003      	movs	r0, #3
 800067a:	f000 f923 	bl	80008c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067e:	200f      	movs	r0, #15
 8000680:	f000 f808 	bl	8000694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000684:	f7ff feb6 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40022000 	.word	0x40022000

08000694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x54>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <HAL_InitTick+0x58>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4619      	mov	r1, r3
 80006a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f93b 	bl	800092e <HAL_SYSTICK_Config>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	e00e      	b.n	80006e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b0f      	cmp	r3, #15
 80006c6:	d80a      	bhi.n	80006de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c8:	2200      	movs	r2, #0
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006d0:	f000 f903 	bl	80008da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d4:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <HAL_InitTick+0x5c>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006da:	2300      	movs	r3, #0
 80006dc:	e000      	b.n	80006e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000000 	.word	0x20000000
 80006ec:	20000008 	.word	0x20000008
 80006f0:	20000004 	.word	0x20000004

080006f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x1c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_IncTick+0x20>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4413      	add	r3, r2
 8000704:	4a03      	ldr	r2, [pc, #12]	; (8000714 <HAL_IncTick+0x20>)
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr
 8000710:	20000008 	.word	0x20000008
 8000714:	20000460 	.word	0x20000460

08000718 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  return uwTick;
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <HAL_GetTick+0x10>)
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	20000460 	.word	0x20000460

0800072c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000748:	4013      	ands	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000754:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800075c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800075e:	4a04      	ldr	r2, [pc, #16]	; (8000770 <__NVIC_SetPriorityGrouping+0x44>)
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	60d3      	str	r3, [r2, #12]
}
 8000764:	bf00      	nop
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <__NVIC_GetPriorityGrouping+0x18>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	0a1b      	lsrs	r3, r3, #8
 800077e:	f003 0307 	and.w	r3, r3, #7
}
 8000782:	4618      	mov	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	db0b      	blt.n	80007ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	f003 021f 	and.w	r2, r3, #31
 80007a8:	4906      	ldr	r1, [pc, #24]	; (80007c4 <__NVIC_EnableIRQ+0x34>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	095b      	lsrs	r3, r3, #5
 80007b0:	2001      	movs	r0, #1
 80007b2:	fa00 f202 	lsl.w	r2, r0, r2
 80007b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr
 80007c4:	e000e100 	.word	0xe000e100

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db0a      	blt.n	80007f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	490c      	ldr	r1, [pc, #48]	; (8000814 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f0:	e00a      	b.n	8000808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4908      	ldr	r1, [pc, #32]	; (8000818 <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	0112      	lsls	r2, r2, #4
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	440b      	add	r3, r1
 8000806:	761a      	strb	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2b04      	cmp	r3, #4
 8000838:	bf28      	it	cs
 800083a:	2304      	movcs	r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	2b06      	cmp	r3, #6
 8000844:	d902      	bls.n	800084c <NVIC_EncodePriority+0x30>
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b03      	subs	r3, #3
 800084a:	e000      	b.n	800084e <NVIC_EncodePriority+0x32>
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	4313      	orrs	r3, r2
         );
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	; 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000890:	d301      	bcc.n	8000896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000892:	2301      	movs	r3, #1
 8000894:	e00f      	b.n	80008b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <SysTick_Config+0x40>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089e:	210f      	movs	r1, #15
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a4:	f7ff ff90 	bl	80007c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <SysTick_Config+0x40>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <SysTick_Config+0x40>)
 80008b0:	2207      	movs	r2, #7
 80008b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	e000e010 	.word	0xe000e010

080008c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff2d 	bl	800072c <__NVIC_SetPriorityGrouping>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ec:	f7ff ff42 	bl	8000774 <__NVIC_GetPriorityGrouping>
 80008f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff90 	bl	800081c <NVIC_EncodePriority>
 80008fc:	4602      	mov	r2, r0
 80008fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff5f 	bl	80007c8 <__NVIC_SetPriority>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800091c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff35 	bl	8000790 <__NVIC_EnableIRQ>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f7ff ffa2 	bl	8000880 <SysTick_Config>
 800093c:	4603      	mov	r3, r0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000946:	b480      	push	{r7}
 8000948:	b085      	sub	sp, #20
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b02      	cmp	r3, #2
 800095c:	d008      	beq.n	8000970 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2204      	movs	r2, #4
 8000962:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800096c:	2301      	movs	r3, #1
 800096e:	e020      	b.n	80009b2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f022 020e 	bic.w	r2, r2, #14
 800097e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	f022 0201 	bic.w	r2, r2, #1
 800098e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000998:	2101      	movs	r1, #1
 800099a:	fa01 f202 	lsl.w	r2, r1, r2
 800099e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2201      	movs	r2, #1
 80009a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d005      	beq.n	80009e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2204      	movs	r2, #4
 80009d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	73fb      	strb	r3, [r7, #15]
 80009de:	e051      	b.n	8000a84 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 020e 	bic.w	r2, r2, #14
 80009ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f022 0201 	bic.w	r2, r2, #1
 80009fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a22      	ldr	r2, [pc, #136]	; (8000a90 <HAL_DMA_Abort_IT+0xd4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d029      	beq.n	8000a5e <HAL_DMA_Abort_IT+0xa2>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <HAL_DMA_Abort_IT+0xd8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d022      	beq.n	8000a5a <HAL_DMA_Abort_IT+0x9e>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1f      	ldr	r2, [pc, #124]	; (8000a98 <HAL_DMA_Abort_IT+0xdc>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d01a      	beq.n	8000a54 <HAL_DMA_Abort_IT+0x98>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a1e      	ldr	r2, [pc, #120]	; (8000a9c <HAL_DMA_Abort_IT+0xe0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d012      	beq.n	8000a4e <HAL_DMA_Abort_IT+0x92>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a1c      	ldr	r2, [pc, #112]	; (8000aa0 <HAL_DMA_Abort_IT+0xe4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d00a      	beq.n	8000a48 <HAL_DMA_Abort_IT+0x8c>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <HAL_DMA_Abort_IT+0xe8>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d102      	bne.n	8000a42 <HAL_DMA_Abort_IT+0x86>
 8000a3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a40:	e00e      	b.n	8000a60 <HAL_DMA_Abort_IT+0xa4>
 8000a42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a46:	e00b      	b.n	8000a60 <HAL_DMA_Abort_IT+0xa4>
 8000a48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a4c:	e008      	b.n	8000a60 <HAL_DMA_Abort_IT+0xa4>
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	e005      	b.n	8000a60 <HAL_DMA_Abort_IT+0xa4>
 8000a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a58:	e002      	b.n	8000a60 <HAL_DMA_Abort_IT+0xa4>
 8000a5a:	2310      	movs	r3, #16
 8000a5c:	e000      	b.n	8000a60 <HAL_DMA_Abort_IT+0xa4>
 8000a5e:	2301      	movs	r3, #1
 8000a60:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_DMA_Abort_IT+0xec>)
 8000a62:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2201      	movs	r2, #1
 8000a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	4798      	blx	r3
    } 
  }
  return status;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40020008 	.word	0x40020008
 8000a94:	4002001c 	.word	0x4002001c
 8000a98:	40020030 	.word	0x40020030
 8000a9c:	40020044 	.word	0x40020044
 8000aa0:	40020058 	.word	0x40020058
 8000aa4:	4002006c 	.word	0x4002006c
 8000aa8:	40020000 	.word	0x40020000

08000aac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b08b      	sub	sp, #44	; 0x2c
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000abe:	e169      	b.n	8000d94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	69fa      	ldr	r2, [r7, #28]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	f040 8158 	bne.w	8000d8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	4a9a      	ldr	r2, [pc, #616]	; (8000d4c <HAL_GPIO_Init+0x2a0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d05e      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000ae8:	4a98      	ldr	r2, [pc, #608]	; (8000d4c <HAL_GPIO_Init+0x2a0>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d875      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000aee:	4a98      	ldr	r2, [pc, #608]	; (8000d50 <HAL_GPIO_Init+0x2a4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d058      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000af4:	4a96      	ldr	r2, [pc, #600]	; (8000d50 <HAL_GPIO_Init+0x2a4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d86f      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000afa:	4a96      	ldr	r2, [pc, #600]	; (8000d54 <HAL_GPIO_Init+0x2a8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d052      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000b00:	4a94      	ldr	r2, [pc, #592]	; (8000d54 <HAL_GPIO_Init+0x2a8>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d869      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000b06:	4a94      	ldr	r2, [pc, #592]	; (8000d58 <HAL_GPIO_Init+0x2ac>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d04c      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000b0c:	4a92      	ldr	r2, [pc, #584]	; (8000d58 <HAL_GPIO_Init+0x2ac>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d863      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000b12:	4a92      	ldr	r2, [pc, #584]	; (8000d5c <HAL_GPIO_Init+0x2b0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d046      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
 8000b18:	4a90      	ldr	r2, [pc, #576]	; (8000d5c <HAL_GPIO_Init+0x2b0>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d85d      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000b1e:	2b12      	cmp	r3, #18
 8000b20:	d82a      	bhi.n	8000b78 <HAL_GPIO_Init+0xcc>
 8000b22:	2b12      	cmp	r3, #18
 8000b24:	d859      	bhi.n	8000bda <HAL_GPIO_Init+0x12e>
 8000b26:	a201      	add	r2, pc, #4	; (adr r2, 8000b2c <HAL_GPIO_Init+0x80>)
 8000b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2c:	08000ba7 	.word	0x08000ba7
 8000b30:	08000b81 	.word	0x08000b81
 8000b34:	08000b93 	.word	0x08000b93
 8000b38:	08000bd5 	.word	0x08000bd5
 8000b3c:	08000bdb 	.word	0x08000bdb
 8000b40:	08000bdb 	.word	0x08000bdb
 8000b44:	08000bdb 	.word	0x08000bdb
 8000b48:	08000bdb 	.word	0x08000bdb
 8000b4c:	08000bdb 	.word	0x08000bdb
 8000b50:	08000bdb 	.word	0x08000bdb
 8000b54:	08000bdb 	.word	0x08000bdb
 8000b58:	08000bdb 	.word	0x08000bdb
 8000b5c:	08000bdb 	.word	0x08000bdb
 8000b60:	08000bdb 	.word	0x08000bdb
 8000b64:	08000bdb 	.word	0x08000bdb
 8000b68:	08000bdb 	.word	0x08000bdb
 8000b6c:	08000bdb 	.word	0x08000bdb
 8000b70:	08000b89 	.word	0x08000b89
 8000b74:	08000b9d 	.word	0x08000b9d
 8000b78:	4a79      	ldr	r2, [pc, #484]	; (8000d60 <HAL_GPIO_Init+0x2b4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d013      	beq.n	8000ba6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b7e:	e02c      	b.n	8000bda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	623b      	str	r3, [r7, #32]
          break;
 8000b86:	e029      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	623b      	str	r3, [r7, #32]
          break;
 8000b90:	e024      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	3308      	adds	r3, #8
 8000b98:	623b      	str	r3, [r7, #32]
          break;
 8000b9a:	e01f      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	330c      	adds	r3, #12
 8000ba2:	623b      	str	r3, [r7, #32]
          break;
 8000ba4:	e01a      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d102      	bne.n	8000bb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	623b      	str	r3, [r7, #32]
          break;
 8000bb2:	e013      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d105      	bne.n	8000bc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	69fa      	ldr	r2, [r7, #28]
 8000bc4:	611a      	str	r2, [r3, #16]
          break;
 8000bc6:	e009      	b.n	8000bdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69fa      	ldr	r2, [r7, #28]
 8000bd0:	615a      	str	r2, [r3, #20]
          break;
 8000bd2:	e003      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
          break;
 8000bd8:	e000      	b.n	8000bdc <HAL_GPIO_Init+0x130>
          break;
 8000bda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	2bff      	cmp	r3, #255	; 0xff
 8000be0:	d801      	bhi.n	8000be6 <HAL_GPIO_Init+0x13a>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	e001      	b.n	8000bea <HAL_GPIO_Init+0x13e>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3304      	adds	r3, #4
 8000bea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	2bff      	cmp	r3, #255	; 0xff
 8000bf0:	d802      	bhi.n	8000bf8 <HAL_GPIO_Init+0x14c>
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	e002      	b.n	8000bfe <HAL_GPIO_Init+0x152>
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	3b08      	subs	r3, #8
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	210f      	movs	r1, #15
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	401a      	ands	r2, r3
 8000c10:	6a39      	ldr	r1, [r7, #32]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	fa01 f303 	lsl.w	r3, r1, r3
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 80b1 	beq.w	8000d8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c2c:	4b4d      	ldr	r3, [pc, #308]	; (8000d64 <HAL_GPIO_Init+0x2b8>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a4c      	ldr	r2, [pc, #304]	; (8000d64 <HAL_GPIO_Init+0x2b8>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b4a      	ldr	r3, [pc, #296]	; (8000d64 <HAL_GPIO_Init+0x2b8>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c44:	4a48      	ldr	r2, [pc, #288]	; (8000d68 <HAL_GPIO_Init+0x2bc>)
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	f003 0303 	and.w	r3, r3, #3
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	220f      	movs	r2, #15
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a40      	ldr	r2, [pc, #256]	; (8000d6c <HAL_GPIO_Init+0x2c0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d013      	beq.n	8000c98 <HAL_GPIO_Init+0x1ec>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a3f      	ldr	r2, [pc, #252]	; (8000d70 <HAL_GPIO_Init+0x2c4>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d00d      	beq.n	8000c94 <HAL_GPIO_Init+0x1e8>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a3e      	ldr	r2, [pc, #248]	; (8000d74 <HAL_GPIO_Init+0x2c8>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d007      	beq.n	8000c90 <HAL_GPIO_Init+0x1e4>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a3d      	ldr	r2, [pc, #244]	; (8000d78 <HAL_GPIO_Init+0x2cc>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d101      	bne.n	8000c8c <HAL_GPIO_Init+0x1e0>
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e006      	b.n	8000c9a <HAL_GPIO_Init+0x1ee>
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	e004      	b.n	8000c9a <HAL_GPIO_Init+0x1ee>
 8000c90:	2302      	movs	r3, #2
 8000c92:	e002      	b.n	8000c9a <HAL_GPIO_Init+0x1ee>
 8000c94:	2301      	movs	r3, #1
 8000c96:	e000      	b.n	8000c9a <HAL_GPIO_Init+0x1ee>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c9c:	f002 0203 	and.w	r2, r2, #3
 8000ca0:	0092      	lsls	r2, r2, #2
 8000ca2:	4093      	lsls	r3, r2
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000caa:	492f      	ldr	r1, [pc, #188]	; (8000d68 <HAL_GPIO_Init+0x2bc>)
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	089b      	lsrs	r3, r3, #2
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	492c      	ldr	r1, [pc, #176]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	608b      	str	r3, [r1, #8]
 8000cd0:	e006      	b.n	8000ce0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	4928      	ldr	r1, [pc, #160]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d006      	beq.n	8000cfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	4922      	ldr	r1, [pc, #136]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60cb      	str	r3, [r1, #12]
 8000cf8:	e006      	b.n	8000d08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000cfc:	68da      	ldr	r2, [r3, #12]
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	491e      	ldr	r1, [pc, #120]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d04:	4013      	ands	r3, r2
 8000d06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d006      	beq.n	8000d22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	4918      	ldr	r1, [pc, #96]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	604b      	str	r3, [r1, #4]
 8000d20:	e006      	b.n	8000d30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	4914      	ldr	r1, [pc, #80]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d021      	beq.n	8000d80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	490e      	ldr	r1, [pc, #56]	; (8000d7c <HAL_GPIO_Init+0x2d0>)
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	600b      	str	r3, [r1, #0]
 8000d48:	e021      	b.n	8000d8e <HAL_GPIO_Init+0x2e2>
 8000d4a:	bf00      	nop
 8000d4c:	10320000 	.word	0x10320000
 8000d50:	10310000 	.word	0x10310000
 8000d54:	10220000 	.word	0x10220000
 8000d58:	10210000 	.word	0x10210000
 8000d5c:	10120000 	.word	0x10120000
 8000d60:	10110000 	.word	0x10110000
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	40010800 	.word	0x40010800
 8000d70:	40010c00 	.word	0x40010c00
 8000d74:	40011000 	.word	0x40011000
 8000d78:	40011400 	.word	0x40011400
 8000d7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <HAL_GPIO_Init+0x304>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	4909      	ldr	r1, [pc, #36]	; (8000db0 <HAL_GPIO_Init+0x304>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	3301      	adds	r3, #1
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f47f ae8e 	bne.w	8000ac0 <HAL_GPIO_Init+0x14>
  }
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	372c      	adds	r7, #44	; 0x2c
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	40010400 	.word	0x40010400

08000db4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db6:	b08b      	sub	sp, #44	; 0x2c
 8000db8:	af06      	add	r7, sp, #24
 8000dba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e0f1      	b.n	8000faa <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d106      	bne.n	8000de0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f008 fb6c 	bl	80094b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2203      	movs	r2, #3
 8000de4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fab1 	bl	8004354 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	687e      	ldr	r6, [r7, #4]
 8000dfa:	466d      	mov	r5, sp
 8000dfc:	f106 0410 	add.w	r4, r6, #16
 8000e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e04:	6823      	ldr	r3, [r4, #0]
 8000e06:	602b      	str	r3, [r5, #0]
 8000e08:	1d33      	adds	r3, r6, #4
 8000e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e0c:	6838      	ldr	r0, [r7, #0]
 8000e0e:	f003 fa7b 	bl	8004308 <USB_CoreInit>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d005      	beq.n	8000e24 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e0c2      	b.n	8000faa <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 faac 	bl	8004388 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	e040      	b.n	8000eb8 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	440b      	add	r3, r1
 8000e46:	3301      	adds	r3, #1
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	440b      	add	r3, r1
 8000e5c:	7bfa      	ldrb	r2, [r7, #15]
 8000e5e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	440b      	add	r3, r1
 8000e70:	3303      	adds	r3, #3
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	440b      	add	r3, r1
 8000e84:	3338      	adds	r3, #56	; 0x38
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	440b      	add	r3, r1
 8000e98:	333c      	adds	r3, #60	; 0x3c
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	440b      	add	r3, r1
 8000eac:	3340      	adds	r3, #64	; 0x40
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d3b9      	bcc.n	8000e36 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	e044      	b.n	8000f52 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	440b      	add	r3, r1
 8000ed6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ede:	7bfa      	ldrb	r2, [r7, #15]
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ef0:	7bfa      	ldrb	r2, [r7, #15]
 8000ef2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4413      	add	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	440b      	add	r3, r1
 8000f02:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	4413      	add	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	440b      	add	r3, r1
 8000f18:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	440b      	add	r3, r1
 8000f44:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	7bfa      	ldrb	r2, [r7, #15]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d3b5      	bcc.n	8000ec8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	687e      	ldr	r6, [r7, #4]
 8000f64:	466d      	mov	r5, sp
 8000f66:	f106 0410 	add.w	r4, r6, #16
 8000f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	602b      	str	r3, [r5, #0]
 8000f72:	1d33      	adds	r3, r6, #4
 8000f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f003 fa12 	bl	80043a0 <USB_DevInit>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2202      	movs	r2, #2
 8000f86:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00d      	b.n	8000faa <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f005 fc93 	bl	80068ce <USB_DevDisconnect>

  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fb2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d101      	bne.n	8000fc8 <HAL_PCD_Start+0x16>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e016      	b.n	8000ff6 <HAL_PCD_Start+0x44>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 f9a7 	bl	8004328 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000fda:	2101      	movs	r1, #1
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f008 fcba 	bl	8009956 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f005 fc67 	bl	80068ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b088      	sub	sp, #32
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f005 fc69 	bl	80068e2 <USB_ReadInterrupts>
 8001010:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 fb04 	bl	800162a <PCD_EP_ISR_Handler>

    return;
 8001022:	e119      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800102a:	2b00      	cmp	r3, #0
 800102c:	d013      	beq.n	8001056 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001036:	b29a      	uxth	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001040:	b292      	uxth	r2, r2
 8001042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f008 fab1 	bl	80095ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800104c:	2100      	movs	r1, #0
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f905 	bl	800125e <HAL_PCD_SetAddress>

    return;
 8001054:	e100      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00c      	beq.n	800107a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001072:	b292      	uxth	r2, r2
 8001074:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001078:	e0ee      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00c      	beq.n	800109e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800108c:	b29a      	uxth	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001096:	b292      	uxth	r2, r2
 8001098:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800109c:	e0dc      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d027      	beq.n	80010f8 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0204 	bic.w	r2, r2, #4
 80010ba:	b292      	uxth	r2, r2
 80010bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0208 	bic.w	r2, r2, #8
 80010d2:	b292      	uxth	r2, r2
 80010d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f008 faa1 	bl	8009620 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010f0:	b292      	uxth	r2, r2
 80010f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80010f6:	e0af      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 8083 	beq.w	800120a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001104:	2300      	movs	r3, #0
 8001106:	77fb      	strb	r3, [r7, #31]
 8001108:	e010      	b.n	800112c <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	7ffb      	ldrb	r3, [r7, #31]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	441a      	add	r2, r3
 8001116:	7ffb      	ldrb	r3, [r7, #31]
 8001118:	8812      	ldrh	r2, [r2, #0]
 800111a:	b292      	uxth	r2, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	3320      	adds	r3, #32
 8001120:	443b      	add	r3, r7
 8001122:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001126:	7ffb      	ldrb	r3, [r7, #31]
 8001128:	3301      	adds	r3, #1
 800112a:	77fb      	strb	r3, [r7, #31]
 800112c:	7ffb      	ldrb	r3, [r7, #31]
 800112e:	2b07      	cmp	r3, #7
 8001130:	d9eb      	bls.n	800110a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800113a:	b29a      	uxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 0201 	orr.w	r2, r2, #1
 8001144:	b292      	uxth	r2, r2
 8001146:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001152:	b29a      	uxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	b292      	uxth	r2, r2
 800115e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001162:	bf00      	nop
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800116c:	b29b      	uxth	r3, r3
 800116e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f6      	beq.n	8001164 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001188:	b292      	uxth	r2, r2
 800118a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800118e:	2300      	movs	r3, #0
 8001190:	77fb      	strb	r3, [r7, #31]
 8001192:	e00f      	b.n	80011b4 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001194:	7ffb      	ldrb	r3, [r7, #31]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	4611      	mov	r1, r2
 800119c:	7ffa      	ldrb	r2, [r7, #31]
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	440a      	add	r2, r1
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	3320      	adds	r3, #32
 80011a6:	443b      	add	r3, r7
 80011a8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80011ac:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	3301      	adds	r3, #1
 80011b2:	77fb      	strb	r3, [r7, #31]
 80011b4:	7ffb      	ldrb	r3, [r7, #31]
 80011b6:	2b07      	cmp	r3, #7
 80011b8:	d9ec      	bls.n	8001194 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0208 	orr.w	r2, r2, #8
 80011cc:	b292      	uxth	r2, r2
 80011ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011da:	b29a      	uxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011e4:	b292      	uxth	r2, r2
 80011e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0204 	orr.w	r2, r2, #4
 80011fc:	b292      	uxth	r2, r2
 80011fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f008 f9f2 	bl	80095ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001208:	e026      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00f      	beq.n	8001234 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001226:	b292      	uxth	r2, r2
 8001228:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f008 f9b0 	bl	8009592 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001232:	e011      	b.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00c      	beq.n	8001258 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001246:	b29a      	uxth	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001250:	b292      	uxth	r2, r2
 8001252:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001256:	bf00      	nop
  }
}
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_PCD_SetAddress+0x1a>
 8001274:	2302      	movs	r3, #2
 8001276:	e013      	b.n	80012a0 <HAL_PCD_SetAddress+0x42>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	78fa      	ldrb	r2, [r7, #3]
 8001284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	78fa      	ldrb	r2, [r7, #3]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f005 faff 	bl	8006894 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	70fb      	strb	r3, [r7, #3]
 80012ba:	460b      	mov	r3, r1
 80012bc:	803b      	strh	r3, [r7, #0]
 80012be:	4613      	mov	r3, r2
 80012c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	da0e      	bge.n	80012ec <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2201      	movs	r2, #1
 80012e8:	705a      	strb	r2, [r3, #1]
 80012ea:	e00e      	b.n	800130a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	f003 0207 	and.w	r2, r3, #7
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2200      	movs	r2, #0
 8001308:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	b2da      	uxtb	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001316:	883a      	ldrh	r2, [r7, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	78ba      	ldrb	r2, [r7, #2]
 8001320:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001322:	78bb      	ldrb	r3, [r7, #2]
 8001324:	2b02      	cmp	r3, #2
 8001326:	d102      	bne.n	800132e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_PCD_EP_Open+0x94>
 8001338:	2302      	movs	r3, #2
 800133a:	e00e      	b.n	800135a <HAL_PCD_EP_Open+0xb2>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68f9      	ldr	r1, [r7, #12]
 800134a:	4618      	mov	r0, r3
 800134c:	f003 f848 	bl	80043e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001358:	7afb      	ldrb	r3, [r7, #11]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	460b      	mov	r3, r1
 800136c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800136e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001372:	2b00      	cmp	r3, #0
 8001374:	da0e      	bge.n	8001394 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	4413      	add	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2201      	movs	r2, #1
 8001390:	705a      	strb	r2, [r3, #1]
 8001392:	e00e      	b.n	80013b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	f003 0207 	and.w	r2, r3, #7
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	f003 0307 	and.w	r3, r3, #7
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_PCD_EP_Close+0x6a>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e00e      	b.n	80013ea <HAL_PCD_EP_Close+0x88>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68f9      	ldr	r1, [r7, #12]
 80013da:	4618      	mov	r0, r3
 80013dc:	f003 fbc0 	bl	8004b60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	460b      	mov	r3, r1
 8001400:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	f003 0207 	and.w	r2, r3, #7
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2200      	movs	r2, #0
 8001430:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001432:	7afb      	ldrb	r3, [r7, #11]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	b2da      	uxtb	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6979      	ldr	r1, [r7, #20]
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fd77 	bl	8004f38 <USB_EPStartXfer>

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	460b      	mov	r3, r1
 8001462:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001464:	7afb      	ldrb	r3, [r7, #11]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4413      	add	r3, r2
 8001478:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2201      	movs	r2, #1
 800149e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014a0:	7afb      	ldrb	r3, [r7, #11]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6979      	ldr	r1, [r7, #20]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fd40 	bl	8004f38 <USB_EPStartXfer>

  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80014ce:	78fb      	ldrb	r3, [r7, #3]
 80014d0:	f003 0207 	and.w	r2, r3, #7
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d901      	bls.n	80014e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e04c      	b.n	800157a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da0e      	bge.n	8001506 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2201      	movs	r2, #1
 8001502:	705a      	strb	r2, [r3, #1]
 8001504:	e00c      	b.n	8001520 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001506:	78fa      	ldrb	r2, [r7, #3]
 8001508:	4613      	mov	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2201      	movs	r2, #1
 8001524:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	b2da      	uxtb	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <HAL_PCD_EP_SetStall+0x7e>
 800153c:	2302      	movs	r3, #2
 800153e:	e01c      	b.n	800157a <HAL_PCD_EP_SetStall+0xb8>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	4618      	mov	r0, r3
 8001550:	f005 f8a3 	bl	800669a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	2b00      	cmp	r3, #0
 800155c:	d108      	bne.n	8001570 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f005 f9c8 	bl	8006900 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	f003 020f 	and.w	r2, r3, #15
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	429a      	cmp	r2, r3
 800159a:	d901      	bls.n	80015a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e040      	b.n	8001622 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	da0e      	bge.n	80015c6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015a8:	78fb      	ldrb	r3, [r7, #3]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2201      	movs	r2, #1
 80015c2:	705a      	strb	r2, [r3, #1]
 80015c4:	e00e      	b.n	80015e4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	f003 0207 	and.w	r2, r3, #7
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_PCD_EP_ClrStall+0x82>
 8001600:	2302      	movs	r3, #2
 8001602:	e00e      	b.n	8001622 <HAL_PCD_EP_ClrStall+0xa0>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68f9      	ldr	r1, [r7, #12]
 8001612:	4618      	mov	r0, r3
 8001614:	f005 f891 	bl	800673a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b096      	sub	sp, #88	; 0x58
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001632:	e3bf      	b.n	8001db4 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800163c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001640:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800164e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001652:	2b00      	cmp	r3, #0
 8001654:	f040 8179 	bne.w	800194a <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001658:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	2b00      	cmp	r3, #0
 8001662:	d152      	bne.n	800170a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001674:	81fb      	strh	r3, [r7, #14]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	89fb      	ldrh	r3, [r7, #14]
 800167c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001684:	b29b      	uxth	r3, r3
 8001686:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3328      	adds	r3, #40	; 0x28
 800168c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001696:	b29b      	uxth	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	3302      	adds	r3, #2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80016ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	441a      	add	r2, r3
 80016c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80016c8:	2100      	movs	r1, #0
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f007 ff47 	bl	800955e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 836b 	beq.w	8001db4 <PCD_EP_ISR_Handler+0x78a>
 80016de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f040 8366 	bne.w	8001db4 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b292      	uxth	r2, r2
 80016fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001708:	e354      	b.n	8001db4 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001710:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800171c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001724:	2b00      	cmp	r3, #0
 8001726:	d034      	beq.n	8001792 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001730:	b29b      	uxth	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	3306      	adds	r3, #6
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	4413      	add	r3, r2
 8001746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001752:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800175e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001760:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001764:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001766:	b29b      	uxth	r3, r3
 8001768:	f005 f91a 	bl	80069a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	b29a      	uxth	r2, r3
 8001774:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001778:	4013      	ands	r3, r2
 800177a:	823b      	strh	r3, [r7, #16]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	8a3a      	ldrh	r2, [r7, #16]
 8001782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001786:	b292      	uxth	r2, r2
 8001788:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f007 feba 	bl	8009504 <HAL_PCD_SetupStageCallback>
 8001790:	e310      	b.n	8001db4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001792:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001796:	2b00      	cmp	r3, #0
 8001798:	f280 830c 	bge.w	8001db4 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	881b      	ldrh	r3, [r3, #0]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017a8:	4013      	ands	r3, r2
 80017aa:	83fb      	strh	r3, [r7, #30]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	8bfa      	ldrh	r2, [r7, #30]
 80017b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017b6:	b292      	uxth	r2, r2
 80017b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4413      	add	r3, r2
 80017ce:	3306      	adds	r3, #6
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80017e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d019      	beq.n	8001822 <PCD_EP_ISR_Handler+0x1f8>
 80017ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d015      	beq.n	8001822 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6818      	ldr	r0, [r3, #0]
 80017fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fc:	6959      	ldr	r1, [r3, #20]
 80017fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001800:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001804:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001806:	b29b      	uxth	r3, r3
 8001808:	f005 f8ca 	bl	80069a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800180c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180e:	695a      	ldr	r2, [r3, #20]
 8001810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	441a      	add	r2, r3
 8001816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001818:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800181a:	2100      	movs	r1, #0
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f007 fe83 	bl	8009528 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800182c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001830:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001834:	2b00      	cmp	r3, #0
 8001836:	f040 82bd 	bne.w	8001db4 <PCD_EP_ISR_Handler+0x78a>
 800183a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800183e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001842:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001846:	f000 82b5 	beq.w	8001db4 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001858:	b29b      	uxth	r3, r3
 800185a:	461a      	mov	r2, r3
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	4413      	add	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001874:	b29a      	uxth	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	801a      	strh	r2, [r3, #0]
 800187a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	2b3e      	cmp	r3, #62	; 0x3e
 8001880:	d91d      	bls.n	80018be <PCD_EP_ISR_Handler+0x294>
 8001882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	647b      	str	r3, [r7, #68]	; 0x44
 800188a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <PCD_EP_ISR_Handler+0x272>
 8001896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001898:	3b01      	subs	r3, #1
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	4313      	orrs	r3, r2
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	801a      	strh	r2, [r3, #0]
 80018bc:	e026      	b.n	800190c <PCD_EP_ISR_Handler+0x2e2>
 80018be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <PCD_EP_ISR_Handler+0x2b2>
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80018d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	801a      	strh	r2, [r3, #0]
 80018da:	e017      	b.n	800190c <PCD_EP_ISR_Handler+0x2e2>
 80018dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	085b      	lsrs	r3, r3, #1
 80018e2:	647b      	str	r3, [r7, #68]	; 0x44
 80018e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <PCD_EP_ISR_Handler+0x2cc>
 80018f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018f2:	3301      	adds	r3, #1
 80018f4:	647b      	str	r3, [r7, #68]	; 0x44
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018fe:	b29b      	uxth	r3, r3
 8001900:	029b      	lsls	r3, r3, #10
 8001902:	b29b      	uxth	r3, r3
 8001904:	4313      	orrs	r3, r2
 8001906:	b29a      	uxth	r2, r3
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800191c:	827b      	strh	r3, [r7, #18]
 800191e:	8a7b      	ldrh	r3, [r7, #18]
 8001920:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001924:	827b      	strh	r3, [r7, #18]
 8001926:	8a7b      	ldrh	r3, [r7, #18]
 8001928:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800192c:	827b      	strh	r3, [r7, #18]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	8a7b      	ldrh	r3, [r7, #18]
 8001934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800193c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001944:	b29b      	uxth	r3, r3
 8001946:	8013      	strh	r3, [r2, #0]
 8001948:	e234      	b.n	8001db4 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800195e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001962:	2b00      	cmp	r3, #0
 8001964:	f280 80fc 	bge.w	8001b60 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	b29a      	uxth	r2, r3
 800197a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800197e:	4013      	ands	r3, r2
 8001980:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001996:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800199a:	b292      	uxth	r2, r2
 800199c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800199e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80019b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b6:	7b1b      	ldrb	r3, [r3, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d125      	bne.n	8001a08 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	461a      	mov	r2, r3
 80019c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4413      	add	r3, r2
 80019d0:	3306      	adds	r3, #6
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	4413      	add	r3, r2
 80019da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019e4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80019e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8092 	beq.w	8001b16 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019f8:	6959      	ldr	r1, [r3, #20]
 80019fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019fc:	88da      	ldrh	r2, [r3, #6]
 80019fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a02:	f004 ffcd 	bl	80069a0 <USB_ReadPMA>
 8001a06:	e086      	b.n	8001b16 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0a:	78db      	ldrb	r3, [r3, #3]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d10a      	bne.n	8001a26 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001a10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001a14:	461a      	mov	r2, r3
 8001a16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f9d9 	bl	8001dd0 <HAL_PCD_EP_DB_Receive>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001a24:	e077      	b.n	8001b16 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a40:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	441a      	add	r2, r3
 8001a52:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d024      	beq.n	8001ace <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4413      	add	r3, r2
 8001a98:	3302      	adds	r3, #2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001ab0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d02e      	beq.n	8001b16 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001abe:	6959      	ldr	r1, [r3, #20]
 8001ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ac2:	891a      	ldrh	r2, [r3, #8]
 8001ac4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ac8:	f004 ff6a 	bl	80069a0 <USB_ReadPMA>
 8001acc:	e023      	b.n	8001b16 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3306      	adds	r3, #6
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001af6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001afa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b08:	6959      	ldr	r1, [r3, #20]
 8001b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0c:	895a      	ldrh	r2, [r3, #10]
 8001b0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b12:	f004 ff45 	bl	80069a0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b18:	69da      	ldr	r2, [r3, #28]
 8001b1a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b1e:	441a      	add	r2, r3
 8001b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b22:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b26:	695a      	ldr	r2, [r3, #20]
 8001b28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b2c:	441a      	add	r2, r3
 8001b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b30:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <PCD_EP_ISR_Handler+0x51c>
 8001b3a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d206      	bcs.n	8001b54 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f007 fceb 	bl	8009528 <HAL_PCD_DataOutStageCallback>
 8001b52:	e005      	b.n	8001b60 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f003 f9ec 	bl	8004f38 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001b60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f000 8123 	beq.w	8001db4 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8001b6e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	441a      	add	r2, r3
 8001bae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001bb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc0:	78db      	ldrb	r3, [r3, #3]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	f040 80a2 	bne.w	8001d0c <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8001bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd0:	7b1b      	ldrb	r3, [r3, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8093 	beq.w	8001cfe <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d046      	beq.n	8001c72 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be6:	785b      	ldrb	r3, [r3, #1]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d126      	bne.n	8001c3a <PCD_EP_ISR_Handler+0x610>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c00:	4413      	add	r3, r2
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
 8001c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	011a      	lsls	r2, r3, #4
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	4413      	add	r3, r2
 8001c0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	801a      	strh	r2, [r3, #0]
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	e061      	b.n	8001cfe <PCD_EP_ISR_Handler+0x6d4>
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	785b      	ldrb	r3, [r3, #1]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d15d      	bne.n	8001cfe <PCD_EP_ISR_Handler+0x6d4>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c56:	4413      	add	r3, r2
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	011a      	lsls	r2, r3, #4
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	4413      	add	r3, r2
 8001c64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	801a      	strh	r2, [r3, #0]
 8001c70:	e045      	b.n	8001cfe <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d126      	bne.n	8001cce <PCD_EP_ISR_Handler+0x6a4>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	637b      	str	r3, [r7, #52]	; 0x34
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c94:	4413      	add	r3, r2
 8001c96:	637b      	str	r3, [r7, #52]	; 0x34
 8001c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	011a      	lsls	r2, r3, #4
 8001c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8001ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb6:	801a      	strh	r2, [r3, #0]
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cca:	801a      	strh	r2, [r3, #0]
 8001ccc:	e017      	b.n	8001cfe <PCD_EP_ISR_Handler+0x6d4>
 8001cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd0:	785b      	ldrb	r3, [r3, #1]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d113      	bne.n	8001cfe <PCD_EP_ISR_Handler+0x6d4>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce4:	4413      	add	r3, r2
 8001ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	011a      	lsls	r2, r3, #4
 8001cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f007 fc2a 	bl	800955e <HAL_PCD_DataInStageCallback>
 8001d0a:	e053      	b.n	8001db4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001d0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d146      	bne.n	8001da6 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3302      	adds	r3, #2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d40:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d46:	699a      	ldr	r2, [r3, #24]
 8001d48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d907      	bls.n	8001d60 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8001d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d58:	1ad2      	subs	r2, r2, r3
 8001d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d5c:	619a      	str	r2, [r3, #24]
 8001d5e:	e002      	b.n	8001d66 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8001d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	4619      	mov	r1, r3
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f007 fbf2 	bl	800955e <HAL_PCD_DataInStageCallback>
 8001d7a:	e01b      	b.n	8001db4 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001d7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d84:	441a      	add	r2, r3
 8001d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d88:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d8c:	69da      	ldr	r2, [r3, #28]
 8001d8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001d92:	441a      	add	r2, r3
 8001d94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d96:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f003 f8ca 	bl	8004f38 <USB_EPStartXfer>
 8001da4:	e006      	b.n	8001db4 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001da6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001daa:	461a      	mov	r2, r3
 8001dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f91b 	bl	8001fea <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f6ff ac37 	blt.w	8001634 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3758      	adds	r7, #88	; 0x58
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d07e      	beq.n	8001ee6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e10:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	8b7b      	ldrh	r3, [r7, #26]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d306      	bcc.n	8001e2a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	699a      	ldr	r2, [r3, #24]
 8001e20:	8b7b      	ldrh	r3, [r7, #26]
 8001e22:	1ad2      	subs	r2, r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	619a      	str	r2, [r3, #24]
 8001e28:	e002      	b.n	8001e30 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d123      	bne.n	8001e80 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	881b      	ldrh	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e52:	833b      	strh	r3, [r7, #24]
 8001e54:	8b3b      	ldrh	r3, [r7, #24]
 8001e56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e5a:	833b      	strh	r3, [r7, #24]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	441a      	add	r2, r3
 8001e6a:	8b3b      	ldrh	r3, [r7, #24]
 8001e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d01f      	beq.n	8001eca <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea4:	82fb      	strh	r3, [r7, #22]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	441a      	add	r2, r3
 8001eb4:	8afb      	ldrh	r3, [r7, #22]
 8001eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001eca:	8b7b      	ldrh	r3, [r7, #26]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 8087 	beq.w	8001fe0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	6959      	ldr	r1, [r3, #20]
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	891a      	ldrh	r2, [r3, #8]
 8001ede:	8b7b      	ldrh	r3, [r7, #26]
 8001ee0:	f004 fd5e 	bl	80069a0 <USB_ReadPMA>
 8001ee4:	e07c      	b.n	8001fe0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3306      	adds	r3, #6
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	6812      	ldr	r2, [r2, #0]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	8b7b      	ldrh	r3, [r7, #26]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d306      	bcc.n	8001f28 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	699a      	ldr	r2, [r3, #24]
 8001f1e:	8b7b      	ldrh	r3, [r7, #26]
 8001f20:	1ad2      	subs	r2, r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	619a      	str	r2, [r3, #24]
 8001f26:	e002      	b.n	8001f2e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d123      	bne.n	8001f7e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f50:	83fb      	strh	r3, [r7, #30]
 8001f52:	8bfb      	ldrh	r3, [r7, #30]
 8001f54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f58:	83fb      	strh	r3, [r7, #30]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	441a      	add	r2, r3
 8001f68:	8bfb      	ldrh	r3, [r7, #30]
 8001f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d11f      	bne.n	8001fc8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa2:	83bb      	strh	r3, [r7, #28]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	441a      	add	r2, r3
 8001fb2:	8bbb      	ldrh	r3, [r7, #28]
 8001fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001fc8:	8b7b      	ldrh	r3, [r7, #26]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d008      	beq.n	8001fe0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	6959      	ldr	r1, [r3, #20]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	895a      	ldrh	r2, [r3, #10]
 8001fda:	8b7b      	ldrh	r3, [r7, #26]
 8001fdc:	f004 fce0 	bl	80069a0 <USB_ReadPMA>
    }
  }

  return count;
 8001fe0:	8b7b      	ldrh	r3, [r7, #26]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b0a4      	sub	sp, #144	; 0x90
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 81dd 	beq.w	80023be <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800200c:	b29b      	uxth	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	3302      	adds	r3, #2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800202c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	699a      	ldr	r2, [r3, #24]
 8002034:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002038:	429a      	cmp	r2, r3
 800203a:	d907      	bls.n	800204c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002044:	1ad2      	subs	r2, r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	619a      	str	r2, [r3, #24]
 800204a:	e002      	b.n	8002052 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 80b9 	bne.w	80021ce <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	785b      	ldrb	r3, [r3, #1]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d126      	bne.n	80020b2 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002072:	b29b      	uxth	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	4413      	add	r3, r2
 800207a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	011a      	lsls	r2, r3, #4
 8002082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002084:	4413      	add	r3, r2
 8002086:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800208a:	62bb      	str	r3, [r7, #40]	; 0x28
 800208c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b29b      	uxth	r3, r3
 8002092:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002096:	b29a      	uxth	r2, r3
 8002098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209a:	801a      	strh	r2, [r3, #0]
 800209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	801a      	strh	r2, [r3, #0]
 80020b0:	e01a      	b.n	80020e8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d116      	bne.n	80020e8 <HAL_PCD_EP_DB_Transmit+0xfe>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	637b      	str	r3, [r7, #52]	; 0x34
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ce:	4413      	add	r3, r2
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	011a      	lsls	r2, r3, #4
 80020d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020da:	4413      	add	r3, r2
 80020dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020e0:	633b      	str	r3, [r7, #48]	; 0x30
 80020e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e4:	2200      	movs	r2, #0
 80020e6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	785b      	ldrb	r3, [r3, #1]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d126      	bne.n	8002144 <HAL_PCD_EP_DB_Transmit+0x15a>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002104:	b29b      	uxth	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	4413      	add	r3, r2
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	011a      	lsls	r2, r3, #4
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	4413      	add	r3, r2
 8002118:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800211c:	61bb      	str	r3, [r7, #24]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002128:	b29a      	uxth	r2, r3
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	801a      	strh	r2, [r3, #0]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800213c:	b29a      	uxth	r2, r3
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	801a      	strh	r2, [r3, #0]
 8002142:	e017      	b.n	8002174 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	785b      	ldrb	r3, [r3, #1]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d113      	bne.n	8002174 <HAL_PCD_EP_DB_Transmit+0x18a>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	4413      	add	r3, r2
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	011a      	lsls	r2, r3, #4
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	4413      	add	r3, r2
 8002168:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800216c:	623b      	str	r3, [r7, #32]
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	2200      	movs	r2, #0
 8002172:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f007 f9ef 	bl	800955e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 82fc 	beq.w	8002784 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a6:	82fb      	strh	r3, [r7, #22]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	441a      	add	r2, r3
 80021b6:	8afb      	ldrh	r3, [r7, #22]
 80021b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	8013      	strh	r3, [r2, #0]
 80021cc:	e2da      	b.n	8002784 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d021      	beq.n	800221c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	441a      	add	r2, r3
 8002204:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800220c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002218:	b29b      	uxth	r3, r3
 800221a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002222:	2b01      	cmp	r3, #1
 8002224:	f040 82ae 	bne.w	8002784 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002230:	441a      	add	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800223e:	441a      	add	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	6a1a      	ldr	r2, [r3, #32]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d30b      	bcc.n	8002268 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	6a1a      	ldr	r2, [r3, #32]
 800225c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002260:	1ad2      	subs	r2, r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	621a      	str	r2, [r3, #32]
 8002266:	e017      	b.n	8002298 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d108      	bne.n	8002282 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002270:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002280:	e00a      	b.n	8002298 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	785b      	ldrb	r3, [r3, #1]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d165      	bne.n	800236c <HAL_PCD_EP_DB_Transmit+0x382>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b4:	4413      	add	r3, r2
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	011a      	lsls	r2, r3, #4
 80022be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c0:	4413      	add	r3, r2
 80022c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80022c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80022c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022d6:	801a      	strh	r2, [r3, #0]
 80022d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022dc:	2b3e      	cmp	r3, #62	; 0x3e
 80022de:	d91d      	bls.n	800231c <HAL_PCD_EP_DB_Transmit+0x332>
 80022e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80022e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d102      	bne.n	80022fa <HAL_PCD_EP_DB_Transmit+0x310>
 80022f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f6:	3b01      	subs	r3, #1
 80022f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80022fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002302:	b29b      	uxth	r3, r3
 8002304:	029b      	lsls	r3, r3, #10
 8002306:	b29b      	uxth	r3, r3
 8002308:	4313      	orrs	r3, r2
 800230a:	b29b      	uxth	r3, r3
 800230c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002314:	b29a      	uxth	r2, r3
 8002316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002318:	801a      	strh	r2, [r3, #0]
 800231a:	e044      	b.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800231c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <HAL_PCD_EP_DB_Transmit+0x350>
 8002324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	b29b      	uxth	r3, r3
 800232a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800232e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002332:	b29a      	uxth	r2, r3
 8002334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002336:	801a      	strh	r2, [r3, #0]
 8002338:	e035      	b.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800233a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800233e:	085b      	lsrs	r3, r3, #1
 8002340:	64bb      	str	r3, [r7, #72]	; 0x48
 8002342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <HAL_PCD_EP_DB_Transmit+0x36a>
 800234e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002350:	3301      	adds	r3, #1
 8002352:	64bb      	str	r3, [r7, #72]	; 0x48
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	b29a      	uxth	r2, r3
 800235a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800235c:	b29b      	uxth	r3, r3
 800235e:	029b      	lsls	r3, r3, #10
 8002360:	b29b      	uxth	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b29a      	uxth	r2, r3
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	801a      	strh	r2, [r3, #0]
 800236a:	e01c      	b.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	785b      	ldrb	r3, [r3, #1]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d118      	bne.n	80023a6 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	647b      	str	r3, [r7, #68]	; 0x44
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002388:	4413      	add	r3, r2
 800238a:	647b      	str	r3, [r7, #68]	; 0x44
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	011a      	lsls	r2, r3, #4
 8002392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002394:	4413      	add	r3, r2
 8002396:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800239a:	643b      	str	r3, [r7, #64]	; 0x40
 800239c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	6959      	ldr	r1, [r3, #20]
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	891a      	ldrh	r2, [r3, #8]
 80023b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	f004 faad 	bl	8006916 <USB_WritePMA>
 80023bc:	e1e2      	b.n	8002784 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	3306      	adds	r3, #6
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d307      	bcc.n	8002406 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	699a      	ldr	r2, [r3, #24]
 80023fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80023fe:	1ad2      	subs	r2, r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	619a      	str	r2, [r3, #24]
 8002404:	e002      	b.n	800240c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 80c0 	bne.w	8002596 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	785b      	ldrb	r3, [r3, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d126      	bne.n	800246c <HAL_PCD_EP_DB_Transmit+0x482>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800242c:	b29b      	uxth	r3, r3
 800242e:	461a      	mov	r2, r3
 8002430:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002432:	4413      	add	r3, r2
 8002434:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	011a      	lsls	r2, r3, #4
 800243c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800243e:	4413      	add	r3, r2
 8002440:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002444:	67bb      	str	r3, [r7, #120]	; 0x78
 8002446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b29b      	uxth	r3, r3
 800244c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002450:	b29a      	uxth	r2, r3
 8002452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002454:	801a      	strh	r2, [r3, #0]
 8002456:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b29b      	uxth	r3, r3
 800245c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002464:	b29a      	uxth	r2, r3
 8002466:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002468:	801a      	strh	r2, [r3, #0]
 800246a:	e01a      	b.n	80024a2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d116      	bne.n	80024a2 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	667b      	str	r3, [r7, #100]	; 0x64
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002482:	b29b      	uxth	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002488:	4413      	add	r3, r2
 800248a:	667b      	str	r3, [r7, #100]	; 0x64
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	011a      	lsls	r2, r3, #4
 8002492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002494:	4413      	add	r3, r2
 8002496:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800249a:	663b      	str	r3, [r7, #96]	; 0x60
 800249c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800249e:	2200      	movs	r2, #0
 80024a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	677b      	str	r3, [r7, #116]	; 0x74
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	785b      	ldrb	r3, [r3, #1]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d12b      	bne.n	8002508 <HAL_PCD_EP_DB_Transmit+0x51e>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024be:	b29b      	uxth	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c4:	4413      	add	r3, r2
 80024c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	011a      	lsls	r2, r3, #4
 80024ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d0:	4413      	add	r3, r2
 80024d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024ec:	801a      	strh	r2, [r3, #0]
 80024ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fe:	b29a      	uxth	r2, r3
 8002500:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002504:	801a      	strh	r2, [r3, #0]
 8002506:	e017      	b.n	8002538 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	785b      	ldrb	r3, [r3, #1]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d113      	bne.n	8002538 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002518:	b29b      	uxth	r3, r3
 800251a:	461a      	mov	r2, r3
 800251c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800251e:	4413      	add	r3, r2
 8002520:	677b      	str	r3, [r7, #116]	; 0x74
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	011a      	lsls	r2, r3, #4
 8002528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252a:	4413      	add	r3, r2
 800252c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002530:	673b      	str	r3, [r7, #112]	; 0x70
 8002532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002534:	2200      	movs	r2, #0
 8002536:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f007 f80d 	bl	800955e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254a:	2b00      	cmp	r3, #0
 800254c:	f040 811a 	bne.w	8002784 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800256a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	441a      	add	r2, r3
 800257c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002588:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800258c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002590:	b29b      	uxth	r3, r3
 8002592:	8013      	strh	r3, [r2, #0]
 8002594:	e0f6      	b.n	8002784 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d121      	bne.n	80025e4 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	461a      	mov	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	441a      	add	r2, r3
 80025cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	f040 80ca 	bne.w	8002784 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	695a      	ldr	r2, [r3, #20]
 80025f4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80025f8:	441a      	add	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002606:	441a      	add	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6a1a      	ldr	r2, [r3, #32]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	429a      	cmp	r2, r3
 8002616:	d30b      	bcc.n	8002630 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	6a1a      	ldr	r2, [r3, #32]
 8002624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002628:	1ad2      	subs	r2, r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	621a      	str	r2, [r3, #32]
 800262e:	e017      	b.n	8002660 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d108      	bne.n	800264a <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002638:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800263c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002648:	e00a      	b.n	8002660 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	657b      	str	r3, [r7, #84]	; 0x54
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	785b      	ldrb	r3, [r3, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d165      	bne.n	800273a <HAL_PCD_EP_DB_Transmit+0x750>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800267c:	b29b      	uxth	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002682:	4413      	add	r3, r2
 8002684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	011a      	lsls	r2, r3, #4
 800268c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800268e:	4413      	add	r3, r2
 8002690:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002694:	65bb      	str	r3, [r7, #88]	; 0x58
 8002696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026a4:	801a      	strh	r2, [r3, #0]
 80026a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026aa:	2b3e      	cmp	r3, #62	; 0x3e
 80026ac:	d91d      	bls.n	80026ea <HAL_PCD_EP_DB_Transmit+0x700>
 80026ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80026b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x6de>
 80026c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026c4:	3b01      	subs	r3, #1
 80026c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80026c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	029b      	lsls	r3, r3, #10
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4313      	orrs	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	e041      	b.n	800276e <HAL_PCD_EP_DB_Transmit+0x784>
 80026ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <HAL_PCD_EP_DB_Transmit+0x71e>
 80026f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002700:	b29a      	uxth	r2, r3
 8002702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002704:	801a      	strh	r2, [r3, #0]
 8002706:	e032      	b.n	800276e <HAL_PCD_EP_DB_Transmit+0x784>
 8002708:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_PCD_EP_DB_Transmit+0x738>
 800271c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800271e:	3301      	adds	r3, #1
 8002720:	66bb      	str	r3, [r7, #104]	; 0x68
 8002722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	b29a      	uxth	r2, r3
 8002728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800272a:	b29b      	uxth	r3, r3
 800272c:	029b      	lsls	r3, r3, #10
 800272e:	b29b      	uxth	r3, r3
 8002730:	4313      	orrs	r3, r2
 8002732:	b29a      	uxth	r2, r3
 8002734:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002736:	801a      	strh	r2, [r3, #0]
 8002738:	e019      	b.n	800276e <HAL_PCD_EP_DB_Transmit+0x784>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	785b      	ldrb	r3, [r3, #1]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d115      	bne.n	800276e <HAL_PCD_EP_DB_Transmit+0x784>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274a:	b29b      	uxth	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002750:	4413      	add	r3, r2
 8002752:	657b      	str	r3, [r7, #84]	; 0x54
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	011a      	lsls	r2, r3, #4
 800275a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800275c:	4413      	add	r3, r2
 800275e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002762:	653b      	str	r3, [r7, #80]	; 0x50
 8002764:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002768:	b29a      	uxth	r2, r3
 800276a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800276c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	6959      	ldr	r1, [r3, #20]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	895a      	ldrh	r2, [r3, #10]
 800277a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800277e:	b29b      	uxth	r3, r3
 8002780:	f004 f8c9 	bl	8006916 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800279a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800279e:	82bb      	strh	r3, [r7, #20]
 80027a0:	8abb      	ldrh	r3, [r7, #20]
 80027a2:	f083 0310 	eor.w	r3, r3, #16
 80027a6:	82bb      	strh	r3, [r7, #20]
 80027a8:	8abb      	ldrh	r3, [r7, #20]
 80027aa:	f083 0320 	eor.w	r3, r3, #32
 80027ae:	82bb      	strh	r3, [r7, #20]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	441a      	add	r2, r3
 80027be:	8abb      	ldrh	r3, [r7, #20]
 80027c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3790      	adds	r7, #144	; 0x90
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80027de:	b480      	push	{r7}
 80027e0:	b087      	sub	sp, #28
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	817b      	strh	r3, [r7, #10]
 80027ec:	4613      	mov	r3, r2
 80027ee:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80027f0:	897b      	ldrh	r3, [r7, #10]
 80027f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fc:	897b      	ldrh	r3, [r7, #10]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	4613      	mov	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e009      	b.n	8002828 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002814:	897a      	ldrh	r2, [r7, #10]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4413      	add	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002828:	893b      	ldrh	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d107      	bne.n	800283e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	b29a      	uxth	r2, r3
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	80da      	strh	r2, [r3, #6]
 800283c:	e00b      	b.n	8002856 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2201      	movs	r2, #1
 8002842:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	b29a      	uxth	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	0c1b      	lsrs	r3, r3, #16
 8002850:	b29a      	uxth	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
	...

08002864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e272      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8087 	beq.w	8002992 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002884:	4b92      	ldr	r3, [pc, #584]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b04      	cmp	r3, #4
 800288e:	d00c      	beq.n	80028aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002890:	4b8f      	ldr	r3, [pc, #572]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	d112      	bne.n	80028c2 <HAL_RCC_OscConfig+0x5e>
 800289c:	4b8c      	ldr	r3, [pc, #560]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a8:	d10b      	bne.n	80028c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028aa:	4b89      	ldr	r3, [pc, #548]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d06c      	beq.n	8002990 <HAL_RCC_OscConfig+0x12c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d168      	bne.n	8002990 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e24c      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x76>
 80028cc:	4b80      	ldr	r3, [pc, #512]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a7f      	ldr	r2, [pc, #508]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d6:	6013      	str	r3, [r2, #0]
 80028d8:	e02e      	b.n	8002938 <HAL_RCC_OscConfig+0xd4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x98>
 80028e2:	4b7b      	ldr	r3, [pc, #492]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a7a      	ldr	r2, [pc, #488]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b78      	ldr	r3, [pc, #480]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a77      	ldr	r2, [pc, #476]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e01d      	b.n	8002938 <HAL_RCC_OscConfig+0xd4>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002904:	d10c      	bne.n	8002920 <HAL_RCC_OscConfig+0xbc>
 8002906:	4b72      	ldr	r3, [pc, #456]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a71      	ldr	r2, [pc, #452]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 800290c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b6f      	ldr	r3, [pc, #444]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a6e      	ldr	r2, [pc, #440]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	e00b      	b.n	8002938 <HAL_RCC_OscConfig+0xd4>
 8002920:	4b6b      	ldr	r3, [pc, #428]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a6a      	ldr	r2, [pc, #424]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a67      	ldr	r2, [pc, #412]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002936:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d013      	beq.n	8002968 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fd feea 	bl	8000718 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7fd fee6 	bl	8000718 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e200      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	4b5d      	ldr	r3, [pc, #372]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0xe4>
 8002966:	e014      	b.n	8002992 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002968:	f7fd fed6 	bl	8000718 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002970:	f7fd fed2 	bl	8000718 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b64      	cmp	r3, #100	; 0x64
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e1ec      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002982:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x10c>
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d063      	beq.n	8002a66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800299e:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029aa:	4b49      	ldr	r3, [pc, #292]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b08      	cmp	r3, #8
 80029b4:	d11c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x18c>
 80029b6:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d116      	bne.n	80029f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c2:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_RCC_OscConfig+0x176>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d001      	beq.n	80029da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e1c0      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029da:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	4939      	ldr	r1, [pc, #228]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ee:	e03a      	b.n	8002a66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f8:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7fd fe8b 	bl	8000718 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a06:	f7fd fe87 	bl	8000718 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e1a1      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a18:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a24:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4927      	ldr	r1, [pc, #156]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	600b      	str	r3, [r1, #0]
 8002a38:	e015      	b.n	8002a66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3a:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <HAL_RCC_OscConfig+0x270>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fd fe6a 	bl	8000718 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a48:	f7fd fe66 	bl	8000718 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e180      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d03a      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d019      	beq.n	8002aae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a80:	f7fd fe4a 	bl	8000718 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a88:	f7fd fe46 	bl	8000718 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e160      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f000 face 	bl	8003048 <RCC_Delay>
 8002aac:	e01c      	b.n	8002ae8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab4:	f7fd fe30 	bl	8000718 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aba:	e00f      	b.n	8002adc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fd fe2c 	bl	8000718 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d908      	bls.n	8002adc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e146      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	42420000 	.word	0x42420000
 8002ad8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002adc:	4b92      	ldr	r3, [pc, #584]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e9      	bne.n	8002abc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80a6 	beq.w	8002c42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af6:	2300      	movs	r3, #0
 8002af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afa:	4b8b      	ldr	r3, [pc, #556]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10d      	bne.n	8002b22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b88      	ldr	r3, [pc, #544]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	4a87      	ldr	r2, [pc, #540]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	61d3      	str	r3, [r2, #28]
 8002b12:	4b85      	ldr	r3, [pc, #532]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b82      	ldr	r3, [pc, #520]	; (8002d2c <HAL_RCC_OscConfig+0x4c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d118      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2e:	4b7f      	ldr	r3, [pc, #508]	; (8002d2c <HAL_RCC_OscConfig+0x4c8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7e      	ldr	r2, [pc, #504]	; (8002d2c <HAL_RCC_OscConfig+0x4c8>)
 8002b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3a:	f7fd fded 	bl	8000718 <HAL_GetTick>
 8002b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b42:	f7fd fde9 	bl	8000718 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b64      	cmp	r3, #100	; 0x64
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e103      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	4b75      	ldr	r3, [pc, #468]	; (8002d2c <HAL_RCC_OscConfig+0x4c8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d106      	bne.n	8002b76 <HAL_RCC_OscConfig+0x312>
 8002b68:	4b6f      	ldr	r3, [pc, #444]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4a6e      	ldr	r2, [pc, #440]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6213      	str	r3, [r2, #32]
 8002b74:	e02d      	b.n	8002bd2 <HAL_RCC_OscConfig+0x36e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x334>
 8002b7e:	4b6a      	ldr	r3, [pc, #424]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	4a69      	ldr	r2, [pc, #420]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	6213      	str	r3, [r2, #32]
 8002b8a:	4b67      	ldr	r3, [pc, #412]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	4a66      	ldr	r2, [pc, #408]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	6213      	str	r3, [r2, #32]
 8002b96:	e01c      	b.n	8002bd2 <HAL_RCC_OscConfig+0x36e>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b05      	cmp	r3, #5
 8002b9e:	d10c      	bne.n	8002bba <HAL_RCC_OscConfig+0x356>
 8002ba0:	4b61      	ldr	r3, [pc, #388]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	4a60      	ldr	r2, [pc, #384]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	f043 0304 	orr.w	r3, r3, #4
 8002baa:	6213      	str	r3, [r2, #32]
 8002bac:	4b5e      	ldr	r3, [pc, #376]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4a5d      	ldr	r2, [pc, #372]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6213      	str	r3, [r2, #32]
 8002bb8:	e00b      	b.n	8002bd2 <HAL_RCC_OscConfig+0x36e>
 8002bba:	4b5b      	ldr	r3, [pc, #364]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4a5a      	ldr	r2, [pc, #360]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	6213      	str	r3, [r2, #32]
 8002bc6:	4b58      	ldr	r3, [pc, #352]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a57      	ldr	r2, [pc, #348]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	f023 0304 	bic.w	r3, r3, #4
 8002bd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d015      	beq.n	8002c06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7fd fd9d 	bl	8000718 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fd fd99 	bl	8000718 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0b1      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0ee      	beq.n	8002be2 <HAL_RCC_OscConfig+0x37e>
 8002c04:	e014      	b.n	8002c30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7fd fd87 	bl	8000718 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fd fd83 	bl	8000718 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e09b      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c24:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1ee      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c36:	4b3c      	ldr	r3, [pc, #240]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4a3b      	ldr	r2, [pc, #236]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 8087 	beq.w	8002d5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c4c:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d061      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d146      	bne.n	8002cee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c60:	4b33      	ldr	r3, [pc, #204]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c66:	f7fd fd57 	bl	8000718 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7fd fd53 	bl	8000718 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e06d      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c80:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c94:	d108      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c96:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4921      	ldr	r1, [pc, #132]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a19      	ldr	r1, [r3, #32]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	491b      	ldr	r1, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fd fd27 	bl	8000718 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fd fd23 	bl	8000718 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e03d      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce0:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0x46a>
 8002cec:	e035      	b.n	8002d5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf4:	f7fd fd10 	bl	8000718 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfc:	f7fd fd0c 	bl	8000718 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e026      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_RCC_OscConfig+0x4c4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x498>
 8002d1a:	e01e      	b.n	8002d5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e019      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_OscConfig+0x500>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d001      	beq.n	8002d5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40021000 	.word	0x40021000

08002d68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0d0      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d7c:	4b6a      	ldr	r3, [pc, #424]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d910      	bls.n	8002dac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8a:	4b67      	ldr	r3, [pc, #412]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 0207 	bic.w	r2, r3, #7
 8002d92:	4965      	ldr	r1, [pc, #404]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b63      	ldr	r3, [pc, #396]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0b8      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d020      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc4:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4a58      	ldr	r2, [pc, #352]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ddc:	4b53      	ldr	r3, [pc, #332]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a52      	ldr	r2, [pc, #328]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002de6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de8:	4b50      	ldr	r3, [pc, #320]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	494d      	ldr	r1, [pc, #308]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d040      	beq.n	8002e88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	4b47      	ldr	r3, [pc, #284]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d115      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e07f      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e26:	4b41      	ldr	r3, [pc, #260]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e073      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e36:	4b3d      	ldr	r3, [pc, #244]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e06b      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e46:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f023 0203 	bic.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4936      	ldr	r1, [pc, #216]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e58:	f7fd fc5e 	bl	8000718 <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e60:	f7fd fc5a 	bl	8000718 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e053      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e76:	4b2d      	ldr	r3, [pc, #180]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 020c 	and.w	r2, r3, #12
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1eb      	bne.n	8002e60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d210      	bcs.n	8002eb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0207 	bic.w	r2, r3, #7
 8002e9e:	4922      	ldr	r1, [pc, #136]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e032      	b.n	8002f1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec4:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4916      	ldr	r1, [pc, #88]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ee2:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	490e      	ldr	r1, [pc, #56]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ef6:	f000 f821 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002efa:	4602      	mov	r2, r0
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <HAL_RCC_ClockConfig+0x1c4>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	490a      	ldr	r1, [pc, #40]	; (8002f30 <HAL_RCC_ClockConfig+0x1c8>)
 8002f08:	5ccb      	ldrb	r3, [r1, r3]
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <HAL_RCC_ClockConfig+0x1cc>)
 8002f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCC_ClockConfig+0x1d0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fbbc 	bl	8000694 <HAL_InitTick>

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40022000 	.word	0x40022000
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	08009aa4 	.word	0x08009aa4
 8002f34:	20000000 	.word	0x20000000
 8002f38:	20000004 	.word	0x20000004

08002f3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f56:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d002      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x30>
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x36>
 8002f6a:	e027      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f6c:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f6e:	613b      	str	r3, [r7, #16]
      break;
 8002f70:	e027      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	0c9b      	lsrs	r3, r3, #18
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f7c:	5cd3      	ldrb	r3, [r2, r3]
 8002f7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d010      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	0c5b      	lsrs	r3, r3, #17
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	4a11      	ldr	r2, [pc, #68]	; (8002fdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f96:	5cd3      	ldrb	r3, [r2, r3]
 8002f98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f9e:	fb03 f202 	mul.w	r2, r3, r2
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e004      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fb0:	fb02 f303 	mul.w	r3, r2, r3
 8002fb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	613b      	str	r3, [r7, #16]
      break;
 8002fba:	e002      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fbe:	613b      	str	r3, [r7, #16]
      break;
 8002fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fc2:	693b      	ldr	r3, [r7, #16]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	007a1200 	.word	0x007a1200
 8002fd8:	08009abc 	.word	0x08009abc
 8002fdc:	08009acc 	.word	0x08009acc
 8002fe0:	003d0900 	.word	0x003d0900

08002fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe8:	4b02      	ldr	r3, [pc, #8]	; (8002ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	20000000 	.word	0x20000000

08002ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ffc:	f7ff fff2 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4903      	ldr	r1, [pc, #12]	; (800301c <HAL_RCC_GetPCLK1Freq+0x24>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40021000 	.word	0x40021000
 800301c:	08009ab4 	.word	0x08009ab4

08003020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003024:	f7ff ffde 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b05      	ldr	r3, [pc, #20]	; (8003040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	0adb      	lsrs	r3, r3, #11
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	4903      	ldr	r1, [pc, #12]	; (8003044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003036:	5ccb      	ldrb	r3, [r1, r3]
 8003038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800303c:	4618      	mov	r0, r3
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	08009ab4 	.word	0x08009ab4

08003048 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003050:	4b0a      	ldr	r3, [pc, #40]	; (800307c <RCC_Delay+0x34>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <RCC_Delay+0x38>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0a5b      	lsrs	r3, r3, #9
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	fb02 f303 	mul.w	r3, r2, r3
 8003062:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003064:	bf00      	nop
  }
  while (Delay --);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1e5a      	subs	r2, r3, #1
 800306a:	60fa      	str	r2, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f9      	bne.n	8003064 <RCC_Delay+0x1c>
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3714      	adds	r7, #20
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	20000000 	.word	0x20000000
 8003080:	10624dd3 	.word	0x10624dd3

08003084 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d07d      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030a0:	2300      	movs	r3, #0
 80030a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030a4:	4b4f      	ldr	r3, [pc, #316]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10d      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b0:	4b4c      	ldr	r3, [pc, #304]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	4a4b      	ldr	r2, [pc, #300]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ba:	61d3      	str	r3, [r2, #28]
 80030bc:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c8:	2301      	movs	r3, #1
 80030ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	4b46      	ldr	r3, [pc, #280]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d118      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d8:	4b43      	ldr	r3, [pc, #268]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a42      	ldr	r2, [pc, #264]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e4:	f7fd fb18 	bl	8000718 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ea:	e008      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ec:	f7fd fb14 	bl	8000718 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	; 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e06d      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fe:	4b3a      	ldr	r3, [pc, #232]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800310a:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003112:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d02e      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	429a      	cmp	r2, r3
 8003126:	d027      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003128:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003130:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003132:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003134:	2201      	movs	r2, #1
 8003136:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003138:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800313e:	4a29      	ldr	r2, [pc, #164]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d014      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fd fae3 	bl	8000718 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003154:	e00a      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7fd fadf 	bl	8000718 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	; 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e036      	b.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316c:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ee      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003178:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4917      	ldr	r1, [pc, #92]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	4313      	orrs	r3, r2
 8003188:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800318a:	7dfb      	ldrb	r3, [r7, #23]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d105      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003190:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800319a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	490b      	ldr	r1, [pc, #44]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d008      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031c6:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	4904      	ldr	r1, [pc, #16]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
 80031ec:	42420440 	.word	0x42420440

080031f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e041      	b.n	8003286 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd f924 	bl	8000464 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3304      	adds	r3, #4
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f000 f8f0 	bl	8003414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
	...

08003290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e0ae      	b.n	800340c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b0c      	cmp	r3, #12
 80032ba:	f200 809f 	bhi.w	80033fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032be:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c4:	080032f9 	.word	0x080032f9
 80032c8:	080033fd 	.word	0x080033fd
 80032cc:	080033fd 	.word	0x080033fd
 80032d0:	080033fd 	.word	0x080033fd
 80032d4:	08003339 	.word	0x08003339
 80032d8:	080033fd 	.word	0x080033fd
 80032dc:	080033fd 	.word	0x080033fd
 80032e0:	080033fd 	.word	0x080033fd
 80032e4:	0800337b 	.word	0x0800337b
 80032e8:	080033fd 	.word	0x080033fd
 80032ec:	080033fd 	.word	0x080033fd
 80032f0:	080033fd 	.word	0x080033fd
 80032f4:	080033bb 	.word	0x080033bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 f8ea 	bl	80034d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0208 	orr.w	r2, r2, #8
 8003312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0204 	bic.w	r2, r2, #4
 8003322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6999      	ldr	r1, [r3, #24]
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	619a      	str	r2, [r3, #24]
      break;
 8003336:	e064      	b.n	8003402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	4618      	mov	r0, r3
 8003340:	f000 f930 	bl	80035a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6999      	ldr	r1, [r3, #24]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	021a      	lsls	r2, r3, #8
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	619a      	str	r2, [r3, #24]
      break;
 8003378:	e043      	b.n	8003402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68b9      	ldr	r1, [r7, #8]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f979 	bl	8003678 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0208 	orr.w	r2, r2, #8
 8003394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0204 	bic.w	r2, r2, #4
 80033a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69d9      	ldr	r1, [r3, #28]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	61da      	str	r2, [r3, #28]
      break;
 80033b8:	e023      	b.n	8003402 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f9c3 	bl	800374c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69da      	ldr	r2, [r3, #28]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	69d9      	ldr	r1, [r3, #28]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	021a      	lsls	r2, r3, #8
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	61da      	str	r2, [r3, #28]
      break;
 80033fa:	e002      	b.n	8003402 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003400:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800340a:	7dfb      	ldrb	r3, [r7, #23]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a29      	ldr	r2, [pc, #164]	; (80034cc <TIM_Base_SetConfig+0xb8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00b      	beq.n	8003444 <TIM_Base_SetConfig+0x30>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003432:	d007      	beq.n	8003444 <TIM_Base_SetConfig+0x30>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a26      	ldr	r2, [pc, #152]	; (80034d0 <TIM_Base_SetConfig+0xbc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d003      	beq.n	8003444 <TIM_Base_SetConfig+0x30>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a25      	ldr	r2, [pc, #148]	; (80034d4 <TIM_Base_SetConfig+0xc0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d108      	bne.n	8003456 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <TIM_Base_SetConfig+0xb8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00b      	beq.n	8003476 <TIM_Base_SetConfig+0x62>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003464:	d007      	beq.n	8003476 <TIM_Base_SetConfig+0x62>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <TIM_Base_SetConfig+0xbc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d003      	beq.n	8003476 <TIM_Base_SetConfig+0x62>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <TIM_Base_SetConfig+0xc0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d108      	bne.n	8003488 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a07      	ldr	r2, [pc, #28]	; (80034cc <TIM_Base_SetConfig+0xb8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d103      	bne.n	80034bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	615a      	str	r2, [r3, #20]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	40012c00 	.word	0x40012c00
 80034d0:	40000400 	.word	0x40000400
 80034d4:	40000800 	.word	0x40000800

080034d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	f023 0201 	bic.w	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0303 	bic.w	r3, r3, #3
 800350e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f023 0302 	bic.w	r3, r3, #2
 8003520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <TIM_OC1_SetConfig+0xc8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d10c      	bne.n	800354e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 0308 	bic.w	r3, r3, #8
 800353a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a13      	ldr	r2, [pc, #76]	; (80035a0 <TIM_OC1_SetConfig+0xc8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d111      	bne.n	800357a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800355c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	621a      	str	r2, [r3, #32]
}
 8003594:	bf00      	nop
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40012c00 	.word	0x40012c00

080035a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b087      	sub	sp, #28
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f023 0210 	bic.w	r2, r3, #16
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f023 0320 	bic.w	r3, r3, #32
 80035ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a1d      	ldr	r2, [pc, #116]	; (8003674 <TIM_OC2_SetConfig+0xd0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d10d      	bne.n	8003620 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800360a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800361e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a14      	ldr	r2, [pc, #80]	; (8003674 <TIM_OC2_SetConfig+0xd0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d113      	bne.n	8003650 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800362e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	bc80      	pop	{r7}
 8003672:	4770      	bx	lr
 8003674:	40012c00 	.word	0x40012c00

08003678 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1d      	ldr	r2, [pc, #116]	; (8003748 <TIM_OC3_SetConfig+0xd0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10d      	bne.n	80036f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <TIM_OC3_SetConfig+0xd0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d113      	bne.n	8003722 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	621a      	str	r2, [r3, #32]
}
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40012c00 	.word	0x40012c00

0800374c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800377a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003796:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	031b      	lsls	r3, r3, #12
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a0f      	ldr	r2, [pc, #60]	; (80037e4 <TIM_OC4_SetConfig+0x98>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d109      	bne.n	80037c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	019b      	lsls	r3, r3, #6
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	621a      	str	r2, [r3, #32]
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	40012c00 	.word	0x40012c00

080037e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e046      	b.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a16      	ldr	r2, [pc, #88]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00e      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d009      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a12      	ldr	r2, [pc, #72]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a10      	ldr	r2, [pc, #64]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d10c      	bne.n	800387c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4313      	orrs	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	40012c00 	.word	0x40012c00
 800389c:	40000400 	.word	0x40000400
 80038a0:	40000800 	.word	0x40000800

080038a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e042      	b.n	800393c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fc fe16 	bl	80004fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2224      	movs	r2, #36	; 0x24
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fc7f 	bl	80041ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800390c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800391c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b0ba      	sub	sp, #232	; 0xe8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800396a:	2300      	movs	r3, #0
 800396c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003970:	2300      	movs	r3, #0
 8003972:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10f      	bne.n	80039aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398e:	f003 0320 	and.w	r3, r3, #32
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_UART_IRQHandler+0x66>
 8003996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fb63 	bl	800406e <UART_Receive_IT>
      return;
 80039a8:	e25b      	b.n	8003e62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80de 	beq.w	8003b70 <HAL_UART_IRQHandler+0x22c>
 80039b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d106      	bne.n	80039ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80d1 	beq.w	8003b70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <HAL_UART_IRQHandler+0xae>
 80039da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f043 0201 	orr.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_UART_IRQHandler+0xd2>
 80039fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f043 0202 	orr.w	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <HAL_UART_IRQHandler+0xf6>
 8003a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f043 0204 	orr.w	r2, r3, #4
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d011      	beq.n	8003a6a <HAL_UART_IRQHandler+0x126>
 8003a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d105      	bne.n	8003a5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f043 0208 	orr.w	r2, r3, #8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 81f2 	beq.w	8003e58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d008      	beq.n	8003a92 <HAL_UART_IRQHandler+0x14e>
 8003a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 faee 	bl	800406e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d103      	bne.n	8003abe <HAL_UART_IRQHandler+0x17a>
 8003ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d04f      	beq.n	8003b5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f9f8 	bl	8003eb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d041      	beq.n	8003b56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3314      	adds	r3, #20
 8003ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3314      	adds	r3, #20
 8003afa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003afe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b0e:	e841 2300 	strex	r3, r2, [r1]
 8003b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1d9      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d013      	beq.n	8003b4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2a:	4a7e      	ldr	r2, [pc, #504]	; (8003d24 <HAL_UART_IRQHandler+0x3e0>)
 8003b2c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fc ff42 	bl	80009bc <HAL_DMA_Abort_IT>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d016      	beq.n	8003b6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b4c:	e00e      	b.n	8003b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f99c 	bl	8003e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	e00a      	b.n	8003b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f998 	bl	8003e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	e006      	b.n	8003b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f994 	bl	8003e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b6a:	e175      	b.n	8003e58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	bf00      	nop
    return;
 8003b6e:	e173      	b.n	8003e58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	f040 814f 	bne.w	8003e18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8148 	beq.w	8003e18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b8c:	f003 0310 	and.w	r3, r3, #16
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 8141 	beq.w	8003e18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80b6 	beq.w	8003d28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 8145 	beq.w	8003e5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	f080 813e 	bcs.w	8003e5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003be6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	f000 8088 	beq.w	8003d04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c20:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1d9      	bne.n	8003bf4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3314      	adds	r3, #20
 8003c46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4a:	e853 3f00 	ldrex	r3, [r3]
 8003c4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c52:	f023 0301 	bic.w	r3, r3, #1
 8003c56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3314      	adds	r3, #20
 8003c60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e1      	bne.n	8003c40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3314      	adds	r3, #20
 8003c82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c86:	e853 3f00 	ldrex	r3, [r3]
 8003c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3314      	adds	r3, #20
 8003c9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ca0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ca2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ca6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e3      	bne.n	8003c7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd4:	f023 0310 	bic.w	r3, r3, #16
 8003cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003ce6:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ce8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e3      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc fe21 	bl	8000946 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4619      	mov	r1, r3
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f8bf 	bl	8003e9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d20:	e09c      	b.n	8003e5c <HAL_UART_IRQHandler+0x518>
 8003d22:	bf00      	nop
 8003d24:	08003f79 	.word	0x08003f79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 808e 	beq.w	8003e60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8089 	beq.w	8003e60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	330c      	adds	r3, #12
 8003d6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d72:	647a      	str	r2, [r7, #68]	; 0x44
 8003d74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e3      	bne.n	8003d4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	623b      	str	r3, [r7, #32]
   return(result);
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3314      	adds	r3, #20
 8003da6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003daa:	633a      	str	r2, [r7, #48]	; 0x30
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e3      	bne.n	8003d86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0310 	bic.w	r3, r3, #16
 8003de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003df0:	61fa      	str	r2, [r7, #28]
 8003df2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	69b9      	ldr	r1, [r7, #24]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e3      	bne.n	8003dcc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2202      	movs	r2, #2
 8003e08:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f844 	bl	8003e9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e16:	e023      	b.n	8003e60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d009      	beq.n	8003e38 <HAL_UART_IRQHandler+0x4f4>
 8003e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f8b5 	bl	8003fa0 <UART_Transmit_IT>
    return;
 8003e36:	e014      	b.n	8003e62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00e      	beq.n	8003e62 <HAL_UART_IRQHandler+0x51e>
 8003e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f8f4 	bl	800403e <UART_EndTransmit_IT>
    return;
 8003e56:	e004      	b.n	8003e62 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e58:	bf00      	nop
 8003e5a:	e002      	b.n	8003e62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e5c:	bf00      	nop
 8003e5e:	e000      	b.n	8003e62 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e60:	bf00      	nop
  }
}
 8003e62:	37e8      	adds	r7, #232	; 0xe8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr

08003e8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr

08003e9e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b083      	sub	sp, #12
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr

08003eb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b095      	sub	sp, #84	; 0x54
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003edc:	643a      	str	r2, [r7, #64]	; 0x40
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e5      	bne.n	8003ebc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f023 0301 	bic.w	r3, r3, #1
 8003f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f18:	e841 2300 	strex	r3, r2, [r1]
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1e5      	bne.n	8003ef0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d119      	bne.n	8003f60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	330c      	adds	r3, #12
 8003f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f023 0310 	bic.w	r3, r3, #16
 8003f42:	647b      	str	r3, [r7, #68]	; 0x44
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	330c      	adds	r3, #12
 8003f4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f4c:	61ba      	str	r2, [r7, #24]
 8003f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6979      	ldr	r1, [r7, #20]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e5      	bne.n	8003f2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f6e:	bf00      	nop
 8003f70:	3754      	adds	r7, #84	; 0x54
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f7ff ff7a 	bl	8003e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b21      	cmp	r3, #33	; 0x21
 8003fb2:	d13e      	bne.n	8004032 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbc:	d114      	bne.n	8003fe8 <UART_Transmit_IT+0x48>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d110      	bne.n	8003fe8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	1c9a      	adds	r2, r3, #2
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	621a      	str	r2, [r3, #32]
 8003fe6:	e008      	b.n	8003ffa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	1c59      	adds	r1, r3, #1
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	6211      	str	r1, [r2, #32]
 8003ff2:	781a      	ldrb	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29b      	uxth	r3, r3
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	4619      	mov	r1, r3
 8004008:	84d1      	strh	r1, [r2, #38]	; 0x26
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10f      	bne.n	800402e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800401c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800402c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800402e:	2300      	movs	r3, #0
 8004030:	e000      	b.n	8004034 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004032:	2302      	movs	r3, #2
  }
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr

0800403e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68da      	ldr	r2, [r3, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004054:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff ff02 	bl	8003e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b08c      	sub	sp, #48	; 0x30
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b22      	cmp	r3, #34	; 0x22
 8004080:	f040 80ae 	bne.w	80041e0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408c:	d117      	bne.n	80040be <UART_Receive_IT+0x50>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d113      	bne.n	80040be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004096:	2300      	movs	r3, #0
 8004098:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	1c9a      	adds	r2, r3, #2
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28
 80040bc:	e026      	b.n	800410c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d0:	d007      	beq.n	80040e2 <UART_Receive_IT+0x74>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <UART_Receive_IT+0x82>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e008      	b.n	8004102 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004100:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29b      	uxth	r3, r3
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	4619      	mov	r1, r3
 800411a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800411c:	2b00      	cmp	r3, #0
 800411e:	d15d      	bne.n	80041dc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0220 	bic.w	r2, r2, #32
 800412e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800413e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	2b01      	cmp	r3, #1
 8004164:	d135      	bne.n	80041d2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	613b      	str	r3, [r7, #16]
   return(result);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f023 0310 	bic.w	r3, r3, #16
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418c:	623a      	str	r2, [r7, #32]
 800418e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	69f9      	ldr	r1, [r7, #28]
 8004192:	6a3a      	ldr	r2, [r7, #32]
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	61bb      	str	r3, [r7, #24]
   return(result);
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b10      	cmp	r3, #16
 80041ac:	d10a      	bne.n	80041c4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041c8:	4619      	mov	r1, r3
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff fe67 	bl	8003e9e <HAL_UARTEx_RxEventCallback>
 80041d0:	e002      	b.n	80041d8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7ff fe51 	bl	8003e7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	e002      	b.n	80041e2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3730      	adds	r7, #48	; 0x30
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	431a      	orrs	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004226:	f023 030c 	bic.w	r3, r3, #12
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	68b9      	ldr	r1, [r7, #8]
 8004230:	430b      	orrs	r3, r1
 8004232:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2c      	ldr	r2, [pc, #176]	; (8004300 <UART_SetConfig+0x114>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d103      	bne.n	800425c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004254:	f7fe fee4 	bl	8003020 <HAL_RCC_GetPCLK2Freq>
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	e002      	b.n	8004262 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800425c:	f7fe fecc 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8004260:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009a      	lsls	r2, r3, #2
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	4a22      	ldr	r2, [pc, #136]	; (8004304 <UART_SetConfig+0x118>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	0119      	lsls	r1, r3, #4
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	009a      	lsls	r2, r3, #2
 800428c:	441a      	add	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	fbb2 f2f3 	udiv	r2, r2, r3
 8004298:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <UART_SetConfig+0x118>)
 800429a:	fba3 0302 	umull	r0, r3, r3, r2
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	2064      	movs	r0, #100	; 0x64
 80042a2:	fb00 f303 	mul.w	r3, r0, r3
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	3332      	adds	r3, #50	; 0x32
 80042ac:	4a15      	ldr	r2, [pc, #84]	; (8004304 <UART_SetConfig+0x118>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b8:	4419      	add	r1, r3
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	009a      	lsls	r2, r3, #2
 80042c4:	441a      	add	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <UART_SetConfig+0x118>)
 80042d2:	fba3 0302 	umull	r0, r3, r3, r2
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	2064      	movs	r0, #100	; 0x64
 80042da:	fb00 f303 	mul.w	r3, r0, r3
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	3332      	adds	r3, #50	; 0x32
 80042e4:	4a07      	ldr	r2, [pc, #28]	; (8004304 <UART_SetConfig+0x118>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	f003 020f 	and.w	r2, r3, #15
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	440a      	add	r2, r1
 80042f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40013800 	.word	0x40013800
 8004304:	51eb851f 	.word	0x51eb851f

08004308 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004308:	b084      	sub	sp, #16
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	f107 0014 	add.w	r0, r7, #20
 8004316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	b004      	add	sp, #16
 8004326:	4770      	bx	lr

08004328 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004338:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800433c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	b29a      	uxth	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800435c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004360:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004368:	b29a      	uxth	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	b29b      	uxth	r3, r3
 800436e:	43db      	mvns	r3, r3
 8004370:	b29b      	uxth	r3, r3
 8004372:	4013      	ands	r3, r2
 8004374:	b29a      	uxth	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80043a0:	b084      	sub	sp, #16
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	f107 0014 	add.w	r0, r7, #20
 80043ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	b004      	add	sp, #16
 80043de:	4770      	bx	lr

080043e0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b09d      	sub	sp, #116	; 0x74
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	78db      	ldrb	r3, [r3, #3]
 800440e:	2b03      	cmp	r3, #3
 8004410:	d81f      	bhi.n	8004452 <USB_ActivateEndpoint+0x72>
 8004412:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <USB_ActivateEndpoint+0x38>)
 8004414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004418:	08004429 	.word	0x08004429
 800441c:	08004445 	.word	0x08004445
 8004420:	0800445b 	.word	0x0800445b
 8004424:	08004437 	.word	0x08004437
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004428:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800442c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004430:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004434:	e012      	b.n	800445c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004436:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800443a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800443e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004442:	e00b      	b.n	800445c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004444:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800444c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8004450:	e004      	b.n	800445c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004458:	e000      	b.n	800445c <USB_ActivateEndpoint+0x7c>
      break;
 800445a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	441a      	add	r2, r3
 8004466:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800446a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800446e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447a:	b29b      	uxth	r3, r3
 800447c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	b29b      	uxth	r3, r3
 800448c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004494:	b29a      	uxth	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	b29b      	uxth	r3, r3
 800449c:	4313      	orrs	r3, r2
 800449e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	441a      	add	r2, r3
 80044ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80044b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	7b1b      	ldrb	r3, [r3, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f040 8178 	bne.w	80047be <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	785b      	ldrb	r3, [r3, #1]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f000 8084 	beq.w	80045e0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	61bb      	str	r3, [r7, #24]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	4413      	add	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	011a      	lsls	r2, r3, #4
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	88db      	ldrh	r3, [r3, #6]
 8004500:	085b      	lsrs	r3, r3, #1
 8004502:	b29b      	uxth	r3, r3
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	827b      	strh	r3, [r7, #18]
 800451a:	8a7b      	ldrh	r3, [r7, #18]
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01b      	beq.n	800455c <USB_ActivateEndpoint+0x17c>
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b29b      	uxth	r3, r3
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453a:	823b      	strh	r3, [r7, #16]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	8a3b      	ldrh	r3, [r7, #16]
 8004548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800454c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004558:	b29b      	uxth	r3, r3
 800455a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	78db      	ldrb	r3, [r3, #3]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d020      	beq.n	80045a6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457a:	81bb      	strh	r3, [r7, #12]
 800457c:	89bb      	ldrh	r3, [r7, #12]
 800457e:	f083 0320 	eor.w	r3, r3, #32
 8004582:	81bb      	strh	r3, [r7, #12]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	441a      	add	r2, r3
 800458e:	89bb      	ldrh	r3, [r7, #12]
 8004590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800459c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	8013      	strh	r3, [r2, #0]
 80045a4:	e2d5      	b.n	8004b52 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045bc:	81fb      	strh	r3, [r7, #14]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	441a      	add	r2, r3
 80045c8:	89fb      	ldrh	r3, [r7, #14]
 80045ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045da:	b29b      	uxth	r3, r3
 80045dc:	8013      	strh	r3, [r2, #0]
 80045de:	e2b8      	b.n	8004b52 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	633b      	str	r3, [r7, #48]	; 0x30
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	4413      	add	r3, r2
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	011a      	lsls	r2, r3, #4
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	88db      	ldrh	r3, [r3, #6]
 8004608:	085b      	lsrs	r3, r3, #1
 800460a:	b29b      	uxth	r3, r3
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004612:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461e:	b29b      	uxth	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	4413      	add	r3, r2
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	011a      	lsls	r2, r3, #4
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	4413      	add	r3, r2
 8004632:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004642:	b29a      	uxth	r2, r3
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b3e      	cmp	r3, #62	; 0x3e
 800464e:	d91d      	bls.n	800468c <USB_ActivateEndpoint+0x2ac>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	66bb      	str	r3, [r7, #104]	; 0x68
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <USB_ActivateEndpoint+0x28a>
 8004664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004666:	3b01      	subs	r3, #1
 8004668:	66bb      	str	r3, [r7, #104]	; 0x68
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29a      	uxth	r2, r3
 8004670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004672:	b29b      	uxth	r3, r3
 8004674:	029b      	lsls	r3, r3, #10
 8004676:	b29b      	uxth	r3, r3
 8004678:	4313      	orrs	r3, r2
 800467a:	b29b      	uxth	r3, r3
 800467c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004684:	b29a      	uxth	r2, r3
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	e026      	b.n	80046da <USB_ActivateEndpoint+0x2fa>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <USB_ActivateEndpoint+0x2ca>
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29b      	uxth	r3, r3
 800469a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800469e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	801a      	strh	r2, [r3, #0]
 80046a8:	e017      	b.n	80046da <USB_ActivateEndpoint+0x2fa>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <USB_ActivateEndpoint+0x2e4>
 80046be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046c0:	3301      	adds	r3, #1
 80046c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	029b      	lsls	r3, r3, #10
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	4313      	orrs	r3, r2
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80046e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01b      	beq.n	800472a <USB_ActivateEndpoint+0x34a>
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004708:	843b      	strh	r3, [r7, #32]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	441a      	add	r2, r3
 8004714:	8c3b      	ldrh	r3, [r7, #32]
 8004716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800471a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800471e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004726:	b29b      	uxth	r3, r3
 8004728:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d124      	bne.n	800477c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	b29b      	uxth	r3, r3
 8004740:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004748:	83bb      	strh	r3, [r7, #28]
 800474a:	8bbb      	ldrh	r3, [r7, #28]
 800474c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004750:	83bb      	strh	r3, [r7, #28]
 8004752:	8bbb      	ldrh	r3, [r7, #28]
 8004754:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004758:	83bb      	strh	r3, [r7, #28]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	441a      	add	r2, r3
 8004764:	8bbb      	ldrh	r3, [r7, #28]
 8004766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004776:	b29b      	uxth	r3, r3
 8004778:	8013      	strh	r3, [r2, #0]
 800477a:	e1ea      	b.n	8004b52 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	83fb      	strh	r3, [r7, #30]
 8004794:	8bfb      	ldrh	r3, [r7, #30]
 8004796:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800479a:	83fb      	strh	r3, [r7, #30]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	441a      	add	r2, r3
 80047a6:	8bfb      	ldrh	r3, [r7, #30]
 80047a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	8013      	strh	r3, [r2, #0]
 80047bc:	e1c9      	b.n	8004b52 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	78db      	ldrb	r3, [r3, #3]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d11e      	bne.n	8004804 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047dc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	441a      	add	r2, r3
 80047ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80047ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fe:	b29b      	uxth	r3, r3
 8004800:	8013      	strh	r3, [r2, #0]
 8004802:	e01d      	b.n	8004840 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	4413      	add	r3, r2
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	441a      	add	r2, r3
 8004828:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800482c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483c:	b29b      	uxth	r3, r3
 800483e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484a:	b29b      	uxth	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004850:	4413      	add	r3, r2
 8004852:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	011a      	lsls	r2, r3, #4
 800485a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800485c:	4413      	add	r3, r2
 800485e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004862:	65bb      	str	r3, [r7, #88]	; 0x58
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	891b      	ldrh	r3, [r3, #8]
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	b29b      	uxth	r3, r3
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004872:	801a      	strh	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	657b      	str	r3, [r7, #84]	; 0x54
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800487e:	b29b      	uxth	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004884:	4413      	add	r3, r2
 8004886:	657b      	str	r3, [r7, #84]	; 0x54
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	011a      	lsls	r2, r3, #4
 800488e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004890:	4413      	add	r3, r2
 8004892:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004896:	653b      	str	r3, [r7, #80]	; 0x50
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	895b      	ldrh	r3, [r3, #10]
 800489c:	085b      	lsrs	r3, r3, #1
 800489e:	b29b      	uxth	r3, r3
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f040 8093 	bne.w	80049d8 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80048c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d01b      	beq.n	8004906 <USB_ActivateEndpoint+0x526>
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	441a      	add	r2, r3
 80048f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004902:	b29b      	uxth	r3, r3
 8004904:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004914:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01b      	beq.n	8004956 <USB_ActivateEndpoint+0x576>
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	441a      	add	r2, r3
 8004940:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004942:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004946:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800494a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800494e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004952:	b29b      	uxth	r3, r3
 8004954:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496c:	873b      	strh	r3, [r7, #56]	; 0x38
 800496e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004970:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004974:	873b      	strh	r3, [r7, #56]	; 0x38
 8004976:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004978:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800497c:	873b      	strh	r3, [r7, #56]	; 0x38
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	441a      	add	r2, r3
 8004988:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800498a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499a:	b29b      	uxth	r3, r3
 800499c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	441a      	add	r2, r3
 80049c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8013      	strh	r3, [r2, #0]
 80049d6:	e0bc      	b.n	8004b52 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80049e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80049ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01d      	beq.n	8004a30 <USB_ActivateEndpoint+0x650>
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	441a      	add	r2, r3
 8004a18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004a40:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01d      	beq.n	8004a88 <USB_ActivateEndpoint+0x6a8>
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	441a      	add	r2, r3
 8004a70:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	78db      	ldrb	r3, [r3, #3]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d024      	beq.n	8004ada <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004aaa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004aae:	f083 0320 	eor.w	r3, r3, #32
 8004ab2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	441a      	add	r2, r3
 8004ac0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004ac4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004acc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	8013      	strh	r3, [r2, #0]
 8004ad8:	e01d      	b.n	8004b16 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	881b      	ldrh	r3, [r3, #0]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	441a      	add	r2, r3
 8004afe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	441a      	add	r2, r3
 8004b3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004b52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3774      	adds	r7, #116	; 0x74
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr

08004b60 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b08d      	sub	sp, #52	; 0x34
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	7b1b      	ldrb	r3, [r3, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 808e 	bne.w	8004c90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d044      	beq.n	8004c06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	81bb      	strh	r3, [r7, #12]
 8004b8a:	89bb      	ldrh	r3, [r7, #12]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01b      	beq.n	8004bcc <USB_DeactivateEndpoint+0x6c>
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	881b      	ldrh	r3, [r3, #0]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	817b      	strh	r3, [r7, #10]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	441a      	add	r2, r3
 8004bb6:	897b      	ldrh	r3, [r7, #10]
 8004bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be2:	813b      	strh	r3, [r7, #8]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	441a      	add	r2, r3
 8004bee:	893b      	ldrh	r3, [r7, #8]
 8004bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	8013      	strh	r3, [r2, #0]
 8004c04:	e192      	b.n	8004f2c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	827b      	strh	r3, [r7, #18]
 8004c14:	8a7b      	ldrh	r3, [r7, #18]
 8004c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01b      	beq.n	8004c56 <USB_DeactivateEndpoint+0xf6>
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c34:	823b      	strh	r3, [r7, #16]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	441a      	add	r2, r3
 8004c40:	8a3b      	ldrh	r3, [r7, #16]
 8004c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6c:	81fb      	strh	r3, [r7, #14]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	441a      	add	r2, r3
 8004c78:	89fb      	ldrh	r3, [r7, #14]
 8004c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	8013      	strh	r3, [r2, #0]
 8004c8e:	e14d      	b.n	8004f2c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	785b      	ldrb	r3, [r3, #1]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f040 80a5 	bne.w	8004de4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	4413      	add	r3, r2
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	843b      	strh	r3, [r7, #32]
 8004ca8:	8c3b      	ldrh	r3, [r7, #32]
 8004caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01b      	beq.n	8004cea <USB_DeactivateEndpoint+0x18a>
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc8:	83fb      	strh	r3, [r7, #30]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	441a      	add	r2, r3
 8004cd4:	8bfb      	ldrh	r3, [r7, #30]
 8004cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	83bb      	strh	r3, [r7, #28]
 8004cf8:	8bbb      	ldrh	r3, [r7, #28]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01b      	beq.n	8004d3a <USB_DeactivateEndpoint+0x1da>
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d18:	837b      	strh	r3, [r7, #26]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	441a      	add	r2, r3
 8004d24:	8b7b      	ldrh	r3, [r7, #26]
 8004d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d50:	833b      	strh	r3, [r7, #24]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	8b3b      	ldrh	r3, [r7, #24]
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d88:	82fb      	strh	r3, [r7, #22]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	441a      	add	r2, r3
 8004d94:	8afb      	ldrh	r3, [r7, #22]
 8004d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc0:	82bb      	strh	r3, [r7, #20]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	8abb      	ldrh	r3, [r7, #20]
 8004dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	8013      	strh	r3, [r2, #0]
 8004de2:	e0a3      	b.n	8004f2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	881b      	ldrh	r3, [r3, #0]
 8004df0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01b      	beq.n	8004e34 <USB_DeactivateEndpoint+0x2d4>
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	441a      	add	r2, r3
 8004e1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004e42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01b      	beq.n	8004e84 <USB_DeactivateEndpoint+0x324>
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e62:	853b      	strh	r3, [r7, #40]	; 0x28
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	441a      	add	r2, r3
 8004e6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	441a      	add	r2, r3
 8004ea6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ed2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	441a      	add	r2, r3
 8004ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	441a      	add	r2, r3
 8004f16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3734      	adds	r7, #52	; 0x34
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b0c2      	sub	sp, #264	; 0x108
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f46:	6018      	str	r0, [r3, #0]
 8004f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f50:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	785b      	ldrb	r3, [r3, #1]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	f040 86b7 	bne.w	8005cd2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d908      	bls.n	8004f92 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f90:	e007      	b.n	8004fa2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	7b1b      	ldrb	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d13a      	bne.n	8005028 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6959      	ldr	r1, [r3, #20]
 8004fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	88da      	ldrh	r2, [r3, #6]
 8004fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004fd4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004fd8:	6800      	ldr	r0, [r0, #0]
 8004fda:	f001 fc9c 	bl	8006916 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4413      	add	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	011a      	lsls	r2, r3, #4
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4413      	add	r3, r2
 8005014:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005018:	60fb      	str	r3, [r7, #12]
 800501a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800501e:	b29a      	uxth	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	f000 be1f 	b.w	8005c66 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800502c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	78db      	ldrb	r3, [r3, #3]
 8005034:	2b02      	cmp	r3, #2
 8005036:	f040 8462 	bne.w	80058fe <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800503a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800503e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6a1a      	ldr	r2, [r3, #32]
 8005046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800504a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	429a      	cmp	r2, r3
 8005054:	f240 83df 	bls.w	8005816 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800505c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800507a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005086:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	441a      	add	r2, r3
 800509c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80050a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80050b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a1a      	ldr	r2, [r3, #32]
 80050c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c4:	1ad2      	subs	r2, r2, r3
 80050c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 81c7 	beq.w	8005488 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	633b      	str	r3, [r7, #48]	; 0x30
 8005106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d177      	bne.n	8005206 <USB_EPStartXfer+0x2ce>
 8005116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
 8005122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005130:	b29b      	uxth	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	4413      	add	r3, r2
 8005138:	62bb      	str	r3, [r7, #40]	; 0x28
 800513a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	011a      	lsls	r2, r3, #4
 8005148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514a:	4413      	add	r3, r2
 800514c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800515c:	b29a      	uxth	r2, r3
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	801a      	strh	r2, [r3, #0]
 8005162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005166:	2b3e      	cmp	r3, #62	; 0x3e
 8005168:	d921      	bls.n	80051ae <USB_EPStartXfer+0x276>
 800516a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005174:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <USB_EPStartXfer+0x252>
 8005180:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005184:	3b01      	subs	r3, #1
 8005186:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	b29a      	uxth	r2, r3
 8005190:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005194:	b29b      	uxth	r3, r3
 8005196:	029b      	lsls	r3, r3, #10
 8005198:	b29b      	uxth	r3, r3
 800519a:	4313      	orrs	r3, r2
 800519c:	b29b      	uxth	r3, r3
 800519e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	801a      	strh	r2, [r3, #0]
 80051ac:	e050      	b.n	8005250 <USB_EPStartXfer+0x318>
 80051ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10a      	bne.n	80051cc <USB_EPStartXfer+0x294>
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	801a      	strh	r2, [r3, #0]
 80051ca:	e041      	b.n	8005250 <USB_EPStartXfer+0x318>
 80051cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d0:	085b      	lsrs	r3, r3, #1
 80051d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <USB_EPStartXfer+0x2b4>
 80051e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051e6:	3301      	adds	r3, #1
 80051e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	881b      	ldrh	r3, [r3, #0]
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	029b      	lsls	r3, r3, #10
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	4313      	orrs	r3, r2
 80051fe:	b29a      	uxth	r2, r3
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	801a      	strh	r2, [r3, #0]
 8005204:	e024      	b.n	8005250 <USB_EPStartXfer+0x318>
 8005206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d11c      	bne.n	8005250 <USB_EPStartXfer+0x318>
 8005216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005224:	b29b      	uxth	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	4413      	add	r3, r2
 800522c:	633b      	str	r3, [r7, #48]	; 0x30
 800522e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	011a      	lsls	r2, r3, #4
 800523c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523e:	4413      	add	r3, r2
 8005240:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800524a:	b29a      	uxth	r2, r3
 800524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	895b      	ldrh	r3, [r3, #10]
 800525c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6959      	ldr	r1, [r3, #20]
 800526c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005270:	b29b      	uxth	r3, r3
 8005272:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005276:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800527a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800527e:	6800      	ldr	r0, [r0, #0]
 8005280:	f001 fb49 	bl	8006916 <USB_WritePMA>
            ep->xfer_buff += len;
 8005284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695a      	ldr	r2, [r3, #20]
 8005290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005294:	441a      	add	r2, r3
 8005296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800529a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a1a      	ldr	r2, [r3, #32]
 80052ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d90f      	bls.n	80052de <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80052be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6a1a      	ldr	r2, [r3, #32]
 80052ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	621a      	str	r2, [r3, #32]
 80052dc:	e00e      	b.n	80052fc <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80052de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80052ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2200      	movs	r2, #0
 80052fa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d177      	bne.n	80053fc <USB_EPStartXfer+0x4c4>
 800530c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005326:	b29b      	uxth	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	4413      	add	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
 8005330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	011a      	lsls	r2, r3, #4
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	4413      	add	r3, r2
 8005342:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	b29b      	uxth	r3, r3
 800534e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005352:	b29a      	uxth	r2, r3
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800535c:	2b3e      	cmp	r3, #62	; 0x3e
 800535e:	d921      	bls.n	80053a4 <USB_EPStartXfer+0x46c>
 8005360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	2b00      	cmp	r3, #0
 8005374:	d104      	bne.n	8005380 <USB_EPStartXfer+0x448>
 8005376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800537a:	3b01      	subs	r3, #1
 800537c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29a      	uxth	r2, r3
 8005386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800538a:	b29b      	uxth	r3, r3
 800538c:	029b      	lsls	r3, r3, #10
 800538e:	b29b      	uxth	r3, r3
 8005390:	4313      	orrs	r3, r2
 8005392:	b29b      	uxth	r3, r3
 8005394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800539c:	b29a      	uxth	r2, r3
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	e056      	b.n	8005452 <USB_EPStartXfer+0x51a>
 80053a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <USB_EPStartXfer+0x48a>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	e047      	b.n	8005452 <USB_EPStartXfer+0x51a>
 80053c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d004      	beq.n	80053e2 <USB_EPStartXfer+0x4aa>
 80053d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053dc:	3301      	adds	r3, #1
 80053de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	029b      	lsls	r3, r3, #10
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	4313      	orrs	r3, r2
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	801a      	strh	r2, [r3, #0]
 80053fa:	e02a      	b.n	8005452 <USB_EPStartXfer+0x51a>
 80053fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d122      	bne.n	8005452 <USB_EPStartXfer+0x51a>
 800540c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	623b      	str	r3, [r7, #32]
 8005418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005426:	b29b      	uxth	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	4413      	add	r3, r2
 800542e:	623b      	str	r3, [r7, #32]
 8005430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	011a      	lsls	r2, r3, #4
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	4413      	add	r3, r2
 8005442:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800544c:	b29a      	uxth	r2, r3
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	891b      	ldrh	r3, [r3, #8]
 800545e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6959      	ldr	r1, [r3, #20]
 800546e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005472:	b29b      	uxth	r3, r3
 8005474:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005478:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800547c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005480:	6800      	ldr	r0, [r0, #0]
 8005482:	f001 fa48 	bl	8006916 <USB_WritePMA>
 8005486:	e3ee      	b.n	8005c66 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800548c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	785b      	ldrb	r3, [r3, #1]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d177      	bne.n	8005588 <USB_EPStartXfer+0x650>
 8005498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800549c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054b8:	4413      	add	r3, r2
 80054ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80054bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	011a      	lsls	r2, r3, #4
 80054ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054cc:	4413      	add	r3, r2
 80054ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80054d2:	647b      	str	r3, [r7, #68]	; 0x44
 80054d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e8:	2b3e      	cmp	r3, #62	; 0x3e
 80054ea:	d921      	bls.n	8005530 <USB_EPStartXfer+0x5f8>
 80054ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d104      	bne.n	800550c <USB_EPStartXfer+0x5d4>
 8005502:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005506:	3b01      	subs	r3, #1
 8005508:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800550c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29a      	uxth	r2, r3
 8005512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005516:	b29b      	uxth	r3, r3
 8005518:	029b      	lsls	r3, r3, #10
 800551a:	b29b      	uxth	r3, r3
 800551c:	4313      	orrs	r3, r2
 800551e:	b29b      	uxth	r3, r3
 8005520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005528:	b29a      	uxth	r2, r3
 800552a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800552c:	801a      	strh	r2, [r3, #0]
 800552e:	e056      	b.n	80055de <USB_EPStartXfer+0x6a6>
 8005530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <USB_EPStartXfer+0x616>
 8005538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005546:	b29a      	uxth	r2, r3
 8005548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	e047      	b.n	80055de <USB_EPStartXfer+0x6a6>
 800554e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d004      	beq.n	800556e <USB_EPStartXfer+0x636>
 8005564:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005568:	3301      	adds	r3, #1
 800556a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800556e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29a      	uxth	r2, r3
 8005574:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005578:	b29b      	uxth	r3, r3
 800557a:	029b      	lsls	r3, r3, #10
 800557c:	b29b      	uxth	r3, r3
 800557e:	4313      	orrs	r3, r2
 8005580:	b29a      	uxth	r2, r3
 8005582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005584:	801a      	strh	r2, [r3, #0]
 8005586:	e02a      	b.n	80055de <USB_EPStartXfer+0x6a6>
 8005588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	785b      	ldrb	r3, [r3, #1]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d122      	bne.n	80055de <USB_EPStartXfer+0x6a6>
 8005598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	653b      	str	r3, [r7, #80]	; 0x50
 80055a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	461a      	mov	r2, r3
 80055b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b8:	4413      	add	r3, r2
 80055ba:	653b      	str	r3, [r7, #80]	; 0x50
 80055bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	011a      	lsls	r2, r3, #4
 80055ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055cc:	4413      	add	r3, r2
 80055ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d8:	b29a      	uxth	r2, r3
 80055da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80055de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	891b      	ldrh	r3, [r3, #8]
 80055ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6959      	ldr	r1, [r3, #20]
 80055fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055fe:	b29b      	uxth	r3, r3
 8005600:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005604:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005608:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800560c:	6800      	ldr	r0, [r0, #0]
 800560e:	f001 f982 	bl	8006916 <USB_WritePMA>
            ep->xfer_buff += len;
 8005612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695a      	ldr	r2, [r3, #20]
 800561e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005622:	441a      	add	r2, r3
 8005624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6a1a      	ldr	r2, [r3, #32]
 800563c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	429a      	cmp	r2, r3
 800564a:	d90f      	bls.n	800566c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800564c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6a1a      	ldr	r2, [r3, #32]
 8005658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800565c:	1ad2      	subs	r2, r2, r3
 800565e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	621a      	str	r2, [r3, #32]
 800566a:	e00e      	b.n	800568a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800566c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800567c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005680:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2200      	movs	r2, #0
 8005688:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800568a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800568e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	643b      	str	r3, [r7, #64]	; 0x40
 8005696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800569a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d177      	bne.n	8005796 <USB_EPStartXfer+0x85e>
 80056a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80056b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	461a      	mov	r2, r3
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	4413      	add	r3, r2
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	011a      	lsls	r2, r3, #4
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	4413      	add	r3, r2
 80056dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056e0:	637b      	str	r3, [r7, #52]	; 0x34
 80056e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f6:	2b3e      	cmp	r3, #62	; 0x3e
 80056f8:	d921      	bls.n	800573e <USB_EPStartXfer+0x806>
 80056fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056fe:	095b      	lsrs	r3, r3, #5
 8005700:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005708:	f003 031f 	and.w	r3, r3, #31
 800570c:	2b00      	cmp	r3, #0
 800570e:	d104      	bne.n	800571a <USB_EPStartXfer+0x7e2>
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	3b01      	subs	r3, #1
 8005716:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800571a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29a      	uxth	r2, r3
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005724:	b29b      	uxth	r3, r3
 8005726:	029b      	lsls	r3, r3, #10
 8005728:	b29b      	uxth	r3, r3
 800572a:	4313      	orrs	r3, r2
 800572c:	b29b      	uxth	r3, r3
 800572e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005732:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005736:	b29a      	uxth	r2, r3
 8005738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	e050      	b.n	80057e0 <USB_EPStartXfer+0x8a8>
 800573e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <USB_EPStartXfer+0x824>
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	881b      	ldrh	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005754:	b29a      	uxth	r2, r3
 8005756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005758:	801a      	strh	r2, [r3, #0]
 800575a:	e041      	b.n	80057e0 <USB_EPStartXfer+0x8a8>
 800575c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005760:	085b      	lsrs	r3, r3, #1
 8005762:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d004      	beq.n	800577c <USB_EPStartXfer+0x844>
 8005772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005776:	3301      	adds	r3, #1
 8005778:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800577c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29a      	uxth	r2, r3
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005786:	b29b      	uxth	r3, r3
 8005788:	029b      	lsls	r3, r3, #10
 800578a:	b29b      	uxth	r3, r3
 800578c:	4313      	orrs	r3, r2
 800578e:	b29a      	uxth	r2, r3
 8005790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	e024      	b.n	80057e0 <USB_EPStartXfer+0x8a8>
 8005796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	785b      	ldrb	r3, [r3, #1]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d11c      	bne.n	80057e0 <USB_EPStartXfer+0x8a8>
 80057a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ba:	4413      	add	r3, r2
 80057bc:	643b      	str	r3, [r7, #64]	; 0x40
 80057be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	011a      	lsls	r2, r3, #4
 80057cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ce:	4413      	add	r3, r2
 80057d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057da:	b29a      	uxth	r2, r3
 80057dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80057e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	895b      	ldrh	r3, [r3, #10]
 80057ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6959      	ldr	r1, [r3, #20]
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005800:	b29b      	uxth	r3, r3
 8005802:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005806:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800580a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800580e:	6800      	ldr	r0, [r0, #0]
 8005810:	f001 f881 	bl	8006916 <USB_WritePMA>
 8005814:	e227      	b.n	8005c66 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800582a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005854:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	441a      	add	r2, r3
 800586a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800586e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800587a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800587e:	b29b      	uxth	r3, r3
 8005880:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800588e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589c:	b29b      	uxth	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a2:	4413      	add	r3, r2
 80058a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	011a      	lsls	r2, r3, #4
 80058b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058b6:	4413      	add	r3, r2
 80058b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80058be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	891b      	ldrh	r3, [r3, #8]
 80058d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6959      	ldr	r1, [r3, #20]
 80058e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80058ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80058f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80058f6:	6800      	ldr	r0, [r0, #0]
 80058f8:	f001 f80d 	bl	8006916 <USB_WritePMA>
 80058fc:	e1b3      	b.n	8005c66 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80058fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6a1a      	ldr	r2, [r3, #32]
 800590a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590e:	1ad2      	subs	r2, r2, r3
 8005910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800591c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	b29b      	uxth	r3, r3
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	f000 80c6 	beq.w	8005ad0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005948:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	673b      	str	r3, [r7, #112]	; 0x70
 8005950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	785b      	ldrb	r3, [r3, #1]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d177      	bne.n	8005a50 <USB_EPStartXfer+0xb18>
 8005960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005964:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	66bb      	str	r3, [r7, #104]	; 0x68
 800596c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005970:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597a:	b29b      	uxth	r3, r3
 800597c:	461a      	mov	r2, r3
 800597e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005980:	4413      	add	r3, r2
 8005982:	66bb      	str	r3, [r7, #104]	; 0x68
 8005984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	011a      	lsls	r2, r3, #4
 8005992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005994:	4413      	add	r3, r2
 8005996:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800599a:	667b      	str	r3, [r7, #100]	; 0x64
 800599c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b0:	2b3e      	cmp	r3, #62	; 0x3e
 80059b2:	d921      	bls.n	80059f8 <USB_EPStartXfer+0xac0>
 80059b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80059be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d104      	bne.n	80059d4 <USB_EPStartXfer+0xa9c>
 80059ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80059ce:	3b01      	subs	r3, #1
 80059d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80059d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29a      	uxth	r2, r3
 80059da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80059de:	b29b      	uxth	r3, r3
 80059e0:	029b      	lsls	r3, r3, #10
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	4313      	orrs	r3, r2
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059f4:	801a      	strh	r2, [r3, #0]
 80059f6:	e050      	b.n	8005a9a <USB_EPStartXfer+0xb62>
 80059f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <USB_EPStartXfer+0xade>
 8005a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a02:	881b      	ldrh	r3, [r3, #0]
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a12:	801a      	strh	r2, [r3, #0]
 8005a14:	e041      	b.n	8005a9a <USB_EPStartXfer+0xb62>
 8005a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <USB_EPStartXfer+0xafe>
 8005a2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a30:	3301      	adds	r3, #1
 8005a32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	029b      	lsls	r3, r3, #10
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	4313      	orrs	r3, r2
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	e024      	b.n	8005a9a <USB_EPStartXfer+0xb62>
 8005a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d11c      	bne.n	8005a9a <USB_EPStartXfer+0xb62>
 8005a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	461a      	mov	r2, r3
 8005a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a74:	4413      	add	r3, r2
 8005a76:	673b      	str	r3, [r7, #112]	; 0x70
 8005a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	011a      	lsls	r2, r3, #4
 8005a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a88:	4413      	add	r3, r2
 8005a8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	895b      	ldrh	r3, [r3, #10]
 8005aa6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6959      	ldr	r1, [r3, #20]
 8005ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005ac0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005ac4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005ac8:	6800      	ldr	r0, [r0, #0]
 8005aca:	f000 ff24 	bl	8006916 <USB_WritePMA>
 8005ace:	e0ca      	b.n	8005c66 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d177      	bne.n	8005bd0 <USB_EPStartXfer+0xc98>
 8005ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b00:	4413      	add	r3, r2
 8005b02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	011a      	lsls	r2, r3, #4
 8005b12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b14:	4413      	add	r3, r2
 8005b16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b2a:	801a      	strh	r2, [r3, #0]
 8005b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b30:	2b3e      	cmp	r3, #62	; 0x3e
 8005b32:	d921      	bls.n	8005b78 <USB_EPStartXfer+0xc40>
 8005b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b42:	f003 031f 	and.w	r3, r3, #31
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d104      	bne.n	8005b54 <USB_EPStartXfer+0xc1c>
 8005b4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	029b      	lsls	r3, r3, #10
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	4313      	orrs	r3, r2
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	e05c      	b.n	8005c32 <USB_EPStartXfer+0xcfa>
 8005b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <USB_EPStartXfer+0xc5e>
 8005b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e04d      	b.n	8005c32 <USB_EPStartXfer+0xcfa>
 8005b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <USB_EPStartXfer+0xc7e>
 8005bac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005bb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	029b      	lsls	r3, r3, #10
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	e030      	b.n	8005c32 <USB_EPStartXfer+0xcfa>
 8005bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d128      	bne.n	8005c32 <USB_EPStartXfer+0xcfa>
 8005be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c04:	4413      	add	r3, r2
 8005c06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	011a      	lsls	r2, r3, #4
 8005c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c30:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	891b      	ldrh	r3, [r3, #8]
 8005c3e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6959      	ldr	r1, [r3, #20]
 8005c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005c58:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005c5c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005c60:	6800      	ldr	r0, [r0, #0]
 8005c62:	f000 fe58 	bl	8006916 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c8c:	817b      	strh	r3, [r7, #10]
 8005c8e:	897b      	ldrh	r3, [r7, #10]
 8005c90:	f083 0310 	eor.w	r3, r3, #16
 8005c94:	817b      	strh	r3, [r7, #10]
 8005c96:	897b      	ldrh	r3, [r7, #10]
 8005c98:	f083 0320 	eor.w	r3, r3, #32
 8005c9c:	817b      	strh	r3, [r7, #10]
 8005c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	441a      	add	r2, r3
 8005cb8:	897b      	ldrh	r3, [r7, #10]
 8005cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	8013      	strh	r3, [r2, #0]
 8005cce:	f000 bcde 	b.w	800668e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	7b1b      	ldrb	r3, [r3, #12]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f040 80bb 	bne.w	8005e5a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	699a      	ldr	r2, [r3, #24]
 8005cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d917      	bls.n	8005d30 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d20:	1ad2      	subs	r2, r2, r3
 8005d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	619a      	str	r2, [r3, #24]
 8005d2e:	e00e      	b.n	8005d4e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d72:	4413      	add	r3, r2
 8005d74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	011a      	lsls	r2, r3, #4
 8005d86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005da6:	801a      	strh	r2, [r3, #0]
 8005da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dac:	2b3e      	cmp	r3, #62	; 0x3e
 8005dae:	d924      	bls.n	8005dfa <USB_EPStartXfer+0xec2>
 8005db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <USB_EPStartXfer+0xe98>
 8005dc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	029b      	lsls	r3, r3, #10
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	4313      	orrs	r3, r2
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005df4:	801a      	strh	r2, [r3, #0]
 8005df6:	f000 bc10 	b.w	800661a <USB_EPStartXfer+0x16e2>
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10c      	bne.n	8005e1c <USB_EPStartXfer+0xee4>
 8005e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e18:	801a      	strh	r2, [r3, #0]
 8005e1a:	e3fe      	b.n	800661a <USB_EPStartXfer+0x16e2>
 8005e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d004      	beq.n	8005e3c <USB_EPStartXfer+0xf04>
 8005e32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e36:	3301      	adds	r3, #1
 8005e38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	029b      	lsls	r3, r3, #10
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	e3df      	b.n	800661a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005e5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	78db      	ldrb	r3, [r3, #3]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	f040 8218 	bne.w	800629c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	785b      	ldrb	r3, [r3, #1]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f040 809d 	bne.w	8005fb8 <USB_EPStartXfer+0x1080>
 8005e7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ea8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	011a      	lsls	r2, r3, #4
 8005eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eba:	4413      	add	r3, r2
 8005ebc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ec8:	881b      	ldrh	r3, [r3, #0]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ed6:	801a      	strh	r2, [r3, #0]
 8005ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ee6:	d92b      	bls.n	8005f40 <USB_EPStartXfer+0x1008>
 8005ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d104      	bne.n	8005f18 <USB_EPStartXfer+0xfe0>
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f12:	3b01      	subs	r3, #1
 8005f14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	029b      	lsls	r3, r3, #10
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	e070      	b.n	8006022 <USB_EPStartXfer+0x10ea>
 8005f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10c      	bne.n	8005f6a <USB_EPStartXfer+0x1032>
 8005f50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	e05b      	b.n	8006022 <USB_EPStartXfer+0x10ea>
 8005f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d004      	beq.n	8005f9a <USB_EPStartXfer+0x1062>
 8005f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f94:	3301      	adds	r3, #1
 8005f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f9e:	881b      	ldrh	r3, [r3, #0]
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	029b      	lsls	r3, r3, #10
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	4313      	orrs	r3, r2
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fb4:	801a      	strh	r2, [r3, #0]
 8005fb6:	e034      	b.n	8006022 <USB_EPStartXfer+0x10ea>
 8005fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	785b      	ldrb	r3, [r3, #1]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d12c      	bne.n	8006022 <USB_EPStartXfer+0x10ea>
 8005fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fec:	4413      	add	r3, r2
 8005fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	011a      	lsls	r2, r3, #4
 8006000:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006004:	4413      	add	r3, r2
 8006006:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800600a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800600e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	b29a      	uxth	r2, r3
 800601c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006020:	801a      	strh	r2, [r3, #0]
 8006022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 809d 	bne.w	800617c <USB_EPStartXfer+0x1244>
 8006042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006054:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605e:	b29b      	uxth	r3, r3
 8006060:	461a      	mov	r2, r3
 8006062:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006066:	4413      	add	r3, r2
 8006068:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800606c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	011a      	lsls	r2, r3, #4
 800607a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800607e:	4413      	add	r3, r2
 8006080:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29b      	uxth	r3, r3
 8006090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006094:	b29a      	uxth	r2, r3
 8006096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	2b3e      	cmp	r3, #62	; 0x3e
 80060aa:	d92b      	bls.n	8006104 <USB_EPStartXfer+0x11cc>
 80060ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d104      	bne.n	80060dc <USB_EPStartXfer+0x11a4>
 80060d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d6:	3b01      	subs	r3, #1
 80060d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060e0:	881b      	ldrh	r3, [r3, #0]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	029b      	lsls	r3, r3, #10
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	4313      	orrs	r3, r2
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006100:	801a      	strh	r2, [r3, #0]
 8006102:	e069      	b.n	80061d8 <USB_EPStartXfer+0x12a0>
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10c      	bne.n	800612e <USB_EPStartXfer+0x11f6>
 8006114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006124:	b29a      	uxth	r2, r3
 8006126:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800612a:	801a      	strh	r2, [r3, #0]
 800612c:	e054      	b.n	80061d8 <USB_EPStartXfer+0x12a0>
 800612e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	085b      	lsrs	r3, r3, #1
 800613c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <USB_EPStartXfer+0x1226>
 8006154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006158:	3301      	adds	r3, #1
 800615a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800615e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b29a      	uxth	r2, r3
 8006166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800616a:	b29b      	uxth	r3, r3
 800616c:	029b      	lsls	r3, r3, #10
 800616e:	b29b      	uxth	r3, r3
 8006170:	4313      	orrs	r3, r2
 8006172:	b29a      	uxth	r2, r3
 8006174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	e02d      	b.n	80061d8 <USB_EPStartXfer+0x12a0>
 800617c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d125      	bne.n	80061d8 <USB_EPStartXfer+0x12a0>
 800618c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800619a:	b29b      	uxth	r3, r3
 800619c:	461a      	mov	r2, r3
 800619e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061a2:	4413      	add	r3, r2
 80061a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80061a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	011a      	lsls	r2, r3, #4
 80061b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061ba:	4413      	add	r3, r2
 80061bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061d6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80061d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8218 	beq.w	800661a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80061ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800620a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800620e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <USB_EPStartXfer+0x12ea>
 8006216:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800621a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10d      	bne.n	800623e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006222:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 81f5 	bne.w	800661a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006230:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	f040 81ee 	bne.w	800661a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800623e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800624c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	881b      	ldrh	r3, [r3, #0]
 800625a:	b29b      	uxth	r3, r3
 800625c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006264:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8006268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800626c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	441a      	add	r2, r3
 8006282:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8006286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006292:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006296:	b29b      	uxth	r3, r3
 8006298:	8013      	strh	r3, [r2, #0]
 800629a:	e1be      	b.n	800661a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800629c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	78db      	ldrb	r3, [r3, #3]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	f040 81b4 	bne.w	8006616 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80062ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d917      	bls.n	80062fa <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80062ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80062da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062ea:	1ad2      	subs	r2, r2, r3
 80062ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	619a      	str	r2, [r3, #24]
 80062f8:	e00e      	b.n	8006318 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80062fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800630a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800630e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2200      	movs	r2, #0
 8006316:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800631c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f040 8085 	bne.w	8006434 <USB_EPStartXfer+0x14fc>
 800632a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800632e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800633c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006346:	b29b      	uxth	r3, r3
 8006348:	461a      	mov	r2, r3
 800634a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800634e:	4413      	add	r3, r2
 8006350:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	011a      	lsls	r2, r3, #4
 8006362:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006366:	4413      	add	r3, r2
 8006368:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800636c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006370:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800637c:	b29a      	uxth	r2, r3
 800637e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006382:	801a      	strh	r2, [r3, #0]
 8006384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006388:	2b3e      	cmp	r3, #62	; 0x3e
 800638a:	d923      	bls.n	80063d4 <USB_EPStartXfer+0x149c>
 800638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d104      	bne.n	80063ac <USB_EPStartXfer+0x1474>
 80063a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a6:	3b01      	subs	r3, #1
 80063a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80063ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	029b      	lsls	r3, r3, #10
 80063bc:	b29b      	uxth	r3, r3
 80063be:	4313      	orrs	r3, r2
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063d0:	801a      	strh	r2, [r3, #0]
 80063d2:	e060      	b.n	8006496 <USB_EPStartXfer+0x155e>
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10c      	bne.n	80063f6 <USB_EPStartXfer+0x14be>
 80063dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063f2:	801a      	strh	r2, [r3, #0]
 80063f4:	e04f      	b.n	8006496 <USB_EPStartXfer+0x155e>
 80063f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063fa:	085b      	lsrs	r3, r3, #1
 80063fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b00      	cmp	r3, #0
 800640a:	d004      	beq.n	8006416 <USB_EPStartXfer+0x14de>
 800640c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006410:	3301      	adds	r3, #1
 8006412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29a      	uxth	r2, r3
 800641e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006422:	b29b      	uxth	r3, r3
 8006424:	029b      	lsls	r3, r3, #10
 8006426:	b29b      	uxth	r3, r3
 8006428:	4313      	orrs	r3, r2
 800642a:	b29a      	uxth	r2, r3
 800642c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006430:	801a      	strh	r2, [r3, #0]
 8006432:	e030      	b.n	8006496 <USB_EPStartXfer+0x155e>
 8006434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	785b      	ldrb	r3, [r3, #1]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d128      	bne.n	8006496 <USB_EPStartXfer+0x155e>
 8006444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006460:	b29b      	uxth	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006468:	4413      	add	r3, r2
 800646a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800646e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	011a      	lsls	r2, r3, #4
 800647c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006480:	4413      	add	r3, r2
 8006482:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006486:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648e:	b29a      	uxth	r2, r3
 8006490:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800649a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f040 8085 	bne.w	80065c0 <USB_EPStartXfer+0x1688>
 80064b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064da:	4413      	add	r3, r2
 80064dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80064e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	011a      	lsls	r2, r3, #4
 80064ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064f2:	4413      	add	r3, r2
 80064f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006508:	b29a      	uxth	r2, r3
 800650a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800650e:	801a      	strh	r2, [r3, #0]
 8006510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006514:	2b3e      	cmp	r3, #62	; 0x3e
 8006516:	d923      	bls.n	8006560 <USB_EPStartXfer+0x1628>
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	2b00      	cmp	r3, #0
 800652c:	d104      	bne.n	8006538 <USB_EPStartXfer+0x1600>
 800652e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006532:	3b01      	subs	r3, #1
 8006534:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006538:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29a      	uxth	r2, r3
 8006540:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006544:	b29b      	uxth	r3, r3
 8006546:	029b      	lsls	r3, r3, #10
 8006548:	b29b      	uxth	r3, r3
 800654a:	4313      	orrs	r3, r2
 800654c:	b29b      	uxth	r3, r3
 800654e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006556:	b29a      	uxth	r2, r3
 8006558:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800655c:	801a      	strh	r2, [r3, #0]
 800655e:	e05c      	b.n	800661a <USB_EPStartXfer+0x16e2>
 8006560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006564:	2b00      	cmp	r3, #0
 8006566:	d10c      	bne.n	8006582 <USB_EPStartXfer+0x164a>
 8006568:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b29b      	uxth	r3, r3
 8006570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006578:	b29a      	uxth	r2, r3
 800657a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	e04b      	b.n	800661a <USB_EPStartXfer+0x16e2>
 8006582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006586:	085b      	lsrs	r3, r3, #1
 8006588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800658c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006590:	f003 0301 	and.w	r3, r3, #1
 8006594:	2b00      	cmp	r3, #0
 8006596:	d004      	beq.n	80065a2 <USB_EPStartXfer+0x166a>
 8006598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800659c:	3301      	adds	r3, #1
 800659e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	029b      	lsls	r3, r3, #10
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	4313      	orrs	r3, r2
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	e02c      	b.n	800661a <USB_EPStartXfer+0x16e2>
 80065c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	785b      	ldrb	r3, [r3, #1]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d124      	bne.n	800661a <USB_EPStartXfer+0x16e2>
 80065d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065de:	b29b      	uxth	r3, r3
 80065e0:	461a      	mov	r2, r3
 80065e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065e6:	4413      	add	r3, r2
 80065e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	011a      	lsls	r2, r3, #4
 80065fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065fe:	4413      	add	r3, r2
 8006600:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800660c:	b29a      	uxth	r2, r3
 800660e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006612:	801a      	strh	r2, [r3, #0]
 8006614:	e001      	b.n	800661a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e03a      	b.n	8006690 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800661a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800663c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006640:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006644:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006648:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800664c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006650:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006654:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006658:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800665c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	441a      	add	r2, r3
 8006676:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800667a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668a:	b29b      	uxth	r3, r3
 800668c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	785b      	ldrb	r3, [r3, #1]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d020      	beq.n	80066ee <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	881b      	ldrh	r3, [r3, #0]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c2:	81bb      	strh	r3, [r7, #12]
 80066c4:	89bb      	ldrh	r3, [r7, #12]
 80066c6:	f083 0310 	eor.w	r3, r3, #16
 80066ca:	81bb      	strh	r3, [r7, #12]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	441a      	add	r2, r3
 80066d6:	89bb      	ldrh	r3, [r7, #12]
 80066d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	8013      	strh	r3, [r2, #0]
 80066ec:	e01f      	b.n	800672e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006704:	81fb      	strh	r3, [r7, #14]
 8006706:	89fb      	ldrh	r3, [r7, #14]
 8006708:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800670c:	81fb      	strh	r3, [r7, #14]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	441a      	add	r2, r3
 8006718:	89fb      	ldrh	r3, [r7, #14]
 800671a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800671e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800672a:	b29b      	uxth	r3, r3
 800672c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	bc80      	pop	{r7}
 8006738:	4770      	bx	lr

0800673a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800673a:	b480      	push	{r7}
 800673c:	b087      	sub	sp, #28
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	7b1b      	ldrb	r3, [r3, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	f040 809d 	bne.w	8006888 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d04c      	beq.n	80067f0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	881b      	ldrh	r3, [r3, #0]
 8006762:	823b      	strh	r3, [r7, #16]
 8006764:	8a3b      	ldrh	r3, [r7, #16]
 8006766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01b      	beq.n	80067a6 <USB_EPClearStall+0x6c>
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	881b      	ldrh	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006784:	81fb      	strh	r3, [r7, #14]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	441a      	add	r2, r3
 8006790:	89fb      	ldrh	r3, [r7, #14]
 8006792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	78db      	ldrb	r3, [r3, #3]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d06c      	beq.n	8006888 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	881b      	ldrh	r3, [r3, #0]
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c4:	81bb      	strh	r3, [r7, #12]
 80067c6:	89bb      	ldrh	r3, [r7, #12]
 80067c8:	f083 0320 	eor.w	r3, r3, #32
 80067cc:	81bb      	strh	r3, [r7, #12]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	441a      	add	r2, r3
 80067d8:	89bb      	ldrh	r3, [r7, #12]
 80067da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	8013      	strh	r3, [r2, #0]
 80067ee:	e04b      	b.n	8006888 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	82fb      	strh	r3, [r7, #22]
 80067fe:	8afb      	ldrh	r3, [r7, #22]
 8006800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d01b      	beq.n	8006840 <USB_EPClearStall+0x106>
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681e:	82bb      	strh	r3, [r7, #20]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	441a      	add	r2, r3
 800682a:	8abb      	ldrh	r3, [r7, #20]
 800682c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006830:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006834:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683c:	b29b      	uxth	r3, r3
 800683e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	881b      	ldrh	r3, [r3, #0]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006856:	827b      	strh	r3, [r7, #18]
 8006858:	8a7b      	ldrh	r3, [r7, #18]
 800685a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800685e:	827b      	strh	r3, [r7, #18]
 8006860:	8a7b      	ldrh	r3, [r7, #18]
 8006862:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006866:	827b      	strh	r3, [r7, #18]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	441a      	add	r2, r3
 8006872:	8a7b      	ldrh	r3, [r7, #18]
 8006874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006878:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006884:	b29b      	uxth	r3, r3
 8006886:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	bc80      	pop	{r7}
 8006892:	4770      	bx	lr

08006894 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d103      	bne.n	80068ae <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2280      	movs	r2, #128	; 0x80
 80068aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bc80      	pop	{r7}
 80068b8:	4770      	bx	lr

080068ba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr

080068ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr

080068e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80068f4:	68fb      	ldr	r3, [r7, #12]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr

08006900 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	bc80      	pop	{r7}
 8006914:	4770      	bx	lr

08006916 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006916:	b480      	push	{r7}
 8006918:	b08b      	sub	sp, #44	; 0x2c
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	4611      	mov	r1, r2
 8006922:	461a      	mov	r2, r3
 8006924:	460b      	mov	r3, r1
 8006926:	80fb      	strh	r3, [r7, #6]
 8006928:	4613      	mov	r3, r2
 800692a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800692c:	88bb      	ldrh	r3, [r7, #4]
 800692e:	3301      	adds	r3, #1
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800693c:	88fb      	ldrh	r3, [r7, #6]
 800693e:	005a      	lsls	r2, r3, #1
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006948:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
 800694e:	e01e      	b.n	800698e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	3301      	adds	r3, #1
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	b21a      	sxth	r2, r3
 8006960:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006964:	4313      	orrs	r3, r2
 8006966:	b21b      	sxth	r3, r3
 8006968:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	8a7a      	ldrh	r2, [r7, #18]
 800696e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	3302      	adds	r3, #2
 8006974:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	3302      	adds	r3, #2
 800697a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	3301      	adds	r3, #1
 8006980:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	3301      	adds	r3, #1
 8006986:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	3b01      	subs	r3, #1
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1dd      	bne.n	8006950 <USB_WritePMA+0x3a>
  }
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop
 8006998:	372c      	adds	r7, #44	; 0x2c
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b08b      	sub	sp, #44	; 0x2c
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	4611      	mov	r1, r2
 80069ac:	461a      	mov	r2, r3
 80069ae:	460b      	mov	r3, r1
 80069b0:	80fb      	strh	r3, [r7, #6]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80069b6:	88bb      	ldrh	r3, [r7, #4]
 80069b8:	085b      	lsrs	r3, r3, #1
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	005a      	lsls	r2, r3, #1
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069d2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
 80069d8:	e01b      	b.n	8006a12 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	b29b      	uxth	r3, r3
 80069e0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	3302      	adds	r3, #2
 80069e6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	3301      	adds	r3, #1
 80069f4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	0a1b      	lsrs	r3, r3, #8
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	3301      	adds	r3, #1
 8006a04:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	3302      	adds	r3, #2
 8006a0a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e0      	bne.n	80069da <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006a18:	88bb      	ldrh	r3, [r7, #4]
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006a24:	6a3b      	ldr	r3, [r7, #32]
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	701a      	strb	r2, [r3, #0]
  }
}
 8006a34:	bf00      	nop
 8006a36:	372c      	adds	r7, #44	; 0x2c
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bc80      	pop	{r7}
 8006a3c:	4770      	bx	lr

08006a3e <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	460b      	mov	r3, r1
 8006a48:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006a4a:	2304      	movs	r3, #4
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	2181      	movs	r1, #129	; 0x81
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f002 fe56 	bl	8009702 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006a5c:	2010      	movs	r0, #16
 8006a5e:	f002 ff65 	bl	800992c <USBD_static_malloc>
 8006a62:	4602      	mov	r2, r0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006a74:	2302      	movs	r3, #2
 8006a76:	e005      	b.n	8006a84 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a7e:	2200      	movs	r2, #0
 8006a80:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3708      	adds	r7, #8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006a98:	2181      	movs	r1, #129	; 0x81
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f002 fe57 	bl	800974e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d009      	beq.n	8006ac4 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f002 ff44 	bl	8009944 <USBD_static_free>
    pdev->pClassData = NULL;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d045      	beq.n	8006b8a <USBD_HID_Setup+0xba>
 8006afe:	2b20      	cmp	r3, #32
 8006b00:	f040 80d3 	bne.w	8006caa <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	3b02      	subs	r3, #2
 8006b0a:	2b09      	cmp	r3, #9
 8006b0c:	d835      	bhi.n	8006b7a <USBD_HID_Setup+0xaa>
 8006b0e:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <USBD_HID_Setup+0x44>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b6b 	.word	0x08006b6b
 8006b18:	08006b4b 	.word	0x08006b4b
 8006b1c:	08006b7b 	.word	0x08006b7b
 8006b20:	08006b7b 	.word	0x08006b7b
 8006b24:	08006b7b 	.word	0x08006b7b
 8006b28:	08006b7b 	.word	0x08006b7b
 8006b2c:	08006b7b 	.word	0x08006b7b
 8006b30:	08006b7b 	.word	0x08006b7b
 8006b34:	08006b59 	.word	0x08006b59
 8006b38:	08006b3d 	.word	0x08006b3d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	885b      	ldrh	r3, [r3, #2]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	601a      	str	r2, [r3, #0]
          break;
 8006b48:	e01e      	b.n	8006b88 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	4619      	mov	r1, r3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 f922 	bl	8007d9a <USBD_CtlSendData>
          break;
 8006b56:	e017      	b.n	8006b88 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	885b      	ldrh	r3, [r3, #2]
 8006b5c:	0a1b      	lsrs	r3, r3, #8
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	605a      	str	r2, [r3, #4]
          break;
 8006b68:	e00e      	b.n	8006b88 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	2201      	movs	r2, #1
 8006b70:	4619      	mov	r1, r3
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f001 f911 	bl	8007d9a <USBD_CtlSendData>
          break;
 8006b78:	e006      	b.n	8006b88 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f8a2 	bl	8007cc6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b82:	2302      	movs	r3, #2
 8006b84:	75fb      	strb	r3, [r7, #23]
          break;
 8006b86:	bf00      	nop
      }
      break;
 8006b88:	e096      	b.n	8006cb8 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	2b0b      	cmp	r3, #11
 8006b90:	f200 8083 	bhi.w	8006c9a <USBD_HID_Setup+0x1ca>
 8006b94:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <USBD_HID_Setup+0xcc>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bcd 	.word	0x08006bcd
 8006ba0:	08006c9b 	.word	0x08006c9b
 8006ba4:	08006c9b 	.word	0x08006c9b
 8006ba8:	08006c9b 	.word	0x08006c9b
 8006bac:	08006c9b 	.word	0x08006c9b
 8006bb0:	08006c9b 	.word	0x08006c9b
 8006bb4:	08006bf5 	.word	0x08006bf5
 8006bb8:	08006c9b 	.word	0x08006c9b
 8006bbc:	08006c9b 	.word	0x08006c9b
 8006bc0:	08006c9b 	.word	0x08006c9b
 8006bc4:	08006c4d 	.word	0x08006c4d
 8006bc8:	08006c75 	.word	0x08006c75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d107      	bne.n	8006be6 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006bd6:	f107 030e 	add.w	r3, r7, #14
 8006bda:	2202      	movs	r2, #2
 8006bdc:	4619      	mov	r1, r3
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 f8db 	bl	8007d9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006be4:	e060      	b.n	8006ca8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 f86c 	bl	8007cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006bee:	2302      	movs	r3, #2
 8006bf0:	75fb      	strb	r3, [r7, #23]
          break;
 8006bf2:	e059      	b.n	8006ca8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	885b      	ldrh	r3, [r3, #2]
 8006bf8:	0a1b      	lsrs	r3, r3, #8
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	2b22      	cmp	r3, #34	; 0x22
 8006bfe:	d108      	bne.n	8006c12 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	88db      	ldrh	r3, [r3, #6]
 8006c04:	2b3f      	cmp	r3, #63	; 0x3f
 8006c06:	bf28      	it	cs
 8006c08:	233f      	movcs	r3, #63	; 0x3f
 8006c0a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006c0c:	4b2d      	ldr	r3, [pc, #180]	; (8006cc4 <USBD_HID_Setup+0x1f4>)
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	e015      	b.n	8006c3e <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	885b      	ldrh	r3, [r3, #2]
 8006c16:	0a1b      	lsrs	r3, r3, #8
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b21      	cmp	r3, #33	; 0x21
 8006c1c:	d108      	bne.n	8006c30 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006c1e:	4b2a      	ldr	r3, [pc, #168]	; (8006cc8 <USBD_HID_Setup+0x1f8>)
 8006c20:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	88db      	ldrh	r3, [r3, #6]
 8006c26:	2b09      	cmp	r3, #9
 8006c28:	bf28      	it	cs
 8006c2a:	2309      	movcs	r3, #9
 8006c2c:	83fb      	strh	r3, [r7, #30]
 8006c2e:	e006      	b.n	8006c3e <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006c30:	6839      	ldr	r1, [r7, #0]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 f847 	bl	8007cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	75fb      	strb	r3, [r7, #23]
            break;
 8006c3c:	e034      	b.n	8006ca8 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006c3e:	8bfb      	ldrh	r3, [r7, #30]
 8006c40:	461a      	mov	r2, r3
 8006c42:	69b9      	ldr	r1, [r7, #24]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f001 f8a8 	bl	8007d9a <USBD_CtlSendData>
          break;
 8006c4a:	e02d      	b.n	8006ca8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d107      	bne.n	8006c66 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f001 f89b 	bl	8007d9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c64:	e020      	b.n	8006ca8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 f82c 	bl	8007cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c6e:	2302      	movs	r3, #2
 8006c70:	75fb      	strb	r3, [r7, #23]
          break;
 8006c72:	e019      	b.n	8006ca8 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d106      	bne.n	8006c8c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	885b      	ldrh	r3, [r3, #2]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c8a:	e00d      	b.n	8006ca8 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 f819 	bl	8007cc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c94:	2302      	movs	r3, #2
 8006c96:	75fb      	strb	r3, [r7, #23]
          break;
 8006c98:	e006      	b.n	8006ca8 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 f812 	bl	8007cc6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8006ca6:	bf00      	nop
      }
      break;
 8006ca8:	e006      	b.n	8006cb8 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006caa:	6839      	ldr	r1, [r7, #0]
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 f80a 	bl	8007cc6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb6:	bf00      	nop
  }

  return ret;
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	200000c8 	.word	0x200000c8
 8006cc8:	200000b0 	.word	0x200000b0

08006ccc <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2222      	movs	r2, #34	; 0x22
 8006cd8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006cda:	4b03      	ldr	r3, [pc, #12]	; (8006ce8 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	20000044 	.word	0x20000044

08006cec <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2222      	movs	r2, #34	; 0x22
 8006cf8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006cfa:	4b03      	ldr	r3, [pc, #12]	; (8006d08 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bc80      	pop	{r7}
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000068 	.word	0x20000068

08006d0c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2222      	movs	r2, #34	; 0x22
 8006d18:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006d1a:	4b03      	ldr	r3, [pc, #12]	; (8006d28 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	2000008c 	.word	0x2000008c

08006d2c <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3e:	2200      	movs	r2, #0
 8006d40:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bc80      	pop	{r7}
 8006d4c:	4770      	bx	lr
	...

08006d50 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	220a      	movs	r2, #10
 8006d5c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006d5e:	4b03      	ldr	r3, [pc, #12]	; (8006d6c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc80      	pop	{r7}
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	200000bc 	.word	0x200000bc

08006d70 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d84:	2302      	movs	r3, #2
 8006d86:	e01a      	b.n	8006dbe <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d003      	beq.n	8006da8 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	79fa      	ldrb	r2, [r7, #7]
 8006db4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f002 fc40 	bl	800963c <USBD_LL_Init>

  return USBD_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b085      	sub	sp, #20
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d006      	beq.n	8006de8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]
 8006de6:	e001      	b.n	8006dec <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006de8:	2302      	movs	r3, #2
 8006dea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr

08006df8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f002 fc63 	bl	80096cc <USBD_LL_Start>

  return USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bc80      	pop	{r7}
 8006e22:	4770      	bx	lr

08006e24 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e30:	2302      	movs	r3, #2
 8006e32:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	78fa      	ldrb	r2, [r7, #3]
 8006e48:	4611      	mov	r1, r2
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	4798      	blx	r3
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b082      	sub	sp, #8
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	78fa      	ldrb	r2, [r7, #3]
 8006e78:	4611      	mov	r1, r2
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	4798      	blx	r3

  return USBD_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fed7 	bl	8007c4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006eae:	461a      	mov	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ebc:	f003 031f 	and.w	r3, r3, #31
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d016      	beq.n	8006ef2 <USBD_LL_SetupStage+0x6a>
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d81c      	bhi.n	8006f02 <USBD_LL_SetupStage+0x7a>
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <USBD_LL_SetupStage+0x4a>
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d008      	beq.n	8006ee2 <USBD_LL_SetupStage+0x5a>
 8006ed0:	e017      	b.n	8006f02 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f9ca 	bl	8007274 <USBD_StdDevReq>
      break;
 8006ee0:	e01a      	b.n	8006f18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fa2c 	bl	8007348 <USBD_StdItfReq>
      break;
 8006ef0:	e012      	b.n	8006f18 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fa6c 	bl	80073d8 <USBD_StdEPReq>
      break;
 8006f00:	e00a      	b.n	8006f18 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f002 fc3b 	bl	800978c <USBD_LL_StallEP>
      break;
 8006f16:	bf00      	nop
  }

  return USBD_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b086      	sub	sp, #24
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	607a      	str	r2, [r7, #4]
 8006f2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f30:	7afb      	ldrb	r3, [r7, #11]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d14b      	bne.n	8006fce <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f3c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f44:	2b03      	cmp	r3, #3
 8006f46:	d134      	bne.n	8006fb2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d919      	bls.n	8006f88 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	1ad2      	subs	r2, r2, r3
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d203      	bcs.n	8006f76 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	e002      	b.n	8006f7c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6879      	ldr	r1, [r7, #4]
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 ff38 	bl	8007df6 <USBD_CtlContinueRx>
 8006f86:	e038      	b.n	8006ffa <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00a      	beq.n	8006faa <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d105      	bne.n	8006faa <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 ff35 	bl	8007e1a <USBD_CtlSendStatus>
 8006fb0:	e023      	b.n	8006ffa <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fb8:	2b05      	cmp	r3, #5
 8006fba:	d11e      	bne.n	8006ffa <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f002 fbe0 	bl	800978c <USBD_LL_StallEP>
 8006fcc:	e015      	b.n	8006ffa <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00d      	beq.n	8006ff6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006fe0:	2b03      	cmp	r3, #3
 8006fe2:	d108      	bne.n	8006ff6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	7afa      	ldrb	r2, [r7, #11]
 8006fee:	4611      	mov	r1, r2
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	4798      	blx	r3
 8006ff4:	e001      	b.n	8006ffa <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	e000      	b.n	8006ffc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	460b      	mov	r3, r1
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d17f      	bne.n	8007118 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3314      	adds	r3, #20
 800701c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007024:	2b02      	cmp	r3, #2
 8007026:	d15c      	bne.n	80070e2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	429a      	cmp	r2, r3
 8007032:	d915      	bls.n	8007060 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	1ad2      	subs	r2, r2, r3
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	b29b      	uxth	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	6879      	ldr	r1, [r7, #4]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fec0 	bl	8007dd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007052:	2300      	movs	r3, #0
 8007054:	2200      	movs	r2, #0
 8007056:	2100      	movs	r1, #0
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f002 fc43 	bl	80098e4 <USBD_LL_PrepareReceive>
 800705e:	e04e      	b.n	80070fe <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	6912      	ldr	r2, [r2, #16]
 8007068:	fbb3 f1f2 	udiv	r1, r3, r2
 800706c:	fb01 f202 	mul.w	r2, r1, r2
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d11c      	bne.n	80070b0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800707e:	429a      	cmp	r2, r3
 8007080:	d316      	bcc.n	80070b0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800708c:	429a      	cmp	r2, r3
 800708e:	d20f      	bcs.n	80070b0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007090:	2200      	movs	r2, #0
 8007092:	2100      	movs	r1, #0
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 fe9c 	bl	8007dd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070a2:	2300      	movs	r3, #0
 80070a4:	2200      	movs	r2, #0
 80070a6:	2100      	movs	r1, #0
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f002 fc1b 	bl	80098e4 <USBD_LL_PrepareReceive>
 80070ae:	e026      	b.n	80070fe <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00a      	beq.n	80070d2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d105      	bne.n	80070d2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80070d2:	2180      	movs	r1, #128	; 0x80
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f002 fb59 	bl	800978c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 feb0 	bl	8007e40 <USBD_CtlReceiveStatus>
 80070e0:	e00d      	b.n	80070fe <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d004      	beq.n	80070f6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d103      	bne.n	80070fe <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80070f6:	2180      	movs	r1, #128	; 0x80
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f002 fb47 	bl	800978c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007104:	2b01      	cmp	r3, #1
 8007106:	d11d      	bne.n	8007144 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f7ff fe81 	bl	8006e10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007116:	e015      	b.n	8007144 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00d      	beq.n	8007140 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800712a:	2b03      	cmp	r3, #3
 800712c:	d108      	bne.n	8007140 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	7afa      	ldrb	r2, [r7, #11]
 8007138:	4611      	mov	r1, r2
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	4798      	blx	r3
 800713e:	e001      	b.n	8007144 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007140:	2302      	movs	r3, #2
 8007142:	e000      	b.n	8007146 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007156:	2340      	movs	r3, #64	; 0x40
 8007158:	2200      	movs	r2, #0
 800715a:	2100      	movs	r1, #0
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f002 fad0 	bl	8009702 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2240      	movs	r2, #64	; 0x40
 800716e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007172:	2340      	movs	r3, #64	; 0x40
 8007174:	2200      	movs	r2, #0
 8007176:	2180      	movs	r1, #128	; 0x80
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f002 fac2 	bl	8009702 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2240      	movs	r2, #64	; 0x40
 8007188:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d009      	beq.n	80071c6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6852      	ldr	r2, [r2, #4]
 80071be:	b2d2      	uxtb	r2, r2
 80071c0:	4611      	mov	r1, r2
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
  }

  return USBD_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	78fa      	ldrb	r2, [r7, #3]
 80071e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bc80      	pop	{r7}
 80071ec:	4770      	bx	lr

080071ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2204      	movs	r2, #4
 8007206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	bc80      	pop	{r7}
 8007214:	4770      	bx	lr

08007216 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007224:	2b04      	cmp	r3, #4
 8007226:	d105      	bne.n	8007234 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	bc80      	pop	{r7}
 800723e:	4770      	bx	lr

08007240 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724e:	2b03      	cmp	r3, #3
 8007250:	d10b      	bne.n	800726a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d005      	beq.n	800729a <USBD_StdDevReq+0x26>
 800728e:	2b40      	cmp	r3, #64	; 0x40
 8007290:	d84f      	bhi.n	8007332 <USBD_StdDevReq+0xbe>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d009      	beq.n	80072aa <USBD_StdDevReq+0x36>
 8007296:	2b20      	cmp	r3, #32
 8007298:	d14b      	bne.n	8007332 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3
      break;
 80072a8:	e048      	b.n	800733c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	785b      	ldrb	r3, [r3, #1]
 80072ae:	2b09      	cmp	r3, #9
 80072b0:	d839      	bhi.n	8007326 <USBD_StdDevReq+0xb2>
 80072b2:	a201      	add	r2, pc, #4	; (adr r2, 80072b8 <USBD_StdDevReq+0x44>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	08007309 	.word	0x08007309
 80072bc:	0800731d 	.word	0x0800731d
 80072c0:	08007327 	.word	0x08007327
 80072c4:	08007313 	.word	0x08007313
 80072c8:	08007327 	.word	0x08007327
 80072cc:	080072eb 	.word	0x080072eb
 80072d0:	080072e1 	.word	0x080072e1
 80072d4:	08007327 	.word	0x08007327
 80072d8:	080072ff 	.word	0x080072ff
 80072dc:	080072f5 	.word	0x080072f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9dc 	bl	80076a0 <USBD_GetDescriptor>
          break;
 80072e8:	e022      	b.n	8007330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fb3f 	bl	8007970 <USBD_SetAddress>
          break;
 80072f2:	e01d      	b.n	8007330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fb7e 	bl	80079f8 <USBD_SetConfig>
          break;
 80072fc:	e018      	b.n	8007330 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072fe:	6839      	ldr	r1, [r7, #0]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 fc07 	bl	8007b14 <USBD_GetConfig>
          break;
 8007306:	e013      	b.n	8007330 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fc37 	bl	8007b7e <USBD_GetStatus>
          break;
 8007310:	e00e      	b.n	8007330 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fc65 	bl	8007be4 <USBD_SetFeature>
          break;
 800731a:	e009      	b.n	8007330 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fc74 	bl	8007c0c <USBD_ClrFeature>
          break;
 8007324:	e004      	b.n	8007330 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fccc 	bl	8007cc6 <USBD_CtlError>
          break;
 800732e:	bf00      	nop
      }
      break;
 8007330:	e004      	b.n	800733c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fcc6 	bl	8007cc6 <USBD_CtlError>
      break;
 800733a:	bf00      	nop
  }

  return ret;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop

08007348 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d005      	beq.n	800736e <USBD_StdItfReq+0x26>
 8007362:	2b40      	cmp	r3, #64	; 0x40
 8007364:	d82e      	bhi.n	80073c4 <USBD_StdItfReq+0x7c>
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <USBD_StdItfReq+0x26>
 800736a:	2b20      	cmp	r3, #32
 800736c:	d12a      	bne.n	80073c4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007374:	3b01      	subs	r3, #1
 8007376:	2b02      	cmp	r3, #2
 8007378:	d81d      	bhi.n	80073b6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	889b      	ldrh	r3, [r3, #4]
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b01      	cmp	r3, #1
 8007382:	d813      	bhi.n	80073ac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
 8007392:	4603      	mov	r3, r0
 8007394:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	88db      	ldrh	r3, [r3, #6]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d110      	bne.n	80073c0 <USBD_StdItfReq+0x78>
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10d      	bne.n	80073c0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fd38 	bl	8007e1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073aa:	e009      	b.n	80073c0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80073ac:	6839      	ldr	r1, [r7, #0]
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fc89 	bl	8007cc6 <USBD_CtlError>
          break;
 80073b4:	e004      	b.n	80073c0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fc84 	bl	8007cc6 <USBD_CtlError>
          break;
 80073be:	e000      	b.n	80073c2 <USBD_StdItfReq+0x7a>
          break;
 80073c0:	bf00      	nop
      }
      break;
 80073c2:	e004      	b.n	80073ce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 fc7d 	bl	8007cc6 <USBD_CtlError>
      break;
 80073cc:	bf00      	nop
  }

  return USBD_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	889b      	ldrh	r3, [r3, #4]
 80073ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073f4:	2b40      	cmp	r3, #64	; 0x40
 80073f6:	d007      	beq.n	8007408 <USBD_StdEPReq+0x30>
 80073f8:	2b40      	cmp	r3, #64	; 0x40
 80073fa:	f200 8146 	bhi.w	800768a <USBD_StdEPReq+0x2b2>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00a      	beq.n	8007418 <USBD_StdEPReq+0x40>
 8007402:	2b20      	cmp	r3, #32
 8007404:	f040 8141 	bne.w	800768a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
      break;
 8007416:	e13d      	b.n	8007694 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007420:	2b20      	cmp	r3, #32
 8007422:	d10a      	bne.n	800743a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
 8007432:	4603      	mov	r3, r0
 8007434:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	e12d      	b.n	8007696 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	2b03      	cmp	r3, #3
 8007440:	d007      	beq.n	8007452 <USBD_StdEPReq+0x7a>
 8007442:	2b03      	cmp	r3, #3
 8007444:	f300 811b 	bgt.w	800767e <USBD_StdEPReq+0x2a6>
 8007448:	2b00      	cmp	r3, #0
 800744a:	d072      	beq.n	8007532 <USBD_StdEPReq+0x15a>
 800744c:	2b01      	cmp	r3, #1
 800744e:	d03a      	beq.n	80074c6 <USBD_StdEPReq+0xee>
 8007450:	e115      	b.n	800767e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007458:	2b02      	cmp	r3, #2
 800745a:	d002      	beq.n	8007462 <USBD_StdEPReq+0x8a>
 800745c:	2b03      	cmp	r3, #3
 800745e:	d015      	beq.n	800748c <USBD_StdEPReq+0xb4>
 8007460:	e02b      	b.n	80074ba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007462:	7bbb      	ldrb	r3, [r7, #14]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00c      	beq.n	8007482 <USBD_StdEPReq+0xaa>
 8007468:	7bbb      	ldrb	r3, [r7, #14]
 800746a:	2b80      	cmp	r3, #128	; 0x80
 800746c:	d009      	beq.n	8007482 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f002 f98a 	bl	800978c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007478:	2180      	movs	r1, #128	; 0x80
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f002 f986 	bl	800978c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007480:	e020      	b.n	80074c4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fc1e 	bl	8007cc6 <USBD_CtlError>
              break;
 800748a:	e01b      	b.n	80074c4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	885b      	ldrh	r3, [r3, #2]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10e      	bne.n	80074b2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <USBD_StdEPReq+0xda>
 800749a:	7bbb      	ldrb	r3, [r7, #14]
 800749c:	2b80      	cmp	r3, #128	; 0x80
 800749e:	d008      	beq.n	80074b2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	88db      	ldrh	r3, [r3, #6]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d104      	bne.n	80074b2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f002 f96d 	bl	800978c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fcb1 	bl	8007e1a <USBD_CtlSendStatus>

              break;
 80074b8:	e004      	b.n	80074c4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fc02 	bl	8007cc6 <USBD_CtlError>
              break;
 80074c2:	bf00      	nop
          }
          break;
 80074c4:	e0e0      	b.n	8007688 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d002      	beq.n	80074d6 <USBD_StdEPReq+0xfe>
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d015      	beq.n	8007500 <USBD_StdEPReq+0x128>
 80074d4:	e026      	b.n	8007524 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074d6:	7bbb      	ldrb	r3, [r7, #14]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00c      	beq.n	80074f6 <USBD_StdEPReq+0x11e>
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	2b80      	cmp	r3, #128	; 0x80
 80074e0:	d009      	beq.n	80074f6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f002 f950 	bl	800978c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074ec:	2180      	movs	r1, #128	; 0x80
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f002 f94c 	bl	800978c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074f4:	e01c      	b.n	8007530 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fbe4 	bl	8007cc6 <USBD_CtlError>
              break;
 80074fe:	e017      	b.n	8007530 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	885b      	ldrh	r3, [r3, #2]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d112      	bne.n	800752e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007508:	7bbb      	ldrb	r3, [r7, #14]
 800750a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750e:	2b00      	cmp	r3, #0
 8007510:	d004      	beq.n	800751c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	4619      	mov	r1, r3
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f002 f957 	bl	80097ca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fc7c 	bl	8007e1a <USBD_CtlSendStatus>
              }
              break;
 8007522:	e004      	b.n	800752e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fbcd 	bl	8007cc6 <USBD_CtlError>
              break;
 800752c:	e000      	b.n	8007530 <USBD_StdEPReq+0x158>
              break;
 800752e:	bf00      	nop
          }
          break;
 8007530:	e0aa      	b.n	8007688 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007538:	2b02      	cmp	r3, #2
 800753a:	d002      	beq.n	8007542 <USBD_StdEPReq+0x16a>
 800753c:	2b03      	cmp	r3, #3
 800753e:	d032      	beq.n	80075a6 <USBD_StdEPReq+0x1ce>
 8007540:	e097      	b.n	8007672 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <USBD_StdEPReq+0x180>
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	2b80      	cmp	r3, #128	; 0x80
 800754c:	d004      	beq.n	8007558 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fbb8 	bl	8007cc6 <USBD_CtlError>
                break;
 8007556:	e091      	b.n	800767c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800755c:	2b00      	cmp	r3, #0
 800755e:	da0b      	bge.n	8007578 <USBD_StdEPReq+0x1a0>
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007566:	4613      	mov	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	3310      	adds	r3, #16
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	4413      	add	r3, r2
 8007574:	3304      	adds	r3, #4
 8007576:	e00b      	b.n	8007590 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	4413      	add	r3, r2
 800758e:	3304      	adds	r3, #4
 8007590:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2202      	movs	r2, #2
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fbfb 	bl	8007d9a <USBD_CtlSendData>
              break;
 80075a4:	e06a      	b.n	800767c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	da11      	bge.n	80075d2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075ae:	7bbb      	ldrb	r3, [r7, #14]
 80075b0:	f003 020f 	and.w	r2, r3, #15
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	440b      	add	r3, r1
 80075c0:	3318      	adds	r3, #24
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d117      	bne.n	80075f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fb7b 	bl	8007cc6 <USBD_CtlError>
                  break;
 80075d0:	e054      	b.n	800767c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	f003 020f 	and.w	r2, r3, #15
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	440b      	add	r3, r1
 80075e4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d104      	bne.n	80075f8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fb68 	bl	8007cc6 <USBD_CtlError>
                  break;
 80075f6:	e041      	b.n	800767c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	da0b      	bge.n	8007618 <USBD_StdEPReq+0x240>
 8007600:	7bbb      	ldrb	r3, [r7, #14]
 8007602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	3310      	adds	r3, #16
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	4413      	add	r3, r2
 8007614:	3304      	adds	r3, #4
 8007616:	e00b      	b.n	8007630 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800761e:	4613      	mov	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	3304      	adds	r3, #4
 8007630:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <USBD_StdEPReq+0x266>
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	2b80      	cmp	r3, #128	; 0x80
 800763c:	d103      	bne.n	8007646 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2200      	movs	r2, #0
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	e00e      	b.n	8007664 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	4619      	mov	r1, r3
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f002 f8dc 	bl	8009808 <USBD_LL_IsStallEP>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2201      	movs	r2, #1
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	e002      	b.n	8007664 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2200      	movs	r2, #0
 8007662:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2202      	movs	r2, #2
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fb95 	bl	8007d9a <USBD_CtlSendData>
              break;
 8007670:	e004      	b.n	800767c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007672:	6839      	ldr	r1, [r7, #0]
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fb26 	bl	8007cc6 <USBD_CtlError>
              break;
 800767a:	bf00      	nop
          }
          break;
 800767c:	e004      	b.n	8007688 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 fb20 	bl	8007cc6 <USBD_CtlError>
          break;
 8007686:	bf00      	nop
      }
      break;
 8007688:	e004      	b.n	8007694 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fb1a 	bl	8007cc6 <USBD_CtlError>
      break;
 8007692:	bf00      	nop
  }

  return ret;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	885b      	ldrh	r3, [r3, #2]
 80076ba:	0a1b      	lsrs	r3, r3, #8
 80076bc:	b29b      	uxth	r3, r3
 80076be:	3b01      	subs	r3, #1
 80076c0:	2b06      	cmp	r3, #6
 80076c2:	f200 8128 	bhi.w	8007916 <USBD_GetDescriptor+0x276>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <USBD_GetDescriptor+0x2c>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	080076e9 	.word	0x080076e9
 80076d0:	08007701 	.word	0x08007701
 80076d4:	08007741 	.word	0x08007741
 80076d8:	08007917 	.word	0x08007917
 80076dc:	08007917 	.word	0x08007917
 80076e0:	080078b7 	.word	0x080078b7
 80076e4:	080078e3 	.word	0x080078e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	7c12      	ldrb	r2, [r2, #16]
 80076f4:	f107 0108 	add.w	r1, r7, #8
 80076f8:	4610      	mov	r0, r2
 80076fa:	4798      	blx	r3
 80076fc:	60f8      	str	r0, [r7, #12]
      break;
 80076fe:	e112      	b.n	8007926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	7c1b      	ldrb	r3, [r3, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10d      	bne.n	8007724 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007710:	f107 0208 	add.w	r2, r7, #8
 8007714:	4610      	mov	r0, r2
 8007716:	4798      	blx	r3
 8007718:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3301      	adds	r3, #1
 800771e:	2202      	movs	r2, #2
 8007720:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007722:	e100      	b.n	8007926 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	f107 0208 	add.w	r2, r7, #8
 8007730:	4610      	mov	r0, r2
 8007732:	4798      	blx	r3
 8007734:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3301      	adds	r3, #1
 800773a:	2202      	movs	r2, #2
 800773c:	701a      	strb	r2, [r3, #0]
      break;
 800773e:	e0f2      	b.n	8007926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	885b      	ldrh	r3, [r3, #2]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b05      	cmp	r3, #5
 8007748:	f200 80ac 	bhi.w	80078a4 <USBD_GetDescriptor+0x204>
 800774c:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <USBD_GetDescriptor+0xb4>)
 800774e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007752:	bf00      	nop
 8007754:	0800776d 	.word	0x0800776d
 8007758:	080077a1 	.word	0x080077a1
 800775c:	080077d5 	.word	0x080077d5
 8007760:	08007809 	.word	0x08007809
 8007764:	0800783d 	.word	0x0800783d
 8007768:	08007871 	.word	0x08007871
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	7c12      	ldrb	r2, [r2, #16]
 8007784:	f107 0108 	add.w	r1, r7, #8
 8007788:	4610      	mov	r0, r2
 800778a:	4798      	blx	r3
 800778c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800778e:	e091      	b.n	80078b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fa97 	bl	8007cc6 <USBD_CtlError>
            err++;
 8007798:	7afb      	ldrb	r3, [r7, #11]
 800779a:	3301      	adds	r3, #1
 800779c:	72fb      	strb	r3, [r7, #11]
          break;
 800779e:	e089      	b.n	80078b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	7c12      	ldrb	r2, [r2, #16]
 80077b8:	f107 0108 	add.w	r1, r7, #8
 80077bc:	4610      	mov	r0, r2
 80077be:	4798      	blx	r3
 80077c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077c2:	e077      	b.n	80078b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa7d 	bl	8007cc6 <USBD_CtlError>
            err++;
 80077cc:	7afb      	ldrb	r3, [r7, #11]
 80077ce:	3301      	adds	r3, #1
 80077d0:	72fb      	strb	r3, [r7, #11]
          break;
 80077d2:	e06f      	b.n	80078b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	7c12      	ldrb	r2, [r2, #16]
 80077ec:	f107 0108 	add.w	r1, r7, #8
 80077f0:	4610      	mov	r0, r2
 80077f2:	4798      	blx	r3
 80077f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077f6:	e05d      	b.n	80078b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa63 	bl	8007cc6 <USBD_CtlError>
            err++;
 8007800:	7afb      	ldrb	r3, [r7, #11]
 8007802:	3301      	adds	r3, #1
 8007804:	72fb      	strb	r3, [r7, #11]
          break;
 8007806:	e055      	b.n	80078b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	7c12      	ldrb	r2, [r2, #16]
 8007820:	f107 0108 	add.w	r1, r7, #8
 8007824:	4610      	mov	r0, r2
 8007826:	4798      	blx	r3
 8007828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800782a:	e043      	b.n	80078b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fa49 	bl	8007cc6 <USBD_CtlError>
            err++;
 8007834:	7afb      	ldrb	r3, [r7, #11]
 8007836:	3301      	adds	r3, #1
 8007838:	72fb      	strb	r3, [r7, #11]
          break;
 800783a:	e03b      	b.n	80078b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00b      	beq.n	8007860 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	7c12      	ldrb	r2, [r2, #16]
 8007854:	f107 0108 	add.w	r1, r7, #8
 8007858:	4610      	mov	r0, r2
 800785a:	4798      	blx	r3
 800785c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785e:	e029      	b.n	80078b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa2f 	bl	8007cc6 <USBD_CtlError>
            err++;
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	3301      	adds	r3, #1
 800786c:	72fb      	strb	r3, [r7, #11]
          break;
 800786e:	e021      	b.n	80078b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	7c12      	ldrb	r2, [r2, #16]
 8007888:	f107 0108 	add.w	r1, r7, #8
 800788c:	4610      	mov	r0, r2
 800788e:	4798      	blx	r3
 8007890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007892:	e00f      	b.n	80078b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 fa15 	bl	8007cc6 <USBD_CtlError>
            err++;
 800789c:	7afb      	ldrb	r3, [r7, #11]
 800789e:	3301      	adds	r3, #1
 80078a0:	72fb      	strb	r3, [r7, #11]
          break;
 80078a2:	e007      	b.n	80078b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fa0d 	bl	8007cc6 <USBD_CtlError>
          err++;
 80078ac:	7afb      	ldrb	r3, [r7, #11]
 80078ae:	3301      	adds	r3, #1
 80078b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80078b2:	e038      	b.n	8007926 <USBD_GetDescriptor+0x286>
 80078b4:	e037      	b.n	8007926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	7c1b      	ldrb	r3, [r3, #16]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d109      	bne.n	80078d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c6:	f107 0208 	add.w	r2, r7, #8
 80078ca:	4610      	mov	r0, r2
 80078cc:	4798      	blx	r3
 80078ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078d0:	e029      	b.n	8007926 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f9f6 	bl	8007cc6 <USBD_CtlError>
        err++;
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	3301      	adds	r3, #1
 80078de:	72fb      	strb	r3, [r7, #11]
      break;
 80078e0:	e021      	b.n	8007926 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	7c1b      	ldrb	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10d      	bne.n	8007906 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f2:	f107 0208 	add.w	r2, r7, #8
 80078f6:	4610      	mov	r0, r2
 80078f8:	4798      	blx	r3
 80078fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	3301      	adds	r3, #1
 8007900:	2207      	movs	r2, #7
 8007902:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007904:	e00f      	b.n	8007926 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f9dc 	bl	8007cc6 <USBD_CtlError>
        err++;
 800790e:	7afb      	ldrb	r3, [r7, #11]
 8007910:	3301      	adds	r3, #1
 8007912:	72fb      	strb	r3, [r7, #11]
      break;
 8007914:	e007      	b.n	8007926 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007916:	6839      	ldr	r1, [r7, #0]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f9d4 	bl	8007cc6 <USBD_CtlError>
      err++;
 800791e:	7afb      	ldrb	r3, [r7, #11]
 8007920:	3301      	adds	r3, #1
 8007922:	72fb      	strb	r3, [r7, #11]
      break;
 8007924:	bf00      	nop
  }

  if (err != 0U)
 8007926:	7afb      	ldrb	r3, [r7, #11]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d11c      	bne.n	8007966 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800792c:	893b      	ldrh	r3, [r7, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d011      	beq.n	8007956 <USBD_GetDescriptor+0x2b6>
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	88db      	ldrh	r3, [r3, #6]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00d      	beq.n	8007956 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	88da      	ldrh	r2, [r3, #6]
 800793e:	893b      	ldrh	r3, [r7, #8]
 8007940:	4293      	cmp	r3, r2
 8007942:	bf28      	it	cs
 8007944:	4613      	movcs	r3, r2
 8007946:	b29b      	uxth	r3, r3
 8007948:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800794a:	893b      	ldrh	r3, [r7, #8]
 800794c:	461a      	mov	r2, r3
 800794e:	68f9      	ldr	r1, [r7, #12]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fa22 	bl	8007d9a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	88db      	ldrh	r3, [r3, #6]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d104      	bne.n	8007968 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fa5b 	bl	8007e1a <USBD_CtlSendStatus>
 8007964:	e000      	b.n	8007968 <USBD_GetDescriptor+0x2c8>
    return;
 8007966:	bf00      	nop
    }
  }
}
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop

08007970 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	889b      	ldrh	r3, [r3, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d130      	bne.n	80079e4 <USBD_SetAddress+0x74>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	88db      	ldrh	r3, [r3, #6]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d12c      	bne.n	80079e4 <USBD_SetAddress+0x74>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	885b      	ldrh	r3, [r3, #2]
 800798e:	2b7f      	cmp	r3, #127	; 0x7f
 8007990:	d828      	bhi.n	80079e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	885b      	ldrh	r3, [r3, #2]
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a4:	2b03      	cmp	r3, #3
 80079a6:	d104      	bne.n	80079b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f98b 	bl	8007cc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b0:	e01d      	b.n	80079ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	7bfa      	ldrb	r2, [r7, #15]
 80079b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 ff4e 	bl	8009860 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fa28 	bl	8007e1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d8:	e009      	b.n	80079ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e2:	e004      	b.n	80079ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f96d 	bl	8007cc6 <USBD_CtlError>
  }
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	885b      	ldrh	r3, [r3, #2]
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	4b41      	ldr	r3, [pc, #260]	; (8007b10 <USBD_SetConfig+0x118>)
 8007a0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a0c:	4b40      	ldr	r3, [pc, #256]	; (8007b10 <USBD_SetConfig+0x118>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d904      	bls.n	8007a1e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f955 	bl	8007cc6 <USBD_CtlError>
 8007a1c:	e075      	b.n	8007b0a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d002      	beq.n	8007a2e <USBD_SetConfig+0x36>
 8007a28:	2b03      	cmp	r3, #3
 8007a2a:	d023      	beq.n	8007a74 <USBD_SetConfig+0x7c>
 8007a2c:	e062      	b.n	8007af4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007a2e:	4b38      	ldr	r3, [pc, #224]	; (8007b10 <USBD_SetConfig+0x118>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d01a      	beq.n	8007a6c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007a36:	4b36      	ldr	r3, [pc, #216]	; (8007b10 <USBD_SetConfig+0x118>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2203      	movs	r2, #3
 8007a44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a48:	4b31      	ldr	r3, [pc, #196]	; (8007b10 <USBD_SetConfig+0x118>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff f9e8 	bl	8006e24 <USBD_SetClassConfig>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d104      	bne.n	8007a64 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f932 	bl	8007cc6 <USBD_CtlError>
            return;
 8007a62:	e052      	b.n	8007b0a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f9d8 	bl	8007e1a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a6a:	e04e      	b.n	8007b0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f9d4 	bl	8007e1a <USBD_CtlSendStatus>
        break;
 8007a72:	e04a      	b.n	8007b0a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007a74:	4b26      	ldr	r3, [pc, #152]	; (8007b10 <USBD_SetConfig+0x118>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d112      	bne.n	8007aa2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2202      	movs	r2, #2
 8007a80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007a84:	4b22      	ldr	r3, [pc, #136]	; (8007b10 <USBD_SetConfig+0x118>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007a8e:	4b20      	ldr	r3, [pc, #128]	; (8007b10 <USBD_SetConfig+0x118>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff f9e4 	bl	8006e62 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f9bd 	bl	8007e1a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007aa0:	e033      	b.n	8007b0a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007aa2:	4b1b      	ldr	r3, [pc, #108]	; (8007b10 <USBD_SetConfig+0x118>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d01d      	beq.n	8007aec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff f9d2 	bl	8006e62 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007abe:	4b14      	ldr	r3, [pc, #80]	; (8007b10 <USBD_SetConfig+0x118>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ac8:	4b11      	ldr	r3, [pc, #68]	; (8007b10 <USBD_SetConfig+0x118>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff f9a8 	bl	8006e24 <USBD_SetClassConfig>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d104      	bne.n	8007ae4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f8f2 	bl	8007cc6 <USBD_CtlError>
            return;
 8007ae2:	e012      	b.n	8007b0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f998 	bl	8007e1a <USBD_CtlSendStatus>
        break;
 8007aea:	e00e      	b.n	8007b0a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f994 	bl	8007e1a <USBD_CtlSendStatus>
        break;
 8007af2:	e00a      	b.n	8007b0a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f8e5 	bl	8007cc6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007afc:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <USBD_SetConfig+0x118>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f7ff f9ad 	bl	8006e62 <USBD_ClrClassConfig>
        break;
 8007b08:	bf00      	nop
    }
  }
}
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20000464 	.word	0x20000464

08007b14 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	88db      	ldrh	r3, [r3, #6]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d004      	beq.n	8007b30 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f8cc 	bl	8007cc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b2e:	e022      	b.n	8007b76 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	dc02      	bgt.n	8007b40 <USBD_GetConfig+0x2c>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	dc03      	bgt.n	8007b46 <USBD_GetConfig+0x32>
 8007b3e:	e015      	b.n	8007b6c <USBD_GetConfig+0x58>
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d00b      	beq.n	8007b5c <USBD_GetConfig+0x48>
 8007b44:	e012      	b.n	8007b6c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3308      	adds	r3, #8
 8007b50:	2201      	movs	r2, #1
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f920 	bl	8007d9a <USBD_CtlSendData>
        break;
 8007b5a:	e00c      	b.n	8007b76 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	2201      	movs	r2, #1
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f918 	bl	8007d9a <USBD_CtlSendData>
        break;
 8007b6a:	e004      	b.n	8007b76 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f8a9 	bl	8007cc6 <USBD_CtlError>
        break;
 8007b74:	bf00      	nop
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b082      	sub	sp, #8
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b8e:	3b01      	subs	r3, #1
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d81e      	bhi.n	8007bd2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	88db      	ldrh	r3, [r3, #6]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d004      	beq.n	8007ba6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f891 	bl	8007cc6 <USBD_CtlError>
        break;
 8007ba4:	e01a      	b.n	8007bdc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f043 0202 	orr.w	r2, r3, #2
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f8e5 	bl	8007d9a <USBD_CtlSendData>
      break;
 8007bd0:	e004      	b.n	8007bdc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f876 	bl	8007cc6 <USBD_CtlError>
      break;
 8007bda:	bf00      	nop
  }
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	885b      	ldrh	r3, [r3, #2]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d106      	bne.n	8007c04 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f90b 	bl	8007e1a <USBD_CtlSendStatus>
  }
}
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d80b      	bhi.n	8007c3a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	885b      	ldrh	r3, [r3, #2]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d10c      	bne.n	8007c44 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f8f1 	bl	8007e1a <USBD_CtlSendStatus>
      }
      break;
 8007c38:	e004      	b.n	8007c44 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f842 	bl	8007cc6 <USBD_CtlError>
      break;
 8007c42:	e000      	b.n	8007c46 <USBD_ClrFeature+0x3a>
      break;
 8007c44:	bf00      	nop
  }
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b083      	sub	sp, #12
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781a      	ldrb	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	785a      	ldrb	r2, [r3, #1]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	3302      	adds	r3, #2
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	3303      	adds	r3, #3
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	4413      	add	r3, r2
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	3304      	adds	r3, #4
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	3305      	adds	r3, #5
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	4413      	add	r3, r2
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	3306      	adds	r3, #6
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	3307      	adds	r3, #7
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	4413      	add	r3, r2
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	80da      	strh	r2, [r3, #6]

}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bc80      	pop	{r7}
 8007cc4:	4770      	bx	lr

08007cc6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b082      	sub	sp, #8
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
 8007cce:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007cd0:	2180      	movs	r1, #128	; 0x80
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 fd5a 	bl	800978c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007cd8:	2100      	movs	r1, #0
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f001 fd56 	bl	800978c <USBD_LL_StallEP>
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d032      	beq.n	8007d64 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 f834 	bl	8007d6c <USBD_GetLen>
 8007d04:	4603      	mov	r3, r0
 8007d06:	3301      	adds	r3, #1
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	1c5a      	adds	r2, r3, #1
 8007d16:	75fa      	strb	r2, [r7, #23]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	7812      	ldrb	r2, [r2, #0]
 8007d22:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	75fa      	strb	r2, [r7, #23]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	4413      	add	r3, r2
 8007d30:	2203      	movs	r2, #3
 8007d32:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007d34:	e012      	b.n	8007d5c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	1c5a      	adds	r2, r3, #1
 8007d3a:	60fa      	str	r2, [r7, #12]
 8007d3c:	7dfa      	ldrb	r2, [r7, #23]
 8007d3e:	1c51      	adds	r1, r2, #1
 8007d40:	75f9      	strb	r1, [r7, #23]
 8007d42:	4611      	mov	r1, r2
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	440a      	add	r2, r1
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d4c:	7dfb      	ldrb	r3, [r7, #23]
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	75fa      	strb	r2, [r7, #23]
 8007d52:	461a      	mov	r2, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4413      	add	r3, r2
 8007d58:	2200      	movs	r2, #0
 8007d5a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e8      	bne.n	8007d36 <USBD_GetString+0x4e>
    }
  }
}
 8007d64:	bf00      	nop
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007d78:	e005      	b.n	8007d86 <USBD_GetLen+0x1a>
  {
    len++;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	3301      	adds	r3, #1
 8007d84:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1f5      	bne.n	8007d7a <USBD_GetLen+0xe>
  }

  return len;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr

08007d9a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	4613      	mov	r3, r2
 8007da6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007db0:	88fa      	ldrh	r2, [r7, #6]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007db6:	88fa      	ldrh	r2, [r7, #6]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dbc:	88fb      	ldrh	r3, [r7, #6]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f001 fd6b 	bl	800989e <USBD_LL_Transmit>

  return USBD_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007de0:	88fb      	ldrh	r3, [r7, #6]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	2100      	movs	r1, #0
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f001 fd59 	bl	800989e <USBD_LL_Transmit>

  return USBD_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	4613      	mov	r3, r2
 8007e02:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e04:	88fb      	ldrh	r3, [r7, #6]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	2100      	movs	r1, #0
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f001 fd6a 	bl	80098e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2204      	movs	r2, #4
 8007e26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2100      	movs	r1, #0
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 fd34 	bl	800989e <USBD_LL_Transmit>

  return USBD_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2205      	movs	r2, #5
 8007e4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e50:	2300      	movs	r3, #0
 8007e52:	2200      	movs	r2, #0
 8007e54:	2100      	movs	r1, #0
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f001 fd44 	bl	80098e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e78:	2b84      	cmp	r3, #132	; 0x84
 8007e7a:	d005      	beq.n	8007e88 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007e7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4413      	add	r3, r2
 8007e84:	3303      	adds	r3, #3
 8007e86:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007e88:	68fb      	ldr	r3, [r7, #12]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bc80      	pop	{r7}
 8007e92:	4770      	bx	lr

08007e94 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007e98:	f000 fad0 	bl	800843c <vTaskStartScheduler>
  
  return osOK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007ea2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ea4:	b089      	sub	sp, #36	; 0x24
 8007ea6:	af04      	add	r7, sp, #16
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d020      	beq.n	8007ef6 <osThreadCreate+0x54>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d01c      	beq.n	8007ef6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685c      	ldr	r4, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691e      	ldr	r6, [r3, #16]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff ffc9 	bl	8007e66 <makeFreeRtosPriority>
 8007ed4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ede:	9202      	str	r2, [sp, #8]
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	9100      	str	r1, [sp, #0]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	4632      	mov	r2, r6
 8007ee8:	4629      	mov	r1, r5
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 f8e8 	bl	80080c0 <xTaskCreateStatic>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	e01c      	b.n	8007f30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685c      	ldr	r4, [r3, #4]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f02:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff ffab 	bl	8007e66 <makeFreeRtosPriority>
 8007f10:	4602      	mov	r2, r0
 8007f12:	f107 030c 	add.w	r3, r7, #12
 8007f16:	9301      	str	r3, [sp, #4]
 8007f18:	9200      	str	r2, [sp, #0]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	4632      	mov	r2, r6
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 f929 	bl	8008178 <xTaskCreate>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d001      	beq.n	8007f30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	e000      	b.n	8007f32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007f30:	68fb      	ldr	r3, [r7, #12]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <osDelay+0x16>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	e000      	b.n	8007f52 <osDelay+0x18>
 8007f50:	2301      	movs	r3, #1
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fa3e 	bl	80083d4 <vTaskDelay>
  
  return osOK;
 8007f58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f103 0208 	add.w	r2, r3, #8
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f7a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f103 0208 	add.w	r2, r3, #8
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f103 0208 	add.w	r2, r3, #8
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bc80      	pop	{r7}
 8007f9e:	4770      	bx	lr

08007fa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bc80      	pop	{r7}
 8007fb6:	4770      	bx	lr

08007fb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	689a      	ldr	r2, [r3, #8]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	601a      	str	r2, [r3, #0]
}
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ffe:	b480      	push	{r7}
 8008000:	b085      	sub	sp, #20
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008014:	d103      	bne.n	800801e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	e00c      	b.n	8008038 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3308      	adds	r3, #8
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	e002      	b.n	800802c <vListInsert+0x2e>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	429a      	cmp	r2, r3
 8008036:	d2f6      	bcs.n	8008026 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	601a      	str	r2, [r3, #0]
}
 8008064:	bf00      	nop
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	bc80      	pop	{r7}
 800806c:	4770      	bx	lr

0800806e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800806e:	b480      	push	{r7}
 8008070:	b085      	sub	sp, #20
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6892      	ldr	r2, [r2, #8]
 8008084:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6852      	ldr	r2, [r2, #4]
 800808e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	429a      	cmp	r2, r3
 8008098:	d103      	bne.n	80080a2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689a      	ldr	r2, [r3, #8]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	1e5a      	subs	r2, r3, #1
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr

080080c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08e      	sub	sp, #56	; 0x38
 80080c4:	af04      	add	r7, sp, #16
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
 80080cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80080ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10a      	bne.n	80080ea <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10a      	bne.n	8008106 <xTaskCreateStatic+0x46>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	61fb      	str	r3, [r7, #28]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008106:	2354      	movs	r3, #84	; 0x54
 8008108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2b54      	cmp	r3, #84	; 0x54
 800810e:	d00a      	beq.n	8008126 <xTaskCreateStatic+0x66>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	61bb      	str	r3, [r7, #24]
}
 8008122:	bf00      	nop
 8008124:	e7fe      	b.n	8008124 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01e      	beq.n	800816a <xTaskCreateStatic+0xaa>
 800812c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812e:	2b00      	cmp	r3, #0
 8008130:	d01b      	beq.n	800816a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800813a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	2202      	movs	r2, #2
 8008140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008144:	2300      	movs	r3, #0
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	9302      	str	r3, [sp, #8]
 800814c:	f107 0314 	add.w	r3, r7, #20
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	68b9      	ldr	r1, [r7, #8]
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f850 	bl	8008202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008164:	f000 f8cc 	bl	8008300 <prvAddNewTaskToReadyList>
 8008168:	e001      	b.n	800816e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800816e:	697b      	ldr	r3, [r7, #20]
	}
 8008170:	4618      	mov	r0, r3
 8008172:	3728      	adds	r7, #40	; 0x28
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008178:	b580      	push	{r7, lr}
 800817a:	b08c      	sub	sp, #48	; 0x30
 800817c:	af04      	add	r7, sp, #16
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	4613      	mov	r3, r2
 8008186:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008188:	88fb      	ldrh	r3, [r7, #6]
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fe87 	bl	8008ea0 <pvPortMalloc>
 8008192:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00e      	beq.n	80081b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800819a:	2054      	movs	r0, #84	; 0x54
 800819c:	f000 fe80 	bl	8008ea0 <pvPortMalloc>
 80081a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d003      	beq.n	80081b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	631a      	str	r2, [r3, #48]	; 0x30
 80081ae:	e005      	b.n	80081bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081b0:	6978      	ldr	r0, [r7, #20]
 80081b2:	f000 ff39 	bl	8009028 <vPortFree>
 80081b6:	e001      	b.n	80081bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081b8:	2300      	movs	r3, #0
 80081ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d017      	beq.n	80081f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80081ca:	88fa      	ldrh	r2, [r7, #6]
 80081cc:	2300      	movs	r3, #0
 80081ce:	9303      	str	r3, [sp, #12]
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	9302      	str	r3, [sp, #8]
 80081d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f80e 	bl	8008202 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081e6:	69f8      	ldr	r0, [r7, #28]
 80081e8:	f000 f88a 	bl	8008300 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081ec:	2301      	movs	r3, #1
 80081ee:	61bb      	str	r3, [r7, #24]
 80081f0:	e002      	b.n	80081f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081f8:	69bb      	ldr	r3, [r7, #24]
	}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3720      	adds	r7, #32
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b088      	sub	sp, #32
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	607a      	str	r2, [r7, #4]
 800820e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800821a:	3b01      	subs	r3, #1
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	f023 0307 	bic.w	r3, r3, #7
 8008228:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	f003 0307 	and.w	r3, r3, #7
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00a      	beq.n	800824a <prvInitialiseNewTask+0x48>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	617b      	str	r3, [r7, #20]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800824a:	2300      	movs	r3, #0
 800824c:	61fb      	str	r3, [r7, #28]
 800824e:	e012      	b.n	8008276 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	4413      	add	r3, r2
 8008256:	7819      	ldrb	r1, [r3, #0]
 8008258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	4413      	add	r3, r2
 800825e:	3334      	adds	r3, #52	; 0x34
 8008260:	460a      	mov	r2, r1
 8008262:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	4413      	add	r3, r2
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d006      	beq.n	800827e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	3301      	adds	r3, #1
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	2b0f      	cmp	r3, #15
 800827a:	d9e9      	bls.n	8008250 <prvInitialiseNewTask+0x4e>
 800827c:	e000      	b.n	8008280 <prvInitialiseNewTask+0x7e>
		{
			break;
 800827e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	2b06      	cmp	r3, #6
 800828c:	d901      	bls.n	8008292 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800828e:	2306      	movs	r3, #6
 8008290:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008296:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800829c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a0:	2200      	movs	r2, #0
 80082a2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	3304      	adds	r3, #4
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff fe79 	bl	8007fa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	3318      	adds	r3, #24
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7ff fe74 	bl	8007fa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c0:	f1c3 0207 	rsb	r2, r3, #7
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	2200      	movs	r2, #0
 80082d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	68f9      	ldr	r1, [r7, #12]
 80082e0:	69b8      	ldr	r0, [r7, #24]
 80082e2:	f000 fc2b 	bl	8008b3c <pxPortInitialiseStack>
 80082e6:	4602      	mov	r2, r0
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082f8:	bf00      	nop
 80082fa:	3720      	adds	r7, #32
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008308:	f000 fd08 	bl	8008d1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800830c:	4b2a      	ldr	r3, [pc, #168]	; (80083b8 <prvAddNewTaskToReadyList+0xb8>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	4a29      	ldr	r2, [pc, #164]	; (80083b8 <prvAddNewTaskToReadyList+0xb8>)
 8008314:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008316:	4b29      	ldr	r3, [pc, #164]	; (80083bc <prvAddNewTaskToReadyList+0xbc>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800831e:	4a27      	ldr	r2, [pc, #156]	; (80083bc <prvAddNewTaskToReadyList+0xbc>)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008324:	4b24      	ldr	r3, [pc, #144]	; (80083b8 <prvAddNewTaskToReadyList+0xb8>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d110      	bne.n	800834e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800832c:	f000 fac0 	bl	80088b0 <prvInitialiseTaskLists>
 8008330:	e00d      	b.n	800834e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008332:	4b23      	ldr	r3, [pc, #140]	; (80083c0 <prvAddNewTaskToReadyList+0xc0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800833a:	4b20      	ldr	r3, [pc, #128]	; (80083bc <prvAddNewTaskToReadyList+0xbc>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	429a      	cmp	r2, r3
 8008346:	d802      	bhi.n	800834e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008348:	4a1c      	ldr	r2, [pc, #112]	; (80083bc <prvAddNewTaskToReadyList+0xbc>)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800834e:	4b1d      	ldr	r3, [pc, #116]	; (80083c4 <prvAddNewTaskToReadyList+0xc4>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3301      	adds	r3, #1
 8008354:	4a1b      	ldr	r2, [pc, #108]	; (80083c4 <prvAddNewTaskToReadyList+0xc4>)
 8008356:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	2201      	movs	r2, #1
 800835e:	409a      	lsls	r2, r3
 8008360:	4b19      	ldr	r3, [pc, #100]	; (80083c8 <prvAddNewTaskToReadyList+0xc8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4313      	orrs	r3, r2
 8008366:	4a18      	ldr	r2, [pc, #96]	; (80083c8 <prvAddNewTaskToReadyList+0xc8>)
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4a15      	ldr	r2, [pc, #84]	; (80083cc <prvAddNewTaskToReadyList+0xcc>)
 8008378:	441a      	add	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	3304      	adds	r3, #4
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7ff fe19 	bl	8007fb8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008386:	f000 fcf9 	bl	8008d7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800838a:	4b0d      	ldr	r3, [pc, #52]	; (80083c0 <prvAddNewTaskToReadyList+0xc0>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00e      	beq.n	80083b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008392:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <prvAddNewTaskToReadyList+0xbc>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	429a      	cmp	r2, r3
 800839e:	d207      	bcs.n	80083b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083a0:	4b0b      	ldr	r3, [pc, #44]	; (80083d0 <prvAddNewTaskToReadyList+0xd0>)
 80083a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	20000568 	.word	0x20000568
 80083bc:	20000468 	.word	0x20000468
 80083c0:	20000574 	.word	0x20000574
 80083c4:	20000584 	.word	0x20000584
 80083c8:	20000570 	.word	0x20000570
 80083cc:	2000046c 	.word	0x2000046c
 80083d0:	e000ed04 	.word	0xe000ed04

080083d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083dc:	2300      	movs	r3, #0
 80083de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d017      	beq.n	8008416 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083e6:	4b13      	ldr	r3, [pc, #76]	; (8008434 <vTaskDelay+0x60>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00a      	beq.n	8008404 <vTaskDelay+0x30>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	60bb      	str	r3, [r7, #8]
}
 8008400:	bf00      	nop
 8008402:	e7fe      	b.n	8008402 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008404:	f000 f87a 	bl	80084fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008408:	2100      	movs	r1, #0
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fb30 	bl	8008a70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008410:	f000 f882 	bl	8008518 <xTaskResumeAll>
 8008414:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d107      	bne.n	800842c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800841c:	4b06      	ldr	r3, [pc, #24]	; (8008438 <vTaskDelay+0x64>)
 800841e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800842c:	bf00      	nop
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	20000590 	.word	0x20000590
 8008438:	e000ed04 	.word	0xe000ed04

0800843c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08a      	sub	sp, #40	; 0x28
 8008440:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008442:	2300      	movs	r3, #0
 8008444:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008446:	2300      	movs	r3, #0
 8008448:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800844a:	463a      	mov	r2, r7
 800844c:	1d39      	adds	r1, r7, #4
 800844e:	f107 0308 	add.w	r3, r7, #8
 8008452:	4618      	mov	r0, r3
 8008454:	f7f7 fe7c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	9202      	str	r2, [sp, #8]
 8008460:	9301      	str	r3, [sp, #4]
 8008462:	2300      	movs	r3, #0
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	2300      	movs	r3, #0
 8008468:	460a      	mov	r2, r1
 800846a:	491e      	ldr	r1, [pc, #120]	; (80084e4 <vTaskStartScheduler+0xa8>)
 800846c:	481e      	ldr	r0, [pc, #120]	; (80084e8 <vTaskStartScheduler+0xac>)
 800846e:	f7ff fe27 	bl	80080c0 <xTaskCreateStatic>
 8008472:	4603      	mov	r3, r0
 8008474:	4a1d      	ldr	r2, [pc, #116]	; (80084ec <vTaskStartScheduler+0xb0>)
 8008476:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008478:	4b1c      	ldr	r3, [pc, #112]	; (80084ec <vTaskStartScheduler+0xb0>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d002      	beq.n	8008486 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008480:	2301      	movs	r3, #1
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	e001      	b.n	800848a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008486:	2300      	movs	r3, #0
 8008488:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b01      	cmp	r3, #1
 800848e:	d116      	bne.n	80084be <vTaskStartScheduler+0x82>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	613b      	str	r3, [r7, #16]
}
 80084a2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084a4:	4b12      	ldr	r3, [pc, #72]	; (80084f0 <vTaskStartScheduler+0xb4>)
 80084a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084ac:	4b11      	ldr	r3, [pc, #68]	; (80084f4 <vTaskStartScheduler+0xb8>)
 80084ae:	2201      	movs	r2, #1
 80084b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80084b2:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <vTaskStartScheduler+0xbc>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084b8:	f000 fbbe 	bl	8008c38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084bc:	e00e      	b.n	80084dc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084c4:	d10a      	bne.n	80084dc <vTaskStartScheduler+0xa0>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	60fb      	str	r3, [r7, #12]
}
 80084d8:	bf00      	nop
 80084da:	e7fe      	b.n	80084da <vTaskStartScheduler+0x9e>
}
 80084dc:	bf00      	nop
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	08009a5c 	.word	0x08009a5c
 80084e8:	08008881 	.word	0x08008881
 80084ec:	2000058c 	.word	0x2000058c
 80084f0:	20000588 	.word	0x20000588
 80084f4:	20000574 	.word	0x20000574
 80084f8:	2000056c 	.word	0x2000056c

080084fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008500:	4b04      	ldr	r3, [pc, #16]	; (8008514 <vTaskSuspendAll+0x18>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3301      	adds	r3, #1
 8008506:	4a03      	ldr	r2, [pc, #12]	; (8008514 <vTaskSuspendAll+0x18>)
 8008508:	6013      	str	r3, [r2, #0]
}
 800850a:	bf00      	nop
 800850c:	46bd      	mov	sp, r7
 800850e:	bc80      	pop	{r7}
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	20000590 	.word	0x20000590

08008518 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008522:	2300      	movs	r3, #0
 8008524:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008526:	4b41      	ldr	r3, [pc, #260]	; (800862c <xTaskResumeAll+0x114>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10a      	bne.n	8008544 <xTaskResumeAll+0x2c>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	603b      	str	r3, [r7, #0]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008544:	f000 fbea 	bl	8008d1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008548:	4b38      	ldr	r3, [pc, #224]	; (800862c <xTaskResumeAll+0x114>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3b01      	subs	r3, #1
 800854e:	4a37      	ldr	r2, [pc, #220]	; (800862c <xTaskResumeAll+0x114>)
 8008550:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008552:	4b36      	ldr	r3, [pc, #216]	; (800862c <xTaskResumeAll+0x114>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d161      	bne.n	800861e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800855a:	4b35      	ldr	r3, [pc, #212]	; (8008630 <xTaskResumeAll+0x118>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d05d      	beq.n	800861e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008562:	e02e      	b.n	80085c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008564:	4b33      	ldr	r3, [pc, #204]	; (8008634 <xTaskResumeAll+0x11c>)
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3318      	adds	r3, #24
 8008570:	4618      	mov	r0, r3
 8008572:	f7ff fd7c 	bl	800806e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3304      	adds	r3, #4
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff fd77 	bl	800806e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	2201      	movs	r2, #1
 8008586:	409a      	lsls	r2, r3
 8008588:	4b2b      	ldr	r3, [pc, #172]	; (8008638 <xTaskResumeAll+0x120>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4313      	orrs	r3, r2
 800858e:	4a2a      	ldr	r2, [pc, #168]	; (8008638 <xTaskResumeAll+0x120>)
 8008590:	6013      	str	r3, [r2, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4a27      	ldr	r2, [pc, #156]	; (800863c <xTaskResumeAll+0x124>)
 80085a0:	441a      	add	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3304      	adds	r3, #4
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7ff fd05 	bl	8007fb8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b2:	4b23      	ldr	r3, [pc, #140]	; (8008640 <xTaskResumeAll+0x128>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d302      	bcc.n	80085c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80085bc:	4b21      	ldr	r3, [pc, #132]	; (8008644 <xTaskResumeAll+0x12c>)
 80085be:	2201      	movs	r2, #1
 80085c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085c2:	4b1c      	ldr	r3, [pc, #112]	; (8008634 <xTaskResumeAll+0x11c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1cc      	bne.n	8008564 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085d0:	f000 fa0c 	bl	80089ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80085d4:	4b1c      	ldr	r3, [pc, #112]	; (8008648 <xTaskResumeAll+0x130>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d010      	beq.n	8008602 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085e0:	f000 f836 	bl	8008650 <xTaskIncrementTick>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80085ea:	4b16      	ldr	r3, [pc, #88]	; (8008644 <xTaskResumeAll+0x12c>)
 80085ec:	2201      	movs	r2, #1
 80085ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1f1      	bne.n	80085e0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80085fc:	4b12      	ldr	r3, [pc, #72]	; (8008648 <xTaskResumeAll+0x130>)
 80085fe:	2200      	movs	r2, #0
 8008600:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008602:	4b10      	ldr	r3, [pc, #64]	; (8008644 <xTaskResumeAll+0x12c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d009      	beq.n	800861e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800860a:	2301      	movs	r3, #1
 800860c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800860e:	4b0f      	ldr	r3, [pc, #60]	; (800864c <xTaskResumeAll+0x134>)
 8008610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800861e:	f000 fbad 	bl	8008d7c <vPortExitCritical>

	return xAlreadyYielded;
 8008622:	68bb      	ldr	r3, [r7, #8]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	20000590 	.word	0x20000590
 8008630:	20000568 	.word	0x20000568
 8008634:	20000528 	.word	0x20000528
 8008638:	20000570 	.word	0x20000570
 800863c:	2000046c 	.word	0x2000046c
 8008640:	20000468 	.word	0x20000468
 8008644:	2000057c 	.word	0x2000057c
 8008648:	20000578 	.word	0x20000578
 800864c:	e000ed04 	.word	0xe000ed04

08008650 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008656:	2300      	movs	r3, #0
 8008658:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800865a:	4b51      	ldr	r3, [pc, #324]	; (80087a0 <xTaskIncrementTick+0x150>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	f040 808d 	bne.w	800877e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008664:	4b4f      	ldr	r3, [pc, #316]	; (80087a4 <xTaskIncrementTick+0x154>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3301      	adds	r3, #1
 800866a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800866c:	4a4d      	ldr	r2, [pc, #308]	; (80087a4 <xTaskIncrementTick+0x154>)
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d120      	bne.n	80086ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008678:	4b4b      	ldr	r3, [pc, #300]	; (80087a8 <xTaskIncrementTick+0x158>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00a      	beq.n	8008698 <xTaskIncrementTick+0x48>
	__asm volatile
 8008682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	603b      	str	r3, [r7, #0]
}
 8008694:	bf00      	nop
 8008696:	e7fe      	b.n	8008696 <xTaskIncrementTick+0x46>
 8008698:	4b43      	ldr	r3, [pc, #268]	; (80087a8 <xTaskIncrementTick+0x158>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	4b43      	ldr	r3, [pc, #268]	; (80087ac <xTaskIncrementTick+0x15c>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a41      	ldr	r2, [pc, #260]	; (80087a8 <xTaskIncrementTick+0x158>)
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	4a41      	ldr	r2, [pc, #260]	; (80087ac <xTaskIncrementTick+0x15c>)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	4b40      	ldr	r3, [pc, #256]	; (80087b0 <xTaskIncrementTick+0x160>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3301      	adds	r3, #1
 80086b2:	4a3f      	ldr	r2, [pc, #252]	; (80087b0 <xTaskIncrementTick+0x160>)
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	f000 f999 	bl	80089ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80086ba:	4b3e      	ldr	r3, [pc, #248]	; (80087b4 <xTaskIncrementTick+0x164>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d34d      	bcc.n	8008760 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086c4:	4b38      	ldr	r3, [pc, #224]	; (80087a8 <xTaskIncrementTick+0x158>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <xTaskIncrementTick+0x82>
 80086ce:	2301      	movs	r3, #1
 80086d0:	e000      	b.n	80086d4 <xTaskIncrementTick+0x84>
 80086d2:	2300      	movs	r3, #0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d004      	beq.n	80086e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d8:	4b36      	ldr	r3, [pc, #216]	; (80087b4 <xTaskIncrementTick+0x164>)
 80086da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086de:	601a      	str	r2, [r3, #0]
					break;
 80086e0:	e03e      	b.n	8008760 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80086e2:	4b31      	ldr	r3, [pc, #196]	; (80087a8 <xTaskIncrementTick+0x158>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086f2:	693a      	ldr	r2, [r7, #16]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d203      	bcs.n	8008702 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086fa:	4a2e      	ldr	r2, [pc, #184]	; (80087b4 <xTaskIncrementTick+0x164>)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6013      	str	r3, [r2, #0]
						break;
 8008700:	e02e      	b.n	8008760 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	3304      	adds	r3, #4
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff fcb1 	bl	800806e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	3318      	adds	r3, #24
 8008718:	4618      	mov	r0, r3
 800871a:	f7ff fca8 	bl	800806e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	2201      	movs	r2, #1
 8008724:	409a      	lsls	r2, r3
 8008726:	4b24      	ldr	r3, [pc, #144]	; (80087b8 <xTaskIncrementTick+0x168>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4313      	orrs	r3, r2
 800872c:	4a22      	ldr	r2, [pc, #136]	; (80087b8 <xTaskIncrementTick+0x168>)
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008734:	4613      	mov	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4a1f      	ldr	r2, [pc, #124]	; (80087bc <xTaskIncrementTick+0x16c>)
 800873e:	441a      	add	r2, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	3304      	adds	r3, #4
 8008744:	4619      	mov	r1, r3
 8008746:	4610      	mov	r0, r2
 8008748:	f7ff fc36 	bl	8007fb8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008750:	4b1b      	ldr	r3, [pc, #108]	; (80087c0 <xTaskIncrementTick+0x170>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008756:	429a      	cmp	r2, r3
 8008758:	d3b4      	bcc.n	80086c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800875a:	2301      	movs	r3, #1
 800875c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800875e:	e7b1      	b.n	80086c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008760:	4b17      	ldr	r3, [pc, #92]	; (80087c0 <xTaskIncrementTick+0x170>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008766:	4915      	ldr	r1, [pc, #84]	; (80087bc <xTaskIncrementTick+0x16c>)
 8008768:	4613      	mov	r3, r2
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	440b      	add	r3, r1
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d907      	bls.n	8008788 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008778:	2301      	movs	r3, #1
 800877a:	617b      	str	r3, [r7, #20]
 800877c:	e004      	b.n	8008788 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800877e:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <xTaskIncrementTick+0x174>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3301      	adds	r3, #1
 8008784:	4a0f      	ldr	r2, [pc, #60]	; (80087c4 <xTaskIncrementTick+0x174>)
 8008786:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008788:	4b0f      	ldr	r3, [pc, #60]	; (80087c8 <xTaskIncrementTick+0x178>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008790:	2301      	movs	r3, #1
 8008792:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008794:	697b      	ldr	r3, [r7, #20]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20000590 	.word	0x20000590
 80087a4:	2000056c 	.word	0x2000056c
 80087a8:	20000520 	.word	0x20000520
 80087ac:	20000524 	.word	0x20000524
 80087b0:	20000580 	.word	0x20000580
 80087b4:	20000588 	.word	0x20000588
 80087b8:	20000570 	.word	0x20000570
 80087bc:	2000046c 	.word	0x2000046c
 80087c0:	20000468 	.word	0x20000468
 80087c4:	20000578 	.word	0x20000578
 80087c8:	2000057c 	.word	0x2000057c

080087cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087d2:	4b26      	ldr	r3, [pc, #152]	; (800886c <vTaskSwitchContext+0xa0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087da:	4b25      	ldr	r3, [pc, #148]	; (8008870 <vTaskSwitchContext+0xa4>)
 80087dc:	2201      	movs	r2, #1
 80087de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087e0:	e03f      	b.n	8008862 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80087e2:	4b23      	ldr	r3, [pc, #140]	; (8008870 <vTaskSwitchContext+0xa4>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80087e8:	4b22      	ldr	r3, [pc, #136]	; (8008874 <vTaskSwitchContext+0xa8>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	fab3 f383 	clz	r3, r3
 80087f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80087f6:	7afb      	ldrb	r3, [r7, #11]
 80087f8:	f1c3 031f 	rsb	r3, r3, #31
 80087fc:	617b      	str	r3, [r7, #20]
 80087fe:	491e      	ldr	r1, [pc, #120]	; (8008878 <vTaskSwitchContext+0xac>)
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	440b      	add	r3, r1
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10a      	bne.n	8008828 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	607b      	str	r3, [r7, #4]
}
 8008824:	bf00      	nop
 8008826:	e7fe      	b.n	8008826 <vTaskSwitchContext+0x5a>
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	4613      	mov	r3, r2
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4a11      	ldr	r2, [pc, #68]	; (8008878 <vTaskSwitchContext+0xac>)
 8008834:	4413      	add	r3, r2
 8008836:	613b      	str	r3, [r7, #16]
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	3308      	adds	r3, #8
 800884a:	429a      	cmp	r2, r3
 800884c:	d104      	bne.n	8008858 <vTaskSwitchContext+0x8c>
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	605a      	str	r2, [r3, #4]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	4a07      	ldr	r2, [pc, #28]	; (800887c <vTaskSwitchContext+0xb0>)
 8008860:	6013      	str	r3, [r2, #0]
}
 8008862:	bf00      	nop
 8008864:	371c      	adds	r7, #28
 8008866:	46bd      	mov	sp, r7
 8008868:	bc80      	pop	{r7}
 800886a:	4770      	bx	lr
 800886c:	20000590 	.word	0x20000590
 8008870:	2000057c 	.word	0x2000057c
 8008874:	20000570 	.word	0x20000570
 8008878:	2000046c 	.word	0x2000046c
 800887c:	20000468 	.word	0x20000468

08008880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008888:	f000 f852 	bl	8008930 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800888c:	4b06      	ldr	r3, [pc, #24]	; (80088a8 <prvIdleTask+0x28>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d9f9      	bls.n	8008888 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008894:	4b05      	ldr	r3, [pc, #20]	; (80088ac <prvIdleTask+0x2c>)
 8008896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088a4:	e7f0      	b.n	8008888 <prvIdleTask+0x8>
 80088a6:	bf00      	nop
 80088a8:	2000046c 	.word	0x2000046c
 80088ac:	e000ed04 	.word	0xe000ed04

080088b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088b6:	2300      	movs	r3, #0
 80088b8:	607b      	str	r3, [r7, #4]
 80088ba:	e00c      	b.n	80088d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4a12      	ldr	r2, [pc, #72]	; (8008910 <prvInitialiseTaskLists+0x60>)
 80088c8:	4413      	add	r3, r2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7ff fb49 	bl	8007f62 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3301      	adds	r3, #1
 80088d4:	607b      	str	r3, [r7, #4]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b06      	cmp	r3, #6
 80088da:	d9ef      	bls.n	80088bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088dc:	480d      	ldr	r0, [pc, #52]	; (8008914 <prvInitialiseTaskLists+0x64>)
 80088de:	f7ff fb40 	bl	8007f62 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088e2:	480d      	ldr	r0, [pc, #52]	; (8008918 <prvInitialiseTaskLists+0x68>)
 80088e4:	f7ff fb3d 	bl	8007f62 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088e8:	480c      	ldr	r0, [pc, #48]	; (800891c <prvInitialiseTaskLists+0x6c>)
 80088ea:	f7ff fb3a 	bl	8007f62 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088ee:	480c      	ldr	r0, [pc, #48]	; (8008920 <prvInitialiseTaskLists+0x70>)
 80088f0:	f7ff fb37 	bl	8007f62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088f4:	480b      	ldr	r0, [pc, #44]	; (8008924 <prvInitialiseTaskLists+0x74>)
 80088f6:	f7ff fb34 	bl	8007f62 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088fa:	4b0b      	ldr	r3, [pc, #44]	; (8008928 <prvInitialiseTaskLists+0x78>)
 80088fc:	4a05      	ldr	r2, [pc, #20]	; (8008914 <prvInitialiseTaskLists+0x64>)
 80088fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008900:	4b0a      	ldr	r3, [pc, #40]	; (800892c <prvInitialiseTaskLists+0x7c>)
 8008902:	4a05      	ldr	r2, [pc, #20]	; (8008918 <prvInitialiseTaskLists+0x68>)
 8008904:	601a      	str	r2, [r3, #0]
}
 8008906:	bf00      	nop
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	2000046c 	.word	0x2000046c
 8008914:	200004f8 	.word	0x200004f8
 8008918:	2000050c 	.word	0x2000050c
 800891c:	20000528 	.word	0x20000528
 8008920:	2000053c 	.word	0x2000053c
 8008924:	20000554 	.word	0x20000554
 8008928:	20000520 	.word	0x20000520
 800892c:	20000524 	.word	0x20000524

08008930 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008936:	e019      	b.n	800896c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008938:	f000 f9f0 	bl	8008d1c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800893c:	4b10      	ldr	r3, [pc, #64]	; (8008980 <prvCheckTasksWaitingTermination+0x50>)
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3304      	adds	r3, #4
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff fb90 	bl	800806e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800894e:	4b0d      	ldr	r3, [pc, #52]	; (8008984 <prvCheckTasksWaitingTermination+0x54>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3b01      	subs	r3, #1
 8008954:	4a0b      	ldr	r2, [pc, #44]	; (8008984 <prvCheckTasksWaitingTermination+0x54>)
 8008956:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008958:	4b0b      	ldr	r3, [pc, #44]	; (8008988 <prvCheckTasksWaitingTermination+0x58>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3b01      	subs	r3, #1
 800895e:	4a0a      	ldr	r2, [pc, #40]	; (8008988 <prvCheckTasksWaitingTermination+0x58>)
 8008960:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008962:	f000 fa0b 	bl	8008d7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f810 	bl	800898c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800896c:	4b06      	ldr	r3, [pc, #24]	; (8008988 <prvCheckTasksWaitingTermination+0x58>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e1      	bne.n	8008938 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	2000053c 	.word	0x2000053c
 8008984:	20000568 	.word	0x20000568
 8008988:	20000550 	.word	0x20000550

0800898c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800899a:	2b00      	cmp	r3, #0
 800899c:	d108      	bne.n	80089b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fb40 	bl	8009028 <vPortFree>
				vPortFree( pxTCB );
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fb3d 	bl	8009028 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089ae:	e018      	b.n	80089e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d103      	bne.n	80089c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fb34 	bl	8009028 <vPortFree>
	}
 80089c0:	e00f      	b.n	80089e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d00a      	beq.n	80089e2 <prvDeleteTCB+0x56>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	60fb      	str	r3, [r7, #12]
}
 80089de:	bf00      	nop
 80089e0:	e7fe      	b.n	80089e0 <prvDeleteTCB+0x54>
	}
 80089e2:	bf00      	nop
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089f2:	4b0e      	ldr	r3, [pc, #56]	; (8008a2c <prvResetNextTaskUnblockTime+0x40>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <prvResetNextTaskUnblockTime+0x14>
 80089fc:	2301      	movs	r3, #1
 80089fe:	e000      	b.n	8008a02 <prvResetNextTaskUnblockTime+0x16>
 8008a00:	2300      	movs	r3, #0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d004      	beq.n	8008a10 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a06:	4b0a      	ldr	r3, [pc, #40]	; (8008a30 <prvResetNextTaskUnblockTime+0x44>)
 8008a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a0c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a0e:	e008      	b.n	8008a22 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a10:	4b06      	ldr	r3, [pc, #24]	; (8008a2c <prvResetNextTaskUnblockTime+0x40>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	4a04      	ldr	r2, [pc, #16]	; (8008a30 <prvResetNextTaskUnblockTime+0x44>)
 8008a20:	6013      	str	r3, [r2, #0]
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bc80      	pop	{r7}
 8008a2a:	4770      	bx	lr
 8008a2c:	20000520 	.word	0x20000520
 8008a30:	20000588 	.word	0x20000588

08008a34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a3a:	4b0b      	ldr	r3, [pc, #44]	; (8008a68 <xTaskGetSchedulerState+0x34>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d102      	bne.n	8008a48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a42:	2301      	movs	r3, #1
 8008a44:	607b      	str	r3, [r7, #4]
 8008a46:	e008      	b.n	8008a5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a48:	4b08      	ldr	r3, [pc, #32]	; (8008a6c <xTaskGetSchedulerState+0x38>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d102      	bne.n	8008a56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a50:	2302      	movs	r3, #2
 8008a52:	607b      	str	r3, [r7, #4]
 8008a54:	e001      	b.n	8008a5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a56:	2300      	movs	r3, #0
 8008a58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a5a:	687b      	ldr	r3, [r7, #4]
	}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bc80      	pop	{r7}
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	20000574 	.word	0x20000574
 8008a6c:	20000590 	.word	0x20000590

08008a70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a7a:	4b29      	ldr	r3, [pc, #164]	; (8008b20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a80:	4b28      	ldr	r3, [pc, #160]	; (8008b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3304      	adds	r3, #4
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7ff faf1 	bl	800806e <uxListRemove>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10b      	bne.n	8008aaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008a92:	4b24      	ldr	r3, [pc, #144]	; (8008b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a98:	2201      	movs	r2, #1
 8008a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9e:	43da      	mvns	r2, r3
 8008aa0:	4b21      	ldr	r3, [pc, #132]	; (8008b28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	4a20      	ldr	r2, [pc, #128]	; (8008b28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008aa8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ab0:	d10a      	bne.n	8008ac8 <prvAddCurrentTaskToDelayedList+0x58>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d007      	beq.n	8008ac8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ab8:	4b1a      	ldr	r3, [pc, #104]	; (8008b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	3304      	adds	r3, #4
 8008abe:	4619      	mov	r1, r3
 8008ac0:	481a      	ldr	r0, [pc, #104]	; (8008b2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008ac2:	f7ff fa79 	bl	8007fb8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ac6:	e026      	b.n	8008b16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ad0:	4b14      	ldr	r3, [pc, #80]	; (8008b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d209      	bcs.n	8008af4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ae0:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	4b0f      	ldr	r3, [pc, #60]	; (8008b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3304      	adds	r3, #4
 8008aea:	4619      	mov	r1, r3
 8008aec:	4610      	mov	r0, r2
 8008aee:	f7ff fa86 	bl	8007ffe <vListInsert>
}
 8008af2:	e010      	b.n	8008b16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008af4:	4b0f      	ldr	r3, [pc, #60]	; (8008b34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	4b0a      	ldr	r3, [pc, #40]	; (8008b24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3304      	adds	r3, #4
 8008afe:	4619      	mov	r1, r3
 8008b00:	4610      	mov	r0, r2
 8008b02:	f7ff fa7c 	bl	8007ffe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b06:	4b0c      	ldr	r3, [pc, #48]	; (8008b38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d202      	bcs.n	8008b16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008b10:	4a09      	ldr	r2, [pc, #36]	; (8008b38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	6013      	str	r3, [r2, #0]
}
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	2000056c 	.word	0x2000056c
 8008b24:	20000468 	.word	0x20000468
 8008b28:	20000570 	.word	0x20000570
 8008b2c:	20000554 	.word	0x20000554
 8008b30:	20000524 	.word	0x20000524
 8008b34:	20000520 	.word	0x20000520
 8008b38:	20000588 	.word	0x20000588

08008b3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	3b04      	subs	r3, #4
 8008b4c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3b04      	subs	r3, #4
 8008b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f023 0201 	bic.w	r2, r3, #1
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3b04      	subs	r3, #4
 8008b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b6c:	4a08      	ldr	r2, [pc, #32]	; (8008b90 <pxPortInitialiseStack+0x54>)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3b14      	subs	r3, #20
 8008b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3b20      	subs	r3, #32
 8008b82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b84:	68fb      	ldr	r3, [r7, #12]
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc80      	pop	{r7}
 8008b8e:	4770      	bx	lr
 8008b90:	08008b95 	.word	0x08008b95

08008b94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b9e:	4b12      	ldr	r3, [pc, #72]	; (8008be8 <prvTaskExitError+0x54>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ba6:	d00a      	beq.n	8008bbe <prvTaskExitError+0x2a>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	60fb      	str	r3, [r7, #12]
}
 8008bba:	bf00      	nop
 8008bbc:	e7fe      	b.n	8008bbc <prvTaskExitError+0x28>
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	60bb      	str	r3, [r7, #8]
}
 8008bd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bd2:	bf00      	nop
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0fc      	beq.n	8008bd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bda:	bf00      	nop
 8008bdc:	bf00      	nop
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bc80      	pop	{r7}
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	20000108 	.word	0x20000108
 8008bec:	00000000 	.word	0x00000000

08008bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bf0:	4b07      	ldr	r3, [pc, #28]	; (8008c10 <pxCurrentTCBConst2>)
 8008bf2:	6819      	ldr	r1, [r3, #0]
 8008bf4:	6808      	ldr	r0, [r1, #0]
 8008bf6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008bfa:	f380 8809 	msr	PSP, r0
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f04f 0000 	mov.w	r0, #0
 8008c06:	f380 8811 	msr	BASEPRI, r0
 8008c0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008c0e:	4770      	bx	lr

08008c10 <pxCurrentTCBConst2>:
 8008c10:	20000468 	.word	0x20000468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop

08008c18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008c18:	4806      	ldr	r0, [pc, #24]	; (8008c34 <prvPortStartFirstTask+0x1c>)
 8008c1a:	6800      	ldr	r0, [r0, #0]
 8008c1c:	6800      	ldr	r0, [r0, #0]
 8008c1e:	f380 8808 	msr	MSP, r0
 8008c22:	b662      	cpsie	i
 8008c24:	b661      	cpsie	f
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	df00      	svc	0
 8008c30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c32:	bf00      	nop
 8008c34:	e000ed08 	.word	0xe000ed08

08008c38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c3e:	4b32      	ldr	r3, [pc, #200]	; (8008d08 <xPortStartScheduler+0xd0>)
 8008c40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	22ff      	movs	r2, #255	; 0xff
 8008c4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c58:	78fb      	ldrb	r3, [r7, #3]
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	4b2a      	ldr	r3, [pc, #168]	; (8008d0c <xPortStartScheduler+0xd4>)
 8008c64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c66:	4b2a      	ldr	r3, [pc, #168]	; (8008d10 <xPortStartScheduler+0xd8>)
 8008c68:	2207      	movs	r2, #7
 8008c6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c6c:	e009      	b.n	8008c82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008c6e:	4b28      	ldr	r3, [pc, #160]	; (8008d10 <xPortStartScheduler+0xd8>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	4a26      	ldr	r2, [pc, #152]	; (8008d10 <xPortStartScheduler+0xd8>)
 8008c76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c78:	78fb      	ldrb	r3, [r7, #3]
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c82:	78fb      	ldrb	r3, [r7, #3]
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c8a:	2b80      	cmp	r3, #128	; 0x80
 8008c8c:	d0ef      	beq.n	8008c6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c8e:	4b20      	ldr	r3, [pc, #128]	; (8008d10 <xPortStartScheduler+0xd8>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f1c3 0307 	rsb	r3, r3, #7
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d00a      	beq.n	8008cb0 <xPortStartScheduler+0x78>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	60bb      	str	r3, [r7, #8]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cb0:	4b17      	ldr	r3, [pc, #92]	; (8008d10 <xPortStartScheduler+0xd8>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	021b      	lsls	r3, r3, #8
 8008cb6:	4a16      	ldr	r2, [pc, #88]	; (8008d10 <xPortStartScheduler+0xd8>)
 8008cb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008cba:	4b15      	ldr	r3, [pc, #84]	; (8008d10 <xPortStartScheduler+0xd8>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cc2:	4a13      	ldr	r2, [pc, #76]	; (8008d10 <xPortStartScheduler+0xd8>)
 8008cc4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cce:	4b11      	ldr	r3, [pc, #68]	; (8008d14 <xPortStartScheduler+0xdc>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a10      	ldr	r2, [pc, #64]	; (8008d14 <xPortStartScheduler+0xdc>)
 8008cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cda:	4b0e      	ldr	r3, [pc, #56]	; (8008d14 <xPortStartScheduler+0xdc>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a0d      	ldr	r2, [pc, #52]	; (8008d14 <xPortStartScheduler+0xdc>)
 8008ce0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008ce4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ce6:	f000 f8b9 	bl	8008e5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008cea:	4b0b      	ldr	r3, [pc, #44]	; (8008d18 <xPortStartScheduler+0xe0>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cf0:	f7ff ff92 	bl	8008c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cf4:	f7ff fd6a 	bl	80087cc <vTaskSwitchContext>
	prvTaskExitError();
 8008cf8:	f7ff ff4c 	bl	8008b94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	e000e400 	.word	0xe000e400
 8008d0c:	20000594 	.word	0x20000594
 8008d10:	20000598 	.word	0x20000598
 8008d14:	e000ed20 	.word	0xe000ed20
 8008d18:	20000108 	.word	0x20000108

08008d1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	607b      	str	r3, [r7, #4]
}
 8008d34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <vPortEnterCritical+0x58>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	4a0d      	ldr	r2, [pc, #52]	; (8008d74 <vPortEnterCritical+0x58>)
 8008d3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d40:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <vPortEnterCritical+0x58>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d10f      	bne.n	8008d68 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d48:	4b0b      	ldr	r3, [pc, #44]	; (8008d78 <vPortEnterCritical+0x5c>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d00a      	beq.n	8008d68 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	f383 8811 	msr	BASEPRI, r3
 8008d5a:	f3bf 8f6f 	isb	sy
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	603b      	str	r3, [r7, #0]
}
 8008d64:	bf00      	nop
 8008d66:	e7fe      	b.n	8008d66 <vPortEnterCritical+0x4a>
	}
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bc80      	pop	{r7}
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20000108 	.word	0x20000108
 8008d78:	e000ed04 	.word	0xe000ed04

08008d7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d82:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <vPortExitCritical+0x4c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10a      	bne.n	8008da0 <vPortExitCritical+0x24>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	607b      	str	r3, [r7, #4]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008da0:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <vPortExitCritical+0x4c>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3b01      	subs	r3, #1
 8008da6:	4a08      	ldr	r2, [pc, #32]	; (8008dc8 <vPortExitCritical+0x4c>)
 8008da8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008daa:	4b07      	ldr	r3, [pc, #28]	; (8008dc8 <vPortExitCritical+0x4c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d105      	bne.n	8008dbe <vPortExitCritical+0x42>
 8008db2:	2300      	movs	r3, #0
 8008db4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008dbc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008dbe:	bf00      	nop
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bc80      	pop	{r7}
 8008dc6:	4770      	bx	lr
 8008dc8:	20000108 	.word	0x20000108
 8008dcc:	00000000 	.word	0x00000000

08008dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008dd0:	f3ef 8009 	mrs	r0, PSP
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	4b0d      	ldr	r3, [pc, #52]	; (8008e10 <pxCurrentTCBConst>)
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008de0:	6010      	str	r0, [r2, #0]
 8008de2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008de6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008dea:	f380 8811 	msr	BASEPRI, r0
 8008dee:	f7ff fced 	bl	80087cc <vTaskSwitchContext>
 8008df2:	f04f 0000 	mov.w	r0, #0
 8008df6:	f380 8811 	msr	BASEPRI, r0
 8008dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008dfe:	6819      	ldr	r1, [r3, #0]
 8008e00:	6808      	ldr	r0, [r1, #0]
 8008e02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e06:	f380 8809 	msr	PSP, r0
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	4770      	bx	lr

08008e10 <pxCurrentTCBConst>:
 8008e10:	20000468 	.word	0x20000468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop

08008e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	607b      	str	r3, [r7, #4]
}
 8008e30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e32:	f7ff fc0d 	bl	8008650 <xTaskIncrementTick>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e3c:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <xPortSysTickHandler+0x40>)
 8008e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	2300      	movs	r3, #0
 8008e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f383 8811 	msr	BASEPRI, r3
}
 8008e4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e60:	4b0a      	ldr	r3, [pc, #40]	; (8008e8c <vPortSetupTimerInterrupt+0x30>)
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e66:	4b0a      	ldr	r3, [pc, #40]	; (8008e90 <vPortSetupTimerInterrupt+0x34>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e6c:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <vPortSetupTimerInterrupt+0x38>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a09      	ldr	r2, [pc, #36]	; (8008e98 <vPortSetupTimerInterrupt+0x3c>)
 8008e72:	fba2 2303 	umull	r2, r3, r2, r3
 8008e76:	099b      	lsrs	r3, r3, #6
 8008e78:	4a08      	ldr	r2, [pc, #32]	; (8008e9c <vPortSetupTimerInterrupt+0x40>)
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e7e:	4b03      	ldr	r3, [pc, #12]	; (8008e8c <vPortSetupTimerInterrupt+0x30>)
 8008e80:	2207      	movs	r2, #7
 8008e82:	601a      	str	r2, [r3, #0]
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bc80      	pop	{r7}
 8008e8a:	4770      	bx	lr
 8008e8c:	e000e010 	.word	0xe000e010
 8008e90:	e000e018 	.word	0xe000e018
 8008e94:	20000000 	.word	0x20000000
 8008e98:	10624dd3 	.word	0x10624dd3
 8008e9c:	e000e014 	.word	0xe000e014

08008ea0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08a      	sub	sp, #40	; 0x28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008eac:	f7ff fb26 	bl	80084fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008eb0:	4b58      	ldr	r3, [pc, #352]	; (8009014 <pvPortMalloc+0x174>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008eb8:	f000 f910 	bl	80090dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ebc:	4b56      	ldr	r3, [pc, #344]	; (8009018 <pvPortMalloc+0x178>)
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f040 808e 	bne.w	8008fe6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d01d      	beq.n	8008f0c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ed0:	2208      	movs	r2, #8
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f003 0307 	and.w	r3, r3, #7
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d014      	beq.n	8008f0c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f023 0307 	bic.w	r3, r3, #7
 8008ee8:	3308      	adds	r3, #8
 8008eea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <pvPortMalloc+0x6c>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	617b      	str	r3, [r7, #20]
}
 8008f08:	bf00      	nop
 8008f0a:	e7fe      	b.n	8008f0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d069      	beq.n	8008fe6 <pvPortMalloc+0x146>
 8008f12:	4b42      	ldr	r3, [pc, #264]	; (800901c <pvPortMalloc+0x17c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d864      	bhi.n	8008fe6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f1c:	4b40      	ldr	r3, [pc, #256]	; (8009020 <pvPortMalloc+0x180>)
 8008f1e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f20:	4b3f      	ldr	r3, [pc, #252]	; (8009020 <pvPortMalloc+0x180>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f26:	e004      	b.n	8008f32 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d903      	bls.n	8008f44 <pvPortMalloc+0xa4>
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1f1      	bne.n	8008f28 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f44:	4b33      	ldr	r3, [pc, #204]	; (8009014 <pvPortMalloc+0x174>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d04b      	beq.n	8008fe6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2208      	movs	r2, #8
 8008f54:	4413      	add	r3, r2
 8008f56:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	6a3b      	ldr	r3, [r7, #32]
 8008f5e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	1ad2      	subs	r2, r2, r3
 8008f68:	2308      	movs	r3, #8
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d91f      	bls.n	8008fb0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4413      	add	r3, r2
 8008f76:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	f003 0307 	and.w	r3, r3, #7
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <pvPortMalloc+0xf8>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	613b      	str	r3, [r7, #16]
}
 8008f94:	bf00      	nop
 8008f96:	e7fe      	b.n	8008f96 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	1ad2      	subs	r2, r2, r3
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008faa:	69b8      	ldr	r0, [r7, #24]
 8008fac:	f000 f8f8 	bl	80091a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fb0:	4b1a      	ldr	r3, [pc, #104]	; (800901c <pvPortMalloc+0x17c>)
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	4a18      	ldr	r2, [pc, #96]	; (800901c <pvPortMalloc+0x17c>)
 8008fbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fbe:	4b17      	ldr	r3, [pc, #92]	; (800901c <pvPortMalloc+0x17c>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	4b18      	ldr	r3, [pc, #96]	; (8009024 <pvPortMalloc+0x184>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d203      	bcs.n	8008fd2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fca:	4b14      	ldr	r3, [pc, #80]	; (800901c <pvPortMalloc+0x17c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a15      	ldr	r2, [pc, #84]	; (8009024 <pvPortMalloc+0x184>)
 8008fd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	685a      	ldr	r2, [r3, #4]
 8008fd6:	4b10      	ldr	r3, [pc, #64]	; (8009018 <pvPortMalloc+0x178>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fe6:	f7ff fa97 	bl	8008518 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	f003 0307 	and.w	r3, r3, #7
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00a      	beq.n	800900a <pvPortMalloc+0x16a>
	__asm volatile
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	f383 8811 	msr	BASEPRI, r3
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	60fb      	str	r3, [r7, #12]
}
 8009006:	bf00      	nop
 8009008:	e7fe      	b.n	8009008 <pvPortMalloc+0x168>
	return pvReturn;
 800900a:	69fb      	ldr	r3, [r7, #28]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3728      	adds	r7, #40	; 0x28
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	200011a4 	.word	0x200011a4
 8009018:	200011b0 	.word	0x200011b0
 800901c:	200011a8 	.word	0x200011a8
 8009020:	2000119c 	.word	0x2000119c
 8009024:	200011ac 	.word	0x200011ac

08009028 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d048      	beq.n	80090cc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800903a:	2308      	movs	r3, #8
 800903c:	425b      	negs	r3, r3
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4413      	add	r3, r2
 8009042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	4b21      	ldr	r3, [pc, #132]	; (80090d4 <vPortFree+0xac>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4013      	ands	r3, r2
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10a      	bne.n	800906c <vPortFree+0x44>
	__asm volatile
 8009056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	60fb      	str	r3, [r7, #12]
}
 8009068:	bf00      	nop
 800906a:	e7fe      	b.n	800906a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <vPortFree+0x62>
	__asm volatile
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	60bb      	str	r3, [r7, #8]
}
 8009086:	bf00      	nop
 8009088:	e7fe      	b.n	8009088 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	4b11      	ldr	r3, [pc, #68]	; (80090d4 <vPortFree+0xac>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4013      	ands	r3, r2
 8009094:	2b00      	cmp	r3, #0
 8009096:	d019      	beq.n	80090cc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d115      	bne.n	80090cc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	4b0b      	ldr	r3, [pc, #44]	; (80090d4 <vPortFree+0xac>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	43db      	mvns	r3, r3
 80090aa:	401a      	ands	r2, r3
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090b0:	f7ff fa24 	bl	80084fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	4b07      	ldr	r3, [pc, #28]	; (80090d8 <vPortFree+0xb0>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4413      	add	r3, r2
 80090be:	4a06      	ldr	r2, [pc, #24]	; (80090d8 <vPortFree+0xb0>)
 80090c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090c2:	6938      	ldr	r0, [r7, #16]
 80090c4:	f000 f86c 	bl	80091a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80090c8:	f7ff fa26 	bl	8008518 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090cc:	bf00      	nop
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	200011b0 	.word	0x200011b0
 80090d8:	200011a8 	.word	0x200011a8

080090dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80090e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80090e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80090e8:	4b27      	ldr	r3, [pc, #156]	; (8009188 <prvHeapInit+0xac>)
 80090ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f003 0307 	and.w	r3, r3, #7
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00c      	beq.n	8009110 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3307      	adds	r3, #7
 80090fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f023 0307 	bic.w	r3, r3, #7
 8009102:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	4a1f      	ldr	r2, [pc, #124]	; (8009188 <prvHeapInit+0xac>)
 800910c:	4413      	add	r3, r2
 800910e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009114:	4a1d      	ldr	r2, [pc, #116]	; (800918c <prvHeapInit+0xb0>)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800911a:	4b1c      	ldr	r3, [pc, #112]	; (800918c <prvHeapInit+0xb0>)
 800911c:	2200      	movs	r2, #0
 800911e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	4413      	add	r3, r2
 8009126:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009128:	2208      	movs	r2, #8
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	1a9b      	subs	r3, r3, r2
 800912e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f023 0307 	bic.w	r3, r3, #7
 8009136:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4a15      	ldr	r2, [pc, #84]	; (8009190 <prvHeapInit+0xb4>)
 800913c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800913e:	4b14      	ldr	r3, [pc, #80]	; (8009190 <prvHeapInit+0xb4>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009146:	4b12      	ldr	r3, [pc, #72]	; (8009190 <prvHeapInit+0xb4>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	1ad2      	subs	r2, r2, r3
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800915c:	4b0c      	ldr	r3, [pc, #48]	; (8009190 <prvHeapInit+0xb4>)
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	4a0a      	ldr	r2, [pc, #40]	; (8009194 <prvHeapInit+0xb8>)
 800916a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	4a09      	ldr	r2, [pc, #36]	; (8009198 <prvHeapInit+0xbc>)
 8009172:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009174:	4b09      	ldr	r3, [pc, #36]	; (800919c <prvHeapInit+0xc0>)
 8009176:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800917a:	601a      	str	r2, [r3, #0]
}
 800917c:	bf00      	nop
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	bc80      	pop	{r7}
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	2000059c 	.word	0x2000059c
 800918c:	2000119c 	.word	0x2000119c
 8009190:	200011a4 	.word	0x200011a4
 8009194:	200011ac 	.word	0x200011ac
 8009198:	200011a8 	.word	0x200011a8
 800919c:	200011b0 	.word	0x200011b0

080091a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091a8:	4b27      	ldr	r3, [pc, #156]	; (8009248 <prvInsertBlockIntoFreeList+0xa8>)
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	e002      	b.n	80091b4 <prvInsertBlockIntoFreeList+0x14>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d8f7      	bhi.n	80091ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	4413      	add	r3, r2
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d108      	bne.n	80091e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	441a      	add	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	441a      	add	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d118      	bne.n	8009228 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	4b14      	ldr	r3, [pc, #80]	; (800924c <prvInsertBlockIntoFreeList+0xac>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d00d      	beq.n	800921e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	441a      	add	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	e008      	b.n	8009230 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800921e:	4b0b      	ldr	r3, [pc, #44]	; (800924c <prvInsertBlockIntoFreeList+0xac>)
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	e003      	b.n	8009230 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	429a      	cmp	r2, r3
 8009236:	d002      	beq.n	800923e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800923e:	bf00      	nop
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	bc80      	pop	{r7}
 8009246:	4770      	bx	lr
 8009248:	2000119c 	.word	0x2000119c
 800924c:	200011a4 	.word	0x200011a4

08009250 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009254:	2200      	movs	r2, #0
 8009256:	490e      	ldr	r1, [pc, #56]	; (8009290 <MX_USB_DEVICE_Init+0x40>)
 8009258:	480e      	ldr	r0, [pc, #56]	; (8009294 <MX_USB_DEVICE_Init+0x44>)
 800925a:	f7fd fd89 	bl	8006d70 <USBD_Init>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009264:	f7f7 f8c1 	bl	80003ea <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009268:	490b      	ldr	r1, [pc, #44]	; (8009298 <MX_USB_DEVICE_Init+0x48>)
 800926a:	480a      	ldr	r0, [pc, #40]	; (8009294 <MX_USB_DEVICE_Init+0x44>)
 800926c:	f7fd fdab 	bl	8006dc6 <USBD_RegisterClass>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009276:	f7f7 f8b8 	bl	80003ea <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800927a:	4806      	ldr	r0, [pc, #24]	; (8009294 <MX_USB_DEVICE_Init+0x44>)
 800927c:	f7fd fdbc 	bl	8006df8 <USBD_Start>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009286:	f7f7 f8b0 	bl	80003ea <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800928a:	bf00      	nop
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	2000010c 	.word	0x2000010c
 8009294:	200011b4 	.word	0x200011b4
 8009298:	2000000c 	.word	0x2000000c

0800929c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	4603      	mov	r3, r0
 80092a4:	6039      	str	r1, [r7, #0]
 80092a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2212      	movs	r2, #18
 80092ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092ae:	4b03      	ldr	r3, [pc, #12]	; (80092bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bc80      	pop	{r7}
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	20000128 	.word	0x20000128

080092c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	6039      	str	r1, [r7, #0]
 80092ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2204      	movs	r2, #4
 80092d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092d2:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	bc80      	pop	{r7}
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	2000013c 	.word	0x2000013c

080092e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	4603      	mov	r3, r0
 80092ec:	6039      	str	r1, [r7, #0]
 80092ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d105      	bne.n	8009302 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	4907      	ldr	r1, [pc, #28]	; (8009318 <USBD_FS_ProductStrDescriptor+0x34>)
 80092fa:	4808      	ldr	r0, [pc, #32]	; (800931c <USBD_FS_ProductStrDescriptor+0x38>)
 80092fc:	f7fe fcf4 	bl	8007ce8 <USBD_GetString>
 8009300:	e004      	b.n	800930c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	4904      	ldr	r1, [pc, #16]	; (8009318 <USBD_FS_ProductStrDescriptor+0x34>)
 8009306:	4805      	ldr	r0, [pc, #20]	; (800931c <USBD_FS_ProductStrDescriptor+0x38>)
 8009308:	f7fe fcee 	bl	8007ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800930c:	4b02      	ldr	r3, [pc, #8]	; (8009318 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20001478 	.word	0x20001478
 800931c:	08009a64 	.word	0x08009a64

08009320 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	6039      	str	r1, [r7, #0]
 800932a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800932c:	683a      	ldr	r2, [r7, #0]
 800932e:	4904      	ldr	r1, [pc, #16]	; (8009340 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009330:	4804      	ldr	r0, [pc, #16]	; (8009344 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009332:	f7fe fcd9 	bl	8007ce8 <USBD_GetString>
  return USBD_StrDesc;
 8009336:	4b02      	ldr	r3, [pc, #8]	; (8009340 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009338:	4618      	mov	r0, r3
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20001478 	.word	0x20001478
 8009344:	08009a74 	.word	0x08009a74

08009348 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	6039      	str	r1, [r7, #0]
 8009352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	221a      	movs	r2, #26
 8009358:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800935a:	f000 f843 	bl	80093e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800935e:	4b02      	ldr	r3, [pc, #8]	; (8009368 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	20000140 	.word	0x20000140

0800936c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	6039      	str	r1, [r7, #0]
 8009376:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009378:	79fb      	ldrb	r3, [r7, #7]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d105      	bne.n	800938a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	4907      	ldr	r1, [pc, #28]	; (80093a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009382:	4808      	ldr	r0, [pc, #32]	; (80093a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009384:	f7fe fcb0 	bl	8007ce8 <USBD_GetString>
 8009388:	e004      	b.n	8009394 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	4904      	ldr	r1, [pc, #16]	; (80093a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800938e:	4805      	ldr	r0, [pc, #20]	; (80093a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009390:	f7fe fcaa 	bl	8007ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009394:	4b02      	ldr	r3, [pc, #8]	; (80093a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009396:	4618      	mov	r0, r3
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	20001478 	.word	0x20001478
 80093a4:	08009a88 	.word	0x08009a88

080093a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	4603      	mov	r3, r0
 80093b0:	6039      	str	r1, [r7, #0]
 80093b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093b4:	79fb      	ldrb	r3, [r7, #7]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d105      	bne.n	80093c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	4907      	ldr	r1, [pc, #28]	; (80093dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093be:	4808      	ldr	r0, [pc, #32]	; (80093e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093c0:	f7fe fc92 	bl	8007ce8 <USBD_GetString>
 80093c4:	e004      	b.n	80093d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	4904      	ldr	r1, [pc, #16]	; (80093dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093ca:	4805      	ldr	r0, [pc, #20]	; (80093e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093cc:	f7fe fc8c 	bl	8007ce8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093d0:	4b02      	ldr	r3, [pc, #8]	; (80093dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20001478 	.word	0x20001478
 80093e0:	08009a94 	.word	0x08009a94

080093e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093ea:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <Get_SerialNum+0x44>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093f0:	4b0e      	ldr	r3, [pc, #56]	; (800942c <Get_SerialNum+0x48>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093f6:	4b0e      	ldr	r3, [pc, #56]	; (8009430 <Get_SerialNum+0x4c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4413      	add	r3, r2
 8009402:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d009      	beq.n	800941e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800940a:	2208      	movs	r2, #8
 800940c:	4909      	ldr	r1, [pc, #36]	; (8009434 <Get_SerialNum+0x50>)
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 f814 	bl	800943c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009414:	2204      	movs	r2, #4
 8009416:	4908      	ldr	r1, [pc, #32]	; (8009438 <Get_SerialNum+0x54>)
 8009418:	68b8      	ldr	r0, [r7, #8]
 800941a:	f000 f80f 	bl	800943c <IntToUnicode>
  }
}
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	1ffff7e8 	.word	0x1ffff7e8
 800942c:	1ffff7ec 	.word	0x1ffff7ec
 8009430:	1ffff7f0 	.word	0x1ffff7f0
 8009434:	20000142 	.word	0x20000142
 8009438:	20000152 	.word	0x20000152

0800943c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	4613      	mov	r3, r2
 8009448:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800944e:	2300      	movs	r3, #0
 8009450:	75fb      	strb	r3, [r7, #23]
 8009452:	e027      	b.n	80094a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	0f1b      	lsrs	r3, r3, #28
 8009458:	2b09      	cmp	r3, #9
 800945a:	d80b      	bhi.n	8009474 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	0f1b      	lsrs	r3, r3, #28
 8009460:	b2da      	uxtb	r2, r3
 8009462:	7dfb      	ldrb	r3, [r7, #23]
 8009464:	005b      	lsls	r3, r3, #1
 8009466:	4619      	mov	r1, r3
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	440b      	add	r3, r1
 800946c:	3230      	adds	r2, #48	; 0x30
 800946e:	b2d2      	uxtb	r2, r2
 8009470:	701a      	strb	r2, [r3, #0]
 8009472:	e00a      	b.n	800948a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	0f1b      	lsrs	r3, r3, #28
 8009478:	b2da      	uxtb	r2, r3
 800947a:	7dfb      	ldrb	r3, [r7, #23]
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	4619      	mov	r1, r3
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	440b      	add	r3, r1
 8009484:	3237      	adds	r2, #55	; 0x37
 8009486:	b2d2      	uxtb	r2, r2
 8009488:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	3301      	adds	r3, #1
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	4413      	add	r3, r2
 800949a:	2200      	movs	r2, #0
 800949c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	3301      	adds	r3, #1
 80094a2:	75fb      	strb	r3, [r7, #23]
 80094a4:	7dfa      	ldrb	r2, [r7, #23]
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d3d3      	bcc.n	8009454 <IntToUnicode+0x18>
  }
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr

080094b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a0d      	ldr	r2, [pc, #52]	; (80094fc <HAL_PCD_MspInit+0x44>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d113      	bne.n	80094f2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094ca:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <HAL_PCD_MspInit+0x48>)
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	4a0c      	ldr	r2, [pc, #48]	; (8009500 <HAL_PCD_MspInit+0x48>)
 80094d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80094d4:	61d3      	str	r3, [r2, #28]
 80094d6:	4b0a      	ldr	r3, [pc, #40]	; (8009500 <HAL_PCD_MspInit+0x48>)
 80094d8:	69db      	ldr	r3, [r3, #28]
 80094da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80094e2:	2200      	movs	r2, #0
 80094e4:	2105      	movs	r1, #5
 80094e6:	2014      	movs	r0, #20
 80094e8:	f7f7 f9f7 	bl	80008da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80094ec:	2014      	movs	r0, #20
 80094ee:	f7f7 fa10 	bl	8000912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80094f2:	bf00      	nop
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	40005c00 	.word	0x40005c00
 8009500:	40021000 	.word	0x40021000

08009504 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009518:	4619      	mov	r1, r3
 800951a:	4610      	mov	r0, r2
 800951c:	f7fd fcb4 	bl	8006e88 <USBD_LL_SetupStage>
}
 8009520:	bf00      	nop
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800953a:	78fa      	ldrb	r2, [r7, #3]
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	440b      	add	r3, r1
 8009548:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	78fb      	ldrb	r3, [r7, #3]
 8009550:	4619      	mov	r1, r3
 8009552:	f7fd fce6 	bl	8006f22 <USBD_LL_DataOutStage>
}
 8009556:	bf00      	nop
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	460b      	mov	r3, r1
 8009568:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8009570:	78fa      	ldrb	r2, [r7, #3]
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	4613      	mov	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	440b      	add	r3, r1
 800957e:	333c      	adds	r3, #60	; 0x3c
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	4619      	mov	r1, r3
 8009586:	f7fd fd3d 	bl	8007004 <USBD_LL_DataInStage>
}
 800958a:	bf00      	nop
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b082      	sub	sp, #8
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fd fe4d 	bl	8007240 <USBD_LL_SOF>
}
 80095a6:	bf00      	nop
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095b6:	2301      	movs	r3, #1
 80095b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d001      	beq.n	80095c6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095c2:	f7f6 ff12 	bl	80003ea <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80095cc:	7bfa      	ldrb	r2, [r7, #15]
 80095ce:	4611      	mov	r1, r2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fd fdfd 	bl	80071d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80095dc:	4618      	mov	r0, r3
 80095de:	f7fd fdb6 	bl	800714e <USBD_LL_Reset>
}
 80095e2:	bf00      	nop
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
	...

080095ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7fd fdf7 	bl	80071ee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009608:	4b04      	ldr	r3, [pc, #16]	; (800961c <HAL_PCD_SuspendCallback+0x30>)
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	4a03      	ldr	r2, [pc, #12]	; (800961c <HAL_PCD_SuspendCallback+0x30>)
 800960e:	f043 0306 	orr.w	r3, r3, #6
 8009612:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009614:	bf00      	nop
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	e000ed00 	.word	0xe000ed00

08009620 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800962e:	4618      	mov	r0, r3
 8009630:	f7fd fdf1 	bl	8007216 <USBD_LL_Resume>
}
 8009634:	bf00      	nop
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009644:	4a1f      	ldr	r2, [pc, #124]	; (80096c4 <USBD_LL_Init+0x88>)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a1d      	ldr	r2, [pc, #116]	; (80096c4 <USBD_LL_Init+0x88>)
 8009650:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009654:	4b1b      	ldr	r3, [pc, #108]	; (80096c4 <USBD_LL_Init+0x88>)
 8009656:	4a1c      	ldr	r2, [pc, #112]	; (80096c8 <USBD_LL_Init+0x8c>)
 8009658:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800965a:	4b1a      	ldr	r3, [pc, #104]	; (80096c4 <USBD_LL_Init+0x88>)
 800965c:	2208      	movs	r2, #8
 800965e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009660:	4b18      	ldr	r3, [pc, #96]	; (80096c4 <USBD_LL_Init+0x88>)
 8009662:	2202      	movs	r2, #2
 8009664:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009666:	4b17      	ldr	r3, [pc, #92]	; (80096c4 <USBD_LL_Init+0x88>)
 8009668:	2200      	movs	r2, #0
 800966a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800966c:	4b15      	ldr	r3, [pc, #84]	; (80096c4 <USBD_LL_Init+0x88>)
 800966e:	2200      	movs	r2, #0
 8009670:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009672:	4b14      	ldr	r3, [pc, #80]	; (80096c4 <USBD_LL_Init+0x88>)
 8009674:	2200      	movs	r2, #0
 8009676:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009678:	4812      	ldr	r0, [pc, #72]	; (80096c4 <USBD_LL_Init+0x88>)
 800967a:	f7f7 fb9b 	bl	8000db4 <HAL_PCD_Init>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d001      	beq.n	8009688 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009684:	f7f6 feb1 	bl	80003ea <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800968e:	2318      	movs	r3, #24
 8009690:	2200      	movs	r2, #0
 8009692:	2100      	movs	r1, #0
 8009694:	f7f9 f8a3 	bl	80027de <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800969e:	2358      	movs	r3, #88	; 0x58
 80096a0:	2200      	movs	r2, #0
 80096a2:	2180      	movs	r1, #128	; 0x80
 80096a4:	f7f9 f89b 	bl	80027de <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80096ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096b2:	2200      	movs	r2, #0
 80096b4:	2181      	movs	r1, #129	; 0x81
 80096b6:	f7f9 f892 	bl	80027de <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	20001678 	.word	0x20001678
 80096c8:	40005c00 	.word	0x40005c00

080096cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7f7 fc65 	bl	8000fb2 <HAL_PCD_Start>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 f93c 	bl	800996c <USBD_Get_USB_Status>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	4608      	mov	r0, r1
 800970c:	4611      	mov	r1, r2
 800970e:	461a      	mov	r2, r3
 8009710:	4603      	mov	r3, r0
 8009712:	70fb      	strb	r3, [r7, #3]
 8009714:	460b      	mov	r3, r1
 8009716:	70bb      	strb	r3, [r7, #2]
 8009718:	4613      	mov	r3, r2
 800971a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800972a:	78bb      	ldrb	r3, [r7, #2]
 800972c:	883a      	ldrh	r2, [r7, #0]
 800972e:	78f9      	ldrb	r1, [r7, #3]
 8009730:	f7f7 fdba 	bl	80012a8 <HAL_PCD_EP_Open>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f916 	bl	800996c <USBD_Get_USB_Status>
 8009740:	4603      	mov	r3, r0
 8009742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009744:	7bbb      	ldrb	r3, [r7, #14]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009768:	78fa      	ldrb	r2, [r7, #3]
 800976a:	4611      	mov	r1, r2
 800976c:	4618      	mov	r0, r3
 800976e:	f7f7 fdf8 	bl	8001362 <HAL_PCD_EP_Close>
 8009772:	4603      	mov	r3, r0
 8009774:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	4618      	mov	r0, r3
 800977a:	f000 f8f7 	bl	800996c <USBD_Get_USB_Status>
 800977e:	4603      	mov	r3, r0
 8009780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009782:	7bbb      	ldrb	r3, [r7, #14]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	460b      	mov	r3, r1
 8009796:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097a6:	78fa      	ldrb	r2, [r7, #3]
 80097a8:	4611      	mov	r1, r2
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7f7 fe89 	bl	80014c2 <HAL_PCD_EP_SetStall>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 f8d8 	bl	800996c <USBD_Get_USB_Status>
 80097bc:	4603      	mov	r3, r0
 80097be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	460b      	mov	r3, r1
 80097d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097e4:	78fa      	ldrb	r2, [r7, #3]
 80097e6:	4611      	mov	r1, r2
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7f7 feca 	bl	8001582 <HAL_PCD_EP_ClrStall>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 f8b9 	bl	800996c <USBD_Get_USB_Status>
 80097fa:	4603      	mov	r3, r0
 80097fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800981a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800981c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009820:	2b00      	cmp	r3, #0
 8009822:	da0c      	bge.n	800983e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009824:	78fb      	ldrb	r3, [r7, #3]
 8009826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800982a:	68f9      	ldr	r1, [r7, #12]
 800982c:	1c5a      	adds	r2, r3, #1
 800982e:	4613      	mov	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	440b      	add	r3, r1
 8009838:	3302      	adds	r3, #2
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	e00b      	b.n	8009856 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800983e:	78fb      	ldrb	r3, [r7, #3]
 8009840:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009844:	68f9      	ldr	r1, [r7, #12]
 8009846:	4613      	mov	r3, r2
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	00db      	lsls	r3, r3, #3
 800984e:	440b      	add	r3, r1
 8009850:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009854:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009856:	4618      	mov	r0, r3
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	bc80      	pop	{r7}
 800985e:	4770      	bx	lr

08009860 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800987a:	78fa      	ldrb	r2, [r7, #3]
 800987c:	4611      	mov	r1, r2
 800987e:	4618      	mov	r0, r3
 8009880:	f7f7 fced 	bl	800125e <HAL_PCD_SetAddress>
 8009884:	4603      	mov	r3, r0
 8009886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 f86e 	bl	800996c <USBD_Get_USB_Status>
 8009890:	4603      	mov	r3, r0
 8009892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009894:	7bbb      	ldrb	r3, [r7, #14]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b086      	sub	sp, #24
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	461a      	mov	r2, r3
 80098aa:	460b      	mov	r3, r1
 80098ac:	72fb      	strb	r3, [r7, #11]
 80098ae:	4613      	mov	r3, r2
 80098b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098c0:	893b      	ldrh	r3, [r7, #8]
 80098c2:	7af9      	ldrb	r1, [r7, #11]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	f7f7 fdc5 	bl	8001454 <HAL_PCD_EP_Transmit>
 80098ca:	4603      	mov	r3, r0
 80098cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 f84b 	bl	800996c <USBD_Get_USB_Status>
 80098d6:	4603      	mov	r3, r0
 80098d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098da:	7dbb      	ldrb	r3, [r7, #22]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3718      	adds	r7, #24
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	60f8      	str	r0, [r7, #12]
 80098ec:	607a      	str	r2, [r7, #4]
 80098ee:	461a      	mov	r2, r3
 80098f0:	460b      	mov	r3, r1
 80098f2:	72fb      	strb	r3, [r7, #11]
 80098f4:	4613      	mov	r3, r2
 80098f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f8:	2300      	movs	r3, #0
 80098fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098fc:	2300      	movs	r3, #0
 80098fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009906:	893b      	ldrh	r3, [r7, #8]
 8009908:	7af9      	ldrb	r1, [r7, #11]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	f7f7 fd71 	bl	80013f2 <HAL_PCD_EP_Receive>
 8009910:	4603      	mov	r3, r0
 8009912:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009914:	7dfb      	ldrb	r3, [r7, #23]
 8009916:	4618      	mov	r0, r3
 8009918:	f000 f828 	bl	800996c <USBD_Get_USB_Status>
 800991c:	4603      	mov	r3, r0
 800991e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009920:	7dbb      	ldrb	r3, [r7, #22]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3718      	adds	r7, #24
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
	...

0800992c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009934:	4b02      	ldr	r3, [pc, #8]	; (8009940 <USBD_static_malloc+0x14>)
}
 8009936:	4618      	mov	r0, r3
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	bc80      	pop	{r7}
 800993e:	4770      	bx	lr
 8009940:	20001968 	.word	0x20001968

08009944 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]

}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	bc80      	pop	{r7}
 8009954:	4770      	bx	lr

08009956 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	460b      	mov	r3, r1
 8009960:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009962:	bf00      	nop
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	bc80      	pop	{r7}
 800996a:	4770      	bx	lr

0800996c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	4603      	mov	r3, r0
 8009974:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800997a:	79fb      	ldrb	r3, [r7, #7]
 800997c:	2b03      	cmp	r3, #3
 800997e:	d817      	bhi.n	80099b0 <USBD_Get_USB_Status+0x44>
 8009980:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <USBD_Get_USB_Status+0x1c>)
 8009982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009986:	bf00      	nop
 8009988:	08009999 	.word	0x08009999
 800998c:	0800999f 	.word	0x0800999f
 8009990:	080099a5 	.word	0x080099a5
 8009994:	080099ab 	.word	0x080099ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009998:	2300      	movs	r3, #0
 800999a:	73fb      	strb	r3, [r7, #15]
    break;
 800999c:	e00b      	b.n	80099b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800999e:	2302      	movs	r3, #2
 80099a0:	73fb      	strb	r3, [r7, #15]
    break;
 80099a2:	e008      	b.n	80099b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099a4:	2301      	movs	r3, #1
 80099a6:	73fb      	strb	r3, [r7, #15]
    break;
 80099a8:	e005      	b.n	80099b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099aa:	2302      	movs	r3, #2
 80099ac:	73fb      	strb	r3, [r7, #15]
    break;
 80099ae:	e002      	b.n	80099b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099b0:	2302      	movs	r3, #2
 80099b2:	73fb      	strb	r3, [r7, #15]
    break;
 80099b4:	bf00      	nop
  }
  return usb_status;
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	bc80      	pop	{r7}
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop

080099c4 <memset>:
 80099c4:	4603      	mov	r3, r0
 80099c6:	4402      	add	r2, r0
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d100      	bne.n	80099ce <memset+0xa>
 80099cc:	4770      	bx	lr
 80099ce:	f803 1b01 	strb.w	r1, [r3], #1
 80099d2:	e7f9      	b.n	80099c8 <memset+0x4>

080099d4 <__libc_init_array>:
 80099d4:	b570      	push	{r4, r5, r6, lr}
 80099d6:	2600      	movs	r6, #0
 80099d8:	4d0c      	ldr	r5, [pc, #48]	; (8009a0c <__libc_init_array+0x38>)
 80099da:	4c0d      	ldr	r4, [pc, #52]	; (8009a10 <__libc_init_array+0x3c>)
 80099dc:	1b64      	subs	r4, r4, r5
 80099de:	10a4      	asrs	r4, r4, #2
 80099e0:	42a6      	cmp	r6, r4
 80099e2:	d109      	bne.n	80099f8 <__libc_init_array+0x24>
 80099e4:	f000 f81a 	bl	8009a1c <_init>
 80099e8:	2600      	movs	r6, #0
 80099ea:	4d0a      	ldr	r5, [pc, #40]	; (8009a14 <__libc_init_array+0x40>)
 80099ec:	4c0a      	ldr	r4, [pc, #40]	; (8009a18 <__libc_init_array+0x44>)
 80099ee:	1b64      	subs	r4, r4, r5
 80099f0:	10a4      	asrs	r4, r4, #2
 80099f2:	42a6      	cmp	r6, r4
 80099f4:	d105      	bne.n	8009a02 <__libc_init_array+0x2e>
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099fc:	4798      	blx	r3
 80099fe:	3601      	adds	r6, #1
 8009a00:	e7ee      	b.n	80099e0 <__libc_init_array+0xc>
 8009a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a06:	4798      	blx	r3
 8009a08:	3601      	adds	r6, #1
 8009a0a:	e7f2      	b.n	80099f2 <__libc_init_array+0x1e>
 8009a0c:	08009ad0 	.word	0x08009ad0
 8009a10:	08009ad0 	.word	0x08009ad0
 8009a14:	08009ad0 	.word	0x08009ad0
 8009a18:	08009ad4 	.word	0x08009ad4

08009a1c <_init>:
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1e:	bf00      	nop
 8009a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a22:	bc08      	pop	{r3}
 8009a24:	469e      	mov	lr, r3
 8009a26:	4770      	bx	lr

08009a28 <_fini>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	bf00      	nop
 8009a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2e:	bc08      	pop	{r3}
 8009a30:	469e      	mov	lr, r3
 8009a32:	4770      	bx	lr
