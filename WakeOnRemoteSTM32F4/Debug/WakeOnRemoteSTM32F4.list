
WakeOnRemoteSTM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006848  08006848  00016848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006898  08006898  00020110  2**0
                  CONTENTS
  4 .ARM          00000008  08006898  08006898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068a0  080068a0  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068a0  080068a0  000168a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  080068a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020110  2**0
                  CONTENTS
 10 .bss          00000a28  20000110  20000110  00020110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b38  20000b38  00020110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c669  00000000  00000000  00020183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002730  00000000  00000000  0002c7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ac8  00000000  00000000  0002ef20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007f3  00000000  00000000  0002f9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002221e  00000000  00000000  000301db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ea9d  00000000  00000000  000523f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3615  00000000  00000000  00060e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002ac4  00000000  00000000  001244ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00126f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006830 	.word	0x08006830

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	08006830 	.word	0x08006830

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f984 	bl	80007d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f826 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f890 	bl	80005f4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d4:	f005 fd48 	bl	8005f68 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);
 80004d8:	2101      	movs	r1, #1
 80004da:	480d      	ldr	r0, [pc, #52]	; (8000510 <main+0x4c>)
 80004dc:	f000 fcd7 	bl	8000e8e <HAL_GPIO_TogglePin>
	  keyboardhid.KEYCODE1 = 0x04;
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <main+0x50>)
 80004e2:	2204      	movs	r2, #4
 80004e4:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80004e6:	2208      	movs	r2, #8
 80004e8:	490a      	ldr	r1, [pc, #40]	; (8000514 <main+0x50>)
 80004ea:	480b      	ldr	r0, [pc, #44]	; (8000518 <main+0x54>)
 80004ec:	f004 f9c2 	bl	8004874 <USBD_HID_SendReport>
	  HAL_Delay(50);
 80004f0:	2032      	movs	r0, #50	; 0x32
 80004f2:	f000 f9e1 	bl	80008b8 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <main+0x50>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80004fc:	2208      	movs	r2, #8
 80004fe:	4905      	ldr	r1, [pc, #20]	; (8000514 <main+0x50>)
 8000500:	4805      	ldr	r0, [pc, #20]	; (8000518 <main+0x54>)
 8000502:	f004 f9b7 	bl	8004874 <USBD_HID_SendReport>
	  HAL_Delay(1000);
 8000506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050a:	f000 f9d5 	bl	80008b8 <HAL_Delay>
	  HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);
 800050e:	e7e3      	b.n	80004d8 <main+0x14>
 8000510:	40021000 	.word	0x40021000
 8000514:	2000012c 	.word	0x2000012c
 8000518:	2000013c 	.word	0x2000013c

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f006 f954 	bl	80067d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b29      	ldr	r3, [pc, #164]	; (80005ec <SystemClock_Config+0xd0>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a28      	ldr	r2, [pc, #160]	; (80005ec <SystemClock_Config+0xd0>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b26      	ldr	r3, [pc, #152]	; (80005ec <SystemClock_Config+0xd0>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <SystemClock_Config+0xd4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a22      	ldr	r2, [pc, #136]	; (80005f0 <SystemClock_Config+0xd4>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <SystemClock_Config+0xd4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000578:	2303      	movs	r3, #3
 800057a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2310      	movs	r3, #16
 8000588:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000598:	2348      	movs	r3, #72	; 0x48
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005a0:	2303      	movs	r3, #3
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 feef 	bl	800238c <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005b4:	f000 f870 	bl	8000698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f002 f952 	bl	800287c <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005de:	f000 f85b 	bl	8000698 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40007000 	.word	0x40007000

080005f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_GPIO_Init+0x9c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_GPIO_Init+0x9c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000630:	f043 0310 	orr.w	r3, r3, #16
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0310 	and.w	r3, r3, #16
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a11      	ldr	r2, [pc, #68]	; (8000690 <MX_GPIO_Init+0x9c>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_GPIO_Init+0x9c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_Pin|ONBOARD_LED_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f248 0101 	movw	r1, #32769	; 0x8001
 8000664:	480b      	ldr	r0, [pc, #44]	; (8000694 <MX_GPIO_Init+0xa0>)
 8000666:	f000 fbf9 	bl	8000e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin|ONBOARD_LED_Pin;
 800066a:	f248 0301 	movw	r3, #32769	; 0x8001
 800066e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4619      	mov	r1, r3
 8000682:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_GPIO_Init+0xa0>)
 8000684:	f000 fa4e 	bl	8000b24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40021000 	.word	0x40021000

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800069c:	b672      	cpsid	i
}
 800069e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <Error_Handler+0x8>
	...

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <HAL_MspInit+0x4c>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a0f      	ldr	r2, [pc, #60]	; (80006f0 <HAL_MspInit+0x4c>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <HAL_MspInit+0x4c>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <HAL_MspInit+0x4c>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <HAL_MspInit+0x4c>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d4:	6413      	str	r3, [r2, #64]	; 0x40
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_MspInit+0x4c>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <MemManage_Handler+0x4>

08000706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <BusFault_Handler+0x4>

0800070c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <UsageFault_Handler+0x4>

08000712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000740:	f000 f89a 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}

08000748 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <OTG_FS_IRQHandler+0x10>)
 800074e:	f000 fd08 	bl	8001162 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000618 	.word	0x20000618

0800075c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <SystemInit+0x20>)
 8000762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000766:	4a05      	ldr	r2, [pc, #20]	; (800077c <SystemInit+0x20>)
 8000768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800076c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000786:	490e      	ldr	r1, [pc, #56]	; (80007c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800079c:	4c0b      	ldr	r4, [pc, #44]	; (80007cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007aa:	f7ff ffd7 	bl	800075c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ae:	f006 f81b 	bl	80067e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007b2:	f7ff fe87 	bl	80004c4 <main>
  bx  lr    
 80007b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c0:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80007c4:	080068a8 	.word	0x080068a8
  ldr r2, =_sbss
 80007c8:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80007cc:	20000b38 	.word	0x20000b38

080007d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d0:	e7fe      	b.n	80007d0 <ADC_IRQHandler>
	...

080007d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_Init+0x40>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0d      	ldr	r2, [pc, #52]	; (8000814 <HAL_Init+0x40>)
 80007de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_Init+0x40>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <HAL_Init+0x40>)
 80007ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_Init+0x40>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_Init+0x40>)
 80007f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 f94f 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	200f      	movs	r0, #15
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff ff4c 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023c00 	.word	0x40023c00

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 f967 	bl	8000b0a <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000854:	f000 f92f 	bl	8000ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008
 8000874:	20000004 	.word	0x20000004

08000878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_IncTick+0x20>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_IncTick+0x24>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_IncTick+0x24>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008
 800089c:	20000134 	.word	0x20000134

080008a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <HAL_GetTick+0x14>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000134 	.word	0x20000134

080008b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c0:	f7ff ffee 	bl	80008a0 <HAL_GetTick>
 80008c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008d0:	d005      	beq.n	80008de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <HAL_Delay+0x44>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008de:	bf00      	nop
 80008e0:	f7ff ffde 	bl	80008a0 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d8f7      	bhi.n	80008e0 <HAL_Delay+0x28>
  {
  }
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008

08000900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <__NVIC_GetPriorityGrouping+0x18>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 0307 	and.w	r3, r3, #7
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	db0b      	blt.n	800098e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f003 021f 	and.w	r2, r3, #31
 800097c:	4907      	ldr	r1, [pc, #28]	; (800099c <__NVIC_EnableIRQ+0x38>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	2001      	movs	r0, #1
 8000986:	fa00 f202 	lsl.w	r2, r0, r2
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000e100 	.word	0xe000e100

080009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db0a      	blt.n	80009ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	490c      	ldr	r1, [pc, #48]	; (80009ec <__NVIC_SetPriority+0x4c>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	0112      	lsls	r2, r2, #4
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c8:	e00a      	b.n	80009e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4908      	ldr	r1, [pc, #32]	; (80009f0 <__NVIC_SetPriority+0x50>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	3b04      	subs	r3, #4
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	440b      	add	r3, r1
 80009de:	761a      	strb	r2, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b089      	sub	sp, #36	; 0x24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f1c3 0307 	rsb	r3, r3, #7
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	bf28      	it	cs
 8000a12:	2304      	movcs	r3, #4
 8000a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d902      	bls.n	8000a24 <NVIC_EncodePriority+0x30>
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3b03      	subs	r3, #3
 8000a22:	e000      	b.n	8000a26 <NVIC_EncodePriority+0x32>
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43da      	mvns	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43d9      	mvns	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	4313      	orrs	r3, r2
         );
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	; 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a80:	f7ff ff8e 	bl	80009a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff29 	bl	8000900 <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff3e 	bl	8000948 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff8e 	bl	80009f4 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5d 	bl	80009a0 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff31 	bl	8000964 <__NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ffa2 	bl	8000a5c <SysTick_Config>
 8000b18:	4603      	mov	r3, r0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	e16b      	b.n	8000e18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b40:	2201      	movs	r2, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f040 815a 	bne.w	8000e12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d005      	beq.n	8000b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d130      	bne.n	8000bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	091b      	lsrs	r3, r3, #4
 8000bc2:	f003 0201 	and.w	r2, r3, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d017      	beq.n	8000c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d123      	bne.n	8000c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	69b9      	ldr	r1, [r7, #24]
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0203 	and.w	r2, r3, #3
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 80b4 	beq.w	8000e12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b60      	ldr	r3, [pc, #384]	; (8000e30 <HAL_GPIO_Init+0x30c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a5f      	ldr	r2, [pc, #380]	; (8000e30 <HAL_GPIO_Init+0x30c>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b5d      	ldr	r3, [pc, #372]	; (8000e30 <HAL_GPIO_Init+0x30c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cc6:	4a5b      	ldr	r2, [pc, #364]	; (8000e34 <HAL_GPIO_Init+0x310>)
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	3302      	adds	r3, #2
 8000cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a52      	ldr	r2, [pc, #328]	; (8000e38 <HAL_GPIO_Init+0x314>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d02b      	beq.n	8000d4a <HAL_GPIO_Init+0x226>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a51      	ldr	r2, [pc, #324]	; (8000e3c <HAL_GPIO_Init+0x318>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d025      	beq.n	8000d46 <HAL_GPIO_Init+0x222>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a50      	ldr	r2, [pc, #320]	; (8000e40 <HAL_GPIO_Init+0x31c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d01f      	beq.n	8000d42 <HAL_GPIO_Init+0x21e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4f      	ldr	r2, [pc, #316]	; (8000e44 <HAL_GPIO_Init+0x320>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d019      	beq.n	8000d3e <HAL_GPIO_Init+0x21a>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4e      	ldr	r2, [pc, #312]	; (8000e48 <HAL_GPIO_Init+0x324>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0x216>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4d      	ldr	r2, [pc, #308]	; (8000e4c <HAL_GPIO_Init+0x328>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d00d      	beq.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4c      	ldr	r2, [pc, #304]	; (8000e50 <HAL_GPIO_Init+0x32c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x20e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4b      	ldr	r2, [pc, #300]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_GPIO_Init+0x20a>
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	e00e      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d2e:	2308      	movs	r3, #8
 8000d30:	e00c      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d32:	2306      	movs	r3, #6
 8000d34:	e00a      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d36:	2305      	movs	r3, #5
 8000d38:	e008      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e004      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e002      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	69fa      	ldr	r2, [r7, #28]
 8000d4e:	f002 0203 	and.w	r2, r2, #3
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4093      	lsls	r3, r2
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d5c:	4935      	ldr	r1, [pc, #212]	; (8000e34 <HAL_GPIO_Init+0x310>)
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	3302      	adds	r3, #2
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d8e:	4a32      	ldr	r2, [pc, #200]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000db8:	4a27      	ldr	r2, [pc, #156]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000de2:	4a1d      	ldr	r2, [pc, #116]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e0c:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <HAL_GPIO_Init+0x334>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3301      	adds	r3, #1
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	f67f ae90 	bls.w	8000b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40013800 	.word	0x40013800
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	40020400 	.word	0x40020400
 8000e40:	40020800 	.word	0x40020800
 8000e44:	40020c00 	.word	0x40020c00
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40021400 	.word	0x40021400
 8000e50:	40021800 	.word	0x40021800
 8000e54:	40021c00 	.word	0x40021c00
 8000e58:	40013c00 	.word	0x40013c00

08000e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e6c:	787b      	ldrb	r3, [r7, #1]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e78:	e003      	b.n	8000e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e7a:	887b      	ldrh	r3, [r7, #2]
 8000e7c:	041a      	lsls	r2, r3, #16
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	619a      	str	r2, [r3, #24]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b085      	sub	sp, #20
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	460b      	mov	r3, r1
 8000e98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ea0:	887a      	ldrh	r2, [r7, #2]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	041a      	lsls	r2, r3, #16
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	887b      	ldrh	r3, [r7, #2]
 8000eae:	400b      	ands	r3, r1
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	619a      	str	r2, [r3, #24]
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec4:	b08f      	sub	sp, #60	; 0x3c
 8000ec6:	af0a      	add	r7, sp, #40	; 0x28
 8000ec8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e10f      	b.n	80010f4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d106      	bne.n	8000ef4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f005 f970 	bl	80061d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d102      	bne.n	8000f0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 ffbf 	bl	8002e96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	687e      	ldr	r6, [r7, #4]
 8000f20:	466d      	mov	r5, sp
 8000f22:	f106 0410 	add.w	r4, r6, #16
 8000f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f32:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f36:	1d33      	adds	r3, r6, #4
 8000f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f3a:	6838      	ldr	r0, [r7, #0]
 8000f3c:	f001 fe96 	bl	8002c6c <USB_CoreInit>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2202      	movs	r2, #2
 8000f4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e0d0      	b.n	80010f4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 ffad 	bl	8002eb8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e04a      	b.n	8000ffa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	333d      	adds	r3, #61	; 0x3d
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f78:	7bfa      	ldrb	r2, [r7, #15]
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	4413      	add	r3, r2
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	440b      	add	r3, r1
 8000f86:	333c      	adds	r3, #60	; 0x3c
 8000f88:	7bfa      	ldrb	r2, [r7, #15]
 8000f8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f8c:	7bfa      	ldrb	r2, [r7, #15]
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	b298      	uxth	r0, r3
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	3344      	adds	r3, #68	; 0x44
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fa4:	7bfa      	ldrb	r2, [r7, #15]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	3340      	adds	r3, #64	; 0x40
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fb8:	7bfa      	ldrb	r2, [r7, #15]
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	3348      	adds	r3, #72	; 0x48
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fcc:	7bfa      	ldrb	r2, [r7, #15]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	334c      	adds	r3, #76	; 0x4c
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fe0:	7bfa      	ldrb	r2, [r7, #15]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	3354      	adds	r3, #84	; 0x54
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	429a      	cmp	r2, r3
 8001002:	d3af      	bcc.n	8000f64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	e044      	b.n	8001094 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800100a:	7bfa      	ldrb	r2, [r7, #15]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4413      	add	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	3301      	adds	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	d3b5      	bcc.n	800100a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	687e      	ldr	r6, [r7, #4]
 80010a6:	466d      	mov	r5, sp
 80010a8:	f106 0410 	add.w	r4, r6, #16
 80010ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80010bc:	1d33      	adds	r3, r6, #4
 80010be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c0:	6838      	ldr	r0, [r7, #0]
 80010c2:	f001 ff45 	bl	8002f50 <USB_DevInit>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2202      	movs	r2, #2
 80010d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e00d      	b.n	80010f4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 f894 	bl	800421a <USB_DevDisconnect>

  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001110:	2b01      	cmp	r3, #1
 8001112:	d101      	bne.n	8001118 <HAL_PCD_Start+0x1c>
 8001114:	2302      	movs	r3, #2
 8001116:	e020      	b.n	800115a <HAL_PCD_Start+0x5e>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001124:	2b01      	cmp	r3, #1
 8001126:	d109      	bne.n	800113c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800112c:	2b01      	cmp	r3, #1
 800112e:	d005      	beq.n	800113c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001134:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f001 fe97 	bl	8002e74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f003 f844 	bl	80041d8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001162:	b590      	push	{r4, r7, lr}
 8001164:	b08d      	sub	sp, #52	; 0x34
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f003 f902 	bl	8004382 <USB_GetMode>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	f040 848a 	bne.w	8001a9a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f003 f866 	bl	800425c <USB_ReadInterrupts>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8480 	beq.w	8001a98 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 f853 	bl	800425c <USB_ReadInterrupts>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d107      	bne.n	80011d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f002 0202 	and.w	r2, r2, #2
 80011ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 f841 	bl	800425c <USB_ReadInterrupts>
 80011da:	4603      	mov	r3, r0
 80011dc:	f003 0310 	and.w	r3, r3, #16
 80011e0:	2b10      	cmp	r3, #16
 80011e2:	d161      	bne.n	80012a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699a      	ldr	r2, [r3, #24]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0210 	bic.w	r2, r2, #16
 80011f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	f003 020f 	and.w	r2, r3, #15
 8001200:	4613      	mov	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	4413      	add	r3, r2
 8001210:	3304      	adds	r3, #4
 8001212:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	0c5b      	lsrs	r3, r3, #17
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	2b02      	cmp	r3, #2
 800121e:	d124      	bne.n	800126a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001226:	4013      	ands	r3, r2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d035      	beq.n	8001298 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	6a38      	ldr	r0, [r7, #32]
 8001240:	f002 fe78 	bl	8003f34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001250:	441a      	add	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	6a1a      	ldr	r2, [r3, #32]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	091b      	lsrs	r3, r3, #4
 800125e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001262:	441a      	add	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	621a      	str	r2, [r3, #32]
 8001268:	e016      	b.n	8001298 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	0c5b      	lsrs	r3, r3, #17
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	2b06      	cmp	r3, #6
 8001274:	d110      	bne.n	8001298 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800127c:	2208      	movs	r2, #8
 800127e:	4619      	mov	r1, r3
 8001280:	6a38      	ldr	r0, [r7, #32]
 8001282:	f002 fe57 	bl	8003f34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	6a1a      	ldr	r2, [r3, #32]
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	091b      	lsrs	r3, r3, #4
 800128e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001292:	441a      	add	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	699a      	ldr	r2, [r3, #24]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0210 	orr.w	r2, r2, #16
 80012a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f002 ffd5 	bl	800425c <USB_ReadInterrupts>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012bc:	f040 80a7 	bne.w	800140e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 ffda 	bl	8004282 <USB_ReadDevAllOutEpInterrupt>
 80012ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80012d0:	e099      	b.n	8001406 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 808e 	beq.w	80013fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 fffe 	bl	80042ea <USB_ReadDevOutEPInterrupt>
 80012ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00c      	beq.n	8001314 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	015a      	lsls	r2, r3, #5
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	4413      	add	r3, r2
 8001302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001306:	461a      	mov	r2, r3
 8001308:	2301      	movs	r3, #1
 800130a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800130c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 feaa 	bl	8002068 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00c      	beq.n	8001338 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	015a      	lsls	r2, r3, #5
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	4413      	add	r3, r2
 8001326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800132a:	461a      	mov	r2, r3
 800132c:	2308      	movs	r3, #8
 800132e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 ff80 	bl	8002238 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	015a      	lsls	r2, r3, #5
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	4413      	add	r3, r2
 800134a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800134e:	461a      	mov	r2, r3
 8001350:	2310      	movs	r3, #16
 8001352:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d030      	beq.n	80013c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001366:	2b80      	cmp	r3, #128	; 0x80
 8001368:	d109      	bne.n	800137e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800137c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800137e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001380:	4613      	mov	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4413      	add	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4413      	add	r3, r2
 8001390:	3304      	adds	r3, #4
 8001392:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	78db      	ldrb	r3, [r3, #3]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d108      	bne.n	80013ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	2200      	movs	r2, #0
 80013a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4619      	mov	r1, r3
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f005 f819 	bl	80063e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ba:	461a      	mov	r2, r3
 80013bc:	2302      	movs	r3, #2
 80013be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f003 0320 	and.w	r3, r3, #32
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d008      	beq.n	80013dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013cc:	015a      	lsls	r2, r3, #5
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	4413      	add	r3, r2
 80013d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d6:	461a      	mov	r2, r3
 80013d8:	2320      	movs	r3, #32
 80013da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d009      	beq.n	80013fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	015a      	lsls	r2, r3, #5
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f2:	461a      	mov	r2, r3
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	3301      	adds	r3, #1
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	085b      	lsrs	r3, r3, #1
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	2b00      	cmp	r3, #0
 800140a:	f47f af62 	bne.w	80012d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f002 ff22 	bl	800425c <USB_ReadInterrupts>
 8001418:	4603      	mov	r3, r0
 800141a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800141e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001422:	f040 80db 	bne.w	80015dc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f002 ff43 	bl	80042b6 <USB_ReadDevAllInEpInterrupt>
 8001430:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001436:	e0cd      	b.n	80015d4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 80c2 	beq.w	80015c8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f002 ff69 	bl	8004326 <USB_ReadDevInEPInterrupt>
 8001454:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d057      	beq.n	8001510 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	2201      	movs	r2, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	69f9      	ldr	r1, [r7, #28]
 800147c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001480:	4013      	ands	r3, r2
 8001482:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	015a      	lsls	r2, r3, #5
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	4413      	add	r3, r2
 800148c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001490:	461a      	mov	r2, r3
 8001492:	2301      	movs	r3, #1
 8001494:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d132      	bne.n	8001504 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a2:	4613      	mov	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4413      	add	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	440b      	add	r3, r1
 80014ac:	334c      	adds	r3, #76	; 0x4c
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4403      	add	r3, r0
 80014be:	3348      	adds	r3, #72	; 0x48
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4419      	add	r1, r3
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4403      	add	r3, r0
 80014d2:	334c      	adds	r3, #76	; 0x4c
 80014d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d113      	bne.n	8001504 <HAL_PCD_IRQHandler+0x3a2>
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	3354      	adds	r3, #84	; 0x54
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d108      	bne.n	8001504 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6818      	ldr	r0, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014fc:	461a      	mov	r2, r3
 80014fe:	2101      	movs	r1, #1
 8001500:	f002 ff70 	bl	80043e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f004 fee3 	bl	80062d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	015a      	lsls	r2, r3, #5
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	4413      	add	r3, r2
 8001522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001526:	461a      	mov	r2, r3
 8001528:	2308      	movs	r3, #8
 800152a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	015a      	lsls	r2, r3, #5
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	4413      	add	r3, r2
 800153e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001542:	461a      	mov	r2, r3
 8001544:	2310      	movs	r3, #16
 8001546:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	015a      	lsls	r2, r3, #5
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	4413      	add	r3, r2
 800155a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800155e:	461a      	mov	r2, r3
 8001560:	2340      	movs	r3, #64	; 0x40
 8001562:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d023      	beq.n	80015b6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800156e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001570:	6a38      	ldr	r0, [r7, #32]
 8001572:	f001 fe51 	bl	8003218 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	3338      	adds	r3, #56	; 0x38
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	3304      	adds	r3, #4
 8001588:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d108      	bne.n	80015a4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2200      	movs	r2, #0
 8001596:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	b2db      	uxtb	r3, r3
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f004 ff30 	bl	8006404 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	015a      	lsls	r2, r3, #5
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	4413      	add	r3, r2
 80015ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b0:	461a      	mov	r2, r3
 80015b2:	2302      	movs	r3, #2
 80015b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fcc3 	bl	8001f4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	3301      	adds	r3, #1
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f47f af2e 	bne.w	8001438 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 fe3b 	bl	800425c <USB_ReadInterrupts>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015f0:	d122      	bne.n	8001638 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800160c:	2b01      	cmp	r3, #1
 800160e:	d108      	bne.n	8001622 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001618:	2100      	movs	r1, #0
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 feaa 	bl	8002374 <HAL_PCDEx_LPM_Callback>
 8001620:	e002      	b.n	8001628 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f004 fece 	bl	80063c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f002 fe0d 	bl	800425c <USB_ReadInterrupts>
 8001642:	4603      	mov	r3, r0
 8001644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800164c:	d112      	bne.n	8001674 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b01      	cmp	r3, #1
 800165c:	d102      	bne.n	8001664 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f004 fe8a 	bl	8006378 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	695a      	ldr	r2, [r3, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001672:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f002 fdef 	bl	800425c <USB_ReadInterrupts>
 800167e:	4603      	mov	r3, r0
 8001680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001688:	f040 80b7 	bne.w	80017fa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	69fa      	ldr	r2, [r7, #28]
 8001696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2110      	movs	r1, #16
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 fdb6 	bl	8003218 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016b0:	e046      	b.n	8001740 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b4:	015a      	lsls	r2, r3, #5
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	4413      	add	r3, r2
 80016ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016be:	461a      	mov	r2, r3
 80016c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016c4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c8:	015a      	lsls	r2, r3, #5
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d6:	0151      	lsls	r1, r2, #5
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	440a      	add	r2, r1
 80016dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e8:	015a      	lsls	r2, r3, #5
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	4413      	add	r3, r2
 80016ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016f2:	461a      	mov	r2, r3
 80016f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016f8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fc:	015a      	lsls	r2, r3, #5
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	4413      	add	r3, r2
 8001702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170a:	0151      	lsls	r1, r2, #5
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	440a      	add	r2, r1
 8001710:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001714:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001718:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171c:	015a      	lsls	r2, r3, #5
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	4413      	add	r3, r2
 8001722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172a:	0151      	lsls	r1, r2, #5
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	440a      	add	r2, r1
 8001730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001734:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001738:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173c:	3301      	adds	r3, #1
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001746:	429a      	cmp	r2, r3
 8001748:	d3b3      	bcc.n	80016b2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001758:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800175c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	2b00      	cmp	r3, #0
 8001764:	d016      	beq.n	8001794 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800176c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001776:	f043 030b 	orr.w	r3, r3, #11
 800177a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800178c:	f043 030b 	orr.w	r3, r3, #11
 8001790:	6453      	str	r3, [r2, #68]	; 0x44
 8001792:	e015      	b.n	80017c0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017a6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ba:	f043 030b 	orr.w	r3, r3, #11
 80017be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6818      	ldr	r0, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017e4:	461a      	mov	r2, r3
 80017e6:	f002 fdfd 	bl	80043e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	695a      	ldr	r2, [r3, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fd2c 	bl	800425c <USB_ReadInterrupts>
 8001804:	4603      	mov	r3, r0
 8001806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800180e:	d124      	bne.n	800185a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f002 fdc2 	bl	800439e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f001 fd77 	bl	8003312 <USB_GetDevSpeed>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681c      	ldr	r4, [r3, #0]
 8001830:	f001 fa10 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8001834:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461a      	mov	r2, r3
 800183e:	4620      	mov	r0, r4
 8001840:	f001 fa76 	bl	8002d30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f004 fd6e 	bl	8006326 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695a      	ldr	r2, [r3, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001858:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f002 fcfc 	bl	800425c <USB_ReadInterrupts>
 8001864:	4603      	mov	r3, r0
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b08      	cmp	r3, #8
 800186c:	d10a      	bne.n	8001884 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f004 fd4b 	bl	800630a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f002 0208 	and.w	r2, r2, #8
 8001882:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f002 fce7 	bl	800425c <USB_ReadInterrupts>
 800188e:	4603      	mov	r3, r0
 8001890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001894:	2b80      	cmp	r3, #128	; 0x80
 8001896:	d122      	bne.n	80018de <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018a4:	2301      	movs	r3, #1
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
 80018a8:	e014      	b.n	80018d4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fb0f 	bl	8001eec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	3301      	adds	r3, #1
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018da:	429a      	cmp	r2, r3
 80018dc:	d3e5      	bcc.n	80018aa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fcba 	bl	800425c <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018f2:	d13b      	bne.n	800196c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018f4:	2301      	movs	r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
 80018f8:	e02b      	b.n	8001952 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	3340      	adds	r3, #64	; 0x40
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d115      	bne.n	800194c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001920:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	da12      	bge.n	800194c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	333f      	adds	r3, #63	; 0x3f
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4619      	mov	r1, r3
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 fad0 	bl	8001eec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	3301      	adds	r3, #1
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001958:	429a      	cmp	r2, r3
 800195a:	d3ce      	bcc.n	80018fa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800196a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f002 fc73 	bl	800425c <USB_ReadInterrupts>
 8001976:	4603      	mov	r3, r0
 8001978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001980:	d155      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001982:	2301      	movs	r3, #1
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
 8001986:	e045      	b.n	8001a14 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	015a      	lsls	r2, r3, #5
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	4413      	add	r3, r2
 8001990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d12e      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da2b      	bge.n	8001a0e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d121      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ce:	4613      	mov	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10a      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0a:	6053      	str	r3, [r2, #4]
            break;
 8001a0c:	e007      	b.n	8001a1e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3301      	adds	r3, #1
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3b4      	bcc.n	8001988 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fc12 	bl	800425c <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a42:	d10a      	bne.n	8001a5a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f004 fcef 	bl	8006428 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f002 fbfc 	bl	800425c <USB_ReadInterrupts>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d115      	bne.n	8001a9a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f004 fcdf 	bl	8006444 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	e000      	b.n	8001a9a <HAL_PCD_IRQHandler+0x938>
      return;
 8001a98:	bf00      	nop
    }
  }
}
 8001a9a:	3734      	adds	r7, #52	; 0x34
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd90      	pop	{r4, r7, pc}

08001aa0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_PCD_SetAddress+0x1a>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e013      	b.n	8001ae2 <HAL_PCD_SetAddress+0x42>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	78fa      	ldrb	r2, [r7, #3]
 8001ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f002 fb5a 	bl	800418c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	4608      	mov	r0, r1
 8001af4:	4611      	mov	r1, r2
 8001af6:	461a      	mov	r2, r3
 8001af8:	4603      	mov	r3, r0
 8001afa:	70fb      	strb	r3, [r7, #3]
 8001afc:	460b      	mov	r3, r1
 8001afe:	803b      	strh	r3, [r7, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	da0f      	bge.n	8001b30 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 020f 	and.w	r2, r3, #15
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	3338      	adds	r3, #56	; 0x38
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	3304      	adds	r3, #4
 8001b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	705a      	strb	r2, [r3, #1]
 8001b2e:	e00f      	b.n	8001b50 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b30:	78fb      	ldrb	r3, [r7, #3]
 8001b32:	f003 020f 	and.w	r2, r3, #15
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	3304      	adds	r3, #4
 8001b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b50:	78fb      	ldrb	r3, [r7, #3]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b5c:	883a      	ldrh	r2, [r7, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	78ba      	ldrb	r2, [r7, #2]
 8001b66:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	785b      	ldrb	r3, [r3, #1]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b7a:	78bb      	ldrb	r3, [r7, #2]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d102      	bne.n	8001b86 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_PCD_EP_Open+0xaa>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e00e      	b.n	8001bb2 <HAL_PCD_EP_Open+0xc8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68f9      	ldr	r1, [r7, #12]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 fbda 	bl	800335c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001bb0:	7afb      	ldrb	r3, [r7, #11]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b084      	sub	sp, #16
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	da0f      	bge.n	8001bee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	f003 020f 	and.w	r2, r3, #15
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	3338      	adds	r3, #56	; 0x38
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	3304      	adds	r3, #4
 8001be4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	705a      	strb	r2, [r3, #1]
 8001bec:	e00f      	b.n	8001c0e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 020f 	and.w	r2, r3, #15
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	3304      	adds	r3, #4
 8001c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_PCD_EP_Close+0x6e>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e00e      	b.n	8001c46 <HAL_PCD_EP_Close+0x8c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68f9      	ldr	r1, [r7, #12]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f001 fc18 	bl	800346c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c5e:	7afb      	ldrb	r3, [r7, #11]
 8001c60:	f003 020f 	and.w	r2, r3, #15
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	3304      	adds	r3, #4
 8001c76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2200      	movs	r2, #0
 8001c88:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d102      	bne.n	8001caa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d109      	bne.n	8001cc8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	6979      	ldr	r1, [r7, #20]
 8001cc2:	f001 fef7 	bl	8003ab4 <USB_EP0StartXfer>
 8001cc6:	e008      	b.n	8001cda <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	6979      	ldr	r1, [r7, #20]
 8001cd6:	f001 fca5 	bl	8003624 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
 8001cf6:	f003 020f 	and.w	r2, r3, #15
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	4413      	add	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	3338      	adds	r3, #56	; 0x38
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	3304      	adds	r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2201      	movs	r2, #1
 8001d22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d24:	7afb      	ldrb	r3, [r7, #11]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d102      	bne.n	8001d3e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	f003 030f 	and.w	r3, r3, #15
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	6979      	ldr	r1, [r7, #20]
 8001d56:	f001 fead 	bl	8003ab4 <USB_EP0StartXfer>
 8001d5a:	e008      	b.n	8001d6e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	6979      	ldr	r1, [r7, #20]
 8001d6a:	f001 fc5b 	bl	8003624 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 020f 	and.w	r2, r3, #15
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d901      	bls.n	8001d96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e050      	b.n	8001e38 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	da0f      	bge.n	8001dbe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d9e:	78fb      	ldrb	r3, [r7, #3]
 8001da0:	f003 020f 	and.w	r2, r3, #15
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	3338      	adds	r3, #56	; 0x38
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	3304      	adds	r3, #4
 8001db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	705a      	strb	r2, [r3, #1]
 8001dbc:	e00d      	b.n	8001dda <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d101      	bne.n	8001dfa <HAL_PCD_EP_SetStall+0x82>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e01e      	b.n	8001e38 <HAL_PCD_EP_SetStall+0xc0>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68f9      	ldr	r1, [r7, #12]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 f8eb 	bl	8003fe4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10a      	bne.n	8001e2e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	b2d9      	uxtb	r1, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f002 fadb 	bl	80043e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f003 020f 	and.w	r2, r3, #15
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d901      	bls.n	8001e5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e042      	b.n	8001ee4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	da0f      	bge.n	8001e86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 020f 	and.w	r2, r3, #15
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	3338      	adds	r3, #56	; 0x38
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	705a      	strb	r2, [r3, #1]
 8001e84:	e00f      	b.n	8001ea6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	f003 020f 	and.w	r2, r3, #15
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_PCD_EP_ClrStall+0x86>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e00e      	b.n	8001ee4 <HAL_PCD_EP_ClrStall+0xa4>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68f9      	ldr	r1, [r7, #12]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 f8f3 	bl	80040c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	da0c      	bge.n	8001f1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 020f 	and.w	r2, r3, #15
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	3338      	adds	r3, #56	; 0x38
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4413      	add	r3, r2
 8001f14:	3304      	adds	r3, #4
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	e00c      	b.n	8001f34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 020f 	and.w	r2, r3, #15
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	3304      	adds	r3, #4
 8001f32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68f9      	ldr	r1, [r7, #12]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f001 ff12 	bl	8003d64 <USB_EPStopXfer>
 8001f40:	4603      	mov	r3, r0
 8001f42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f44:	7afb      	ldrb	r3, [r7, #11]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b08a      	sub	sp, #40	; 0x28
 8001f52:	af02      	add	r7, sp, #8
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	3338      	adds	r3, #56	; 0x38
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	3304      	adds	r3, #4
 8001f74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a1a      	ldr	r2, [r3, #32]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d901      	bls.n	8001f86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e06c      	b.n	8002060 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d902      	bls.n	8001fa2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001faa:	e02b      	b.n	8002004 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d902      	bls.n	8001fc8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	3303      	adds	r3, #3
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6919      	ldr	r1, [r3, #16]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f001 ff66 	bl	8003eb8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	441a      	add	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	441a      	add	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	429a      	cmp	r2, r3
 8002018:	d809      	bhi.n	800202e <PCD_WriteEmptyTxFifo+0xe0>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a1a      	ldr	r2, [r3, #32]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002022:	429a      	cmp	r2, r3
 8002024:	d203      	bcs.n	800202e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1be      	bne.n	8001fac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	429a      	cmp	r2, r3
 8002038:	d811      	bhi.n	800205e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	2201      	movs	r2, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800204e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	43db      	mvns	r3, r3
 8002054:	6939      	ldr	r1, [r7, #16]
 8002056:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800205a:	4013      	ands	r3, r2
 800205c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	333c      	adds	r3, #60	; 0x3c
 8002080:	3304      	adds	r3, #4
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4413      	add	r3, r2
 800208e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d17b      	bne.n	8002196 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d015      	beq.n	80020d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	4a61      	ldr	r2, [pc, #388]	; (8002230 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	f240 80b9 	bls.w	8002224 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80b3 	beq.w	8002224 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ca:	461a      	mov	r2, r3
 80020cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d0:	6093      	str	r3, [r2, #8]
 80020d2:	e0a7      	b.n	8002224 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ea:	461a      	mov	r2, r3
 80020ec:	2320      	movs	r3, #32
 80020ee:	6093      	str	r3, [r2, #8]
 80020f0:	e098      	b.n	8002224 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f040 8093 	bne.w	8002224 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	4a4b      	ldr	r2, [pc, #300]	; (8002230 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d90f      	bls.n	8002126 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	4413      	add	r3, r2
 8002118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211c:	461a      	mov	r2, r3
 800211e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002122:	6093      	str	r3, [r2, #8]
 8002124:	e07e      	b.n	8002224 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	4413      	add	r3, r2
 8002138:	3304      	adds	r3, #4
 800213a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	0159      	lsls	r1, r3, #5
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	440b      	add	r3, r1
 8002148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002152:	1ad2      	subs	r2, r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d114      	bne.n	8002188 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002170:	461a      	mov	r2, r3
 8002172:	2101      	movs	r1, #1
 8002174:	f002 f936 	bl	80043e4 <USB_EP0_OutStart>
 8002178:	e006      	b.n	8002188 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	441a      	add	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f004 f886 	bl	80062a0 <HAL_PCD_DataOutStageCallback>
 8002194:	e046      	b.n	8002224 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	4a26      	ldr	r2, [pc, #152]	; (8002234 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d124      	bne.n	80021e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b4:	461a      	mov	r2, r3
 80021b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ba:	6093      	str	r3, [r2, #8]
 80021bc:	e032      	b.n	8002224 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	015a      	lsls	r2, r3, #5
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d4:	461a      	mov	r2, r3
 80021d6:	2320      	movs	r3, #32
 80021d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f004 f85d 	bl	80062a0 <HAL_PCD_DataOutStageCallback>
 80021e6:	e01d      	b.n	8002224 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d114      	bne.n	8002218 <PCD_EP_OutXfrComplete_int+0x1b0>
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	4613      	mov	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d108      	bne.n	8002218 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002210:	461a      	mov	r2, r3
 8002212:	2100      	movs	r1, #0
 8002214:	f002 f8e6 	bl	80043e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	4619      	mov	r1, r3
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f004 f83e 	bl	80062a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3720      	adds	r7, #32
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	4f54300a 	.word	0x4f54300a
 8002234:	4f54310a 	.word	0x4f54310a

08002238 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	333c      	adds	r3, #60	; 0x3c
 8002250:	3304      	adds	r3, #4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d90e      	bls.n	800228c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002284:	461a      	mov	r2, r3
 8002286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800228a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f003 fff5 	bl	800627c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d90c      	bls.n	80022b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d108      	bne.n	80022b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6818      	ldr	r0, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022ac:	461a      	mov	r2, r3
 80022ae:	2101      	movs	r1, #1
 80022b0:	f002 f898 	bl	80043e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	4f54300a 	.word	0x4f54300a

080022c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
 80022d0:	4613      	mov	r3, r2
 80022d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022e2:	883b      	ldrh	r3, [r7, #0]
 80022e4:	0419      	lsls	r1, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
 80022f0:	e028      	b.n	8002344 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	4413      	add	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e00d      	b.n	8002322 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	3340      	adds	r3, #64	; 0x40
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	4413      	add	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	3301      	adds	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	3b01      	subs	r3, #1
 8002328:	429a      	cmp	r2, r3
 800232a:	d3ec      	bcc.n	8002306 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800232c:	883b      	ldrh	r3, [r7, #0]
 800232e:	0418      	lsls	r0, r3, #16
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6819      	ldr	r1, [r3, #0]
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	3b01      	subs	r3, #1
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	4302      	orrs	r2, r0
 800233c:	3340      	adds	r3, #64	; 0x40
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e267      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d075      	beq.n	8002496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023aa:	4b88      	ldr	r3, [pc, #544]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d00c      	beq.n	80023d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b6:	4b85      	ldr	r3, [pc, #532]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d112      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023c2:	4b82      	ldr	r3, [pc, #520]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ce:	d10b      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d0:	4b7e      	ldr	r3, [pc, #504]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d05b      	beq.n	8002494 <HAL_RCC_OscConfig+0x108>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d157      	bne.n	8002494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e242      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d106      	bne.n	8002400 <HAL_RCC_OscConfig+0x74>
 80023f2:	4b76      	ldr	r3, [pc, #472]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a75      	ldr	r2, [pc, #468]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e01d      	b.n	800243c <HAL_RCC_OscConfig+0xb0>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x98>
 800240a:	4b70      	ldr	r3, [pc, #448]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6f      	ldr	r2, [pc, #444]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 8002410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b6d      	ldr	r3, [pc, #436]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a6c      	ldr	r2, [pc, #432]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0xb0>
 8002424:	4b69      	ldr	r3, [pc, #420]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a68      	ldr	r2, [pc, #416]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 800242a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b66      	ldr	r3, [pc, #408]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a65      	ldr	r2, [pc, #404]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 8002436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d013      	beq.n	800246c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fa2c 	bl	80008a0 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244c:	f7fe fa28 	bl	80008a0 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e207      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	4b5b      	ldr	r3, [pc, #364]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0xc0>
 800246a:	e014      	b.n	8002496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246c:	f7fe fa18 	bl	80008a0 <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002474:	f7fe fa14 	bl	80008a0 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e1f3      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	4b51      	ldr	r3, [pc, #324]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f0      	bne.n	8002474 <HAL_RCC_OscConfig+0xe8>
 8002492:	e000      	b.n	8002496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d063      	beq.n	800256a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024a2:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00b      	beq.n	80024c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b6:	2b08      	cmp	r3, #8
 80024b8:	d11c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ba:	4b44      	ldr	r3, [pc, #272]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d116      	bne.n	80024f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c6:	4b41      	ldr	r3, [pc, #260]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_RCC_OscConfig+0x152>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d001      	beq.n	80024de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e1c7      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4937      	ldr	r1, [pc, #220]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	e03a      	b.n	800256a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024fc:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <HAL_RCC_OscConfig+0x244>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7fe f9cd 	bl	80008a0 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800250a:	f7fe f9c9 	bl	80008a0 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e1a8      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	4b2b      	ldr	r3, [pc, #172]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b28      	ldr	r3, [pc, #160]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4925      	ldr	r1, [pc, #148]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 8002538:	4313      	orrs	r3, r2
 800253a:	600b      	str	r3, [r1, #0]
 800253c:	e015      	b.n	800256a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCC_OscConfig+0x244>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002544:	f7fe f9ac 	bl	80008a0 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254c:	f7fe f9a8 	bl	80008a0 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e187      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d036      	beq.n	80025e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_RCC_OscConfig+0x248>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7fe f98c 	bl	80008a0 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258c:	f7fe f988 	bl	80008a0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e167      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_OscConfig+0x240>)
 80025a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x200>
 80025aa:	e01b      	b.n	80025e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_OscConfig+0x248>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b2:	f7fe f975 	bl	80008a0 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b8:	e00e      	b.n	80025d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ba:	f7fe f971 	bl	80008a0 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d907      	bls.n	80025d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e150      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
 80025cc:	40023800 	.word	0x40023800
 80025d0:	42470000 	.word	0x42470000
 80025d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d8:	4b88      	ldr	r3, [pc, #544]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 80025da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ea      	bne.n	80025ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 8097 	beq.w	8002720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f2:	2300      	movs	r3, #0
 80025f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f6:	4b81      	ldr	r3, [pc, #516]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	4b7d      	ldr	r3, [pc, #500]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a7c      	ldr	r2, [pc, #496]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
 8002612:	4b7a      	ldr	r3, [pc, #488]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4b77      	ldr	r3, [pc, #476]	; (8002800 <HAL_RCC_OscConfig+0x474>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d118      	bne.n	8002660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262e:	4b74      	ldr	r3, [pc, #464]	; (8002800 <HAL_RCC_OscConfig+0x474>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a73      	ldr	r2, [pc, #460]	; (8002800 <HAL_RCC_OscConfig+0x474>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263a:	f7fe f931 	bl	80008a0 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002642:	f7fe f92d 	bl	80008a0 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e10c      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	4b6a      	ldr	r3, [pc, #424]	; (8002800 <HAL_RCC_OscConfig+0x474>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x2ea>
 8002668:	4b64      	ldr	r3, [pc, #400]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	4a63      	ldr	r2, [pc, #396]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6713      	str	r3, [r2, #112]	; 0x70
 8002674:	e01c      	b.n	80026b0 <HAL_RCC_OscConfig+0x324>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b05      	cmp	r3, #5
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x30c>
 800267e:	4b5f      	ldr	r3, [pc, #380]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	4a5e      	ldr	r2, [pc, #376]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 8002684:	f043 0304 	orr.w	r3, r3, #4
 8002688:	6713      	str	r3, [r2, #112]	; 0x70
 800268a:	4b5c      	ldr	r3, [pc, #368]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4a5b      	ldr	r2, [pc, #364]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6713      	str	r3, [r2, #112]	; 0x70
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0x324>
 8002698:	4b58      	ldr	r3, [pc, #352]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a57      	ldr	r2, [pc, #348]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
 80026a4:	4b55      	ldr	r3, [pc, #340]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a54      	ldr	r2, [pc, #336]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d015      	beq.n	80026e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe f8f2 	bl	80008a0 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe f8ee 	bl	80008a0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e0cb      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d6:	4b49      	ldr	r3, [pc, #292]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0ee      	beq.n	80026c0 <HAL_RCC_OscConfig+0x334>
 80026e2:	e014      	b.n	800270e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e4:	f7fe f8dc 	bl	80008a0 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe f8d8 	bl	80008a0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e0b5      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002702:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ee      	bne.n	80026ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002714:	4b39      	ldr	r3, [pc, #228]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	4a38      	ldr	r2, [pc, #224]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80a1 	beq.w	800286c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800272a:	4b34      	ldr	r3, [pc, #208]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 030c 	and.w	r3, r3, #12
 8002732:	2b08      	cmp	r3, #8
 8002734:	d05c      	beq.n	80027f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d141      	bne.n	80027c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273e:	4b31      	ldr	r3, [pc, #196]	; (8002804 <HAL_RCC_OscConfig+0x478>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe f8ac 	bl	80008a0 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274c:	f7fe f8a8 	bl	80008a0 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e087      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275e:	4b27      	ldr	r3, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	019b      	lsls	r3, r3, #6
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	3b01      	subs	r3, #1
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	491b      	ldr	r1, [pc, #108]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_RCC_OscConfig+0x478>)
 8002796:	2201      	movs	r2, #1
 8002798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279a:	f7fe f881 	bl	80008a0 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a2:	f7fe f87d 	bl	80008a0 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e05c      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x416>
 80027c0:	e054      	b.n	800286c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_RCC_OscConfig+0x478>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7fe f86a 	bl	80008a0 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d0:	f7fe f866 	bl	80008a0 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e045      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_RCC_OscConfig+0x470>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0x444>
 80027ee:	e03d      	b.n	800286c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e038      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
 80027fc:	40023800 	.word	0x40023800
 8002800:	40007000 	.word	0x40007000
 8002804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002808:	4b1b      	ldr	r3, [pc, #108]	; (8002878 <HAL_RCC_OscConfig+0x4ec>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d028      	beq.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d121      	bne.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d11a      	bne.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800283e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002840:	4293      	cmp	r3, r2
 8002842:	d111      	bne.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	3b01      	subs	r3, #1
 8002852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d107      	bne.n	8002868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800

0800287c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0cc      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002890:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	d90c      	bls.n	80028b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289e:	4b65      	ldr	r3, [pc, #404]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b63      	ldr	r3, [pc, #396]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e0b8      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d020      	beq.n	8002906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028d0:	4b59      	ldr	r3, [pc, #356]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a58      	ldr	r2, [pc, #352]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028e8:	4b53      	ldr	r3, [pc, #332]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a52      	ldr	r2, [pc, #328]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f4:	4b50      	ldr	r3, [pc, #320]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	494d      	ldr	r1, [pc, #308]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d044      	beq.n	800299c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d119      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e07f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d003      	beq.n	800293a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002936:	2b03      	cmp	r3, #3
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800293a:	4b3f      	ldr	r3, [pc, #252]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e06f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294a:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e067      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800295a:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f023 0203 	bic.w	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4934      	ldr	r1, [pc, #208]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	4313      	orrs	r3, r2
 800296a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800296c:	f7fd ff98 	bl	80008a0 <HAL_GetTick>
 8002970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	e00a      	b.n	800298a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002974:	f7fd ff94 	bl	80008a0 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e04f      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 020c 	and.w	r2, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	429a      	cmp	r2, r3
 800299a:	d1eb      	bne.n	8002974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d20c      	bcs.n	80029c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e032      	b.n	8002a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4916      	ldr	r1, [pc, #88]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	490e      	ldr	r1, [pc, #56]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a02:	f000 f821 	bl	8002a48 <HAL_RCC_GetSysClockFreq>
 8002a06:	4602      	mov	r2, r0
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	490a      	ldr	r1, [pc, #40]	; (8002a3c <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	5ccb      	ldrb	r3, [r1, r3]
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fd fef8 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40023c00 	.word	0x40023c00
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	08006888 	.word	0x08006888
 8002a40:	20000000 	.word	0x20000000
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a4c:	b094      	sub	sp, #80	; 0x50
 8002a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	647b      	str	r3, [r7, #68]	; 0x44
 8002a54:	2300      	movs	r3, #0
 8002a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a58:	2300      	movs	r3, #0
 8002a5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a60:	4b79      	ldr	r3, [pc, #484]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d00d      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x40>
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	f200 80e1 	bhi.w	8002c34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x34>
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d003      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a7a:	e0db      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a7c:	4b73      	ldr	r3, [pc, #460]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a80:	e0db      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a82:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a86:	e0d8      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a88:	4b6f      	ldr	r3, [pc, #444]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a92:	4b6d      	ldr	r3, [pc, #436]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d063      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9e:	4b6a      	ldr	r3, [pc, #424]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aba:	4622      	mov	r2, r4
 8002abc:	462b      	mov	r3, r5
 8002abe:	f04f 0000 	mov.w	r0, #0
 8002ac2:	f04f 0100 	mov.w	r1, #0
 8002ac6:	0159      	lsls	r1, r3, #5
 8002ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002acc:	0150      	lsls	r0, r2, #5
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	1a51      	subs	r1, r2, r1
 8002ad6:	6139      	str	r1, [r7, #16]
 8002ad8:	4629      	mov	r1, r5
 8002ada:	eb63 0301 	sbc.w	r3, r3, r1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002aec:	4659      	mov	r1, fp
 8002aee:	018b      	lsls	r3, r1, #6
 8002af0:	4651      	mov	r1, sl
 8002af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002af6:	4651      	mov	r1, sl
 8002af8:	018a      	lsls	r2, r1, #6
 8002afa:	4651      	mov	r1, sl
 8002afc:	ebb2 0801 	subs.w	r8, r2, r1
 8002b00:	4659      	mov	r1, fp
 8002b02:	eb63 0901 	sbc.w	r9, r3, r1
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b1a:	4690      	mov	r8, r2
 8002b1c:	4699      	mov	r9, r3
 8002b1e:	4623      	mov	r3, r4
 8002b20:	eb18 0303 	adds.w	r3, r8, r3
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	462b      	mov	r3, r5
 8002b28:	eb49 0303 	adc.w	r3, r9, r3
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	024b      	lsls	r3, r1, #9
 8002b3e:	4621      	mov	r1, r4
 8002b40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b44:	4621      	mov	r1, r4
 8002b46:	024a      	lsls	r2, r1, #9
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b4e:	2200      	movs	r2, #0
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b58:	f7fd fb36 	bl	80001c8 <__aeabi_uldivmod>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4613      	mov	r3, r2
 8002b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b64:	e058      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b66:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	099b      	lsrs	r3, r3, #6
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	4611      	mov	r1, r2
 8002b72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b76:	623b      	str	r3, [r7, #32]
 8002b78:	2300      	movs	r3, #0
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b80:	4642      	mov	r2, r8
 8002b82:	464b      	mov	r3, r9
 8002b84:	f04f 0000 	mov.w	r0, #0
 8002b88:	f04f 0100 	mov.w	r1, #0
 8002b8c:	0159      	lsls	r1, r3, #5
 8002b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b92:	0150      	lsls	r0, r2, #5
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4641      	mov	r1, r8
 8002b9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bb8:	ebb2 040a 	subs.w	r4, r2, sl
 8002bbc:	eb63 050b 	sbc.w	r5, r3, fp
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	00eb      	lsls	r3, r5, #3
 8002bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bce:	00e2      	lsls	r2, r4, #3
 8002bd0:	4614      	mov	r4, r2
 8002bd2:	461d      	mov	r5, r3
 8002bd4:	4643      	mov	r3, r8
 8002bd6:	18e3      	adds	r3, r4, r3
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	464b      	mov	r3, r9
 8002bdc:	eb45 0303 	adc.w	r3, r5, r3
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bee:	4629      	mov	r1, r5
 8002bf0:	028b      	lsls	r3, r1, #10
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	028a      	lsls	r2, r1, #10
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c02:	2200      	movs	r2, #0
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	61fa      	str	r2, [r7, #28]
 8002c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c0c:	f7fd fadc 	bl	80001c8 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	3301      	adds	r3, #1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002c36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3750      	adds	r7, #80	; 0x50
 8002c40:	46bd      	mov	sp, r7
 8002c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	007a1200 	.word	0x007a1200

08002c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000000 	.word	0x20000000

08002c6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	f107 001c 	add.w	r0, r7, #28
 8002c7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d122      	bne.n	8002cca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d105      	bne.n	8002cbe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f001 fbee 	bl	80044a0 <USB_CoreReset>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	e01a      	b.n	8002d00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f001 fbe2 	bl	80044a0 <USB_CoreReset>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
 8002cf2:	e005      	b.n	8002d00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d10b      	bne.n	8002d1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f043 0206 	orr.w	r2, r3, #6
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d2a:	b004      	add	sp, #16
 8002d2c:	4770      	bx	lr
	...

08002d30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d165      	bne.n	8002e10 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4a41      	ldr	r2, [pc, #260]	; (8002e4c <USB_SetTurnaroundTime+0x11c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d906      	bls.n	8002d5a <USB_SetTurnaroundTime+0x2a>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4a40      	ldr	r2, [pc, #256]	; (8002e50 <USB_SetTurnaroundTime+0x120>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d202      	bcs.n	8002d5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d54:	230f      	movs	r3, #15
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e062      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	4a3c      	ldr	r2, [pc, #240]	; (8002e50 <USB_SetTurnaroundTime+0x120>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d306      	bcc.n	8002d70 <USB_SetTurnaroundTime+0x40>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4a3b      	ldr	r2, [pc, #236]	; (8002e54 <USB_SetTurnaroundTime+0x124>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d202      	bcs.n	8002d70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d6a:	230e      	movs	r3, #14
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	e057      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4a38      	ldr	r2, [pc, #224]	; (8002e54 <USB_SetTurnaroundTime+0x124>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d306      	bcc.n	8002d86 <USB_SetTurnaroundTime+0x56>
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4a37      	ldr	r2, [pc, #220]	; (8002e58 <USB_SetTurnaroundTime+0x128>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d202      	bcs.n	8002d86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d80:	230d      	movs	r3, #13
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e04c      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <USB_SetTurnaroundTime+0x128>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d306      	bcc.n	8002d9c <USB_SetTurnaroundTime+0x6c>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4a32      	ldr	r2, [pc, #200]	; (8002e5c <USB_SetTurnaroundTime+0x12c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d802      	bhi.n	8002d9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d96:	230c      	movs	r3, #12
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e041      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4a2f      	ldr	r2, [pc, #188]	; (8002e5c <USB_SetTurnaroundTime+0x12c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d906      	bls.n	8002db2 <USB_SetTurnaroundTime+0x82>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4a2e      	ldr	r2, [pc, #184]	; (8002e60 <USB_SetTurnaroundTime+0x130>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d802      	bhi.n	8002db2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002dac:	230b      	movs	r3, #11
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e036      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	4a2a      	ldr	r2, [pc, #168]	; (8002e60 <USB_SetTurnaroundTime+0x130>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d906      	bls.n	8002dc8 <USB_SetTurnaroundTime+0x98>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <USB_SetTurnaroundTime+0x134>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d802      	bhi.n	8002dc8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002dc2:	230a      	movs	r3, #10
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e02b      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4a26      	ldr	r2, [pc, #152]	; (8002e64 <USB_SetTurnaroundTime+0x134>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d906      	bls.n	8002dde <USB_SetTurnaroundTime+0xae>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <USB_SetTurnaroundTime+0x138>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d202      	bcs.n	8002dde <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002dd8:	2309      	movs	r3, #9
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	e020      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <USB_SetTurnaroundTime+0x138>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d306      	bcc.n	8002df4 <USB_SetTurnaroundTime+0xc4>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4a20      	ldr	r2, [pc, #128]	; (8002e6c <USB_SetTurnaroundTime+0x13c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d802      	bhi.n	8002df4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002dee:	2308      	movs	r3, #8
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	e015      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4a1d      	ldr	r2, [pc, #116]	; (8002e6c <USB_SetTurnaroundTime+0x13c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d906      	bls.n	8002e0a <USB_SetTurnaroundTime+0xda>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <USB_SetTurnaroundTime+0x140>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d202      	bcs.n	8002e0a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e04:	2307      	movs	r3, #7
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e00a      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e0a:	2306      	movs	r3, #6
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e007      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d102      	bne.n	8002e1c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e16:	2309      	movs	r3, #9
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e001      	b.n	8002e20 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e1c:	2309      	movs	r3, #9
 8002e1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	029b      	lsls	r3, r3, #10
 8002e34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	00d8acbf 	.word	0x00d8acbf
 8002e50:	00e4e1c0 	.word	0x00e4e1c0
 8002e54:	00f42400 	.word	0x00f42400
 8002e58:	01067380 	.word	0x01067380
 8002e5c:	011a499f 	.word	0x011a499f
 8002e60:	01312cff 	.word	0x01312cff
 8002e64:	014ca43f 	.word	0x014ca43f
 8002e68:	016e3600 	.word	0x016e3600
 8002e6c:	01a6ab1f 	.word	0x01a6ab1f
 8002e70:	01e84800 	.word	0x01e84800

08002e74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f023 0201 	bic.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d115      	bne.n	8002f06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	f7fd fce6 	bl	80008b8 <HAL_Delay>
      ms++;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f001 fa45 	bl	8004382 <USB_GetMode>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d01e      	beq.n	8002f3c <USB_SetCurrentMode+0x84>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b31      	cmp	r3, #49	; 0x31
 8002f02:	d9f0      	bls.n	8002ee6 <USB_SetCurrentMode+0x2e>
 8002f04:	e01a      	b.n	8002f3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d115      	bne.n	8002f38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f18:	2001      	movs	r0, #1
 8002f1a:	f7fd fccd 	bl	80008b8 <HAL_Delay>
      ms++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	3301      	adds	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f001 fa2c 	bl	8004382 <USB_GetMode>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <USB_SetCurrentMode+0x84>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b31      	cmp	r3, #49	; 0x31
 8002f34:	d9f0      	bls.n	8002f18 <USB_SetCurrentMode+0x60>
 8002f36:	e001      	b.n	8002f3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e005      	b.n	8002f48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b32      	cmp	r3, #50	; 0x32
 8002f40:	d101      	bne.n	8002f46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f50:	b084      	sub	sp, #16
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	e009      	b.n	8002f84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	3340      	adds	r3, #64	; 0x40
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	3301      	adds	r3, #1
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2b0e      	cmp	r3, #14
 8002f88:	d9f2      	bls.n	8002f70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d11c      	bne.n	8002fca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8002fc8:	e00b      	b.n	8002fe2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2300      	movs	r3, #0
 8002fec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	680b      	ldr	r3, [r1, #0]
 8003000:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003004:	2b01      	cmp	r3, #1
 8003006:	d10c      	bne.n	8003022 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d104      	bne.n	8003018 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800300e:	2100      	movs	r1, #0
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f965 	bl	80032e0 <USB_SetDevSpeed>
 8003016:	e008      	b.n	800302a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003018:	2101      	movs	r1, #1
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f960 	bl	80032e0 <USB_SetDevSpeed>
 8003020:	e003      	b.n	800302a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003022:	2103      	movs	r1, #3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f95b 	bl	80032e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800302a:	2110      	movs	r1, #16
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f8f3 	bl	8003218 <USB_FlushTxFifo>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f91f 	bl	8003280 <USB_FlushRxFifo>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003052:	461a      	mov	r2, r3
 8003054:	2300      	movs	r3, #0
 8003056:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305e:	461a      	mov	r2, r3
 8003060:	2300      	movs	r3, #0
 8003062:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306a:	461a      	mov	r2, r3
 800306c:	2300      	movs	r3, #0
 800306e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	e043      	b.n	80030fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	015a      	lsls	r2, r3, #5
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800308c:	d118      	bne.n	80030c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10a      	bne.n	80030aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a0:	461a      	mov	r2, r3
 80030a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	e013      	b.n	80030d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b6:	461a      	mov	r2, r3
 80030b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e008      	b.n	80030d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030cc:	461a      	mov	r2, r3
 80030ce:	2300      	movs	r3, #0
 80030d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030de:	461a      	mov	r2, r3
 80030e0:	2300      	movs	r3, #0
 80030e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f0:	461a      	mov	r2, r3
 80030f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	3301      	adds	r3, #1
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	429a      	cmp	r2, r3
 8003104:	d3b7      	bcc.n	8003076 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e043      	b.n	8003194 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800311e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003122:	d118      	bne.n	8003156 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10a      	bne.n	8003140 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4413      	add	r3, r2
 8003132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003136:	461a      	mov	r2, r3
 8003138:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e013      	b.n	8003168 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314c:	461a      	mov	r2, r3
 800314e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	e008      	b.n	8003168 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003162:	461a      	mov	r2, r3
 8003164:	2300      	movs	r3, #0
 8003166:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003174:	461a      	mov	r2, r3
 8003176:	2300      	movs	r3, #0
 8003178:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003186:	461a      	mov	r2, r3
 8003188:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800318c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	3301      	adds	r3, #1
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	429a      	cmp	r2, r3
 800319a:	d3b7      	bcc.n	800310c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80031bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f043 0210 	orr.w	r2, r3, #16
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699a      	ldr	r2, [r3, #24]
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <USB_DevInit+0x2c4>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f043 0208 	orr.w	r2, r3, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80031ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d107      	bne.n	8003204 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003204:	7dfb      	ldrb	r3, [r7, #23]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003210:	b004      	add	sp, #16
 8003212:	4770      	bx	lr
 8003214:	803c3800 	.word	0x803c3800

08003218 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3301      	adds	r3, #1
 800322a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4a13      	ldr	r2, [pc, #76]	; (800327c <USB_FlushTxFifo+0x64>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e01b      	b.n	8003270 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	daf2      	bge.n	8003226 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	019b      	lsls	r3, r3, #6
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	3301      	adds	r3, #1
 8003254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4a08      	ldr	r2, [pc, #32]	; (800327c <USB_FlushTxFifo+0x64>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e006      	b.n	8003270 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b20      	cmp	r3, #32
 800326c:	d0f0      	beq.n	8003250 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	00030d40 	.word	0x00030d40

08003280 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3301      	adds	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a11      	ldr	r2, [pc, #68]	; (80032dc <USB_FlushRxFifo+0x5c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e018      	b.n	80032d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	daf2      	bge.n	800328c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2210      	movs	r2, #16
 80032ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3301      	adds	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4a08      	ldr	r2, [pc, #32]	; (80032dc <USB_FlushRxFifo+0x5c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e006      	b.n	80032d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d0f0      	beq.n	80032b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	00030d40 	.word	0x00030d40

080032e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	68f9      	ldr	r1, [r7, #12]
 80032fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003312:	b480      	push	{r7}
 8003314:	b087      	sub	sp, #28
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 0306 	and.w	r3, r3, #6
 800332a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d102      	bne.n	8003338 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003332:	2300      	movs	r3, #0
 8003334:	75fb      	strb	r3, [r7, #23]
 8003336:	e00a      	b.n	800334e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d002      	beq.n	8003344 <USB_GetDevSpeed+0x32>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b06      	cmp	r3, #6
 8003342:	d102      	bne.n	800334a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003344:	2302      	movs	r3, #2
 8003346:	75fb      	strb	r3, [r7, #23]
 8003348:	e001      	b.n	800334e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800334a:	230f      	movs	r3, #15
 800334c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003350:	4618      	mov	r0, r3
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d13a      	bne.n	80033ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337e:	69da      	ldr	r2, [r3, #28]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	2101      	movs	r1, #1
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	b29b      	uxth	r3, r3
 8003390:	68f9      	ldr	r1, [r7, #12]
 8003392:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003396:	4313      	orrs	r3, r2
 8003398:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d155      	bne.n	800345c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	791b      	ldrb	r3, [r3, #4]
 80033ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	059b      	lsls	r3, r3, #22
 80033d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033d4:	4313      	orrs	r3, r2
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	0151      	lsls	r1, r2, #5
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	440a      	add	r2, r1
 80033de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	e036      	b.n	800345c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f4:	69da      	ldr	r2, [r3, #28]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800340c:	4313      	orrs	r3, r2
 800340e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4413      	add	r3, r2
 8003418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d11a      	bne.n	800345c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	791b      	ldrb	r3, [r3, #4]
 8003440:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003442:	430b      	orrs	r3, r1
 8003444:	4313      	orrs	r3, r2
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	0151      	lsls	r1, r2, #5
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	440a      	add	r2, r1
 800344e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	785b      	ldrb	r3, [r3, #1]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d161      	bne.n	800354c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800349a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800349e:	d11f      	bne.n	80034e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	0151      	lsls	r1, r2, #5
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	440a      	add	r2, r1
 80034d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	2101      	movs	r1, #1
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	68f9      	ldr	r1, [r7, #12]
 80034fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003500:	4013      	ands	r3, r2
 8003502:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	2101      	movs	r1, #1
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	b29b      	uxth	r3, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	68f9      	ldr	r1, [r7, #12]
 8003520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003524:	4013      	ands	r3, r2
 8003526:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	0159      	lsls	r1, r3, #5
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	440b      	add	r3, r1
 800353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003542:	4619      	mov	r1, r3
 8003544:	4b35      	ldr	r3, [pc, #212]	; (800361c <USB_DeactivateEndpoint+0x1b0>)
 8003546:	4013      	ands	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
 800354a:	e060      	b.n	800360e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800355e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003562:	d11f      	bne.n	80035a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	0151      	lsls	r1, r2, #5
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	440a      	add	r2, r1
 800357a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800357e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003582:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	0151      	lsls	r1, r2, #5
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	440a      	add	r2, r1
 800359a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800359e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	f003 030f 	and.w	r3, r3, #15
 80035b4:	2101      	movs	r1, #1
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	041b      	lsls	r3, r3, #16
 80035bc:	43db      	mvns	r3, r3
 80035be:	68f9      	ldr	r1, [r7, #12]
 80035c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035c4:	4013      	ands	r3, r2
 80035c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ce:	69da      	ldr	r2, [r3, #28]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	2101      	movs	r1, #1
 80035da:	fa01 f303 	lsl.w	r3, r1, r3
 80035de:	041b      	lsls	r3, r3, #16
 80035e0:	43db      	mvns	r3, r3
 80035e2:	68f9      	ldr	r1, [r7, #12]
 80035e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035e8:	4013      	ands	r3, r2
 80035ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	0159      	lsls	r1, r3, #5
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	440b      	add	r3, r1
 8003602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003606:	4619      	mov	r1, r3
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <USB_DeactivateEndpoint+0x1b4>)
 800360a:	4013      	ands	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	ec337800 	.word	0xec337800
 8003620:	eff37800 	.word	0xeff37800

08003624 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	4613      	mov	r3, r2
 8003630:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	785b      	ldrb	r3, [r3, #1]
 8003640:	2b01      	cmp	r3, #1
 8003642:	f040 815c 	bne.w	80038fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d132      	bne.n	80036b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	0151      	lsls	r1, r2, #5
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	440a      	add	r2, r1
 8003664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003668:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800366c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	0151      	lsls	r1, r2, #5
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	440a      	add	r2, r1
 8003688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800368c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003690:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	4413      	add	r3, r2
 800369a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	0151      	lsls	r1, r2, #5
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	440a      	add	r2, r1
 80036a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ac:	0cdb      	lsrs	r3, r3, #19
 80036ae:	04db      	lsls	r3, r3, #19
 80036b0:	6113      	str	r3, [r2, #16]
 80036b2:	e074      	b.n	800379e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	0151      	lsls	r1, r2, #5
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	440a      	add	r2, r1
 80036ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ce:	0cdb      	lsrs	r3, r3, #19
 80036d0:	04db      	lsls	r3, r3, #19
 80036d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	0151      	lsls	r1, r2, #5
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	440a      	add	r2, r1
 80036ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003704:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	6999      	ldr	r1, [r3, #24]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	440b      	add	r3, r1
 8003710:	1e59      	subs	r1, r3, #1
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	fbb1 f3f3 	udiv	r3, r1, r3
 800371a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800371c:	4b9d      	ldr	r3, [pc, #628]	; (8003994 <USB_EPStartXfer+0x370>)
 800371e:	400b      	ands	r3, r1
 8003720:	69b9      	ldr	r1, [r7, #24]
 8003722:	0148      	lsls	r0, r1, #5
 8003724:	69f9      	ldr	r1, [r7, #28]
 8003726:	4401      	add	r1, r0
 8003728:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800372c:	4313      	orrs	r3, r2
 800372e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003746:	69b9      	ldr	r1, [r7, #24]
 8003748:	0148      	lsls	r0, r1, #5
 800374a:	69f9      	ldr	r1, [r7, #28]
 800374c:	4401      	add	r1, r0
 800374e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003752:	4313      	orrs	r3, r2
 8003754:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	791b      	ldrb	r3, [r3, #4]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d11f      	bne.n	800379e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	0151      	lsls	r1, r2, #5
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	440a      	add	r2, r1
 8003774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003778:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800377c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	0151      	lsls	r1, r2, #5
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	440a      	add	r2, r1
 8003794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003798:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800379c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d14b      	bne.n	800383c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	791b      	ldrb	r3, [r3, #4]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d128      	bne.n	800381a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d110      	bne.n	80037fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	e00f      	b.n	800381a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	0151      	lsls	r1, r2, #5
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	440a      	add	r2, r1
 8003810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003818:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	015a      	lsls	r2, r3, #5
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	4413      	add	r3, r2
 8003822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	0151      	lsls	r1, r2, #5
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	440a      	add	r2, r1
 8003830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003834:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e133      	b.n	8003aa4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	0151      	lsls	r1, r2, #5
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	440a      	add	r2, r1
 8003852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003856:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800385a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	791b      	ldrb	r3, [r3, #4]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d015      	beq.n	8003890 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 811b 	beq.w	8003aa4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f303 	lsl.w	r3, r1, r3
 8003884:	69f9      	ldr	r1, [r7, #28]
 8003886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800388a:	4313      	orrs	r3, r2
 800388c:	634b      	str	r3, [r1, #52]	; 0x34
 800388e:	e109      	b.n	8003aa4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d110      	bne.n	80038c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	0151      	lsls	r1, r2, #5
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	440a      	add	r2, r1
 80038b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	e00f      	b.n	80038e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	0151      	lsls	r1, r2, #5
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	440a      	add	r2, r1
 80038d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	6919      	ldr	r1, [r3, #16]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781a      	ldrb	r2, [r3, #0]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	b298      	uxth	r0, r3
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	4603      	mov	r3, r0
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fade 	bl	8003eb8 <USB_WritePacket>
 80038fc:	e0d2      	b.n	8003aa4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	0151      	lsls	r1, r2, #5
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	440a      	add	r2, r1
 8003914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003918:	0cdb      	lsrs	r3, r3, #19
 800391a:	04db      	lsls	r3, r3, #19
 800391c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	0151      	lsls	r1, r2, #5
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	440a      	add	r2, r1
 8003934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003938:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800393c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003940:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d126      	bne.n	8003998 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003960:	69b9      	ldr	r1, [r7, #24]
 8003962:	0148      	lsls	r0, r1, #5
 8003964:	69f9      	ldr	r1, [r7, #28]
 8003966:	4401      	add	r1, r0
 8003968:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800396c:	4313      	orrs	r3, r2
 800396e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	0151      	lsls	r1, r2, #5
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	440a      	add	r2, r1
 8003986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800398a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800398e:	6113      	str	r3, [r2, #16]
 8003990:	e03a      	b.n	8003a08 <USB_EPStartXfer+0x3e4>
 8003992:	bf00      	nop
 8003994:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	699a      	ldr	r2, [r3, #24]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	4413      	add	r3, r2
 80039a2:	1e5a      	subs	r2, r3, #1
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	8afa      	ldrh	r2, [r7, #22]
 80039b4:	fb03 f202 	mul.w	r2, r3, r2
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	8afb      	ldrh	r3, [r7, #22]
 80039cc:	04d9      	lsls	r1, r3, #19
 80039ce:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <USB_EPStartXfer+0x48c>)
 80039d0:	400b      	ands	r3, r1
 80039d2:	69b9      	ldr	r1, [r7, #24]
 80039d4:	0148      	lsls	r0, r1, #5
 80039d6:	69f9      	ldr	r1, [r7, #28]
 80039d8:	4401      	add	r1, r0
 80039da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039de:	4313      	orrs	r3, r2
 80039e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f8:	69b9      	ldr	r1, [r7, #24]
 80039fa:	0148      	lsls	r0, r1, #5
 80039fc:	69f9      	ldr	r1, [r7, #28]
 80039fe:	4401      	add	r1, r0
 8003a00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a04:	4313      	orrs	r3, r2
 8003a06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d10d      	bne.n	8003a2a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	6919      	ldr	r1, [r3, #16]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	015a      	lsls	r2, r3, #5
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a26:	460a      	mov	r2, r1
 8003a28:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	791b      	ldrb	r3, [r3, #4]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d128      	bne.n	8003a84 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d110      	bne.n	8003a64 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e00f      	b.n	8003a84 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a82:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	0151      	lsls	r1, r2, #5
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	440a      	add	r2, r1
 8003a9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003aa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	1ff80000 	.word	0x1ff80000

08003ab4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	785b      	ldrb	r3, [r3, #1]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	f040 80ce 	bne.w	8003c72 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d132      	bne.n	8003b44 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	0151      	lsls	r1, r2, #5
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	440a      	add	r2, r1
 8003af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003afc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	0151      	lsls	r1, r2, #5
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	440a      	add	r2, r1
 8003b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	0151      	lsls	r1, r2, #5
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	440a      	add	r2, r1
 8003b38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b3c:	0cdb      	lsrs	r3, r3, #19
 8003b3e:	04db      	lsls	r3, r3, #19
 8003b40:	6113      	str	r3, [r2, #16]
 8003b42:	e04e      	b.n	8003be2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	0151      	lsls	r1, r2, #5
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	440a      	add	r2, r1
 8003b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b5e:	0cdb      	lsrs	r3, r3, #19
 8003b60:	04db      	lsls	r3, r3, #19
 8003b62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	0151      	lsls	r1, r2, #5
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	440a      	add	r2, r1
 8003b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b86:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	699a      	ldr	r2, [r3, #24]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d903      	bls.n	8003b9c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	0151      	lsls	r1, r2, #5
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc8:	691a      	ldr	r2, [r3, #16]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd2:	6939      	ldr	r1, [r7, #16]
 8003bd4:	0148      	lsls	r0, r1, #5
 8003bd6:	6979      	ldr	r1, [r7, #20]
 8003bd8:	4401      	add	r1, r0
 8003bda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bde:	4313      	orrs	r3, r2
 8003be0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d11e      	bne.n	8003c26 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	0151      	lsls	r1, r2, #5
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	440a      	add	r2, r1
 8003c1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	e097      	b.n	8003d56 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	0151      	lsls	r1, r2, #5
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	440a      	add	r2, r1
 8003c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c44:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8083 	beq.w	8003d56 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	2101      	movs	r1, #1
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	6979      	ldr	r1, [r7, #20]
 8003c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	634b      	str	r3, [r1, #52]	; 0x34
 8003c70:	e071      	b.n	8003d56 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	0151      	lsls	r1, r2, #5
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	440a      	add	r2, r1
 8003c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c8c:	0cdb      	lsrs	r3, r3, #19
 8003c8e:	04db      	lsls	r3, r3, #19
 8003c90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	0151      	lsls	r1, r2, #5
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	440a      	add	r2, r1
 8003ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cb4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	0151      	lsls	r1, r2, #5
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	440a      	add	r2, r1
 8003ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ce8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	015a      	lsls	r2, r3, #5
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d04:	6939      	ldr	r1, [r7, #16]
 8003d06:	0148      	lsls	r0, r1, #5
 8003d08:	6979      	ldr	r1, [r7, #20]
 8003d0a:	4401      	add	r1, r0
 8003d0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d10:	4313      	orrs	r3, r2
 8003d12:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d10d      	bne.n	8003d36 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	6919      	ldr	r1, [r3, #16]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	460a      	mov	r2, r1
 8003d34:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	0151      	lsls	r1, r2, #5
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	440a      	add	r2, r1
 8003d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d14a      	bne.n	8003e18 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d9a:	f040 8086 	bne.w	8003eaa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	7812      	ldrb	r2, [r2, #0]
 8003db2:	0151      	lsls	r1, r2, #5
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	440a      	add	r2, r1
 8003db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dc0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	7812      	ldrb	r2, [r2, #0]
 8003dd6:	0151      	lsls	r1, r2, #5
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003de0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003de4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3301      	adds	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f242 7210 	movw	r2, #10000	; 0x2710
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d902      	bls.n	8003dfc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	75fb      	strb	r3, [r7, #23]
          break;
 8003dfa:	e056      	b.n	8003eaa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e14:	d0e7      	beq.n	8003de6 <USB_EPStopXfer+0x82>
 8003e16:	e048      	b.n	8003eaa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e30:	d13b      	bne.n	8003eaa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	0151      	lsls	r1, r2, #5
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	440a      	add	r2, r1
 8003e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e54:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	7812      	ldrb	r2, [r2, #0]
 8003e6a:	0151      	lsls	r1, r2, #5
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	440a      	add	r2, r1
 8003e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d902      	bls.n	8003e90 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8003e8e:	e00c      	b.n	8003eaa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ea8:	d0e7      	beq.n	8003e7a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b089      	sub	sp, #36	; 0x24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	71fb      	strb	r3, [r7, #7]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d123      	bne.n	8003f26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ede:	88bb      	ldrh	r3, [r7, #4]
 8003ee0:	3303      	adds	r3, #3
 8003ee2:	089b      	lsrs	r3, r3, #2
 8003ee4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	e018      	b.n	8003f1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003eec:	79fb      	ldrb	r3, [r7, #7]
 8003eee:	031a      	lsls	r2, r3, #12
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ef8:	461a      	mov	r2, r3
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	3301      	adds	r3, #1
 8003f04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	3301      	adds	r3, #1
 8003f16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	61bb      	str	r3, [r7, #24]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d3e2      	bcc.n	8003eec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3724      	adds	r7, #36	; 0x24
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b08b      	sub	sp, #44	; 0x2c
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f4a:	88fb      	ldrh	r3, [r7, #6]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	f003 0303 	and.w	r3, r3, #3
 8003f58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	623b      	str	r3, [r7, #32]
 8003f5e:	e014      	b.n	8003f8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	3301      	adds	r3, #1
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	3301      	adds	r3, #1
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	3301      	adds	r3, #1
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	3301      	adds	r3, #1
 8003f88:	623b      	str	r3, [r7, #32]
 8003f8a:	6a3a      	ldr	r2, [r7, #32]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d3e6      	bcc.n	8003f60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f92:	8bfb      	ldrh	r3, [r7, #30]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01e      	beq.n	8003fd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f107 0310 	add.w	r3, r7, #16
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	701a      	strb	r2, [r3, #0]
      i++;
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003fca:	8bfb      	ldrh	r3, [r7, #30]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fd0:	8bfb      	ldrh	r3, [r7, #30]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1ea      	bne.n	8003fac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	372c      	adds	r7, #44	; 0x2c
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d12c      	bne.n	800405a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	db12      	blt.n	8004038 <USB_EPSetStall+0x54>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00f      	beq.n	8004038 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	0151      	lsls	r1, r2, #5
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	440a      	add	r2, r1
 800402e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004032:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004036:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	0151      	lsls	r1, r2, #5
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	440a      	add	r2, r1
 800404e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	e02b      	b.n	80040b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	015a      	lsls	r2, r3, #5
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	db12      	blt.n	8004092 <USB_EPSetStall+0xae>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00f      	beq.n	8004092 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	0151      	lsls	r1, r2, #5
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	440a      	add	r2, r1
 8004088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800408c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004090:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	0151      	lsls	r1, r2, #5
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	440a      	add	r2, r1
 80040a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d128      	bne.n	800412e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	0151      	lsls	r1, r2, #5
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	440a      	add	r2, r1
 80040f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	791b      	ldrb	r3, [r3, #4]
 8004100:	2b03      	cmp	r3, #3
 8004102:	d003      	beq.n	800410c <USB_EPClearStall+0x4c>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	791b      	ldrb	r3, [r3, #4]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d138      	bne.n	800417e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	440a      	add	r2, r1
 8004122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	e027      	b.n	800417e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	0151      	lsls	r1, r2, #5
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	440a      	add	r2, r1
 8004144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004148:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800414c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	791b      	ldrb	r3, [r3, #4]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d003      	beq.n	800415e <USB_EPClearStall+0x9e>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	791b      	ldrb	r3, [r3, #4]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d10f      	bne.n	800417e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	440a      	add	r2, r1
 8004174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041ae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80041c0:	68f9      	ldr	r1, [r7, #12]
 80041c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c6:	4313      	orrs	r3, r2
 80041c8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041f2:	f023 0303 	bic.w	r3, r3, #3
 80041f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004206:	f023 0302 	bic.w	r3, r3, #2
 800420a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004234:	f023 0303 	bic.w	r3, r3, #3
 8004238:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004248:	f043 0302 	orr.w	r3, r3, #2
 800424c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	4013      	ands	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004274:	68fb      	ldr	r3, [r7, #12]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	69db      	ldr	r3, [r3, #28]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	0c1b      	lsrs	r3, r3, #16
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	4013      	ands	r3, r2
 80042d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	b29b      	uxth	r3, r3
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
 80042f2:	460b      	mov	r3, r1
 80042f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	4013      	ands	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004318:	68bb      	ldr	r3, [r7, #8]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004326:	b480      	push	{r7}
 8004328:	b087      	sub	sp, #28
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004348:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	f003 030f 	and.w	r3, r3, #15
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	fa22 f303 	lsr.w	r3, r2, r3
 8004356:	01db      	lsls	r3, r3, #7
 8004358:	b2db      	uxtb	r3, r3
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4013      	ands	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004374:	68bb      	ldr	r3, [r7, #8]
}
 8004376:	4618      	mov	r0, r3
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f003 0301 	and.w	r3, r3, #1
}
 8004392:	4618      	mov	r0, r3
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043bc:	f023 0307 	bic.w	r3, r3, #7
 80043c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	460b      	mov	r3, r1
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	333c      	adds	r3, #60	; 0x3c
 80043fa:	3304      	adds	r3, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4a26      	ldr	r2, [pc, #152]	; (800449c <USB_EP0_OutStart+0xb8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d90a      	bls.n	800441e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004418:	d101      	bne.n	800441e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800441a:	2300      	movs	r3, #0
 800441c:	e037      	b.n	800448e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004424:	461a      	mov	r2, r3
 8004426:	2300      	movs	r3, #0
 8004428:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004438:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800443c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800444c:	f043 0318 	orr.w	r3, r3, #24
 8004450:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004460:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004464:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004466:	7afb      	ldrb	r3, [r7, #11]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d10f      	bne.n	800448c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004472:	461a      	mov	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004486:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800448a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	4f54300a 	.word	0x4f54300a

080044a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4a13      	ldr	r2, [pc, #76]	; (8004504 <USB_CoreReset+0x64>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e01b      	b.n	80044f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	daf2      	bge.n	80044ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f043 0201 	orr.w	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3301      	adds	r3, #1
 80044da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <USB_CoreReset+0x64>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d901      	bls.n	80044e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e006      	b.n	80044f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d0f0      	beq.n	80044d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	00030d40 	.word	0x00030d40

08004508 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004514:	2010      	movs	r0, #16
 8004516:	f002 f91b 	bl	8006750 <USBD_static_malloc>
 800451a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	32b0      	adds	r2, #176	; 0xb0
 800452c:	2100      	movs	r1, #0
 800452e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004532:	2302      	movs	r3, #2
 8004534:	e048      	b.n	80045c8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	32b0      	adds	r2, #176	; 0xb0
 8004540:	68f9      	ldr	r1, [r7, #12]
 8004542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	32b0      	adds	r2, #176	; 0xb0
 8004550:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	7c1b      	ldrb	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10d      	bne.n	800457e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004562:	4b1b      	ldr	r3, [pc, #108]	; (80045d0 <USBD_HID_Init+0xc8>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	f003 020f 	and.w	r2, r3, #15
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	3326      	adds	r3, #38	; 0x26
 8004578:	2207      	movs	r2, #7
 800457a:	801a      	strh	r2, [r3, #0]
 800457c:	e00c      	b.n	8004598 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800457e:	4b14      	ldr	r3, [pc, #80]	; (80045d0 <USBD_HID_Init+0xc8>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	f003 020f 	and.w	r2, r3, #15
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	3326      	adds	r3, #38	; 0x26
 8004594:	220a      	movs	r2, #10
 8004596:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004598:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <USBD_HID_Init+0xc8>)
 800459a:	7819      	ldrb	r1, [r3, #0]
 800459c:	2304      	movs	r3, #4
 800459e:	2203      	movs	r2, #3
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f001 ffc4 	bl	800652e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80045a6:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <USBD_HID_Init+0xc8>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	f003 020f 	and.w	r2, r3, #15
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	3324      	adds	r3, #36	; 0x24
 80045bc:	2201      	movs	r2, #1
 80045be:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	200000bf 	.word	0x200000bf

080045d4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	460b      	mov	r3, r1
 80045de:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80045e0:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <USBD_HID_DeInit+0x8c>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 ffc7 	bl	800657a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80045ec:	4b1c      	ldr	r3, [pc, #112]	; (8004660 <USBD_HID_DeInit+0x8c>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	3324      	adds	r3, #36	; 0x24
 8004602:	2200      	movs	r2, #0
 8004604:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004606:	4b16      	ldr	r3, [pc, #88]	; (8004660 <USBD_HID_DeInit+0x8c>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	f003 020f 	and.w	r2, r3, #15
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	3326      	adds	r3, #38	; 0x26
 800461c:	2200      	movs	r2, #0
 800461e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	32b0      	adds	r2, #176	; 0xb0
 800462a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d011      	beq.n	8004656 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	32b0      	adds	r2, #176	; 0xb0
 800463c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004640:	4618      	mov	r0, r3
 8004642:	f002 f893 	bl	800676c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	32b0      	adds	r2, #176	; 0xb0
 8004650:	2100      	movs	r1, #0
 8004652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	200000bf 	.word	0x200000bf

08004664 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	32b0      	adds	r2, #176	; 0xb0
 8004678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800467c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800468c:	2303      	movs	r3, #3
 800468e:	e0e8      	b.n	8004862 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004698:	2b00      	cmp	r3, #0
 800469a:	d046      	beq.n	800472a <USBD_HID_Setup+0xc6>
 800469c:	2b20      	cmp	r3, #32
 800469e:	f040 80d8 	bne.w	8004852 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	3b02      	subs	r3, #2
 80046a8:	2b09      	cmp	r3, #9
 80046aa:	d836      	bhi.n	800471a <USBD_HID_Setup+0xb6>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <USBD_HID_Setup+0x50>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	0800470b 	.word	0x0800470b
 80046b8:	080046eb 	.word	0x080046eb
 80046bc:	0800471b 	.word	0x0800471b
 80046c0:	0800471b 	.word	0x0800471b
 80046c4:	0800471b 	.word	0x0800471b
 80046c8:	0800471b 	.word	0x0800471b
 80046cc:	0800471b 	.word	0x0800471b
 80046d0:	0800471b 	.word	0x0800471b
 80046d4:	080046f9 	.word	0x080046f9
 80046d8:	080046dd 	.word	0x080046dd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	885b      	ldrh	r3, [r3, #2]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	601a      	str	r2, [r3, #0]
          break;
 80046e8:	e01e      	b.n	8004728 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	4619      	mov	r1, r3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f001 fbd5 	bl	8005ea0 <USBD_CtlSendData>
          break;
 80046f6:	e017      	b.n	8004728 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	885b      	ldrh	r3, [r3, #2]
 80046fc:	0a1b      	lsrs	r3, r3, #8
 80046fe:	b29b      	uxth	r3, r3
 8004700:	b2db      	uxtb	r3, r3
 8004702:	461a      	mov	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	605a      	str	r2, [r3, #4]
          break;
 8004708:	e00e      	b.n	8004728 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3304      	adds	r3, #4
 800470e:	2201      	movs	r2, #1
 8004710:	4619      	mov	r1, r3
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 fbc4 	bl	8005ea0 <USBD_CtlSendData>
          break;
 8004718:	e006      	b.n	8004728 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800471a:	6839      	ldr	r1, [r7, #0]
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f001 fb4e 	bl	8005dbe <USBD_CtlError>
          ret = USBD_FAIL;
 8004722:	2303      	movs	r3, #3
 8004724:	75fb      	strb	r3, [r7, #23]
          break;
 8004726:	bf00      	nop
      }
      break;
 8004728:	e09a      	b.n	8004860 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	2b0b      	cmp	r3, #11
 8004730:	f200 8086 	bhi.w	8004840 <USBD_HID_Setup+0x1dc>
 8004734:	a201      	add	r2, pc, #4	; (adr r2, 800473c <USBD_HID_Setup+0xd8>)
 8004736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473a:	bf00      	nop
 800473c:	0800476d 	.word	0x0800476d
 8004740:	0800484f 	.word	0x0800484f
 8004744:	08004841 	.word	0x08004841
 8004748:	08004841 	.word	0x08004841
 800474c:	08004841 	.word	0x08004841
 8004750:	08004841 	.word	0x08004841
 8004754:	08004797 	.word	0x08004797
 8004758:	08004841 	.word	0x08004841
 800475c:	08004841 	.word	0x08004841
 8004760:	08004841 	.word	0x08004841
 8004764:	080047ef 	.word	0x080047ef
 8004768:	08004819 	.word	0x08004819
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b03      	cmp	r3, #3
 8004776:	d107      	bne.n	8004788 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004778:	f107 030a 	add.w	r3, r7, #10
 800477c:	2202      	movs	r2, #2
 800477e:	4619      	mov	r1, r3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 fb8d 	bl	8005ea0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004786:	e063      	b.n	8004850 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004788:	6839      	ldr	r1, [r7, #0]
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f001 fb17 	bl	8005dbe <USBD_CtlError>
            ret = USBD_FAIL;
 8004790:	2303      	movs	r3, #3
 8004792:	75fb      	strb	r3, [r7, #23]
          break;
 8004794:	e05c      	b.n	8004850 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	885b      	ldrh	r3, [r3, #2]
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b22      	cmp	r3, #34	; 0x22
 80047a0:	d108      	bne.n	80047b4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	88db      	ldrh	r3, [r3, #6]
 80047a6:	2b3f      	cmp	r3, #63	; 0x3f
 80047a8:	bf28      	it	cs
 80047aa:	233f      	movcs	r3, #63	; 0x3f
 80047ac:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80047ae:	4b2f      	ldr	r3, [pc, #188]	; (800486c <USBD_HID_Setup+0x208>)
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	e015      	b.n	80047e0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	885b      	ldrh	r3, [r3, #2]
 80047b8:	0a1b      	lsrs	r3, r3, #8
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b21      	cmp	r3, #33	; 0x21
 80047be:	d108      	bne.n	80047d2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <USBD_HID_Setup+0x20c>)
 80047c2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	88db      	ldrh	r3, [r3, #6]
 80047c8:	2b09      	cmp	r3, #9
 80047ca:	bf28      	it	cs
 80047cc:	2309      	movcs	r3, #9
 80047ce:	82bb      	strh	r3, [r7, #20]
 80047d0:	e006      	b.n	80047e0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 faf2 	bl	8005dbe <USBD_CtlError>
            ret = USBD_FAIL;
 80047da:	2303      	movs	r3, #3
 80047dc:	75fb      	strb	r3, [r7, #23]
            break;
 80047de:	e037      	b.n	8004850 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80047e0:	8abb      	ldrh	r3, [r7, #20]
 80047e2:	461a      	mov	r2, r3
 80047e4:	6939      	ldr	r1, [r7, #16]
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f001 fb5a 	bl	8005ea0 <USBD_CtlSendData>
          break;
 80047ec:	e030      	b.n	8004850 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d107      	bne.n	800480a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3308      	adds	r3, #8
 80047fe:	2201      	movs	r2, #1
 8004800:	4619      	mov	r1, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f001 fb4c 	bl	8005ea0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004808:	e022      	b.n	8004850 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800480a:	6839      	ldr	r1, [r7, #0]
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f001 fad6 	bl	8005dbe <USBD_CtlError>
            ret = USBD_FAIL;
 8004812:	2303      	movs	r3, #3
 8004814:	75fb      	strb	r3, [r7, #23]
          break;
 8004816:	e01b      	b.n	8004850 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b03      	cmp	r3, #3
 8004822:	d106      	bne.n	8004832 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	885b      	ldrh	r3, [r3, #2]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	461a      	mov	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004830:	e00e      	b.n	8004850 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004832:	6839      	ldr	r1, [r7, #0]
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f001 fac2 	bl	8005dbe <USBD_CtlError>
            ret = USBD_FAIL;
 800483a:	2303      	movs	r3, #3
 800483c:	75fb      	strb	r3, [r7, #23]
          break;
 800483e:	e007      	b.n	8004850 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004840:	6839      	ldr	r1, [r7, #0]
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f001 fabb 	bl	8005dbe <USBD_CtlError>
          ret = USBD_FAIL;
 8004848:	2303      	movs	r3, #3
 800484a:	75fb      	strb	r3, [r7, #23]
          break;
 800484c:	e000      	b.n	8004850 <USBD_HID_Setup+0x1ec>
          break;
 800484e:	bf00      	nop
      }
      break;
 8004850:	e006      	b.n	8004860 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8004852:	6839      	ldr	r1, [r7, #0]
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f001 fab2 	bl	8005dbe <USBD_CtlError>
      ret = USBD_FAIL;
 800485a:	2303      	movs	r3, #3
 800485c:	75fb      	strb	r3, [r7, #23]
      break;
 800485e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004860:	7dfb      	ldrb	r3, [r7, #23]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000080 	.word	0x20000080
 8004870:	20000068 	.word	0x20000068

08004874 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	4613      	mov	r3, r2
 8004880:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	32b0      	adds	r2, #176	; 0xb0
 800488c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004890:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004898:	2303      	movs	r3, #3
 800489a:	e014      	b.n	80048c6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d10d      	bne.n	80048c4 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	7b1b      	ldrb	r3, [r3, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d109      	bne.n	80048c4 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2201      	movs	r2, #1
 80048b4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80048b6:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <USBD_HID_SendReport+0x5c>)
 80048b8:	7819      	ldrb	r1, [r3, #0]
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f001 ff03 	bl	80066ca <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	200000bf 	.word	0x200000bf

080048d4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80048dc:	2181      	movs	r1, #129	; 0x81
 80048de:	4809      	ldr	r0, [pc, #36]	; (8004904 <USBD_HID_GetFSCfgDesc+0x30>)
 80048e0:	f000 fc35 	bl	800514e <USBD_GetEpDesc>
 80048e4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	220a      	movs	r2, #10
 80048f0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2222      	movs	r2, #34	; 0x22
 80048f6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80048f8:	4b02      	ldr	r3, [pc, #8]	; (8004904 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20000044 	.word	0x20000044

08004908 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8004910:	2181      	movs	r1, #129	; 0x81
 8004912:	4809      	ldr	r0, [pc, #36]	; (8004938 <USBD_HID_GetHSCfgDesc+0x30>)
 8004914:	f000 fc1b 	bl	800514e <USBD_GetEpDesc>
 8004918:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2207      	movs	r2, #7
 8004924:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2222      	movs	r2, #34	; 0x22
 800492a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800492c:	4b02      	ldr	r3, [pc, #8]	; (8004938 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000044 	.word	0x20000044

0800493c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8004944:	2181      	movs	r1, #129	; 0x81
 8004946:	4809      	ldr	r0, [pc, #36]	; (800496c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8004948:	f000 fc01 	bl	800514e <USBD_GetEpDesc>
 800494c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	220a      	movs	r2, #10
 8004958:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2222      	movs	r2, #34	; 0x22
 800495e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004960:	4b02      	ldr	r3, [pc, #8]	; (800496c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000044 	.word	0x20000044

08004970 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	32b0      	adds	r2, #176	; 0xb0
 8004986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498a:	2200      	movs	r2, #0
 800498c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	220a      	movs	r2, #10
 80049a8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80049aa:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	20000074 	.word	0x20000074

080049bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	4613      	mov	r3, r2
 80049c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e01f      	b.n	8004a14 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	79fa      	ldrb	r2, [r7, #7]
 8004a06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f001 fd29 	bl	8006460 <USBD_LL_Init>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e025      	b.n	8004a80 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	32ae      	adds	r2, #174	; 0xae
 8004a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00f      	beq.n	8004a70 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	32ae      	adds	r2, #174	; 0xae
 8004a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	f107 020e 	add.w	r2, r7, #14
 8004a64:	4610      	mov	r0, r2
 8004a66:	4798      	blx	r3
 8004a68:	4602      	mov	r2, r0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f001 fd31 	bl	80064f8 <USBD_LL_Start>
 8004a96:	4603      	mov	r3, r0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004aa8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	78fa      	ldrb	r2, [r7, #3]
 8004ada:	4611      	mov	r1, r2
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	4798      	blx	r3
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	460b      	mov	r3, r1
 8004af8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	78fa      	ldrb	r2, [r7, #3]
 8004b08:	4611      	mov	r1, r2
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	4798      	blx	r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004b14:	2303      	movs	r3, #3
 8004b16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b32:	6839      	ldr	r1, [r7, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 f908 	bl	8005d4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004b48:	461a      	mov	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d01a      	beq.n	8004b94 <USBD_LL_SetupStage+0x72>
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d822      	bhi.n	8004ba8 <USBD_LL_SetupStage+0x86>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <USBD_LL_SetupStage+0x4a>
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d00a      	beq.n	8004b80 <USBD_LL_SetupStage+0x5e>
 8004b6a:	e01d      	b.n	8004ba8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fb5f 	bl	8005238 <USBD_StdDevReq>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7e:	e020      	b.n	8004bc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fbc7 	bl	800531c <USBD_StdItfReq>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	73fb      	strb	r3, [r7, #15]
      break;
 8004b92:	e016      	b.n	8004bc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fc29 	bl	80053f4 <USBD_StdEPReq>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ba6:	e00c      	b.n	8004bc2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004bae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f001 fcfe 	bl	80065b8 <USBD_LL_StallEP>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc0:	bf00      	nop
  }

  return ret;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004bde:	7afb      	ldrb	r3, [r7, #11]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d16e      	bne.n	8004cc2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004bea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	f040 8098 	bne.w	8004d28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d913      	bls.n	8004c2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	1ad2      	subs	r2, r2, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	bf28      	it	cs
 8004c1e:	4613      	movcs	r3, r2
 8004c20:	461a      	mov	r2, r3
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f001 f967 	bl	8005ef8 <USBD_CtlContinueRx>
 8004c2a:	e07d      	b.n	8004d28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d014      	beq.n	8004c64 <USBD_LL_DataOutStage+0x98>
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d81d      	bhi.n	8004c7a <USBD_LL_DataOutStage+0xae>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <USBD_LL_DataOutStage+0x7c>
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d003      	beq.n	8004c4e <USBD_LL_DataOutStage+0x82>
 8004c46:	e018      	b.n	8004c7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	75bb      	strb	r3, [r7, #22]
            break;
 8004c4c:	e018      	b.n	8004c80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	4619      	mov	r1, r3
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa5e 	bl	800511a <USBD_CoreFindIF>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	75bb      	strb	r3, [r7, #22]
            break;
 8004c62:	e00d      	b.n	8004c80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fa60 	bl	8005134 <USBD_CoreFindEP>
 8004c74:	4603      	mov	r3, r0
 8004c76:	75bb      	strb	r3, [r7, #22]
            break;
 8004c78:	e002      	b.n	8004c80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75bb      	strb	r3, [r7, #22]
            break;
 8004c7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004c80:	7dbb      	ldrb	r3, [r7, #22]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d119      	bne.n	8004cba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b03      	cmp	r3, #3
 8004c90:	d113      	bne.n	8004cba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004c92:	7dba      	ldrb	r2, [r7, #22]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	32ae      	adds	r2, #174	; 0xae
 8004c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00b      	beq.n	8004cba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004ca2:	7dba      	ldrb	r2, [r7, #22]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004caa:	7dba      	ldrb	r2, [r7, #22]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	32ae      	adds	r2, #174	; 0xae
 8004cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f001 f92d 	bl	8005f1a <USBD_CtlSendStatus>
 8004cc0:	e032      	b.n	8004d28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004cc2:	7afb      	ldrb	r3, [r7, #11]
 8004cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	4619      	mov	r1, r3
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f000 fa31 	bl	8005134 <USBD_CoreFindEP>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004cd6:	7dbb      	ldrb	r3, [r7, #22]
 8004cd8:	2bff      	cmp	r3, #255	; 0xff
 8004cda:	d025      	beq.n	8004d28 <USBD_LL_DataOutStage+0x15c>
 8004cdc:	7dbb      	ldrb	r3, [r7, #22]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d122      	bne.n	8004d28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b03      	cmp	r3, #3
 8004cec:	d117      	bne.n	8004d1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004cee:	7dba      	ldrb	r2, [r7, #22]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	32ae      	adds	r2, #174	; 0xae
 8004cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00f      	beq.n	8004d1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004cfe:	7dba      	ldrb	r2, [r7, #22]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004d06:	7dba      	ldrb	r2, [r7, #22]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	32ae      	adds	r2, #174	; 0xae
 8004d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	7afa      	ldrb	r2, [r7, #11]
 8004d14:	4611      	mov	r1, r2
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	4798      	blx	r3
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	e000      	b.n	8004d2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	607a      	str	r2, [r7, #4]
 8004d3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004d40:	7afb      	ldrb	r3, [r7, #11]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d16f      	bne.n	8004e26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3314      	adds	r3, #20
 8004d4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d15a      	bne.n	8004e0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d914      	bls.n	8004d8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	689a      	ldr	r2, [r3, #8]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	1ad2      	subs	r2, r2, r3
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	461a      	mov	r2, r3
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f001 f8ac 	bl	8005ed6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2200      	movs	r2, #0
 8004d82:	2100      	movs	r1, #0
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f001 fcc1 	bl	800670c <USBD_LL_PrepareReceive>
 8004d8a:	e03f      	b.n	8004e0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d11c      	bne.n	8004dd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d316      	bcc.n	8004dd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d20f      	bcs.n	8004dd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004db2:	2200      	movs	r2, #0
 8004db4:	2100      	movs	r1, #0
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f001 f88d 	bl	8005ed6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2100      	movs	r1, #0
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f001 fc9e 	bl	800670c <USBD_LL_PrepareReceive>
 8004dd0:	e01c      	b.n	8004e0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d10f      	bne.n	8004dfe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004dfe:	2180      	movs	r1, #128	; 0x80
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f001 fbd9 	bl	80065b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f001 f89a 	bl	8005f40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d03a      	beq.n	8004e8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7ff fe42 	bl	8004aa0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004e24:	e032      	b.n	8004e8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004e26:	7afb      	ldrb	r3, [r7, #11]
 8004e28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	4619      	mov	r1, r3
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f97f 	bl	8005134 <USBD_CoreFindEP>
 8004e36:	4603      	mov	r3, r0
 8004e38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
 8004e3c:	2bff      	cmp	r3, #255	; 0xff
 8004e3e:	d025      	beq.n	8004e8c <USBD_LL_DataInStage+0x15a>
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d122      	bne.n	8004e8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d11c      	bne.n	8004e8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004e52:	7dfa      	ldrb	r2, [r7, #23]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	32ae      	adds	r2, #174	; 0xae
 8004e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d014      	beq.n	8004e8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004e62:	7dfa      	ldrb	r2, [r7, #23]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004e6a:	7dfa      	ldrb	r2, [r7, #23]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	32ae      	adds	r2, #174	; 0xae
 8004e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	7afa      	ldrb	r2, [r7, #11]
 8004e78:	4611      	mov	r1, r2
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	4798      	blx	r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004e82:	7dbb      	ldrb	r3, [r7, #22]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d001      	beq.n	8004e8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004e88:	7dbb      	ldrb	r3, [r7, #22]
 8004e8a:	e000      	b.n	8004e8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d014      	beq.n	8004efc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00e      	beq.n	8004efc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6852      	ldr	r2, [r2, #4]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	4611      	mov	r1, r2
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	4798      	blx	r3
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004efc:	2340      	movs	r3, #64	; 0x40
 8004efe:	2200      	movs	r2, #0
 8004f00:	2100      	movs	r1, #0
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f001 fb13 	bl	800652e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2240      	movs	r2, #64	; 0x40
 8004f14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f18:	2340      	movs	r3, #64	; 0x40
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2180      	movs	r1, #128	; 0x80
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f001 fb05 	bl	800652e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2240      	movs	r2, #64	; 0x40
 8004f2e:	621a      	str	r2, [r3, #32]

  return ret;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	460b      	mov	r3, r1
 8004f44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2204      	movs	r2, #4
 8004f74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d106      	bne.n	8004fa8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d110      	bne.n	8004fec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00b      	beq.n	8004fec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	460b      	mov	r3, r1
 8005000:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	32ae      	adds	r2, #174	; 0xae
 800500c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005014:	2303      	movs	r3, #3
 8005016:	e01c      	b.n	8005052 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b03      	cmp	r3, #3
 8005022:	d115      	bne.n	8005050 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	32ae      	adds	r2, #174	; 0xae
 800502e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	32ae      	adds	r2, #174	; 0xae
 8005042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	78fa      	ldrb	r2, [r7, #3]
 800504a:	4611      	mov	r1, r2
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3708      	adds	r7, #8
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	32ae      	adds	r2, #174	; 0xae
 8005070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005078:	2303      	movs	r3, #3
 800507a:	e01c      	b.n	80050b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b03      	cmp	r3, #3
 8005086:	d115      	bne.n	80050b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	32ae      	adds	r2, #174	; 0xae
 8005092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00b      	beq.n	80050b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	32ae      	adds	r2, #174	; 0xae
 80050a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	4611      	mov	r1, r2
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00e      	beq.n	8005110 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6852      	ldr	r2, [r2, #4]
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	4611      	mov	r1, r2
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	4798      	blx	r3
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800510c:	2303      	movs	r3, #3
 800510e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	460b      	mov	r3, r1
 8005124:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005126:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005140:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b086      	sub	sp, #24
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	460b      	mov	r3, r1
 8005158:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	885b      	ldrh	r3, [r3, #2]
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	b29b      	uxth	r3, r3
 8005172:	429a      	cmp	r2, r3
 8005174:	d920      	bls.n	80051b8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800517e:	e013      	b.n	80051a8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005180:	f107 030a 	add.w	r3, r7, #10
 8005184:	4619      	mov	r1, r3
 8005186:	6978      	ldr	r0, [r7, #20]
 8005188:	f000 f81b 	bl	80051c2 <USBD_GetNextDesc>
 800518c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	785b      	ldrb	r3, [r3, #1]
 8005192:	2b05      	cmp	r3, #5
 8005194:	d108      	bne.n	80051a8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	789b      	ldrb	r3, [r3, #2]
 800519e:	78fa      	ldrb	r2, [r7, #3]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d008      	beq.n	80051b6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	885b      	ldrh	r3, [r3, #2]
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	897b      	ldrh	r3, [r7, #10]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d8e5      	bhi.n	8005180 <USBD_GetEpDesc+0x32>
 80051b4:	e000      	b.n	80051b8 <USBD_GetEpDesc+0x6a>
          break;
 80051b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80051b8:	693b      	ldr	r3, [r7, #16]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	881a      	ldrh	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4413      	add	r3, r2
 80051dc:	b29a      	uxth	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4413      	add	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80051ee:	68fb      	ldr	r3, [r7, #12]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b087      	sub	sp, #28
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	3301      	adds	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800521a:	8a3b      	ldrh	r3, [r7, #16]
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	b21a      	sxth	r2, r3
 8005220:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005224:	4313      	orrs	r3, r2
 8005226:	b21b      	sxth	r3, r3
 8005228:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800522a:	89fb      	ldrh	r3, [r7, #14]
}
 800522c:	4618      	mov	r0, r3
 800522e:	371c      	adds	r7, #28
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	d005      	beq.n	800525e <USBD_StdDevReq+0x26>
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d857      	bhi.n	8005306 <USBD_StdDevReq+0xce>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00f      	beq.n	800527a <USBD_StdDevReq+0x42>
 800525a:	2b20      	cmp	r3, #32
 800525c:	d153      	bne.n	8005306 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	32ae      	adds	r2, #174	; 0xae
 8005268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	6839      	ldr	r1, [r7, #0]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4798      	blx	r3
 8005274:	4603      	mov	r3, r0
 8005276:	73fb      	strb	r3, [r7, #15]
      break;
 8005278:	e04a      	b.n	8005310 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	785b      	ldrb	r3, [r3, #1]
 800527e:	2b09      	cmp	r3, #9
 8005280:	d83b      	bhi.n	80052fa <USBD_StdDevReq+0xc2>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <USBD_StdDevReq+0x50>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052dd 	.word	0x080052dd
 800528c:	080052f1 	.word	0x080052f1
 8005290:	080052fb 	.word	0x080052fb
 8005294:	080052e7 	.word	0x080052e7
 8005298:	080052fb 	.word	0x080052fb
 800529c:	080052bb 	.word	0x080052bb
 80052a0:	080052b1 	.word	0x080052b1
 80052a4:	080052fb 	.word	0x080052fb
 80052a8:	080052d3 	.word	0x080052d3
 80052ac:	080052c5 	.word	0x080052c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa3c 	bl	8005730 <USBD_GetDescriptor>
          break;
 80052b8:	e024      	b.n	8005304 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80052ba:	6839      	ldr	r1, [r7, #0]
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fba1 	bl	8005a04 <USBD_SetAddress>
          break;
 80052c2:	e01f      	b.n	8005304 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80052c4:	6839      	ldr	r1, [r7, #0]
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fbe0 	bl	8005a8c <USBD_SetConfig>
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]
          break;
 80052d0:	e018      	b.n	8005304 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80052d2:	6839      	ldr	r1, [r7, #0]
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fc83 	bl	8005be0 <USBD_GetConfig>
          break;
 80052da:	e013      	b.n	8005304 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fcb4 	bl	8005c4c <USBD_GetStatus>
          break;
 80052e4:	e00e      	b.n	8005304 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80052e6:	6839      	ldr	r1, [r7, #0]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fce3 	bl	8005cb4 <USBD_SetFeature>
          break;
 80052ee:	e009      	b.n	8005304 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fd07 	bl	8005d06 <USBD_ClrFeature>
          break;
 80052f8:	e004      	b.n	8005304 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fd5e 	bl	8005dbe <USBD_CtlError>
          break;
 8005302:	bf00      	nop
      }
      break;
 8005304:	e004      	b.n	8005310 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005306:	6839      	ldr	r1, [r7, #0]
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 fd58 	bl	8005dbe <USBD_CtlError>
      break;
 800530e:	bf00      	nop
  }

  return ret;
 8005310:	7bfb      	ldrb	r3, [r7, #15]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop

0800531c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005332:	2b40      	cmp	r3, #64	; 0x40
 8005334:	d005      	beq.n	8005342 <USBD_StdItfReq+0x26>
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d852      	bhi.n	80053e0 <USBD_StdItfReq+0xc4>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <USBD_StdItfReq+0x26>
 800533e:	2b20      	cmp	r3, #32
 8005340:	d14e      	bne.n	80053e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005348:	b2db      	uxtb	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	2b02      	cmp	r3, #2
 800534e:	d840      	bhi.n	80053d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	889b      	ldrh	r3, [r3, #4]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b01      	cmp	r3, #1
 8005358:	d836      	bhi.n	80053c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	889b      	ldrh	r3, [r3, #4]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	4619      	mov	r1, r3
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff fed9 	bl	800511a <USBD_CoreFindIF>
 8005368:	4603      	mov	r3, r0
 800536a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800536c:	7bbb      	ldrb	r3, [r7, #14]
 800536e:	2bff      	cmp	r3, #255	; 0xff
 8005370:	d01d      	beq.n	80053ae <USBD_StdItfReq+0x92>
 8005372:	7bbb      	ldrb	r3, [r7, #14]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d11a      	bne.n	80053ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005378:	7bba      	ldrb	r2, [r7, #14]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	32ae      	adds	r2, #174	; 0xae
 800537e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00f      	beq.n	80053a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005388:	7bba      	ldrb	r2, [r7, #14]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005390:	7bba      	ldrb	r2, [r7, #14]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	32ae      	adds	r2, #174	; 0xae
 8005396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
 80053a2:	4603      	mov	r3, r0
 80053a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80053a6:	e004      	b.n	80053b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80053a8:	2303      	movs	r3, #3
 80053aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80053ac:	e001      	b.n	80053b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80053ae:	2303      	movs	r3, #3
 80053b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	88db      	ldrh	r3, [r3, #6]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d110      	bne.n	80053dc <USBD_StdItfReq+0xc0>
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10d      	bne.n	80053dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fdaa 	bl	8005f1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80053c6:	e009      	b.n	80053dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80053c8:	6839      	ldr	r1, [r7, #0]
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fcf7 	bl	8005dbe <USBD_CtlError>
          break;
 80053d0:	e004      	b.n	80053dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fcf2 	bl	8005dbe <USBD_CtlError>
          break;
 80053da:	e000      	b.n	80053de <USBD_StdItfReq+0xc2>
          break;
 80053dc:	bf00      	nop
      }
      break;
 80053de:	e004      	b.n	80053ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fceb 	bl	8005dbe <USBD_CtlError>
      break;
 80053e8:	bf00      	nop
  }

  return ret;
 80053ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	889b      	ldrh	r3, [r3, #4]
 8005406:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	d007      	beq.n	8005424 <USBD_StdEPReq+0x30>
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	f200 817f 	bhi.w	8005718 <USBD_StdEPReq+0x324>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d02a      	beq.n	8005474 <USBD_StdEPReq+0x80>
 800541e:	2b20      	cmp	r3, #32
 8005420:	f040 817a 	bne.w	8005718 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005424:	7bbb      	ldrb	r3, [r7, #14]
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff fe83 	bl	8005134 <USBD_CoreFindEP>
 800542e:	4603      	mov	r3, r0
 8005430:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005432:	7b7b      	ldrb	r3, [r7, #13]
 8005434:	2bff      	cmp	r3, #255	; 0xff
 8005436:	f000 8174 	beq.w	8005722 <USBD_StdEPReq+0x32e>
 800543a:	7b7b      	ldrb	r3, [r7, #13]
 800543c:	2b00      	cmp	r3, #0
 800543e:	f040 8170 	bne.w	8005722 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005442:	7b7a      	ldrb	r2, [r7, #13]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800544a:	7b7a      	ldrb	r2, [r7, #13]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	32ae      	adds	r2, #174	; 0xae
 8005450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8163 	beq.w	8005722 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800545c:	7b7a      	ldrb	r2, [r7, #13]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	32ae      	adds	r2, #174	; 0xae
 8005462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
 800546e:	4603      	mov	r3, r0
 8005470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005472:	e156      	b.n	8005722 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	785b      	ldrb	r3, [r3, #1]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d008      	beq.n	800548e <USBD_StdEPReq+0x9a>
 800547c:	2b03      	cmp	r3, #3
 800547e:	f300 8145 	bgt.w	800570c <USBD_StdEPReq+0x318>
 8005482:	2b00      	cmp	r3, #0
 8005484:	f000 809b 	beq.w	80055be <USBD_StdEPReq+0x1ca>
 8005488:	2b01      	cmp	r3, #1
 800548a:	d03c      	beq.n	8005506 <USBD_StdEPReq+0x112>
 800548c:	e13e      	b.n	800570c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d002      	beq.n	80054a0 <USBD_StdEPReq+0xac>
 800549a:	2b03      	cmp	r3, #3
 800549c:	d016      	beq.n	80054cc <USBD_StdEPReq+0xd8>
 800549e:	e02c      	b.n	80054fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054a0:	7bbb      	ldrb	r3, [r7, #14]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <USBD_StdEPReq+0xce>
 80054a6:	7bbb      	ldrb	r3, [r7, #14]
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d00a      	beq.n	80054c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80054ac:	7bbb      	ldrb	r3, [r7, #14]
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f001 f881 	bl	80065b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80054b6:	2180      	movs	r1, #128	; 0x80
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f001 f87d 	bl	80065b8 <USBD_LL_StallEP>
 80054be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80054c0:	e020      	b.n	8005504 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80054c2:	6839      	ldr	r1, [r7, #0]
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fc7a 	bl	8005dbe <USBD_CtlError>
              break;
 80054ca:	e01b      	b.n	8005504 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	885b      	ldrh	r3, [r3, #2]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10e      	bne.n	80054f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80054d4:	7bbb      	ldrb	r3, [r7, #14]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <USBD_StdEPReq+0xfe>
 80054da:	7bbb      	ldrb	r3, [r7, #14]
 80054dc:	2b80      	cmp	r3, #128	; 0x80
 80054de:	d008      	beq.n	80054f2 <USBD_StdEPReq+0xfe>
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	88db      	ldrh	r3, [r3, #6]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80054e8:	7bbb      	ldrb	r3, [r7, #14]
 80054ea:	4619      	mov	r1, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f001 f863 	bl	80065b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fd11 	bl	8005f1a <USBD_CtlSendStatus>

              break;
 80054f8:	e004      	b.n	8005504 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fc5e 	bl	8005dbe <USBD_CtlError>
              break;
 8005502:	bf00      	nop
          }
          break;
 8005504:	e107      	b.n	8005716 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d002      	beq.n	8005518 <USBD_StdEPReq+0x124>
 8005512:	2b03      	cmp	r3, #3
 8005514:	d016      	beq.n	8005544 <USBD_StdEPReq+0x150>
 8005516:	e04b      	b.n	80055b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005518:	7bbb      	ldrb	r3, [r7, #14]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00d      	beq.n	800553a <USBD_StdEPReq+0x146>
 800551e:	7bbb      	ldrb	r3, [r7, #14]
 8005520:	2b80      	cmp	r3, #128	; 0x80
 8005522:	d00a      	beq.n	800553a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005524:	7bbb      	ldrb	r3, [r7, #14]
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 f845 	bl	80065b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800552e:	2180      	movs	r1, #128	; 0x80
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f001 f841 	bl	80065b8 <USBD_LL_StallEP>
 8005536:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005538:	e040      	b.n	80055bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800553a:	6839      	ldr	r1, [r7, #0]
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fc3e 	bl	8005dbe <USBD_CtlError>
              break;
 8005542:	e03b      	b.n	80055bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	885b      	ldrh	r3, [r3, #2]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d136      	bne.n	80055ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800554c:	7bbb      	ldrb	r3, [r7, #14]
 800554e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005552:	2b00      	cmp	r3, #0
 8005554:	d004      	beq.n	8005560 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005556:	7bbb      	ldrb	r3, [r7, #14]
 8005558:	4619      	mov	r1, r3
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f001 f84b 	bl	80065f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fcda 	bl	8005f1a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005566:	7bbb      	ldrb	r3, [r7, #14]
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff fde2 	bl	8005134 <USBD_CoreFindEP>
 8005570:	4603      	mov	r3, r0
 8005572:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005574:	7b7b      	ldrb	r3, [r7, #13]
 8005576:	2bff      	cmp	r3, #255	; 0xff
 8005578:	d01f      	beq.n	80055ba <USBD_StdEPReq+0x1c6>
 800557a:	7b7b      	ldrb	r3, [r7, #13]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d11c      	bne.n	80055ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005580:	7b7a      	ldrb	r2, [r7, #13]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005588:	7b7a      	ldrb	r2, [r7, #13]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	32ae      	adds	r2, #174	; 0xae
 800558e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d010      	beq.n	80055ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005598:	7b7a      	ldrb	r2, [r7, #13]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	32ae      	adds	r2, #174	; 0xae
 800559e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
 80055aa:	4603      	mov	r3, r0
 80055ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80055ae:	e004      	b.n	80055ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80055b0:	6839      	ldr	r1, [r7, #0]
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fc03 	bl	8005dbe <USBD_CtlError>
              break;
 80055b8:	e000      	b.n	80055bc <USBD_StdEPReq+0x1c8>
              break;
 80055ba:	bf00      	nop
          }
          break;
 80055bc:	e0ab      	b.n	8005716 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d002      	beq.n	80055d0 <USBD_StdEPReq+0x1dc>
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d032      	beq.n	8005634 <USBD_StdEPReq+0x240>
 80055ce:	e097      	b.n	8005700 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <USBD_StdEPReq+0x1f2>
 80055d6:	7bbb      	ldrb	r3, [r7, #14]
 80055d8:	2b80      	cmp	r3, #128	; 0x80
 80055da:	d004      	beq.n	80055e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fbed 	bl	8005dbe <USBD_CtlError>
                break;
 80055e4:	e091      	b.n	800570a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	da0b      	bge.n	8005606 <USBD_StdEPReq+0x212>
 80055ee:	7bbb      	ldrb	r3, [r7, #14]
 80055f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	3310      	adds	r3, #16
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4413      	add	r3, r2
 8005602:	3304      	adds	r3, #4
 8005604:	e00b      	b.n	800561e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005606:	7bbb      	ldrb	r3, [r7, #14]
 8005608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	4413      	add	r3, r2
 800561c:	3304      	adds	r3, #4
 800561e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2202      	movs	r2, #2
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fc37 	bl	8005ea0 <USBD_CtlSendData>
              break;
 8005632:	e06a      	b.n	800570a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005638:	2b00      	cmp	r3, #0
 800563a:	da11      	bge.n	8005660 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800563c:	7bbb      	ldrb	r3, [r7, #14]
 800563e:	f003 020f 	and.w	r2, r3, #15
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	4613      	mov	r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	3324      	adds	r3, #36	; 0x24
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d117      	bne.n	8005686 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005656:	6839      	ldr	r1, [r7, #0]
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fbb0 	bl	8005dbe <USBD_CtlError>
                  break;
 800565e:	e054      	b.n	800570a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005660:	7bbb      	ldrb	r3, [r7, #14]
 8005662:	f003 020f 	and.w	r2, r3, #15
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d104      	bne.n	8005686 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fb9d 	bl	8005dbe <USBD_CtlError>
                  break;
 8005684:	e041      	b.n	800570a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800568a:	2b00      	cmp	r3, #0
 800568c:	da0b      	bge.n	80056a6 <USBD_StdEPReq+0x2b2>
 800568e:	7bbb      	ldrb	r3, [r7, #14]
 8005690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	3310      	adds	r3, #16
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	3304      	adds	r3, #4
 80056a4:	e00b      	b.n	80056be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80056a6:	7bbb      	ldrb	r3, [r7, #14]
 80056a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4413      	add	r3, r2
 80056bc:	3304      	adds	r3, #4
 80056be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80056c0:	7bbb      	ldrb	r3, [r7, #14]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <USBD_StdEPReq+0x2d8>
 80056c6:	7bbb      	ldrb	r3, [r7, #14]
 80056c8:	2b80      	cmp	r3, #128	; 0x80
 80056ca:	d103      	bne.n	80056d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e00e      	b.n	80056f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80056d4:	7bbb      	ldrb	r3, [r7, #14]
 80056d6:	4619      	mov	r1, r3
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 ffab 	bl	8006634 <USBD_LL_IsStallEP>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	e002      	b.n	80056f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2202      	movs	r2, #2
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fbd1 	bl	8005ea0 <USBD_CtlSendData>
              break;
 80056fe:	e004      	b.n	800570a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005700:	6839      	ldr	r1, [r7, #0]
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fb5b 	bl	8005dbe <USBD_CtlError>
              break;
 8005708:	bf00      	nop
          }
          break;
 800570a:	e004      	b.n	8005716 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800570c:	6839      	ldr	r1, [r7, #0]
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fb55 	bl	8005dbe <USBD_CtlError>
          break;
 8005714:	bf00      	nop
      }
      break;
 8005716:	e005      	b.n	8005724 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fb4f 	bl	8005dbe <USBD_CtlError>
      break;
 8005720:	e000      	b.n	8005724 <USBD_StdEPReq+0x330>
      break;
 8005722:	bf00      	nop
  }

  return ret;
 8005724:	7bfb      	ldrb	r3, [r7, #15]
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	885b      	ldrh	r3, [r3, #2]
 800574a:	0a1b      	lsrs	r3, r3, #8
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	2b06      	cmp	r3, #6
 8005752:	f200 8128 	bhi.w	80059a6 <USBD_GetDescriptor+0x276>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <USBD_GetDescriptor+0x2c>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005779 	.word	0x08005779
 8005760:	08005791 	.word	0x08005791
 8005764:	080057d1 	.word	0x080057d1
 8005768:	080059a7 	.word	0x080059a7
 800576c:	080059a7 	.word	0x080059a7
 8005770:	08005947 	.word	0x08005947
 8005774:	08005973 	.word	0x08005973
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	7c12      	ldrb	r2, [r2, #16]
 8005784:	f107 0108 	add.w	r1, r7, #8
 8005788:	4610      	mov	r0, r2
 800578a:	4798      	blx	r3
 800578c:	60f8      	str	r0, [r7, #12]
      break;
 800578e:	e112      	b.n	80059b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	7c1b      	ldrb	r3, [r3, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10d      	bne.n	80057b4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	f107 0208 	add.w	r2, r7, #8
 80057a4:	4610      	mov	r0, r2
 80057a6:	4798      	blx	r3
 80057a8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3301      	adds	r3, #1
 80057ae:	2202      	movs	r2, #2
 80057b0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80057b2:	e100      	b.n	80059b6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	f107 0208 	add.w	r2, r7, #8
 80057c0:	4610      	mov	r0, r2
 80057c2:	4798      	blx	r3
 80057c4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	3301      	adds	r3, #1
 80057ca:	2202      	movs	r2, #2
 80057cc:	701a      	strb	r2, [r3, #0]
      break;
 80057ce:	e0f2      	b.n	80059b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	885b      	ldrh	r3, [r3, #2]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b05      	cmp	r3, #5
 80057d8:	f200 80ac 	bhi.w	8005934 <USBD_GetDescriptor+0x204>
 80057dc:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <USBD_GetDescriptor+0xb4>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	080057fd 	.word	0x080057fd
 80057e8:	08005831 	.word	0x08005831
 80057ec:	08005865 	.word	0x08005865
 80057f0:	08005899 	.word	0x08005899
 80057f4:	080058cd 	.word	0x080058cd
 80057f8:	08005901 	.word	0x08005901
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00b      	beq.n	8005820 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	7c12      	ldrb	r2, [r2, #16]
 8005814:	f107 0108 	add.w	r1, r7, #8
 8005818:	4610      	mov	r0, r2
 800581a:	4798      	blx	r3
 800581c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800581e:	e091      	b.n	8005944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 facb 	bl	8005dbe <USBD_CtlError>
            err++;
 8005828:	7afb      	ldrb	r3, [r7, #11]
 800582a:	3301      	adds	r3, #1
 800582c:	72fb      	strb	r3, [r7, #11]
          break;
 800582e:	e089      	b.n	8005944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	7c12      	ldrb	r2, [r2, #16]
 8005848:	f107 0108 	add.w	r1, r7, #8
 800584c:	4610      	mov	r0, r2
 800584e:	4798      	blx	r3
 8005850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005852:	e077      	b.n	8005944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fab1 	bl	8005dbe <USBD_CtlError>
            err++;
 800585c:	7afb      	ldrb	r3, [r7, #11]
 800585e:	3301      	adds	r3, #1
 8005860:	72fb      	strb	r3, [r7, #11]
          break;
 8005862:	e06f      	b.n	8005944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00b      	beq.n	8005888 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	7c12      	ldrb	r2, [r2, #16]
 800587c:	f107 0108 	add.w	r1, r7, #8
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
 8005884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005886:	e05d      	b.n	8005944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa97 	bl	8005dbe <USBD_CtlError>
            err++;
 8005890:	7afb      	ldrb	r3, [r7, #11]
 8005892:	3301      	adds	r3, #1
 8005894:	72fb      	strb	r3, [r7, #11]
          break;
 8005896:	e055      	b.n	8005944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00b      	beq.n	80058bc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	7c12      	ldrb	r2, [r2, #16]
 80058b0:	f107 0108 	add.w	r1, r7, #8
 80058b4:	4610      	mov	r0, r2
 80058b6:	4798      	blx	r3
 80058b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058ba:	e043      	b.n	8005944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fa7d 	bl	8005dbe <USBD_CtlError>
            err++;
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	3301      	adds	r3, #1
 80058c8:	72fb      	strb	r3, [r7, #11]
          break;
 80058ca:	e03b      	b.n	8005944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00b      	beq.n	80058f0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	7c12      	ldrb	r2, [r2, #16]
 80058e4:	f107 0108 	add.w	r1, r7, #8
 80058e8:	4610      	mov	r0, r2
 80058ea:	4798      	blx	r3
 80058ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058ee:	e029      	b.n	8005944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fa63 	bl	8005dbe <USBD_CtlError>
            err++;
 80058f8:	7afb      	ldrb	r3, [r7, #11]
 80058fa:	3301      	adds	r3, #1
 80058fc:	72fb      	strb	r3, [r7, #11]
          break;
 80058fe:	e021      	b.n	8005944 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00b      	beq.n	8005924 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	7c12      	ldrb	r2, [r2, #16]
 8005918:	f107 0108 	add.w	r1, r7, #8
 800591c:	4610      	mov	r0, r2
 800591e:	4798      	blx	r3
 8005920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005922:	e00f      	b.n	8005944 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fa49 	bl	8005dbe <USBD_CtlError>
            err++;
 800592c:	7afb      	ldrb	r3, [r7, #11]
 800592e:	3301      	adds	r3, #1
 8005930:	72fb      	strb	r3, [r7, #11]
          break;
 8005932:	e007      	b.n	8005944 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005934:	6839      	ldr	r1, [r7, #0]
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fa41 	bl	8005dbe <USBD_CtlError>
          err++;
 800593c:	7afb      	ldrb	r3, [r7, #11]
 800593e:	3301      	adds	r3, #1
 8005940:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005942:	bf00      	nop
      }
      break;
 8005944:	e037      	b.n	80059b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	7c1b      	ldrb	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005956:	f107 0208 	add.w	r2, r7, #8
 800595a:	4610      	mov	r0, r2
 800595c:	4798      	blx	r3
 800595e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005960:	e029      	b.n	80059b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005962:	6839      	ldr	r1, [r7, #0]
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fa2a 	bl	8005dbe <USBD_CtlError>
        err++;
 800596a:	7afb      	ldrb	r3, [r7, #11]
 800596c:	3301      	adds	r3, #1
 800596e:	72fb      	strb	r3, [r7, #11]
      break;
 8005970:	e021      	b.n	80059b6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	7c1b      	ldrb	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10d      	bne.n	8005996 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	f107 0208 	add.w	r2, r7, #8
 8005986:	4610      	mov	r0, r2
 8005988:	4798      	blx	r3
 800598a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	3301      	adds	r3, #1
 8005990:	2207      	movs	r2, #7
 8005992:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005994:	e00f      	b.n	80059b6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fa10 	bl	8005dbe <USBD_CtlError>
        err++;
 800599e:	7afb      	ldrb	r3, [r7, #11]
 80059a0:	3301      	adds	r3, #1
 80059a2:	72fb      	strb	r3, [r7, #11]
      break;
 80059a4:	e007      	b.n	80059b6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 fa08 	bl	8005dbe <USBD_CtlError>
      err++;
 80059ae:	7afb      	ldrb	r3, [r7, #11]
 80059b0:	3301      	adds	r3, #1
 80059b2:	72fb      	strb	r3, [r7, #11]
      break;
 80059b4:	bf00      	nop
  }

  if (err != 0U)
 80059b6:	7afb      	ldrb	r3, [r7, #11]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d11e      	bne.n	80059fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	88db      	ldrh	r3, [r3, #6]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d016      	beq.n	80059f2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80059c4:	893b      	ldrh	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00e      	beq.n	80059e8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	88da      	ldrh	r2, [r3, #6]
 80059ce:	893b      	ldrh	r3, [r7, #8]
 80059d0:	4293      	cmp	r3, r2
 80059d2:	bf28      	it	cs
 80059d4:	4613      	movcs	r3, r2
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80059da:	893b      	ldrh	r3, [r7, #8]
 80059dc:	461a      	mov	r2, r3
 80059de:	68f9      	ldr	r1, [r7, #12]
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fa5d 	bl	8005ea0 <USBD_CtlSendData>
 80059e6:	e009      	b.n	80059fc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f9e7 	bl	8005dbe <USBD_CtlError>
 80059f0:	e004      	b.n	80059fc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa91 	bl	8005f1a <USBD_CtlSendStatus>
 80059f8:	e000      	b.n	80059fc <USBD_GetDescriptor+0x2cc>
    return;
 80059fa:	bf00      	nop
  }
}
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop

08005a04 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	889b      	ldrh	r3, [r3, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d131      	bne.n	8005a7a <USBD_SetAddress+0x76>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	88db      	ldrh	r3, [r3, #6]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d12d      	bne.n	8005a7a <USBD_SetAddress+0x76>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	885b      	ldrh	r3, [r3, #2]
 8005a22:	2b7f      	cmp	r3, #127	; 0x7f
 8005a24:	d829      	bhi.n	8005a7a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	885b      	ldrh	r3, [r3, #2]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d104      	bne.n	8005a48 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f9bc 	bl	8005dbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a46:	e01d      	b.n	8005a84 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	7bfa      	ldrb	r2, [r7, #15]
 8005a4c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fe19 	bl	800668c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fa5d 	bl	8005f1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d004      	beq.n	8005a70 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a6e:	e009      	b.n	8005a84 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a78:	e004      	b.n	8005a84 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005a7a:	6839      	ldr	r1, [r7, #0]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f99e 	bl	8005dbe <USBD_CtlError>
  }
}
 8005a82:	bf00      	nop
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	885b      	ldrh	r3, [r3, #2]
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	4b4e      	ldr	r3, [pc, #312]	; (8005bdc <USBD_SetConfig+0x150>)
 8005aa2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005aa4:	4b4d      	ldr	r3, [pc, #308]	; (8005bdc <USBD_SetConfig+0x150>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d905      	bls.n	8005ab8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f985 	bl	8005dbe <USBD_CtlError>
    return USBD_FAIL;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e08c      	b.n	8005bd2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d002      	beq.n	8005aca <USBD_SetConfig+0x3e>
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d029      	beq.n	8005b1c <USBD_SetConfig+0x90>
 8005ac8:	e075      	b.n	8005bb6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005aca:	4b44      	ldr	r3, [pc, #272]	; (8005bdc <USBD_SetConfig+0x150>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d020      	beq.n	8005b14 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005ad2:	4b42      	ldr	r3, [pc, #264]	; (8005bdc <USBD_SetConfig+0x150>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005adc:	4b3f      	ldr	r3, [pc, #252]	; (8005bdc <USBD_SetConfig+0x150>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fe ffe7 	bl	8004ab6 <USBD_SetClassConfig>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d008      	beq.n	8005b04 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f962 	bl	8005dbe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2202      	movs	r2, #2
 8005afe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005b02:	e065      	b.n	8005bd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fa08 	bl	8005f1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2203      	movs	r2, #3
 8005b0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005b12:	e05d      	b.n	8005bd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fa00 	bl	8005f1a <USBD_CtlSendStatus>
      break;
 8005b1a:	e059      	b.n	8005bd0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005b1c:	4b2f      	ldr	r3, [pc, #188]	; (8005bdc <USBD_SetConfig+0x150>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d112      	bne.n	8005b4a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005b2c:	4b2b      	ldr	r3, [pc, #172]	; (8005bdc <USBD_SetConfig+0x150>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005b36:	4b29      	ldr	r3, [pc, #164]	; (8005bdc <USBD_SetConfig+0x150>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7fe ffd6 	bl	8004aee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9e9 	bl	8005f1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005b48:	e042      	b.n	8005bd0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005b4a:	4b24      	ldr	r3, [pc, #144]	; (8005bdc <USBD_SetConfig+0x150>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d02a      	beq.n	8005bae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7fe ffc4 	bl	8004aee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005b66:	4b1d      	ldr	r3, [pc, #116]	; (8005bdc <USBD_SetConfig+0x150>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005b70:	4b1a      	ldr	r3, [pc, #104]	; (8005bdc <USBD_SetConfig+0x150>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fe ff9d 	bl	8004ab6 <USBD_SetClassConfig>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00f      	beq.n	8005ba6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f918 	bl	8005dbe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	4619      	mov	r1, r3
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7fe ffa9 	bl	8004aee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005ba4:	e014      	b.n	8005bd0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f9b7 	bl	8005f1a <USBD_CtlSendStatus>
      break;
 8005bac:	e010      	b.n	8005bd0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f9b3 	bl	8005f1a <USBD_CtlSendStatus>
      break;
 8005bb4:	e00c      	b.n	8005bd0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f900 	bl	8005dbe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005bbe:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <USBD_SetConfig+0x150>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7fe ff92 	bl	8004aee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8005bce:	bf00      	nop
  }

  return ret;
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000138 	.word	0x20000138

08005be0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	88db      	ldrh	r3, [r3, #6]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d004      	beq.n	8005bfc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f8e2 	bl	8005dbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005bfa:	e023      	b.n	8005c44 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	dc02      	bgt.n	8005c0e <USBD_GetConfig+0x2e>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	dc03      	bgt.n	8005c14 <USBD_GetConfig+0x34>
 8005c0c:	e015      	b.n	8005c3a <USBD_GetConfig+0x5a>
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d00b      	beq.n	8005c2a <USBD_GetConfig+0x4a>
 8005c12:	e012      	b.n	8005c3a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f93c 	bl	8005ea0 <USBD_CtlSendData>
        break;
 8005c28:	e00c      	b.n	8005c44 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	2201      	movs	r2, #1
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f934 	bl	8005ea0 <USBD_CtlSendData>
        break;
 8005c38:	e004      	b.n	8005c44 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f8be 	bl	8005dbe <USBD_CtlError>
        break;
 8005c42:	bf00      	nop
}
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d81e      	bhi.n	8005ca2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	88db      	ldrh	r3, [r3, #6]
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d004      	beq.n	8005c76 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f8a5 	bl	8005dbe <USBD_CtlError>
        break;
 8005c74:	e01a      	b.n	8005cac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f043 0202 	orr.w	r2, r3, #2
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	330c      	adds	r3, #12
 8005c96:	2202      	movs	r2, #2
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f900 	bl	8005ea0 <USBD_CtlSendData>
      break;
 8005ca0:	e004      	b.n	8005cac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f88a 	bl	8005dbe <USBD_CtlError>
      break;
 8005caa:	bf00      	nop
  }
}
 8005cac:	bf00      	nop
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	885b      	ldrh	r3, [r3, #2]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d107      	bne.n	8005cd6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f923 	bl	8005f1a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005cd4:	e013      	b.n	8005cfe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	885b      	ldrh	r3, [r3, #2]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d10b      	bne.n	8005cf6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	889b      	ldrh	r3, [r3, #4]
 8005ce2:	0a1b      	lsrs	r3, r3, #8
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f913 	bl	8005f1a <USBD_CtlSendStatus>
}
 8005cf4:	e003      	b.n	8005cfe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f860 	bl	8005dbe <USBD_CtlError>
}
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d80b      	bhi.n	8005d36 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	885b      	ldrh	r3, [r3, #2]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d10c      	bne.n	8005d40 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 f8f3 	bl	8005f1a <USBD_CtlSendStatus>
      }
      break;
 8005d34:	e004      	b.n	8005d40 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f840 	bl	8005dbe <USBD_CtlError>
      break;
 8005d3e:	e000      	b.n	8005d42 <USBD_ClrFeature+0x3c>
      break;
 8005d40:	bf00      	nop
  }
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	781a      	ldrb	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	781a      	ldrb	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3301      	adds	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff fa41 	bl	80051fc <SWAPBYTE>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3301      	adds	r3, #1
 8005d86:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f7ff fa34 	bl	80051fc <SWAPBYTE>
 8005d94:	4603      	mov	r3, r0
 8005d96:	461a      	mov	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3301      	adds	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff fa27 	bl	80051fc <SWAPBYTE>
 8005dae:	4603      	mov	r3, r0
 8005db0:	461a      	mov	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	80da      	strh	r2, [r3, #6]
}
 8005db6:	bf00      	nop
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005dc8:	2180      	movs	r1, #128	; 0x80
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fbf4 	bl	80065b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fbf0 	bl	80065b8 <USBD_LL_StallEP>
}
 8005dd8:	bf00      	nop
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d036      	beq.n	8005e64 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005dfa:	6938      	ldr	r0, [r7, #16]
 8005dfc:	f000 f836 	bl	8005e6c <USBD_GetLen>
 8005e00:	4603      	mov	r3, r0
 8005e02:	3301      	adds	r3, #1
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	4413      	add	r3, r2
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	7812      	ldrb	r2, [r2, #0]
 8005e18:	701a      	strb	r2, [r3, #0]
  idx++;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	4413      	add	r3, r2
 8005e26:	2203      	movs	r2, #3
 8005e28:	701a      	strb	r2, [r3, #0]
  idx++;
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005e30:	e013      	b.n	8005e5a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	4413      	add	r3, r2
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	7812      	ldrb	r2, [r2, #0]
 8005e3c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	3301      	adds	r3, #1
 8005e42:	613b      	str	r3, [r7, #16]
    idx++;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	3301      	adds	r3, #1
 8005e48:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	4413      	add	r3, r2
 8005e50:	2200      	movs	r2, #0
 8005e52:	701a      	strb	r2, [r3, #0]
    idx++;
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	3301      	adds	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e7      	bne.n	8005e32 <USBD_GetString+0x52>
 8005e62:	e000      	b.n	8005e66 <USBD_GetString+0x86>
    return;
 8005e64:	bf00      	nop
  }
}
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005e7c:	e005      	b.n	8005e8a <USBD_GetLen+0x1e>
  {
    len++;
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	3301      	adds	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	3301      	adds	r3, #1
 8005e88:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1f5      	bne.n	8005e7e <USBD_GetLen+0x12>
  }

  return len;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 fbff 	bl	80066ca <USBD_LL_Transmit>

  return USBD_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fbee 	bl	80066ca <USBD_LL_Transmit>

  return USBD_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	2100      	movs	r1, #0
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 fbfe 	bl	800670c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2204      	movs	r2, #4
 8005f26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2100      	movs	r1, #0
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fbca 	bl	80066ca <USBD_LL_Transmit>

  return USBD_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2205      	movs	r2, #5
 8005f4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f50:	2300      	movs	r3, #0
 8005f52:	2200      	movs	r2, #0
 8005f54:	2100      	movs	r1, #0
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fbd8 	bl	800670c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	490e      	ldr	r1, [pc, #56]	; (8005fa8 <MX_USB_DEVICE_Init+0x40>)
 8005f70:	480e      	ldr	r0, [pc, #56]	; (8005fac <MX_USB_DEVICE_Init+0x44>)
 8005f72:	f7fe fd23 	bl	80049bc <USBD_Init>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005f7c:	f7fa fb8c 	bl	8000698 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005f80:	490b      	ldr	r1, [pc, #44]	; (8005fb0 <MX_USB_DEVICE_Init+0x48>)
 8005f82:	480a      	ldr	r0, [pc, #40]	; (8005fac <MX_USB_DEVICE_Init+0x44>)
 8005f84:	f7fe fd4a 	bl	8004a1c <USBD_RegisterClass>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005f8e:	f7fa fb83 	bl	8000698 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005f92:	4806      	ldr	r0, [pc, #24]	; (8005fac <MX_USB_DEVICE_Init+0x44>)
 8005f94:	f7fe fd78 	bl	8004a88 <USBD_Start>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005f9e:	f7fa fb7b 	bl	8000698 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005fa2:	bf00      	nop
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200000c0 	.word	0x200000c0
 8005fac:	2000013c 	.word	0x2000013c
 8005fb0:	2000000c 	.word	0x2000000c

08005fb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	6039      	str	r1, [r7, #0]
 8005fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2212      	movs	r2, #18
 8005fc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005fc6:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	200000dc 	.word	0x200000dc

08005fd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	6039      	str	r1, [r7, #0]
 8005fe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2204      	movs	r2, #4
 8005fe8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005fea:	4b03      	ldr	r3, [pc, #12]	; (8005ff8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	200000f0 	.word	0x200000f0

08005ffc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	6039      	str	r1, [r7, #0]
 8006006:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006008:	79fb      	ldrb	r3, [r7, #7]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	4907      	ldr	r1, [pc, #28]	; (8006030 <USBD_FS_ProductStrDescriptor+0x34>)
 8006012:	4808      	ldr	r0, [pc, #32]	; (8006034 <USBD_FS_ProductStrDescriptor+0x38>)
 8006014:	f7ff fee4 	bl	8005de0 <USBD_GetString>
 8006018:	e004      	b.n	8006024 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	4904      	ldr	r1, [pc, #16]	; (8006030 <USBD_FS_ProductStrDescriptor+0x34>)
 800601e:	4805      	ldr	r0, [pc, #20]	; (8006034 <USBD_FS_ProductStrDescriptor+0x38>)
 8006020:	f7ff fede 	bl	8005de0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006024:	4b02      	ldr	r3, [pc, #8]	; (8006030 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000418 	.word	0x20000418
 8006034:	08006848 	.word	0x08006848

08006038 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	6039      	str	r1, [r7, #0]
 8006042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	4904      	ldr	r1, [pc, #16]	; (8006058 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006048:	4804      	ldr	r0, [pc, #16]	; (800605c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800604a:	f7ff fec9 	bl	8005de0 <USBD_GetString>
  return USBD_StrDesc;
 800604e:	4b02      	ldr	r3, [pc, #8]	; (8006058 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20000418 	.word	0x20000418
 800605c:	08006858 	.word	0x08006858

08006060 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	4603      	mov	r3, r0
 8006068:	6039      	str	r1, [r7, #0]
 800606a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	221a      	movs	r2, #26
 8006070:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006072:	f000 f843 	bl	80060fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006076:	4b02      	ldr	r3, [pc, #8]	; (8006080 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	200000f4 	.word	0x200000f4

08006084 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	6039      	str	r1, [r7, #0]
 800608e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d105      	bne.n	80060a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	4907      	ldr	r1, [pc, #28]	; (80060b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800609a:	4808      	ldr	r0, [pc, #32]	; (80060bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800609c:	f7ff fea0 	bl	8005de0 <USBD_GetString>
 80060a0:	e004      	b.n	80060ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	4904      	ldr	r1, [pc, #16]	; (80060b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80060a6:	4805      	ldr	r0, [pc, #20]	; (80060bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80060a8:	f7ff fe9a 	bl	8005de0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060ac:	4b02      	ldr	r3, [pc, #8]	; (80060b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	20000418 	.word	0x20000418
 80060bc:	0800686c 	.word	0x0800686c

080060c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	6039      	str	r1, [r7, #0]
 80060ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d105      	bne.n	80060de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	4907      	ldr	r1, [pc, #28]	; (80060f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80060d6:	4808      	ldr	r0, [pc, #32]	; (80060f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80060d8:	f7ff fe82 	bl	8005de0 <USBD_GetString>
 80060dc:	e004      	b.n	80060e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	4904      	ldr	r1, [pc, #16]	; (80060f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80060e2:	4805      	ldr	r0, [pc, #20]	; (80060f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80060e4:	f7ff fe7c 	bl	8005de0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060e8:	4b02      	ldr	r3, [pc, #8]	; (80060f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20000418 	.word	0x20000418
 80060f8:	08006878 	.word	0x08006878

080060fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006102:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <Get_SerialNum+0x44>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006108:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <Get_SerialNum+0x48>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800610e:	4b0e      	ldr	r3, [pc, #56]	; (8006148 <Get_SerialNum+0x4c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4413      	add	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006122:	2208      	movs	r2, #8
 8006124:	4909      	ldr	r1, [pc, #36]	; (800614c <Get_SerialNum+0x50>)
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 f814 	bl	8006154 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800612c:	2204      	movs	r2, #4
 800612e:	4908      	ldr	r1, [pc, #32]	; (8006150 <Get_SerialNum+0x54>)
 8006130:	68b8      	ldr	r0, [r7, #8]
 8006132:	f000 f80f 	bl	8006154 <IntToUnicode>
  }
}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	1fff7a10 	.word	0x1fff7a10
 8006144:	1fff7a14 	.word	0x1fff7a14
 8006148:	1fff7a18 	.word	0x1fff7a18
 800614c:	200000f6 	.word	0x200000f6
 8006150:	20000106 	.word	0x20000106

08006154 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006162:	2300      	movs	r3, #0
 8006164:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006166:	2300      	movs	r3, #0
 8006168:	75fb      	strb	r3, [r7, #23]
 800616a:	e027      	b.n	80061bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	0f1b      	lsrs	r3, r3, #28
 8006170:	2b09      	cmp	r3, #9
 8006172:	d80b      	bhi.n	800618c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	0f1b      	lsrs	r3, r3, #28
 8006178:	b2da      	uxtb	r2, r3
 800617a:	7dfb      	ldrb	r3, [r7, #23]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	4619      	mov	r1, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	440b      	add	r3, r1
 8006184:	3230      	adds	r2, #48	; 0x30
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	e00a      	b.n	80061a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	0f1b      	lsrs	r3, r3, #28
 8006190:	b2da      	uxtb	r2, r3
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	4619      	mov	r1, r3
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	440b      	add	r3, r1
 800619c:	3237      	adds	r2, #55	; 0x37
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	3301      	adds	r3, #1
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	4413      	add	r3, r2
 80061b2:	2200      	movs	r2, #0
 80061b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
 80061b8:	3301      	adds	r3, #1
 80061ba:	75fb      	strb	r3, [r7, #23]
 80061bc:	7dfa      	ldrb	r2, [r7, #23]
 80061be:	79fb      	ldrb	r3, [r7, #7]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d3d3      	bcc.n	800616c <IntToUnicode+0x18>
  }
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08a      	sub	sp, #40	; 0x28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061dc:	f107 0314 	add.w	r3, r7, #20
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	605a      	str	r2, [r3, #4]
 80061e6:	609a      	str	r2, [r3, #8]
 80061e8:	60da      	str	r2, [r3, #12]
 80061ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061f4:	d13a      	bne.n	800626c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <HAL_PCD_MspInit+0xa0>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <HAL_PCD_MspInit+0xa0>)
 8006200:	f043 0301 	orr.w	r3, r3, #1
 8006204:	6313      	str	r3, [r2, #48]	; 0x30
 8006206:	4b1b      	ldr	r3, [pc, #108]	; (8006274 <HAL_PCD_MspInit+0xa0>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006212:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006218:	2302      	movs	r3, #2
 800621a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800621c:	2300      	movs	r3, #0
 800621e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006220:	2303      	movs	r3, #3
 8006222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006224:	230a      	movs	r3, #10
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006228:	f107 0314 	add.w	r3, r7, #20
 800622c:	4619      	mov	r1, r3
 800622e:	4812      	ldr	r0, [pc, #72]	; (8006278 <HAL_PCD_MspInit+0xa4>)
 8006230:	f7fa fc78 	bl	8000b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006234:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <HAL_PCD_MspInit+0xa0>)
 8006236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006238:	4a0e      	ldr	r2, [pc, #56]	; (8006274 <HAL_PCD_MspInit+0xa0>)
 800623a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800623e:	6353      	str	r3, [r2, #52]	; 0x34
 8006240:	2300      	movs	r3, #0
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_PCD_MspInit+0xa0>)
 8006246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006248:	4a0a      	ldr	r2, [pc, #40]	; (8006274 <HAL_PCD_MspInit+0xa0>)
 800624a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800624e:	6453      	str	r3, [r2, #68]	; 0x44
 8006250:	4b08      	ldr	r3, [pc, #32]	; (8006274 <HAL_PCD_MspInit+0xa0>)
 8006252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800625c:	2200      	movs	r2, #0
 800625e:	2100      	movs	r1, #0
 8006260:	2043      	movs	r0, #67	; 0x43
 8006262:	f7fa fc28 	bl	8000ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006266:	2043      	movs	r0, #67	; 0x43
 8006268:	f7fa fc41 	bl	8000aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800626c:	bf00      	nop
 800626e:	3728      	adds	r7, #40	; 0x28
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40023800 	.word	0x40023800
 8006278:	40020000 	.word	0x40020000

0800627c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006290:	4619      	mov	r1, r3
 8006292:	4610      	mov	r0, r2
 8006294:	f7fe fc45 	bl	8004b22 <USBD_LL_SetupStage>
}
 8006298:	bf00      	nop
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80062b2:	78fa      	ldrb	r2, [r7, #3]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	4619      	mov	r1, r3
 80062ca:	f7fe fc7f 	bl	8004bcc <USBD_LL_DataOutStage>
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	460b      	mov	r3, r1
 80062e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80062e8:	78fa      	ldrb	r2, [r7, #3]
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	4613      	mov	r3, r2
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	440b      	add	r3, r1
 80062f6:	334c      	adds	r3, #76	; 0x4c
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	78fb      	ldrb	r3, [r7, #3]
 80062fc:	4619      	mov	r1, r3
 80062fe:	f7fe fd18 	bl	8004d32 <USBD_LL_DataInStage>
}
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b082      	sub	sp, #8
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006318:	4618      	mov	r0, r3
 800631a:	f7fe fe4c 	bl	8004fb6 <USBD_LL_SOF>
}
 800631e:	bf00      	nop
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800632e:	2301      	movs	r3, #1
 8006330:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d102      	bne.n	8006340 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
 800633e:	e008      	b.n	8006352 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	2b02      	cmp	r3, #2
 8006346:	d102      	bne.n	800634e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006348:	2301      	movs	r3, #1
 800634a:	73fb      	strb	r3, [r7, #15]
 800634c:	e001      	b.n	8006352 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800634e:	f7fa f9a3 	bl	8000698 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006358:	7bfa      	ldrb	r2, [r7, #15]
 800635a:	4611      	mov	r1, r2
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe fdec 	bl	8004f3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe fd94 	bl	8004e96 <USBD_LL_Reset>
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe fde7 	bl	8004f5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6812      	ldr	r2, [r2, #0]
 800639a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80063ac:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <HAL_PCD_SuspendCallback+0x48>)
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	4a03      	ldr	r2, [pc, #12]	; (80063c0 <HAL_PCD_SuspendCallback+0x48>)
 80063b2:	f043 0306 	orr.w	r3, r3, #6
 80063b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80063b8:	bf00      	nop
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	e000ed00 	.word	0xe000ed00

080063c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe fdd7 	bl	8004f86 <USBD_LL_Resume>
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80063f2:	78fa      	ldrb	r2, [r7, #3]
 80063f4:	4611      	mov	r1, r2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fe2f 	bl	800505a <USBD_LL_IsoOUTIncomplete>
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006416:	78fa      	ldrb	r2, [r7, #3]
 8006418:	4611      	mov	r1, r2
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe fdeb 	bl	8004ff6 <USBD_LL_IsoINIncomplete>
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe fe41 	bl	80050be <USBD_LL_DevConnected>
}
 800643c:	bf00      	nop
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006452:	4618      	mov	r0, r3
 8006454:	f7fe fe3e 	bl	80050d4 <USBD_LL_DevDisconnected>
}
 8006458:	bf00      	nop
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d13c      	bne.n	80064ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006470:	4a20      	ldr	r2, [pc, #128]	; (80064f4 <USBD_LL_Init+0x94>)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a1e      	ldr	r2, [pc, #120]	; (80064f4 <USBD_LL_Init+0x94>)
 800647c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006480:	4b1c      	ldr	r3, [pc, #112]	; (80064f4 <USBD_LL_Init+0x94>)
 8006482:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006486:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006488:	4b1a      	ldr	r3, [pc, #104]	; (80064f4 <USBD_LL_Init+0x94>)
 800648a:	2204      	movs	r2, #4
 800648c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800648e:	4b19      	ldr	r3, [pc, #100]	; (80064f4 <USBD_LL_Init+0x94>)
 8006490:	2202      	movs	r2, #2
 8006492:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006494:	4b17      	ldr	r3, [pc, #92]	; (80064f4 <USBD_LL_Init+0x94>)
 8006496:	2200      	movs	r2, #0
 8006498:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800649a:	4b16      	ldr	r3, [pc, #88]	; (80064f4 <USBD_LL_Init+0x94>)
 800649c:	2202      	movs	r2, #2
 800649e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80064a0:	4b14      	ldr	r3, [pc, #80]	; (80064f4 <USBD_LL_Init+0x94>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80064a6:	4b13      	ldr	r3, [pc, #76]	; (80064f4 <USBD_LL_Init+0x94>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80064ac:	4b11      	ldr	r3, [pc, #68]	; (80064f4 <USBD_LL_Init+0x94>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80064b2:	4b10      	ldr	r3, [pc, #64]	; (80064f4 <USBD_LL_Init+0x94>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80064b8:	4b0e      	ldr	r3, [pc, #56]	; (80064f4 <USBD_LL_Init+0x94>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80064be:	480d      	ldr	r0, [pc, #52]	; (80064f4 <USBD_LL_Init+0x94>)
 80064c0:	f7fa fcff 	bl	8000ec2 <HAL_PCD_Init>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80064ca:	f7fa f8e5 	bl	8000698 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80064ce:	2180      	movs	r1, #128	; 0x80
 80064d0:	4808      	ldr	r0, [pc, #32]	; (80064f4 <USBD_LL_Init+0x94>)
 80064d2:	f7fb ff3e 	bl	8002352 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80064d6:	2240      	movs	r2, #64	; 0x40
 80064d8:	2100      	movs	r1, #0
 80064da:	4806      	ldr	r0, [pc, #24]	; (80064f4 <USBD_LL_Init+0x94>)
 80064dc:	f7fb fef2 	bl	80022c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80064e0:	2280      	movs	r2, #128	; 0x80
 80064e2:	2101      	movs	r1, #1
 80064e4:	4803      	ldr	r0, [pc, #12]	; (80064f4 <USBD_LL_Init+0x94>)
 80064e6:	f7fb feed 	bl	80022c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000618 	.word	0x20000618

080064f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800650e:	4618      	mov	r0, r3
 8006510:	f7fa fdf4 	bl	80010fc <HAL_PCD_Start>
 8006514:	4603      	mov	r3, r0
 8006516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006518:	7bfb      	ldrb	r3, [r7, #15]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f930 	bl	8006780 <USBD_Get_USB_Status>
 8006520:	4603      	mov	r3, r0
 8006522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006524:	7bbb      	ldrb	r3, [r7, #14]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	4608      	mov	r0, r1
 8006538:	4611      	mov	r1, r2
 800653a:	461a      	mov	r2, r3
 800653c:	4603      	mov	r3, r0
 800653e:	70fb      	strb	r3, [r7, #3]
 8006540:	460b      	mov	r3, r1
 8006542:	70bb      	strb	r3, [r7, #2]
 8006544:	4613      	mov	r3, r2
 8006546:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006556:	78bb      	ldrb	r3, [r7, #2]
 8006558:	883a      	ldrh	r2, [r7, #0]
 800655a:	78f9      	ldrb	r1, [r7, #3]
 800655c:	f7fb fac5 	bl	8001aea <HAL_PCD_EP_Open>
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f90a 	bl	8006780 <USBD_Get_USB_Status>
 800656c:	4603      	mov	r3, r0
 800656e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006570:	7bbb      	ldrb	r3, [r7, #14]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	460b      	mov	r3, r1
 8006584:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006594:	78fa      	ldrb	r2, [r7, #3]
 8006596:	4611      	mov	r1, r2
 8006598:	4618      	mov	r0, r3
 800659a:	f7fb fb0e 	bl	8001bba <HAL_PCD_EP_Close>
 800659e:	4603      	mov	r3, r0
 80065a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065a2:	7bfb      	ldrb	r3, [r7, #15]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 f8eb 	bl	8006780 <USBD_Get_USB_Status>
 80065aa:	4603      	mov	r3, r0
 80065ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80065d2:	78fa      	ldrb	r2, [r7, #3]
 80065d4:	4611      	mov	r1, r2
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fb fbce 	bl	8001d78 <HAL_PCD_EP_SetStall>
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 f8cc 	bl	8006780 <USBD_Get_USB_Status>
 80065e8:	4603      	mov	r3, r0
 80065ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	460b      	mov	r3, r1
 8006600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006610:	78fa      	ldrb	r2, [r7, #3]
 8006612:	4611      	mov	r1, r2
 8006614:	4618      	mov	r0, r3
 8006616:	f7fb fc13 	bl	8001e40 <HAL_PCD_EP_ClrStall>
 800661a:	4603      	mov	r3, r0
 800661c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800661e:	7bfb      	ldrb	r3, [r7, #15]
 8006620:	4618      	mov	r0, r3
 8006622:	f000 f8ad 	bl	8006780 <USBD_Get_USB_Status>
 8006626:	4603      	mov	r3, r0
 8006628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800662a:	7bbb      	ldrb	r3, [r7, #14]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006646:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800664c:	2b00      	cmp	r3, #0
 800664e:	da0b      	bge.n	8006668 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	4613      	mov	r3, r2
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	440b      	add	r3, r1
 8006662:	333e      	adds	r3, #62	; 0x3e
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	e00b      	b.n	8006680 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800666e:	68f9      	ldr	r1, [r7, #12]
 8006670:	4613      	mov	r3, r2
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800667e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80066a6:	78fa      	ldrb	r2, [r7, #3]
 80066a8:	4611      	mov	r1, r2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fb f9f8 	bl	8001aa0 <HAL_PCD_SetAddress>
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f862 	bl	8006780 <USBD_Get_USB_Status>
 80066bc:	4603      	mov	r3, r0
 80066be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b086      	sub	sp, #24
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
 80066d6:	460b      	mov	r3, r1
 80066d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80066e8:	7af9      	ldrb	r1, [r7, #11]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	f7fb faf9 	bl	8001ce4 <HAL_PCD_EP_Transmit>
 80066f2:	4603      	mov	r3, r0
 80066f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 f841 	bl	8006780 <USBD_Get_USB_Status>
 80066fe:	4603      	mov	r3, r0
 8006700:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006702:	7dbb      	ldrb	r3, [r7, #22]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	607a      	str	r2, [r7, #4]
 8006716:	603b      	str	r3, [r7, #0]
 8006718:	460b      	mov	r3, r1
 800671a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800672a:	7af9      	ldrb	r1, [r7, #11]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	f7fb fa8d 	bl	8001c4e <HAL_PCD_EP_Receive>
 8006734:	4603      	mov	r3, r0
 8006736:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	4618      	mov	r0, r3
 800673c:	f000 f820 	bl	8006780 <USBD_Get_USB_Status>
 8006740:	4603      	mov	r3, r0
 8006742:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006744:	7dbb      	ldrb	r3, [r7, #22]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006758:	4b03      	ldr	r3, [pc, #12]	; (8006768 <USBD_static_malloc+0x18>)
}
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	20000b24 	.word	0x20000b24

0800676c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]

}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	4603      	mov	r3, r0
 8006788:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	2b03      	cmp	r3, #3
 8006792:	d817      	bhi.n	80067c4 <USBD_Get_USB_Status+0x44>
 8006794:	a201      	add	r2, pc, #4	; (adr r2, 800679c <USBD_Get_USB_Status+0x1c>)
 8006796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679a:	bf00      	nop
 800679c:	080067ad 	.word	0x080067ad
 80067a0:	080067b3 	.word	0x080067b3
 80067a4:	080067b9 	.word	0x080067b9
 80067a8:	080067bf 	.word	0x080067bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	73fb      	strb	r3, [r7, #15]
    break;
 80067b0:	e00b      	b.n	80067ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80067b2:	2303      	movs	r3, #3
 80067b4:	73fb      	strb	r3, [r7, #15]
    break;
 80067b6:	e008      	b.n	80067ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80067b8:	2301      	movs	r3, #1
 80067ba:	73fb      	strb	r3, [r7, #15]
    break;
 80067bc:	e005      	b.n	80067ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80067be:	2303      	movs	r3, #3
 80067c0:	73fb      	strb	r3, [r7, #15]
    break;
 80067c2:	e002      	b.n	80067ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	73fb      	strb	r3, [r7, #15]
    break;
 80067c8:	bf00      	nop
  }
  return usb_status;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <memset>:
 80067d8:	4402      	add	r2, r0
 80067da:	4603      	mov	r3, r0
 80067dc:	4293      	cmp	r3, r2
 80067de:	d100      	bne.n	80067e2 <memset+0xa>
 80067e0:	4770      	bx	lr
 80067e2:	f803 1b01 	strb.w	r1, [r3], #1
 80067e6:	e7f9      	b.n	80067dc <memset+0x4>

080067e8 <__libc_init_array>:
 80067e8:	b570      	push	{r4, r5, r6, lr}
 80067ea:	4d0d      	ldr	r5, [pc, #52]	; (8006820 <__libc_init_array+0x38>)
 80067ec:	4c0d      	ldr	r4, [pc, #52]	; (8006824 <__libc_init_array+0x3c>)
 80067ee:	1b64      	subs	r4, r4, r5
 80067f0:	10a4      	asrs	r4, r4, #2
 80067f2:	2600      	movs	r6, #0
 80067f4:	42a6      	cmp	r6, r4
 80067f6:	d109      	bne.n	800680c <__libc_init_array+0x24>
 80067f8:	4d0b      	ldr	r5, [pc, #44]	; (8006828 <__libc_init_array+0x40>)
 80067fa:	4c0c      	ldr	r4, [pc, #48]	; (800682c <__libc_init_array+0x44>)
 80067fc:	f000 f818 	bl	8006830 <_init>
 8006800:	1b64      	subs	r4, r4, r5
 8006802:	10a4      	asrs	r4, r4, #2
 8006804:	2600      	movs	r6, #0
 8006806:	42a6      	cmp	r6, r4
 8006808:	d105      	bne.n	8006816 <__libc_init_array+0x2e>
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006810:	4798      	blx	r3
 8006812:	3601      	adds	r6, #1
 8006814:	e7ee      	b.n	80067f4 <__libc_init_array+0xc>
 8006816:	f855 3b04 	ldr.w	r3, [r5], #4
 800681a:	4798      	blx	r3
 800681c:	3601      	adds	r6, #1
 800681e:	e7f2      	b.n	8006806 <__libc_init_array+0x1e>
 8006820:	080068a0 	.word	0x080068a0
 8006824:	080068a0 	.word	0x080068a0
 8006828:	080068a0 	.word	0x080068a0
 800682c:	080068a4 	.word	0x080068a4

08006830 <_init>:
 8006830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006832:	bf00      	nop
 8006834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006836:	bc08      	pop	{r3}
 8006838:	469e      	mov	lr, r3
 800683a:	4770      	bx	lr

0800683c <_fini>:
 800683c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683e:	bf00      	nop
 8006840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006842:	bc08      	pop	{r3}
 8006844:	469e      	mov	lr, r3
 8006846:	4770      	bx	lr
