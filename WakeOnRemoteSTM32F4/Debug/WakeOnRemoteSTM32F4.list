
WakeOnRemoteSTM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006770  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006948  08006948  00020114  2**0
                  CONTENTS
  4 .ARM          00000008  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006950  08006950  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006950  08006950  00016950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006954  08006954  00016954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08006958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020114  2**0
                  CONTENTS
 10 .bss          00000a28  20000114  20000114  00020114  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b3c  20000b3c  00020114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c679  00000000  00000000  00020187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002731  00000000  00000000  0002c800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ac8  00000000  00000000  0002ef38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007f4  00000000  00000000  0002fa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002221e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000eabc  00000000  00000000  00052412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c361a  00000000  00000000  00060ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002ac4  00000000  00000000  001244e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00126fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000114 	.word	0x20000114
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080068e0 	.word	0x080068e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000118 	.word	0x20000118
 80001c4:	080068e0 	.word	0x080068e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f9dc 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f87e 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f8e8 	bl	80006a4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d4:	f005 fda0 	bl	8006018 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);
 80004d8:	2101      	movs	r1, #1
 80004da:	4838      	ldr	r0, [pc, #224]	; (80005bc <main+0xf8>)
 80004dc:	f000 fd2f 	bl	8000f3e <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 80004e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004e4:	f000 fa40 	bl	8000968 <HAL_Delay>
	  if(boot == 0){
 80004e8:	4b35      	ldr	r3, [pc, #212]	; (80005c0 <main+0xfc>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d11a      	bne.n	8000526 <main+0x62>
		  // Sends ENTER
		  keyboardhid.KEYCODE1 = 0x28;
 80004f0:	4b34      	ldr	r3, [pc, #208]	; (80005c4 <main+0x100>)
 80004f2:	2228      	movs	r2, #40	; 0x28
 80004f4:	709a      	strb	r2, [r3, #2]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80004f6:	2208      	movs	r2, #8
 80004f8:	4932      	ldr	r1, [pc, #200]	; (80005c4 <main+0x100>)
 80004fa:	4833      	ldr	r0, [pc, #204]	; (80005c8 <main+0x104>)
 80004fc:	f004 fa12 	bl	8004924 <USBD_HID_SendReport>
		  HAL_Delay(50);
 8000500:	2032      	movs	r0, #50	; 0x32
 8000502:	f000 fa31 	bl	8000968 <HAL_Delay>
		  keyboardhid.KEYCODE1 = 0x00;
 8000506:	4b2f      	ldr	r3, [pc, #188]	; (80005c4 <main+0x100>)
 8000508:	2200      	movs	r2, #0
 800050a:	709a      	strb	r2, [r3, #2]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800050c:	2208      	movs	r2, #8
 800050e:	492d      	ldr	r1, [pc, #180]	; (80005c4 <main+0x100>)
 8000510:	482d      	ldr	r0, [pc, #180]	; (80005c8 <main+0x104>)
 8000512:	f004 fa07 	bl	8004924 <USBD_HID_SendReport>
		  HAL_Delay(1000);
 8000516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051a:	f000 fa25 	bl	8000968 <HAL_Delay>
		  boot = 2;
 800051e:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <main+0xfc>)
 8000520:	2202      	movs	r2, #2
 8000522:	701a      	strb	r2, [r3, #0]
 8000524:	e7d8      	b.n	80004d8 <main+0x14>
	  }
	  else if(boot == 1){
 8000526:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <main+0xfc>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d1d4      	bne.n	80004d8 <main+0x14>
		  // Sends two DOWN ARROW and ENTER
		  keyboardhid.KEYCODE1 = 0x51;
 800052e:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <main+0x100>)
 8000530:	2251      	movs	r2, #81	; 0x51
 8000532:	709a      	strb	r2, [r3, #2]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000534:	2208      	movs	r2, #8
 8000536:	4923      	ldr	r1, [pc, #140]	; (80005c4 <main+0x100>)
 8000538:	4823      	ldr	r0, [pc, #140]	; (80005c8 <main+0x104>)
 800053a:	f004 f9f3 	bl	8004924 <USBD_HID_SendReport>
		  HAL_Delay(50);
 800053e:	2032      	movs	r0, #50	; 0x32
 8000540:	f000 fa12 	bl	8000968 <HAL_Delay>
		  keyboardhid.KEYCODE1 = 0x00;
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <main+0x100>)
 8000546:	2200      	movs	r2, #0
 8000548:	709a      	strb	r2, [r3, #2]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800054a:	2208      	movs	r2, #8
 800054c:	491d      	ldr	r1, [pc, #116]	; (80005c4 <main+0x100>)
 800054e:	481e      	ldr	r0, [pc, #120]	; (80005c8 <main+0x104>)
 8000550:	f004 f9e8 	bl	8004924 <USBD_HID_SendReport>
		  HAL_Delay(100);
 8000554:	2064      	movs	r0, #100	; 0x64
 8000556:	f000 fa07 	bl	8000968 <HAL_Delay>
		  keyboardhid.KEYCODE1 = 0x51;
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <main+0x100>)
 800055c:	2251      	movs	r2, #81	; 0x51
 800055e:	709a      	strb	r2, [r3, #2]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000560:	2208      	movs	r2, #8
 8000562:	4918      	ldr	r1, [pc, #96]	; (80005c4 <main+0x100>)
 8000564:	4818      	ldr	r0, [pc, #96]	; (80005c8 <main+0x104>)
 8000566:	f004 f9dd 	bl	8004924 <USBD_HID_SendReport>
		  HAL_Delay(50);
 800056a:	2032      	movs	r0, #50	; 0x32
 800056c:	f000 f9fc 	bl	8000968 <HAL_Delay>
		  keyboardhid.KEYCODE1 = 0x00;
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <main+0x100>)
 8000572:	2200      	movs	r2, #0
 8000574:	709a      	strb	r2, [r3, #2]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 8000576:	2208      	movs	r2, #8
 8000578:	4912      	ldr	r1, [pc, #72]	; (80005c4 <main+0x100>)
 800057a:	4813      	ldr	r0, [pc, #76]	; (80005c8 <main+0x104>)
 800057c:	f004 f9d2 	bl	8004924 <USBD_HID_SendReport>
		  HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f000 f9f1 	bl	8000968 <HAL_Delay>
		  keyboardhid.KEYCODE1 = 0x28;
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <main+0x100>)
 8000588:	2228      	movs	r2, #40	; 0x28
 800058a:	709a      	strb	r2, [r3, #2]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 800058c:	2208      	movs	r2, #8
 800058e:	490d      	ldr	r1, [pc, #52]	; (80005c4 <main+0x100>)
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <main+0x104>)
 8000592:	f004 f9c7 	bl	8004924 <USBD_HID_SendReport>
		  HAL_Delay(50);
 8000596:	2032      	movs	r0, #50	; 0x32
 8000598:	f000 f9e6 	bl	8000968 <HAL_Delay>
		  keyboardhid.KEYCODE1 = 0x00;
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <main+0x100>)
 800059e:	2200      	movs	r2, #0
 80005a0:	709a      	strb	r2, [r3, #2]
		  USBD_HID_SendReport(&hUsbDeviceFS, &keyboardhid, sizeof(keyboardhid));
 80005a2:	2208      	movs	r2, #8
 80005a4:	4907      	ldr	r1, [pc, #28]	; (80005c4 <main+0x100>)
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <main+0x104>)
 80005a8:	f004 f9bc 	bl	8004924 <USBD_HID_SendReport>
		  HAL_Delay(1000);
 80005ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b0:	f000 f9da 	bl	8000968 <HAL_Delay>
		  boot = 2;
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <main+0xfc>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin);
 80005ba:	e78d      	b.n	80004d8 <main+0x14>
 80005bc:	40021000 	.word	0x40021000
 80005c0:	20000000 	.word	0x20000000
 80005c4:	20000130 	.word	0x20000130
 80005c8:	20000140 	.word	0x20000140

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f006 f954 	bl	8006888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b29      	ldr	r3, [pc, #164]	; (800069c <SystemClock_Config+0xd0>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a28      	ldr	r2, [pc, #160]	; (800069c <SystemClock_Config+0xd0>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <SystemClock_Config+0xd0>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <SystemClock_Config+0xd4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a22      	ldr	r2, [pc, #136]	; (80006a0 <SystemClock_Config+0xd4>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <SystemClock_Config+0xd4>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000628:	2303      	movs	r3, #3
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000632:	2301      	movs	r3, #1
 8000634:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	2310      	movs	r3, #16
 8000638:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000648:	2348      	movs	r3, #72	; 0x48
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000650:	2303      	movs	r3, #3
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f001 feef 	bl	800243c <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000664:	f000 f870 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 f952 	bl	800292c <HAL_RCC_ClockConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800068e:	f000 f85b 	bl	8000748 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a1f      	ldr	r2, [pc, #124]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006e0:	f043 0310 	orr.w	r3, r3, #16
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <MX_GPIO_Init+0x9c>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_GPIO_Init+0x9c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_Pin|ONBOARD_LED_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f248 0101 	movw	r1, #32769	; 0x8001
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <MX_GPIO_Init+0xa0>)
 8000716:	f000 fbf9 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin|ONBOARD_LED_Pin;
 800071a:	f248 0301 	movw	r3, #32769	; 0x8001
 800071e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	4619      	mov	r1, r3
 8000732:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_GPIO_Init+0xa0>)
 8000734:	f000 fa4e 	bl	8000bd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000738:	bf00      	nop
 800073a:	3720      	adds	r7, #32
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40021000 	.word	0x40021000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_MspInit+0x4c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a0f      	ldr	r2, [pc, #60]	; (80007a0 <HAL_MspInit+0x4c>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_MspInit+0x4c>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6413      	str	r3, [r2, #64]	; 0x40
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f0:	f000 f89a 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <OTG_FS_IRQHandler+0x10>)
 80007fe:	f000 fd08 	bl	8001212 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000061c 	.word	0x2000061c

0800080c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <SystemInit+0x20>)
 8000812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <SystemInit+0x20>)
 8000818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800081c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000868 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000836:	490e      	ldr	r1, [pc, #56]	; (8000870 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800084c:	4c0b      	ldr	r4, [pc, #44]	; (800087c <LoopFillZerobss+0x26>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800085a:	f7ff ffd7 	bl	800080c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085e:	f006 f81b 	bl	8006898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000862:	f7ff fe2f 	bl	80004c4 <main>
  bx  lr    
 8000866:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000868:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8000874:	08006958 	.word	0x08006958
  ldr r2, =_sbss
 8000878:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 800087c:	20000b3c 	.word	0x20000b3c

08000880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC_IRQHandler>
	...

08000884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_Init+0x40>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <HAL_Init+0x40>)
 800088e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_Init+0x40>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_Init+0x40>)
 800089a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800089e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_Init+0x40>)
 80008a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f000 f94f 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b2:	200f      	movs	r0, #15
 80008b4:	f000 f808 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b8:	f7ff ff4c 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023c00 	.word	0x40023c00

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x54>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x58>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f967 	bl	8000bba <HAL_SYSTICK_Config>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00e      	b.n	8000914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d80a      	bhi.n	8000912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000904:	f000 f92f 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_InitTick+0x5c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000004 	.word	0x20000004
 8000920:	2000000c 	.word	0x2000000c
 8000924:	20000008 	.word	0x20000008

08000928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_IncTick+0x20>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_IncTick+0x24>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_IncTick+0x24>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	2000000c 	.word	0x2000000c
 800094c:	20000138 	.word	0x20000138

08000950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_GetTick+0x14>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000138 	.word	0x20000138

08000968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000970:	f7ff ffee 	bl	8000950 <HAL_GetTick>
 8000974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000980:	d005      	beq.n	800098e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_Delay+0x44>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800098e:	bf00      	nop
 8000990:	f7ff ffde 	bl	8000950 <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	429a      	cmp	r2, r3
 800099e:	d8f7      	bhi.n	8000990 <HAL_Delay+0x28>
  {
  }
}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	2000000c 	.word	0x2000000c

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4907      	ldr	r1, [pc, #28]	; (8000a4c <__NVIC_EnableIRQ+0x38>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b30:	f7ff ff8e 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff29 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff3e 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff8e 	bl	8000aa4 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5d 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff31 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffa2 	bl	8000b0c <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	e16b      	b.n	8000ec8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	f040 815a 	bne.w	8000ec2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d005      	beq.n	8000c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d130      	bne.n	8000c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2203      	movs	r2, #3
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	091b      	lsrs	r3, r3, #4
 8000c72:	f003 0201 	and.w	r2, r3, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d017      	beq.n	8000cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d123      	bne.n	8000d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	08da      	lsrs	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3208      	adds	r2, #8
 8000cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	69b9      	ldr	r1, [r7, #24]
 8000d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0203 	and.w	r2, r3, #3
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80b4 	beq.w	8000ec2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b60      	ldr	r3, [pc, #384]	; (8000ee0 <HAL_GPIO_Init+0x30c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a5f      	ldr	r2, [pc, #380]	; (8000ee0 <HAL_GPIO_Init+0x30c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	; (8000ee0 <HAL_GPIO_Init+0x30c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d76:	4a5b      	ldr	r2, [pc, #364]	; (8000ee4 <HAL_GPIO_Init+0x310>)
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a52      	ldr	r2, [pc, #328]	; (8000ee8 <HAL_GPIO_Init+0x314>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d02b      	beq.n	8000dfa <HAL_GPIO_Init+0x226>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a51      	ldr	r2, [pc, #324]	; (8000eec <HAL_GPIO_Init+0x318>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d025      	beq.n	8000df6 <HAL_GPIO_Init+0x222>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a50      	ldr	r2, [pc, #320]	; (8000ef0 <HAL_GPIO_Init+0x31c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d01f      	beq.n	8000df2 <HAL_GPIO_Init+0x21e>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4f      	ldr	r2, [pc, #316]	; (8000ef4 <HAL_GPIO_Init+0x320>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d019      	beq.n	8000dee <HAL_GPIO_Init+0x21a>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4e      	ldr	r2, [pc, #312]	; (8000ef8 <HAL_GPIO_Init+0x324>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0x216>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a4d      	ldr	r2, [pc, #308]	; (8000efc <HAL_GPIO_Init+0x328>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d00d      	beq.n	8000de6 <HAL_GPIO_Init+0x212>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a4c      	ldr	r2, [pc, #304]	; (8000f00 <HAL_GPIO_Init+0x32c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d007      	beq.n	8000de2 <HAL_GPIO_Init+0x20e>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a4b      	ldr	r2, [pc, #300]	; (8000f04 <HAL_GPIO_Init+0x330>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <HAL_GPIO_Init+0x20a>
 8000dda:	2307      	movs	r3, #7
 8000ddc:	e00e      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000dde:	2308      	movs	r3, #8
 8000de0:	e00c      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000de2:	2306      	movs	r3, #6
 8000de4:	e00a      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000de6:	2305      	movs	r3, #5
 8000de8:	e008      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000dea:	2304      	movs	r3, #4
 8000dec:	e006      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000dee:	2303      	movs	r3, #3
 8000df0:	e004      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000df2:	2302      	movs	r3, #2
 8000df4:	e002      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <HAL_GPIO_Init+0x228>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	69fa      	ldr	r2, [r7, #28]
 8000dfe:	f002 0203 	and.w	r2, r2, #3
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	4093      	lsls	r3, r2
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e0c:	4935      	ldr	r1, [pc, #212]	; (8000ee4 <HAL_GPIO_Init+0x310>)
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	3302      	adds	r3, #2
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1a:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <HAL_GPIO_Init+0x334>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3e:	4a32      	ldr	r2, [pc, #200]	; (8000f08 <HAL_GPIO_Init+0x334>)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e44:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <HAL_GPIO_Init+0x334>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e68:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <HAL_GPIO_Init+0x334>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <HAL_GPIO_Init+0x334>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e92:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <HAL_GPIO_Init+0x334>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <HAL_GPIO_Init+0x334>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ebc:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <HAL_GPIO_Init+0x334>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	f67f ae90 	bls.w	8000bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40013800 	.word	0x40013800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40021400 	.word	0x40021400
 8000f00:	40021800 	.word	0x40021800
 8000f04:	40021c00 	.word	0x40021c00
 8000f08:	40013c00 	.word	0x40013c00

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f28:	e003      	b.n	8000f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	041a      	lsls	r2, r3, #16
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	619a      	str	r2, [r3, #24]
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b085      	sub	sp, #20
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f50:	887a      	ldrh	r2, [r7, #2]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4013      	ands	r3, r2
 8000f56:	041a      	lsls	r2, r3, #16
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	887b      	ldrh	r3, [r7, #2]
 8000f5e:	400b      	ands	r3, r1
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	619a      	str	r2, [r3, #24]
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f74:	b08f      	sub	sp, #60	; 0x3c
 8000f76:	af0a      	add	r7, sp, #40	; 0x28
 8000f78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e10f      	b.n	80011a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d106      	bne.n	8000fa4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f005 f970 	bl	8006284 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 ffbf 	bl	8002f46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	687e      	ldr	r6, [r7, #4]
 8000fd0:	466d      	mov	r5, sp
 8000fd2:	f106 0410 	add.w	r4, r6, #16
 8000fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fe2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fe6:	1d33      	adds	r3, r6, #4
 8000fe8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f001 fe96 	bl	8002d1c <USB_CoreInit>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d005      	beq.n	8001002 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e0d0      	b.n	80011a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f001 ffad 	bl	8002f68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e04a      	b.n	80010aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	333d      	adds	r3, #61	; 0x3d
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	333c      	adds	r3, #60	; 0x3c
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	b298      	uxth	r0, r3
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4413      	add	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	3344      	adds	r3, #68	; 0x44
 8001050:	4602      	mov	r2, r0
 8001052:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001054:	7bfa      	ldrb	r2, [r7, #15]
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	4613      	mov	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4413      	add	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	440b      	add	r3, r1
 8001062:	3340      	adds	r3, #64	; 0x40
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001068:	7bfa      	ldrb	r2, [r7, #15]
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	3348      	adds	r3, #72	; 0x48
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	334c      	adds	r3, #76	; 0x4c
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001090:	7bfa      	ldrb	r2, [r7, #15]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	3354      	adds	r3, #84	; 0x54
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	3301      	adds	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d3af      	bcc.n	8001014 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e044      	b.n	8001144 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	4613      	mov	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	440b      	add	r3, r1
 80010de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010e6:	7bfa      	ldrb	r2, [r7, #15]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	6879      	ldr	r1, [r7, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	3301      	adds	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	7bfa      	ldrb	r2, [r7, #15]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	429a      	cmp	r2, r3
 800114c:	d3b5      	bcc.n	80010ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	687e      	ldr	r6, [r7, #4]
 8001156:	466d      	mov	r5, sp
 8001158:	f106 0410 	add.w	r4, r6, #16
 800115c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001164:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001168:	e885 0003 	stmia.w	r5, {r0, r1}
 800116c:	1d33      	adds	r3, r6, #4
 800116e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001170:	6838      	ldr	r0, [r7, #0]
 8001172:	f001 ff45 	bl	8003000 <USB_DevInit>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2202      	movs	r2, #2
 8001180:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	e00d      	b.n	80011a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f003 f894 	bl	80042ca <USB_DevDisconnect>

  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_PCD_Start+0x1c>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e020      	b.n	800120a <HAL_PCD_Start+0x5e>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d109      	bne.n	80011ec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d005      	beq.n	80011ec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 fe97 	bl	8002f24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f003 f844 	bl	8004288 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001212:	b590      	push	{r4, r7, lr}
 8001214:	b08d      	sub	sp, #52	; 0x34
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f003 f902 	bl	8004432 <USB_GetMode>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	f040 848a 	bne.w	8001b4a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f003 f866 	bl	800430c <USB_ReadInterrupts>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 8480 	beq.w	8001b48 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f003 f853 	bl	800430c <USB_ReadInterrupts>
 8001266:	4603      	mov	r3, r0
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b02      	cmp	r3, #2
 800126e:	d107      	bne.n	8001280 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	695a      	ldr	r2, [r3, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f002 0202 	and.w	r2, r2, #2
 800127e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f003 f841 	bl	800430c <USB_ReadInterrupts>
 800128a:	4603      	mov	r3, r0
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b10      	cmp	r3, #16
 8001292:	d161      	bne.n	8001358 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	699a      	ldr	r2, [r3, #24]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0210 	bic.w	r2, r2, #16
 80012a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	f003 020f 	and.w	r2, r3, #15
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	3304      	adds	r3, #4
 80012c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	0c5b      	lsrs	r3, r3, #17
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d124      	bne.n	800131a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d035      	beq.n	8001348 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	6a38      	ldr	r0, [r7, #32]
 80012f0:	f002 fe78 	bl	8003fe4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001300:	441a      	add	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	6a1a      	ldr	r2, [r3, #32]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001312:	441a      	add	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	621a      	str	r2, [r3, #32]
 8001318:	e016      	b.n	8001348 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	0c5b      	lsrs	r3, r3, #17
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	2b06      	cmp	r3, #6
 8001324:	d110      	bne.n	8001348 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800132c:	2208      	movs	r2, #8
 800132e:	4619      	mov	r1, r3
 8001330:	6a38      	ldr	r0, [r7, #32]
 8001332:	f002 fe57 	bl	8003fe4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	6a1a      	ldr	r2, [r3, #32]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001342:	441a      	add	r2, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0210 	orr.w	r2, r2, #16
 8001356:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f002 ffd5 	bl	800430c <USB_ReadInterrupts>
 8001362:	4603      	mov	r3, r0
 8001364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001368:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800136c:	f040 80a7 	bne.w	80014be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f002 ffda 	bl	8004332 <USB_ReadDevAllOutEpInterrupt>
 800137e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001380:	e099      	b.n	80014b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 808e 	beq.w	80014aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f002 fffe 	bl	800439a <USB_ReadDevOutEPInterrupt>
 800139e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00c      	beq.n	80013c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	015a      	lsls	r2, r3, #5
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	4413      	add	r3, r2
 80013b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013b6:	461a      	mov	r2, r3
 80013b8:	2301      	movs	r3, #1
 80013ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 feaa 	bl	8002118 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00c      	beq.n	80013e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	015a      	lsls	r2, r3, #5
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	4413      	add	r3, r2
 80013d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013da:	461a      	mov	r2, r3
 80013dc:	2308      	movs	r3, #8
 80013de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 ff80 	bl	80022e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f003 0310 	and.w	r3, r3, #16
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d008      	beq.n	8001404 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	015a      	lsls	r2, r3, #5
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	4413      	add	r3, r2
 80013fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013fe:	461a      	mov	r2, r3
 8001400:	2310      	movs	r3, #16
 8001402:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d030      	beq.n	8001470 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001416:	2b80      	cmp	r3, #128	; 0x80
 8001418:	d109      	bne.n	800142e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800142e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	4413      	add	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	3304      	adds	r3, #4
 8001442:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	78db      	ldrb	r3, [r3, #3]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d108      	bne.n	800145e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2200      	movs	r2, #0
 8001450:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f005 f819 	bl	8006490 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	015a      	lsls	r2, r3, #5
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	4413      	add	r3, r2
 8001466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800146a:	461a      	mov	r2, r3
 800146c:	2302      	movs	r3, #2
 800146e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	4413      	add	r3, r2
 8001482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001486:	461a      	mov	r2, r3
 8001488:	2320      	movs	r3, #32
 800148a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	4413      	add	r3, r2
 800149e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014a2:	461a      	mov	r2, r3
 80014a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	3301      	adds	r3, #1
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	085b      	lsrs	r3, r3, #1
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f47f af62 	bne.w	8001382 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 ff22 	bl	800430c <USB_ReadInterrupts>
 80014c8:	4603      	mov	r3, r0
 80014ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014d2:	f040 80db 	bne.w	800168c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 ff43 	bl	8004366 <USB_ReadDevAllInEpInterrupt>
 80014e0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014e6:	e0cd      	b.n	8001684 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80c2 	beq.w	8001678 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	4611      	mov	r1, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 ff69 	bl	80043d6 <USB_ReadDevInEPInterrupt>
 8001504:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d057      	beq.n	80015c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	2201      	movs	r2, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	43db      	mvns	r3, r3
 800152a:	69f9      	ldr	r1, [r7, #28]
 800152c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001530:	4013      	ands	r3, r2
 8001532:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001540:	461a      	mov	r2, r3
 8001542:	2301      	movs	r3, #1
 8001544:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d132      	bne.n	80015b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001552:	4613      	mov	r3, r2
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	334c      	adds	r3, #76	; 0x4c
 800155e:	6819      	ldr	r1, [r3, #0]
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4403      	add	r3, r0
 800156e:	3348      	adds	r3, #72	; 0x48
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4419      	add	r1, r3
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4403      	add	r3, r0
 8001582:	334c      	adds	r3, #76	; 0x4c
 8001584:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	2b00      	cmp	r3, #0
 800158a:	d113      	bne.n	80015b4 <HAL_PCD_IRQHandler+0x3a2>
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	3354      	adds	r3, #84	; 0x54
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d108      	bne.n	80015b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6818      	ldr	r0, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80015ac:	461a      	mov	r2, r3
 80015ae:	2101      	movs	r1, #1
 80015b0:	f002 ff70 	bl	8004494 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	4619      	mov	r1, r3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f004 fee3 	bl	8006386 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	015a      	lsls	r2, r3, #5
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	4413      	add	r3, r2
 80015d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d6:	461a      	mov	r2, r3
 80015d8:	2308      	movs	r3, #8
 80015da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d008      	beq.n	80015f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	015a      	lsls	r2, r3, #5
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	4413      	add	r3, r2
 80015ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015f2:	461a      	mov	r2, r3
 80015f4:	2310      	movs	r3, #16
 80015f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	015a      	lsls	r2, r3, #5
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	4413      	add	r3, r2
 800160a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800160e:	461a      	mov	r2, r3
 8001610:	2340      	movs	r3, #64	; 0x40
 8001612:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d023      	beq.n	8001666 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800161e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001620:	6a38      	ldr	r0, [r7, #32]
 8001622:	f001 fe51 	bl	80032c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	3338      	adds	r3, #56	; 0x38
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	3304      	adds	r3, #4
 8001638:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	78db      	ldrb	r3, [r3, #3]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d108      	bne.n	8001654 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	2200      	movs	r2, #0
 8001646:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f004 ff30 	bl	80064b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	015a      	lsls	r2, r3, #5
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001660:	461a      	mov	r2, r3
 8001662:	2302      	movs	r3, #2
 8001664:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fcc3 	bl	8001ffe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	3301      	adds	r3, #1
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800167e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001686:	2b00      	cmp	r3, #0
 8001688:	f47f af2e 	bne.w	80014e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f002 fe3b 	bl	800430c <USB_ReadInterrupts>
 8001696:	4603      	mov	r3, r0
 8001698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800169c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016a0:	d122      	bne.n	80016e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016c8:	2100      	movs	r1, #0
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 feaa 	bl	8002424 <HAL_PCDEx_LPM_Callback>
 80016d0:	e002      	b.n	80016d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f004 fece 	bl	8006474 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 fe0d 	bl	800430c <USB_ReadInterrupts>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016fc:	d112      	bne.n	8001724 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b01      	cmp	r3, #1
 800170c:	d102      	bne.n	8001714 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f004 fe8a 	bl	8006428 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001722:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f002 fdef 	bl	800430c <USB_ReadInterrupts>
 800172e:	4603      	mov	r3, r0
 8001730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001738:	f040 80b7 	bne.w	80018aa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2110      	movs	r1, #16
 8001756:	4618      	mov	r0, r3
 8001758:	f001 fdb6 	bl	80032c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001760:	e046      	b.n	80017f0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001764:	015a      	lsls	r2, r3, #5
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	4413      	add	r3, r2
 800176a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800176e:	461a      	mov	r2, r3
 8001770:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001774:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001786:	0151      	lsls	r1, r2, #5
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	440a      	add	r2, r1
 800178c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001790:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001794:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a2:	461a      	mov	r2, r3
 80017a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ba:	0151      	lsls	r1, r2, #5
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	440a      	add	r2, r1
 80017c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	015a      	lsls	r2, r3, #5
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017da:	0151      	lsls	r1, r2, #5
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	440a      	add	r2, r1
 80017e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	3301      	adds	r3, #1
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d3b3      	bcc.n	8001762 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001808:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800180c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	2b00      	cmp	r3, #0
 8001814:	d016      	beq.n	8001844 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001826:	f043 030b 	orr.w	r3, r3, #11
 800182a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800183c:	f043 030b 	orr.w	r3, r3, #11
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	e015      	b.n	8001870 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001852:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001856:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800185a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800186a:	f043 030b 	orr.w	r3, r3, #11
 800186e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800187e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001882:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001894:	461a      	mov	r2, r3
 8001896:	f002 fdfd 	bl	8004494 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fd2c 	bl	800430c <USB_ReadInterrupts>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018be:	d124      	bne.n	800190a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 fdc2 	bl	800444e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 fd77 	bl	80033c2 <USB_GetDevSpeed>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681c      	ldr	r4, [r3, #0]
 80018e0:	f001 fa10 	bl	8002d04 <HAL_RCC_GetHCLKFreq>
 80018e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	461a      	mov	r2, r3
 80018ee:	4620      	mov	r0, r4
 80018f0:	f001 fa76 	bl	8002de0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f004 fd6e 	bl	80063d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001908:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f002 fcfc 	bl	800430c <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b08      	cmp	r3, #8
 800191c:	d10a      	bne.n	8001934 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f004 fd4b 	bl	80063ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f002 0208 	and.w	r2, r2, #8
 8001932:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f002 fce7 	bl	800430c <USB_ReadInterrupts>
 800193e:	4603      	mov	r3, r0
 8001940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001944:	2b80      	cmp	r3, #128	; 0x80
 8001946:	d122      	bne.n	800198e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001954:	2301      	movs	r3, #1
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
 8001958:	e014      	b.n	8001984 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195e:	4613      	mov	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	440b      	add	r3, r1
 8001968:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d105      	bne.n	800197e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	b2db      	uxtb	r3, r3
 8001976:	4619      	mov	r1, r3
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 fb0f 	bl	8001f9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	3301      	adds	r3, #1
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198a:	429a      	cmp	r2, r3
 800198c:	d3e5      	bcc.n	800195a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fcba 	bl	800430c <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019a2:	d13b      	bne.n	8001a1c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a4:	2301      	movs	r3, #1
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	e02b      	b.n	8001a02 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	3340      	adds	r3, #64	; 0x40
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d115      	bne.n	80019fc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	da12      	bge.n	80019fc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019da:	4613      	mov	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	333f      	adds	r3, #63	; 0x3f
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4619      	mov	r1, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 fad0 	bl	8001f9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	3301      	adds	r3, #1
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d3ce      	bcc.n	80019aa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695a      	ldr	r2, [r3, #20]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001a1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 fc73 	bl	800430c <USB_ReadInterrupts>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a30:	d155      	bne.n	8001ade <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a32:	2301      	movs	r3, #1
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
 8001a36:	e045      	b.n	8001ac4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	015a      	lsls	r2, r3, #5
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4413      	add	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d12e      	bne.n	8001abe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	da2b      	bge.n	8001abe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d121      	bne.n	8001abe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10a      	bne.n	8001abe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	69fa      	ldr	r2, [r7, #28]
 8001ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aba:	6053      	str	r3, [r2, #4]
            break;
 8001abc:	e007      	b.n	8001ace <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d3b4      	bcc.n	8001a38 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 fc12 	bl	800430c <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af2:	d10a      	bne.n	8001b0a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f004 fcef 	bl	80064d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 fbfc 	bl	800430c <USB_ReadInterrupts>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d115      	bne.n	8001b4a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d002      	beq.n	8001b36 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f004 fcdf 	bl	80064f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	e000      	b.n	8001b4a <HAL_PCD_IRQHandler+0x938>
      return;
 8001b48:	bf00      	nop
    }
  }
}
 8001b4a:	3734      	adds	r7, #52	; 0x34
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd90      	pop	{r4, r7, pc}

08001b50 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_PCD_SetAddress+0x1a>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e013      	b.n	8001b92 <HAL_PCD_SetAddress+0x42>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	78fa      	ldrb	r2, [r7, #3]
 8001b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	4611      	mov	r1, r2
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 fb5a 	bl	800423c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b084      	sub	sp, #16
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	4608      	mov	r0, r1
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4603      	mov	r3, r0
 8001baa:	70fb      	strb	r3, [r7, #3]
 8001bac:	460b      	mov	r3, r1
 8001bae:	803b      	strh	r3, [r7, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da0f      	bge.n	8001be0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	f003 020f 	and.w	r2, r3, #15
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	3338      	adds	r3, #56	; 0x38
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	705a      	strb	r2, [r3, #1]
 8001bde:	e00f      	b.n	8001c00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	f003 020f 	and.w	r2, r3, #15
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	4413      	add	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c0c:	883a      	ldrh	r2, [r7, #0]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	78ba      	ldrb	r2, [r7, #2]
 8001c16:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d004      	beq.n	8001c2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c2a:	78bb      	ldrb	r3, [r7, #2]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d102      	bne.n	8001c36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_PCD_EP_Open+0xaa>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e00e      	b.n	8001c62 <HAL_PCD_EP_Open+0xc8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f001 fbda 	bl	800340c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c60:	7afb      	ldrb	r3, [r7, #11]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	460b      	mov	r3, r1
 8001c74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	da0f      	bge.n	8001c9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	f003 020f 	and.w	r2, r3, #15
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	3338      	adds	r3, #56	; 0x38
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	3304      	adds	r3, #4
 8001c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	705a      	strb	r2, [r3, #1]
 8001c9c:	e00f      	b.n	8001cbe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c9e:	78fb      	ldrb	r3, [r7, #3]
 8001ca0:	f003 020f 	and.w	r2, r3, #15
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_PCD_EP_Close+0x6e>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e00e      	b.n	8001cf6 <HAL_PCD_EP_Close+0x8c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f001 fc18 	bl	800351c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
 8001d10:	f003 020f 	and.w	r2, r3, #15
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2200      	movs	r2, #0
 8001d38:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d102      	bne.n	8001d5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d5a:	7afb      	ldrb	r3, [r7, #11]
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	6979      	ldr	r1, [r7, #20]
 8001d72:	f001 fef7 	bl	8003b64 <USB_EP0StartXfer>
 8001d76:	e008      	b.n	8001d8a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	6979      	ldr	r1, [r7, #20]
 8001d86:	f001 fca5 	bl	80036d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	460b      	mov	r3, r1
 8001da2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da4:	7afb      	ldrb	r3, [r7, #11]
 8001da6:	f003 020f 	and.w	r2, r3, #15
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	3338      	adds	r3, #56	; 0x38
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	3304      	adds	r3, #4
 8001dba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d102      	bne.n	8001dee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dee:	7afb      	ldrb	r3, [r7, #11]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	6979      	ldr	r1, [r7, #20]
 8001e06:	f001 fead 	bl	8003b64 <USB_EP0StartXfer>
 8001e0a:	e008      	b.n	8001e1e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	6979      	ldr	r1, [r7, #20]
 8001e1a:	f001 fc5b 	bl	80036d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d901      	bls.n	8001e46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e050      	b.n	8001ee8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	da0f      	bge.n	8001e6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 020f 	and.w	r2, r3, #15
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	3338      	adds	r3, #56	; 0x38
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	3304      	adds	r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	705a      	strb	r2, [r3, #1]
 8001e6c:	e00d      	b.n	8001e8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_PCD_EP_SetStall+0x82>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e01e      	b.n	8001ee8 <HAL_PCD_EP_SetStall+0xc0>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68f9      	ldr	r1, [r7, #12]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 f8eb 	bl	8004094 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	b2d9      	uxtb	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f002 fadb 	bl	8004494 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 020f 	and.w	r2, r3, #15
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d901      	bls.n	8001f0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e042      	b.n	8001f94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	da0f      	bge.n	8001f36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 020f 	and.w	r2, r3, #15
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	3338      	adds	r3, #56	; 0x38
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	705a      	strb	r2, [r3, #1]
 8001f34:	e00f      	b.n	8001f56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 020f 	and.w	r2, r3, #15
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_PCD_EP_ClrStall+0x86>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e00e      	b.n	8001f94 <HAL_PCD_EP_ClrStall+0xa4>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 f8f3 	bl	8004170 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	da0c      	bge.n	8001fca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 020f 	and.w	r2, r3, #15
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	3338      	adds	r3, #56	; 0x38
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	e00c      	b.n	8001fe4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 020f 	and.w	r2, r3, #15
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68f9      	ldr	r1, [r7, #12]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 ff12 	bl	8003e14 <USB_EPStopXfer>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ff4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b08a      	sub	sp, #40	; 0x28
 8002002:	af02      	add	r7, sp, #8
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	3338      	adds	r3, #56	; 0x38
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	3304      	adds	r3, #4
 8002024:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a1a      	ldr	r2, [r3, #32]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	429a      	cmp	r2, r3
 8002030:	d901      	bls.n	8002036 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06c      	b.n	8002110 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	429a      	cmp	r2, r3
 800204a:	d902      	bls.n	8002052 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3303      	adds	r3, #3
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800205a:	e02b      	b.n	80020b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	699a      	ldr	r2, [r3, #24]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	429a      	cmp	r2, r3
 8002070:	d902      	bls.n	8002078 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	3303      	adds	r3, #3
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6919      	ldr	r1, [r3, #16]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002090:	b2db      	uxtb	r3, r3
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4603      	mov	r3, r0
 8002096:	6978      	ldr	r0, [r7, #20]
 8002098:	f001 ff66 	bl	8003f68 <USB_WritePacket>

    ep->xfer_buff  += len;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	441a      	add	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a1a      	ldr	r2, [r3, #32]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	441a      	add	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d809      	bhi.n	80020de <PCD_WriteEmptyTxFifo+0xe0>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d203      	bcs.n	80020de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1be      	bne.n	800205c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d811      	bhi.n	800210e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	2201      	movs	r2, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	43db      	mvns	r3, r3
 8002104:	6939      	ldr	r1, [r7, #16]
 8002106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800210a:	4013      	ands	r3, r2
 800210c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3720      	adds	r7, #32
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	333c      	adds	r3, #60	; 0x3c
 8002130:	3304      	adds	r3, #4
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4413      	add	r3, r2
 800213e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d17b      	bne.n	8002246 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d015      	beq.n	8002184 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4a61      	ldr	r2, [pc, #388]	; (80022e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	f240 80b9 	bls.w	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80b3 	beq.w	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217a:	461a      	mov	r2, r3
 800217c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002180:	6093      	str	r3, [r2, #8]
 8002182:	e0a7      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4413      	add	r3, r2
 8002196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219a:	461a      	mov	r2, r3
 800219c:	2320      	movs	r3, #32
 800219e:	6093      	str	r3, [r2, #8]
 80021a0:	e098      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 8093 	bne.w	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	4a4b      	ldr	r2, [pc, #300]	; (80022e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d90f      	bls.n	80021d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021cc:	461a      	mov	r2, r3
 80021ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d2:	6093      	str	r3, [r2, #8]
 80021d4:	e07e      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4413      	add	r3, r2
 80021e8:	3304      	adds	r3, #4
 80021ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	0159      	lsls	r1, r3, #5
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	440b      	add	r3, r1
 80021f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002202:	1ad2      	subs	r2, r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d114      	bne.n	8002238 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002220:	461a      	mov	r2, r3
 8002222:	2101      	movs	r1, #1
 8002224:	f002 f936 	bl	8004494 <USB_EP0_OutStart>
 8002228:	e006      	b.n	8002238 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	441a      	add	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f004 f886 	bl	8006350 <HAL_PCD_DataOutStageCallback>
 8002244:	e046      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d124      	bne.n	8002298 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002264:	461a      	mov	r2, r3
 8002266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800226a:	6093      	str	r3, [r2, #8]
 800226c:	e032      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002284:	461a      	mov	r2, r3
 8002286:	2320      	movs	r3, #32
 8002288:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	4619      	mov	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f004 f85d 	bl	8006350 <HAL_PCD_DataOutStageCallback>
 8002296:	e01d      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d114      	bne.n	80022c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d108      	bne.n	80022c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022c0:	461a      	mov	r2, r3
 80022c2:	2100      	movs	r1, #0
 80022c4:	f002 f8e6 	bl	8004494 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f004 f83e 	bl	8006350 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3720      	adds	r7, #32
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	4f54300a 	.word	0x4f54300a
 80022e4:	4f54310a 	.word	0x4f54310a

080022e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	333c      	adds	r3, #60	; 0x3c
 8002300:	3304      	adds	r3, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a15      	ldr	r2, [pc, #84]	; (8002370 <PCD_EP_OutSetupPacket_int+0x88>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d90e      	bls.n	800233c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002334:	461a      	mov	r2, r3
 8002336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f003 fff5 	bl	800632c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <PCD_EP_OutSetupPacket_int+0x88>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d90c      	bls.n	8002364 <PCD_EP_OutSetupPacket_int+0x7c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d108      	bne.n	8002364 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800235c:	461a      	mov	r2, r3
 800235e:	2101      	movs	r1, #1
 8002360:	f002 f898 	bl	8004494 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	4f54300a 	.word	0x4f54300a

08002374 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
 8002380:	4613      	mov	r3, r2
 8002382:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d107      	bne.n	80023a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002392:	883b      	ldrh	r3, [r7, #0]
 8002394:	0419      	lsls	r1, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	430a      	orrs	r2, r1
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
 80023a0:	e028      	b.n	80023f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4413      	add	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e00d      	b.n	80023d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	3340      	adds	r3, #64	; 0x40
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4413      	add	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	429a      	cmp	r2, r3
 80023da:	d3ec      	bcc.n	80023b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023dc:	883b      	ldrh	r3, [r7, #0]
 80023de:	0418      	lsls	r0, r3, #16
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	4302      	orrs	r2, r0
 80023ec:	3340      	adds	r3, #64	; 0x40
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e267      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d075      	beq.n	8002546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245a:	4b88      	ldr	r3, [pc, #544]	; (800267c <HAL_RCC_OscConfig+0x240>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b04      	cmp	r3, #4
 8002464:	d00c      	beq.n	8002480 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002466:	4b85      	ldr	r3, [pc, #532]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246e:	2b08      	cmp	r3, #8
 8002470:	d112      	bne.n	8002498 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4b82      	ldr	r3, [pc, #520]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247e:	d10b      	bne.n	8002498 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	4b7e      	ldr	r3, [pc, #504]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d05b      	beq.n	8002544 <HAL_RCC_OscConfig+0x108>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d157      	bne.n	8002544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e242      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d106      	bne.n	80024b0 <HAL_RCC_OscConfig+0x74>
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a75      	ldr	r2, [pc, #468]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e01d      	b.n	80024ec <HAL_RCC_OscConfig+0xb0>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x98>
 80024ba:	4b70      	ldr	r3, [pc, #448]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6f      	ldr	r2, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6c      	ldr	r2, [pc, #432]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e00b      	b.n	80024ec <HAL_RCC_OscConfig+0xb0>
 80024d4:	4b69      	ldr	r3, [pc, #420]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a68      	ldr	r2, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b66      	ldr	r3, [pc, #408]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a65      	ldr	r2, [pc, #404]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d013      	beq.n	800251c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fa2c 	bl	8000950 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024fc:	f7fe fa28 	bl	8000950 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e207      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b5b      	ldr	r3, [pc, #364]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0xc0>
 800251a:	e014      	b.n	8002546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fa18 	bl	8000950 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002524:	f7fe fa14 	bl	8000950 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	; 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e1f3      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	4b51      	ldr	r3, [pc, #324]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0xe8>
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d063      	beq.n	800261a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002552:	4b4a      	ldr	r3, [pc, #296]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00b      	beq.n	8002576 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002566:	2b08      	cmp	r3, #8
 8002568:	d11c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256a:	4b44      	ldr	r3, [pc, #272]	; (800267c <HAL_RCC_OscConfig+0x240>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d116      	bne.n	80025a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_RCC_OscConfig+0x152>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d001      	beq.n	800258e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e1c7      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258e:	4b3b      	ldr	r3, [pc, #236]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4937      	ldr	r1, [pc, #220]	; (800267c <HAL_RCC_OscConfig+0x240>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a2:	e03a      	b.n	800261a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d020      	beq.n	80025ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ac:	4b34      	ldr	r3, [pc, #208]	; (8002680 <HAL_RCC_OscConfig+0x244>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe f9cd 	bl	8000950 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ba:	f7fe f9c9 	bl	8000950 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e1a8      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4925      	ldr	r1, [pc, #148]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]
 80025ec:	e015      	b.n	800261a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_OscConfig+0x244>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe f9ac 	bl	8000950 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fc:	f7fe f9a8 	bl	8000950 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e187      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d036      	beq.n	8002694 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d016      	beq.n	800265c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <HAL_RCC_OscConfig+0x248>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fe f98c 	bl	8000950 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800263c:	f7fe f988 	bl	8000950 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e167      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x200>
 800265a:	e01b      	b.n	8002694 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_OscConfig+0x248>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002662:	f7fe f975 	bl	8000950 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	e00e      	b.n	8002688 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266a:	f7fe f971 	bl	8000950 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d907      	bls.n	8002688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e150      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
 800267c:	40023800 	.word	0x40023800
 8002680:	42470000 	.word	0x42470000
 8002684:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	4b88      	ldr	r3, [pc, #544]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800268a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ea      	bne.n	800266a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8097 	beq.w	80027d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b81      	ldr	r3, [pc, #516]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	4b7d      	ldr	r3, [pc, #500]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a7c      	ldr	r2, [pc, #496]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80026bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
 80026c2:	4b7a      	ldr	r3, [pc, #488]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ce:	2301      	movs	r3, #1
 80026d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	4b77      	ldr	r3, [pc, #476]	; (80028b0 <HAL_RCC_OscConfig+0x474>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d118      	bne.n	8002710 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026de:	4b74      	ldr	r3, [pc, #464]	; (80028b0 <HAL_RCC_OscConfig+0x474>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a73      	ldr	r2, [pc, #460]	; (80028b0 <HAL_RCC_OscConfig+0x474>)
 80026e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ea:	f7fe f931 	bl	8000950 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f2:	f7fe f92d 	bl	8000950 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e10c      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_RCC_OscConfig+0x474>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x2ea>
 8002718:	4b64      	ldr	r3, [pc, #400]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a63      	ldr	r2, [pc, #396]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
 8002724:	e01c      	b.n	8002760 <HAL_RCC_OscConfig+0x324>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b05      	cmp	r3, #5
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x30c>
 800272e:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	4a5e      	ldr	r2, [pc, #376]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	6713      	str	r3, [r2, #112]	; 0x70
 800273a:	4b5c      	ldr	r3, [pc, #368]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	4a5b      	ldr	r2, [pc, #364]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6713      	str	r3, [r2, #112]	; 0x70
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0x324>
 8002748:	4b58      	ldr	r3, [pc, #352]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	4a57      	ldr	r2, [pc, #348]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	6713      	str	r3, [r2, #112]	; 0x70
 8002754:	4b55      	ldr	r3, [pc, #340]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	4a54      	ldr	r2, [pc, #336]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800275a:	f023 0304 	bic.w	r3, r3, #4
 800275e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe f8f2 	bl	8000950 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7fe f8ee 	bl	8000950 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0cb      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002786:	4b49      	ldr	r3, [pc, #292]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0ee      	beq.n	8002770 <HAL_RCC_OscConfig+0x334>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002794:	f7fe f8dc 	bl	8000950 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279c:	f7fe f8d8 	bl	8000950 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0b5      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b2:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ee      	bne.n	800279c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027be:	7dfb      	ldrb	r3, [r7, #23]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d105      	bne.n	80027d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	4a38      	ldr	r2, [pc, #224]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80027ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a1 	beq.w	800291c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027da:	4b34      	ldr	r3, [pc, #208]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d05c      	beq.n	80028a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d141      	bne.n	8002872 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ee:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_RCC_OscConfig+0x478>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe f8ac 	bl	8000950 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe f8a8 	bl	8000950 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e087      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	4b27      	ldr	r3, [pc, #156]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	019b      	lsls	r3, r3, #6
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	085b      	lsrs	r3, r3, #1
 8002832:	3b01      	subs	r3, #1
 8002834:	041b      	lsls	r3, r3, #16
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	061b      	lsls	r3, r3, #24
 800283e:	491b      	ldr	r1, [pc, #108]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x478>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7fe f881 	bl	8000950 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe f87d 	bl	8000950 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e05c      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x416>
 8002870:	e054      	b.n	800291c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_RCC_OscConfig+0x478>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe f86a 	bl	8000950 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe f866 	bl	8000950 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e045      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x444>
 800289e:	e03d      	b.n	800291c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e038      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40007000 	.word	0x40007000
 80028b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x4ec>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d028      	beq.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d121      	bne.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d11a      	bne.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d111      	bne.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	3b01      	subs	r3, #1
 8002902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d107      	bne.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800

0800292c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0cc      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002940:	4b68      	ldr	r3, [pc, #416]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d90c      	bls.n	8002968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b65      	ldr	r3, [pc, #404]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0b8      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002980:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800298a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002998:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4a52      	ldr	r2, [pc, #328]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a4:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	494d      	ldr	r1, [pc, #308]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d044      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d119      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e07f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d003      	beq.n	80029ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ea:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e06f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fa:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e067      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0a:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f023 0203 	bic.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4934      	ldr	r1, [pc, #208]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a1c:	f7fd ff98 	bl	8000950 <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a24:	f7fd ff94 	bl	8000950 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e04f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 020c 	and.w	r2, r3, #12
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d1eb      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d20c      	bcs.n	8002a74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e032      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4916      	ldr	r1, [pc, #88]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab2:	f000 f821 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	490a      	ldr	r1, [pc, #40]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	5ccb      	ldrb	r3, [r1, r3]
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fef8 	bl	80008c8 <HAL_InitTick>

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023c00 	.word	0x40023c00
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	08006938 	.word	0x08006938
 8002af0:	20000004 	.word	0x20000004
 8002af4:	20000008 	.word	0x20000008

08002af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002afc:	b094      	sub	sp, #80	; 0x50
 8002afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	647b      	str	r3, [r7, #68]	; 0x44
 8002b04:	2300      	movs	r3, #0
 8002b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b08:	2300      	movs	r3, #0
 8002b0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b10:	4b79      	ldr	r3, [pc, #484]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d00d      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x40>
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	f200 80e1 	bhi.w	8002ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x34>
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d003      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b2a:	e0db      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b2c:	4b73      	ldr	r3, [pc, #460]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8002b2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b30:	e0db      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b32:	4b73      	ldr	r3, [pc, #460]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b36:	e0d8      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b38:	4b6f      	ldr	r3, [pc, #444]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b42:	4b6d      	ldr	r3, [pc, #436]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d063      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4e:	4b6a      	ldr	r3, [pc, #424]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	2200      	movs	r2, #0
 8002b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
 8002b62:	2300      	movs	r3, #0
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
 8002b66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	462b      	mov	r3, r5
 8002b6e:	f04f 0000 	mov.w	r0, #0
 8002b72:	f04f 0100 	mov.w	r1, #0
 8002b76:	0159      	lsls	r1, r3, #5
 8002b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b7c:	0150      	lsls	r0, r2, #5
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4621      	mov	r1, r4
 8002b84:	1a51      	subs	r1, r2, r1
 8002b86:	6139      	str	r1, [r7, #16]
 8002b88:	4629      	mov	r1, r5
 8002b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b9c:	4659      	mov	r1, fp
 8002b9e:	018b      	lsls	r3, r1, #6
 8002ba0:	4651      	mov	r1, sl
 8002ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ba6:	4651      	mov	r1, sl
 8002ba8:	018a      	lsls	r2, r1, #6
 8002baa:	4651      	mov	r1, sl
 8002bac:	ebb2 0801 	subs.w	r8, r2, r1
 8002bb0:	4659      	mov	r1, fp
 8002bb2:	eb63 0901 	sbc.w	r9, r3, r1
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bca:	4690      	mov	r8, r2
 8002bcc:	4699      	mov	r9, r3
 8002bce:	4623      	mov	r3, r4
 8002bd0:	eb18 0303 	adds.w	r3, r8, r3
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	462b      	mov	r3, r5
 8002bd8:	eb49 0303 	adc.w	r3, r9, r3
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bea:	4629      	mov	r1, r5
 8002bec:	024b      	lsls	r3, r1, #9
 8002bee:	4621      	mov	r1, r4
 8002bf0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	024a      	lsls	r2, r1, #9
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfe:	2200      	movs	r2, #0
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c08:	f7fd fade 	bl	80001c8 <__aeabi_uldivmod>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4613      	mov	r3, r2
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c14:	e058      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c16:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	099b      	lsrs	r3, r3, #6
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	4611      	mov	r1, r2
 8002c22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c26:	623b      	str	r3, [r7, #32]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c30:	4642      	mov	r2, r8
 8002c32:	464b      	mov	r3, r9
 8002c34:	f04f 0000 	mov.w	r0, #0
 8002c38:	f04f 0100 	mov.w	r1, #0
 8002c3c:	0159      	lsls	r1, r3, #5
 8002c3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c42:	0150      	lsls	r0, r2, #5
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4641      	mov	r1, r8
 8002c4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c4e:	4649      	mov	r1, r9
 8002c50:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c68:	ebb2 040a 	subs.w	r4, r2, sl
 8002c6c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	00eb      	lsls	r3, r5, #3
 8002c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7e:	00e2      	lsls	r2, r4, #3
 8002c80:	4614      	mov	r4, r2
 8002c82:	461d      	mov	r5, r3
 8002c84:	4643      	mov	r3, r8
 8002c86:	18e3      	adds	r3, r4, r3
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	eb45 0303 	adc.w	r3, r5, r3
 8002c90:	607b      	str	r3, [r7, #4]
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	028b      	lsls	r3, r1, #10
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca8:	4621      	mov	r1, r4
 8002caa:	028a      	lsls	r2, r1, #10
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	61fa      	str	r2, [r7, #28]
 8002cb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cbc:	f7fd fa84 	bl	80001c8 <__aeabi_uldivmod>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ce2:	e002      	b.n	8002cea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ce6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3750      	adds	r7, #80	; 0x50
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	007a1200 	.word	0x007a1200

08002d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000004 	.word	0x20000004

08002d1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	f107 001c 	add.w	r0, r7, #28
 8002d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d122      	bne.n	8002d7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d105      	bne.n	8002d6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f001 fbee 	bl	8004550 <USB_CoreReset>
 8002d74:	4603      	mov	r3, r0
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e01a      	b.n	8002db0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f001 fbe2 	bl	8004550 <USB_CoreReset>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
 8002da2:	e005      	b.n	8002db0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d10b      	bne.n	8002dce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f043 0206 	orr.w	r2, r3, #6
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dda:	b004      	add	sp, #16
 8002ddc:	4770      	bx	lr
	...

08002de0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d165      	bne.n	8002ec0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4a41      	ldr	r2, [pc, #260]	; (8002efc <USB_SetTurnaroundTime+0x11c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d906      	bls.n	8002e0a <USB_SetTurnaroundTime+0x2a>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4a40      	ldr	r2, [pc, #256]	; (8002f00 <USB_SetTurnaroundTime+0x120>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d202      	bcs.n	8002e0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e04:	230f      	movs	r3, #15
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e062      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4a3c      	ldr	r2, [pc, #240]	; (8002f00 <USB_SetTurnaroundTime+0x120>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d306      	bcc.n	8002e20 <USB_SetTurnaroundTime+0x40>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <USB_SetTurnaroundTime+0x124>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d202      	bcs.n	8002e20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e1a:	230e      	movs	r3, #14
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e057      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <USB_SetTurnaroundTime+0x124>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d306      	bcc.n	8002e36 <USB_SetTurnaroundTime+0x56>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4a37      	ldr	r2, [pc, #220]	; (8002f08 <USB_SetTurnaroundTime+0x128>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d202      	bcs.n	8002e36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e30:	230d      	movs	r3, #13
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	e04c      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4a33      	ldr	r2, [pc, #204]	; (8002f08 <USB_SetTurnaroundTime+0x128>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d306      	bcc.n	8002e4c <USB_SetTurnaroundTime+0x6c>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4a32      	ldr	r2, [pc, #200]	; (8002f0c <USB_SetTurnaroundTime+0x12c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d802      	bhi.n	8002e4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e46:	230c      	movs	r3, #12
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e041      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4a2f      	ldr	r2, [pc, #188]	; (8002f0c <USB_SetTurnaroundTime+0x12c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d906      	bls.n	8002e62 <USB_SetTurnaroundTime+0x82>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4a2e      	ldr	r2, [pc, #184]	; (8002f10 <USB_SetTurnaroundTime+0x130>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d802      	bhi.n	8002e62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e5c:	230b      	movs	r3, #11
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	e036      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <USB_SetTurnaroundTime+0x130>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d906      	bls.n	8002e78 <USB_SetTurnaroundTime+0x98>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <USB_SetTurnaroundTime+0x134>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d802      	bhi.n	8002e78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e72:	230a      	movs	r3, #10
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	e02b      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4a26      	ldr	r2, [pc, #152]	; (8002f14 <USB_SetTurnaroundTime+0x134>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d906      	bls.n	8002e8e <USB_SetTurnaroundTime+0xae>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <USB_SetTurnaroundTime+0x138>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d202      	bcs.n	8002e8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e88:	2309      	movs	r3, #9
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e020      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	4a21      	ldr	r2, [pc, #132]	; (8002f18 <USB_SetTurnaroundTime+0x138>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d306      	bcc.n	8002ea4 <USB_SetTurnaroundTime+0xc4>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4a20      	ldr	r2, [pc, #128]	; (8002f1c <USB_SetTurnaroundTime+0x13c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d802      	bhi.n	8002ea4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e015      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	4a1d      	ldr	r2, [pc, #116]	; (8002f1c <USB_SetTurnaroundTime+0x13c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d906      	bls.n	8002eba <USB_SetTurnaroundTime+0xda>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4a1c      	ldr	r2, [pc, #112]	; (8002f20 <USB_SetTurnaroundTime+0x140>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d202      	bcs.n	8002eba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002eb4:	2307      	movs	r3, #7
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	e00a      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002eba:	2306      	movs	r3, #6
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e007      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ec6:	2309      	movs	r3, #9
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e001      	b.n	8002ed0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ecc:	2309      	movs	r3, #9
 8002ece:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	029b      	lsls	r3, r3, #10
 8002ee4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	00d8acbf 	.word	0x00d8acbf
 8002f00:	00e4e1c0 	.word	0x00e4e1c0
 8002f04:	00f42400 	.word	0x00f42400
 8002f08:	01067380 	.word	0x01067380
 8002f0c:	011a499f 	.word	0x011a499f
 8002f10:	01312cff 	.word	0x01312cff
 8002f14:	014ca43f 	.word	0x014ca43f
 8002f18:	016e3600 	.word	0x016e3600
 8002f1c:	01a6ab1f 	.word	0x01a6ab1f
 8002f20:	01e84800 	.word	0x01e84800

08002f24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f043 0201 	orr.w	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f023 0201 	bic.w	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d115      	bne.n	8002fb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f96:	2001      	movs	r0, #1
 8002f98:	f7fd fce6 	bl	8000968 <HAL_Delay>
      ms++;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f001 fa45 	bl	8004432 <USB_GetMode>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d01e      	beq.n	8002fec <USB_SetCurrentMode+0x84>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b31      	cmp	r3, #49	; 0x31
 8002fb2:	d9f0      	bls.n	8002f96 <USB_SetCurrentMode+0x2e>
 8002fb4:	e01a      	b.n	8002fec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d115      	bne.n	8002fe8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002fc8:	2001      	movs	r0, #1
 8002fca:	f7fd fccd 	bl	8000968 <HAL_Delay>
      ms++;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f001 fa2c 	bl	8004432 <USB_GetMode>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d005      	beq.n	8002fec <USB_SetCurrentMode+0x84>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2b31      	cmp	r3, #49	; 0x31
 8002fe4:	d9f0      	bls.n	8002fc8 <USB_SetCurrentMode+0x60>
 8002fe6:	e001      	b.n	8002fec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e005      	b.n	8002ff8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b32      	cmp	r3, #50	; 0x32
 8002ff0:	d101      	bne.n	8002ff6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003000:	b084      	sub	sp, #16
 8003002:	b580      	push	{r7, lr}
 8003004:	b086      	sub	sp, #24
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800300e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	e009      	b.n	8003034 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	3340      	adds	r3, #64	; 0x40
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	2200      	movs	r2, #0
 800302c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	3301      	adds	r3, #1
 8003032:	613b      	str	r3, [r7, #16]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	2b0e      	cmp	r3, #14
 8003038:	d9f2      	bls.n	8003020 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800303a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d11c      	bne.n	800307a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800304e:	f043 0302 	orr.w	r3, r3, #2
 8003052:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003058:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003064:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	639a      	str	r2, [r3, #56]	; 0x38
 8003078:	e00b      	b.n	8003092 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003098:	461a      	mov	r2, r3
 800309a:	2300      	movs	r3, #0
 800309c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a4:	4619      	mov	r1, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ac:	461a      	mov	r2, r3
 80030ae:	680b      	ldr	r3, [r1, #0]
 80030b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d10c      	bne.n	80030d2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d104      	bne.n	80030c8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030be:	2100      	movs	r1, #0
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f965 	bl	8003390 <USB_SetDevSpeed>
 80030c6:	e008      	b.n	80030da <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030c8:	2101      	movs	r1, #1
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f960 	bl	8003390 <USB_SetDevSpeed>
 80030d0:	e003      	b.n	80030da <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030d2:	2103      	movs	r1, #3
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f95b 	bl	8003390 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030da:	2110      	movs	r1, #16
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f8f3 	bl	80032c8 <USB_FlushTxFifo>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f91f 	bl	8003330 <USB_FlushRxFifo>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003102:	461a      	mov	r2, r3
 8003104:	2300      	movs	r3, #0
 8003106:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310e:	461a      	mov	r2, r3
 8003110:	2300      	movs	r3, #0
 8003112:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311a:	461a      	mov	r2, r3
 800311c:	2300      	movs	r3, #0
 800311e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003120:	2300      	movs	r3, #0
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	e043      	b.n	80031ae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800313c:	d118      	bne.n	8003170 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10a      	bne.n	800315a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	015a      	lsls	r2, r3, #5
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4413      	add	r3, r2
 800314c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003150:	461a      	mov	r2, r3
 8003152:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	e013      	b.n	8003182 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003166:	461a      	mov	r2, r3
 8003168:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e008      	b.n	8003182 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317c:	461a      	mov	r2, r3
 800317e:	2300      	movs	r3, #0
 8003180:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318e:	461a      	mov	r2, r3
 8003190:	2300      	movs	r3, #0
 8003192:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4413      	add	r3, r2
 800319c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a0:	461a      	mov	r2, r3
 80031a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	3301      	adds	r3, #1
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d3b7      	bcc.n	8003126 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	e043      	b.n	8003244 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031d2:	d118      	bne.n	8003206 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e6:	461a      	mov	r2, r3
 80031e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e013      	b.n	8003218 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fc:	461a      	mov	r2, r3
 80031fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	e008      	b.n	8003218 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003212:	461a      	mov	r2, r3
 8003214:	2300      	movs	r3, #0
 8003216:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003224:	461a      	mov	r2, r3
 8003226:	2300      	movs	r3, #0
 8003228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003236:	461a      	mov	r2, r3
 8003238:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800323c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	3301      	adds	r3, #1
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	429a      	cmp	r2, r3
 800324a:	d3b7      	bcc.n	80031bc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800325a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800326c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f043 0210 	orr.w	r2, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <USB_DevInit+0x2c4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800328c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f043 0208 	orr.w	r2, r3, #8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800329e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d107      	bne.n	80032b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032ac:	f043 0304 	orr.w	r3, r3, #4
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032c0:	b004      	add	sp, #16
 80032c2:	4770      	bx	lr
 80032c4:	803c3800 	.word	0x803c3800

080032c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3301      	adds	r3, #1
 80032da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a13      	ldr	r2, [pc, #76]	; (800332c <USB_FlushTxFifo+0x64>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e01b      	b.n	8003320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	daf2      	bge.n	80032d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	019b      	lsls	r3, r3, #6
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3301      	adds	r3, #1
 8003304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <USB_FlushTxFifo+0x64>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e006      	b.n	8003320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b20      	cmp	r3, #32
 800331c:	d0f0      	beq.n	8003300 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	00030d40 	.word	0x00030d40

08003330 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3301      	adds	r3, #1
 8003340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a11      	ldr	r2, [pc, #68]	; (800338c <USB_FlushRxFifo+0x5c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e018      	b.n	8003380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	daf2      	bge.n	800333c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2210      	movs	r2, #16
 800335e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	3301      	adds	r3, #1
 8003364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4a08      	ldr	r2, [pc, #32]	; (800338c <USB_FlushRxFifo+0x5c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e006      	b.n	8003380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b10      	cmp	r3, #16
 800337c:	d0f0      	beq.n	8003360 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	00030d40 	.word	0x00030d40

08003390 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b087      	sub	sp, #28
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0306 	and.w	r3, r3, #6
 80033da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]
 80033e6:	e00a      	b.n	80033fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d002      	beq.n	80033f4 <USB_GetDevSpeed+0x32>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b06      	cmp	r3, #6
 80033f2:	d102      	bne.n	80033fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80033f4:	2302      	movs	r3, #2
 80033f6:	75fb      	strb	r3, [r7, #23]
 80033f8:	e001      	b.n	80033fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80033fa:	230f      	movs	r3, #15
 80033fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003400:	4618      	mov	r0, r3
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	785b      	ldrb	r3, [r3, #1]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d13a      	bne.n	800349e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342e:	69da      	ldr	r2, [r3, #28]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	2101      	movs	r1, #1
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	b29b      	uxth	r3, r3
 8003440:	68f9      	ldr	r1, [r7, #12]
 8003442:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003446:	4313      	orrs	r3, r2
 8003448:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d155      	bne.n	800350c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	791b      	ldrb	r3, [r3, #4]
 800347a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800347c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	059b      	lsls	r3, r3, #22
 8003482:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003484:	4313      	orrs	r3, r2
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	0151      	lsls	r1, r2, #5
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	440a      	add	r2, r1
 800348e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	e036      	b.n	800350c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a4:	69da      	ldr	r2, [r3, #28]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	2101      	movs	r1, #1
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	041b      	lsls	r3, r3, #16
 80034b6:	68f9      	ldr	r1, [r7, #12]
 80034b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034bc:	4313      	orrs	r3, r2
 80034be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d11a      	bne.n	800350c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	791b      	ldrb	r3, [r3, #4]
 80034f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034f2:	430b      	orrs	r3, r1
 80034f4:	4313      	orrs	r3, r2
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	0151      	lsls	r1, r2, #5
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	440a      	add	r2, r1
 80034fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800350a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	785b      	ldrb	r3, [r3, #1]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d161      	bne.n	80035fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800354a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800354e:	d11f      	bne.n	8003590 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	0151      	lsls	r1, r2, #5
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	440a      	add	r2, r1
 8003566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800356a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800356e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	0151      	lsls	r1, r2, #5
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	440a      	add	r2, r1
 8003586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800358a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800358e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	68f9      	ldr	r1, [r7, #12]
 80035ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035b0:	4013      	ands	r3, r2
 80035b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ba:	69da      	ldr	r2, [r3, #28]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	f003 030f 	and.w	r3, r3, #15
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	68f9      	ldr	r1, [r7, #12]
 80035d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035d4:	4013      	ands	r3, r2
 80035d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	0159      	lsls	r1, r3, #5
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	440b      	add	r3, r1
 80035ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f2:	4619      	mov	r1, r3
 80035f4:	4b35      	ldr	r3, [pc, #212]	; (80036cc <USB_DeactivateEndpoint+0x1b0>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]
 80035fa:	e060      	b.n	80036be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800360e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003612:	d11f      	bne.n	8003654 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	0151      	lsls	r1, r2, #5
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	440a      	add	r2, r1
 800362a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800362e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003632:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	0151      	lsls	r1, r2, #5
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	440a      	add	r2, r1
 800364a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800364e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003652:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	2101      	movs	r1, #1
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	43db      	mvns	r3, r3
 800366e:	68f9      	ldr	r1, [r7, #12]
 8003670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003674:	4013      	ands	r3, r2
 8003676:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	2101      	movs	r1, #1
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	041b      	lsls	r3, r3, #16
 8003690:	43db      	mvns	r3, r3
 8003692:	68f9      	ldr	r1, [r7, #12]
 8003694:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003698:	4013      	ands	r3, r2
 800369a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	0159      	lsls	r1, r3, #5
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	440b      	add	r3, r1
 80036b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b6:	4619      	mov	r1, r3
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <USB_DeactivateEndpoint+0x1b4>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	ec337800 	.word	0xec337800
 80036d0:	eff37800 	.word	0xeff37800

080036d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	785b      	ldrb	r3, [r3, #1]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	f040 815c 	bne.w	80039ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d132      	bne.n	8003764 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	0151      	lsls	r1, r2, #5
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	440a      	add	r2, r1
 8003714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003718:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800371c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003720:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	0151      	lsls	r1, r2, #5
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	440a      	add	r2, r1
 8003738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800373c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003740:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	0151      	lsls	r1, r2, #5
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	440a      	add	r2, r1
 8003758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800375c:	0cdb      	lsrs	r3, r3, #19
 800375e:	04db      	lsls	r3, r3, #19
 8003760:	6113      	str	r3, [r2, #16]
 8003762:	e074      	b.n	800384e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	0151      	lsls	r1, r2, #5
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	440a      	add	r2, r1
 800377a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800377e:	0cdb      	lsrs	r3, r3, #19
 8003780:	04db      	lsls	r3, r3, #19
 8003782:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	0151      	lsls	r1, r2, #5
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	440a      	add	r2, r1
 800379a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800379e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	6999      	ldr	r1, [r3, #24]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	440b      	add	r3, r1
 80037c0:	1e59      	subs	r1, r3, #1
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037cc:	4b9d      	ldr	r3, [pc, #628]	; (8003a44 <USB_EPStartXfer+0x370>)
 80037ce:	400b      	ands	r3, r1
 80037d0:	69b9      	ldr	r1, [r7, #24]
 80037d2:	0148      	lsls	r0, r1, #5
 80037d4:	69f9      	ldr	r1, [r7, #28]
 80037d6:	4401      	add	r1, r0
 80037d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037dc:	4313      	orrs	r3, r2
 80037de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f6:	69b9      	ldr	r1, [r7, #24]
 80037f8:	0148      	lsls	r0, r1, #5
 80037fa:	69f9      	ldr	r1, [r7, #28]
 80037fc:	4401      	add	r1, r0
 80037fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003802:	4313      	orrs	r3, r2
 8003804:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	791b      	ldrb	r3, [r3, #4]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d11f      	bne.n	800384e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	0151      	lsls	r1, r2, #5
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	440a      	add	r2, r1
 8003824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003828:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800382c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	0151      	lsls	r1, r2, #5
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	440a      	add	r2, r1
 8003844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003848:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800384c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d14b      	bne.n	80038ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d009      	beq.n	8003870 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003868:	461a      	mov	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	791b      	ldrb	r3, [r3, #4]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d128      	bne.n	80038ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003884:	2b00      	cmp	r3, #0
 8003886:	d110      	bne.n	80038aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	0151      	lsls	r1, r2, #5
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	440a      	add	r2, r1
 800389e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e00f      	b.n	80038ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	0151      	lsls	r1, r2, #5
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	440a      	add	r2, r1
 80038c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	0151      	lsls	r1, r2, #5
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	440a      	add	r2, r1
 80038e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	e133      	b.n	8003b54 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	0151      	lsls	r1, r2, #5
 80038fe:	69fa      	ldr	r2, [r7, #28]
 8003900:	440a      	add	r2, r1
 8003902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003906:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800390a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	791b      	ldrb	r3, [r3, #4]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d015      	beq.n	8003940 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 811b 	beq.w	8003b54 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	2101      	movs	r1, #1
 8003930:	fa01 f303 	lsl.w	r3, r1, r3
 8003934:	69f9      	ldr	r1, [r7, #28]
 8003936:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800393a:	4313      	orrs	r3, r2
 800393c:	634b      	str	r3, [r1, #52]	; 0x34
 800393e:	e109      	b.n	8003b54 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d110      	bne.n	8003972 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	0151      	lsls	r1, r2, #5
 8003962:	69fa      	ldr	r2, [r7, #28]
 8003964:	440a      	add	r2, r1
 8003966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800396a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	e00f      	b.n	8003992 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	0151      	lsls	r1, r2, #5
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	440a      	add	r2, r1
 8003988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800398c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003990:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	6919      	ldr	r1, [r3, #16]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	b298      	uxth	r0, r3
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	4603      	mov	r3, r0
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fade 	bl	8003f68 <USB_WritePacket>
 80039ac:	e0d2      	b.n	8003b54 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	0151      	lsls	r1, r2, #5
 80039c0:	69fa      	ldr	r2, [r7, #28]
 80039c2:	440a      	add	r2, r1
 80039c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039c8:	0cdb      	lsrs	r3, r3, #19
 80039ca:	04db      	lsls	r3, r3, #19
 80039cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	0151      	lsls	r1, r2, #5
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	440a      	add	r2, r1
 80039e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d126      	bne.n	8003a48 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a10:	69b9      	ldr	r1, [r7, #24]
 8003a12:	0148      	lsls	r0, r1, #5
 8003a14:	69f9      	ldr	r1, [r7, #28]
 8003a16:	4401      	add	r1, r0
 8003a18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	0151      	lsls	r1, r2, #5
 8003a32:	69fa      	ldr	r2, [r7, #28]
 8003a34:	440a      	add	r2, r1
 8003a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a3e:	6113      	str	r3, [r2, #16]
 8003a40:	e03a      	b.n	8003ab8 <USB_EPStartXfer+0x3e4>
 8003a42:	bf00      	nop
 8003a44:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4413      	add	r3, r2
 8003a52:	1e5a      	subs	r2, r3, #1
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	8afa      	ldrh	r2, [r7, #22]
 8003a64:	fb03 f202 	mul.w	r2, r3, r2
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	8afb      	ldrh	r3, [r7, #22]
 8003a7c:	04d9      	lsls	r1, r3, #19
 8003a7e:	4b38      	ldr	r3, [pc, #224]	; (8003b60 <USB_EPStartXfer+0x48c>)
 8003a80:	400b      	ands	r3, r1
 8003a82:	69b9      	ldr	r1, [r7, #24]
 8003a84:	0148      	lsls	r0, r1, #5
 8003a86:	69f9      	ldr	r1, [r7, #28]
 8003a88:	4401      	add	r1, r0
 8003a8a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa8:	69b9      	ldr	r1, [r7, #24]
 8003aaa:	0148      	lsls	r0, r1, #5
 8003aac:	69f9      	ldr	r1, [r7, #28]
 8003aae:	4401      	add	r1, r0
 8003ab0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d10d      	bne.n	8003ada <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d009      	beq.n	8003ada <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	6919      	ldr	r1, [r3, #16]
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad6:	460a      	mov	r2, r1
 8003ad8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	791b      	ldrb	r3, [r3, #4]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d128      	bne.n	8003b34 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d110      	bne.n	8003b14 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	0151      	lsls	r1, r2, #5
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	440a      	add	r2, r1
 8003b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e00f      	b.n	8003b34 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69ba      	ldr	r2, [r7, #24]
 8003b24:	0151      	lsls	r1, r2, #5
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	440a      	add	r2, r1
 8003b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	0151      	lsls	r1, r2, #5
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	440a      	add	r2, r1
 8003b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3720      	adds	r7, #32
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	1ff80000 	.word	0x1ff80000

08003b64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	785b      	ldrb	r3, [r3, #1]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	f040 80ce 	bne.w	8003d22 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d132      	bne.n	8003bf4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	0151      	lsls	r1, r2, #5
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	440a      	add	r2, r1
 8003ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	0151      	lsls	r1, r2, #5
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	440a      	add	r2, r1
 8003bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	0151      	lsls	r1, r2, #5
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	440a      	add	r2, r1
 8003be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bec:	0cdb      	lsrs	r3, r3, #19
 8003bee:	04db      	lsls	r3, r3, #19
 8003bf0:	6113      	str	r3, [r2, #16]
 8003bf2:	e04e      	b.n	8003c92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	0151      	lsls	r1, r2, #5
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	440a      	add	r2, r1
 8003c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c0e:	0cdb      	lsrs	r3, r3, #19
 8003c10:	04db      	lsls	r3, r3, #19
 8003c12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	0151      	lsls	r1, r2, #5
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	440a      	add	r2, r1
 8003c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	699a      	ldr	r2, [r3, #24]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d903      	bls.n	8003c4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	0151      	lsls	r1, r2, #5
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	440a      	add	r2, r1
 8003c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c82:	6939      	ldr	r1, [r7, #16]
 8003c84:	0148      	lsls	r0, r1, #5
 8003c86:	6979      	ldr	r1, [r7, #20]
 8003c88:	4401      	add	r1, r0
 8003c8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003c92:	79fb      	ldrb	r3, [r7, #7]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d11e      	bne.n	8003cd6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d009      	beq.n	8003cb4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cac:	461a      	mov	r2, r3
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	0151      	lsls	r1, r2, #5
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	440a      	add	r2, r1
 8003cca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	e097      	b.n	8003e06 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	0151      	lsls	r1, r2, #5
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	440a      	add	r2, r1
 8003cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cf4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 8083 	beq.w	8003e06 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	2101      	movs	r1, #1
 8003d12:	fa01 f303 	lsl.w	r3, r1, r3
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	634b      	str	r3, [r1, #52]	; 0x34
 8003d20:	e071      	b.n	8003e06 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	0151      	lsls	r1, r2, #5
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	440a      	add	r2, r1
 8003d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d3c:	0cdb      	lsrs	r3, r3, #19
 8003d3e:	04db      	lsls	r3, r3, #19
 8003d40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	0151      	lsls	r1, r2, #5
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	440a      	add	r2, r1
 8003d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d64:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	0151      	lsls	r1, r2, #5
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	440a      	add	r2, r1
 8003d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db4:	6939      	ldr	r1, [r7, #16]
 8003db6:	0148      	lsls	r0, r1, #5
 8003db8:	6979      	ldr	r1, [r7, #20]
 8003dba:	4401      	add	r1, r0
 8003dbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003dc4:	79fb      	ldrb	r3, [r7, #7]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10d      	bne.n	8003de6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6919      	ldr	r1, [r3, #16]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	460a      	mov	r2, r1
 8003de4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	0151      	lsls	r1, r2, #5
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d14a      	bne.n	8003ec8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e4a:	f040 8086 	bne.w	8003f5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e70:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	7812      	ldrb	r2, [r2, #0]
 8003e86:	0151      	lsls	r1, r2, #5
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	440a      	add	r2, r1
 8003e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d902      	bls.n	8003eac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	75fb      	strb	r3, [r7, #23]
          break;
 8003eaa:	e056      	b.n	8003f5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ec4:	d0e7      	beq.n	8003e96 <USB_EPStopXfer+0x82>
 8003ec6:	e048      	b.n	8003f5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee0:	d13b      	bne.n	8003f5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	7812      	ldrb	r2, [r2, #0]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	7812      	ldrb	r2, [r2, #0]
 8003f1a:	0151      	lsls	r1, r2, #5
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	440a      	add	r2, r1
 8003f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d902      	bls.n	8003f40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8003f3e:	e00c      	b.n	8003f5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f58:	d0e7      	beq.n	8003f2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	371c      	adds	r7, #28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	4611      	mov	r1, r2
 8003f74:	461a      	mov	r2, r3
 8003f76:	460b      	mov	r3, r1
 8003f78:	71fb      	strb	r3, [r7, #7]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d123      	bne.n	8003fd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f8e:	88bb      	ldrh	r3, [r7, #4]
 8003f90:	3303      	adds	r3, #3
 8003f92:	089b      	lsrs	r3, r3, #2
 8003f94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f96:	2300      	movs	r3, #0
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e018      	b.n	8003fce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	031a      	lsls	r2, r3, #12
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa8:	461a      	mov	r2, r3
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d3e2      	bcc.n	8003f9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3724      	adds	r7, #36	; 0x24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b08b      	sub	sp, #44	; 0x2c
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	089b      	lsrs	r3, r3, #2
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800400a:	2300      	movs	r3, #0
 800400c:	623b      	str	r3, [r7, #32]
 800400e:	e014      	b.n	800403a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	601a      	str	r2, [r3, #0]
    pDest++;
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	3301      	adds	r3, #1
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	3301      	adds	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	3301      	adds	r3, #1
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	3301      	adds	r3, #1
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	3301      	adds	r3, #1
 8004038:	623b      	str	r3, [r7, #32]
 800403a:	6a3a      	ldr	r2, [r7, #32]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	429a      	cmp	r2, r3
 8004040:	d3e6      	bcc.n	8004010 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004042:	8bfb      	ldrh	r3, [r7, #30]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01e      	beq.n	8004086 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004052:	461a      	mov	r2, r3
 8004054:	f107 0310 	add.w	r3, r7, #16
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
 8004068:	b2da      	uxtb	r2, r3
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	701a      	strb	r2, [r3, #0]
      i++;
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	3301      	adds	r3, #1
 8004072:	623b      	str	r3, [r7, #32]
      pDest++;
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	3301      	adds	r3, #1
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800407a:	8bfb      	ldrh	r3, [r7, #30]
 800407c:	3b01      	subs	r3, #1
 800407e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004080:	8bfb      	ldrh	r3, [r7, #30]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1ea      	bne.n	800405c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004088:	4618      	mov	r0, r3
 800408a:	372c      	adds	r7, #44	; 0x2c
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	785b      	ldrb	r3, [r3, #1]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d12c      	bne.n	800410a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	db12      	blt.n	80040e8 <USB_EPSetStall+0x54>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00f      	beq.n	80040e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	0151      	lsls	r1, r2, #5
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	440a      	add	r2, r1
 80040de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	0151      	lsls	r1, r2, #5
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	440a      	add	r2, r1
 80040fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004102:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	e02b      	b.n	8004162 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	db12      	blt.n	8004142 <USB_EPSetStall+0xae>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00f      	beq.n	8004142 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	440a      	add	r2, r1
 8004138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800413c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004140:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	0151      	lsls	r1, r2, #5
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	440a      	add	r2, r1
 8004158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800415c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004160:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	785b      	ldrb	r3, [r3, #1]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d128      	bne.n	80041de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	0151      	lsls	r1, r2, #5
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	440a      	add	r2, r1
 80041a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	791b      	ldrb	r3, [r3, #4]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d003      	beq.n	80041bc <USB_EPClearStall+0x4c>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	791b      	ldrb	r3, [r3, #4]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d138      	bne.n	800422e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e027      	b.n	800422e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	791b      	ldrb	r3, [r3, #4]
 8004202:	2b03      	cmp	r3, #3
 8004204:	d003      	beq.n	800420e <USB_EPClearStall+0x9e>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	791b      	ldrb	r3, [r3, #4]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d10f      	bne.n	800422e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	440a      	add	r2, r1
 8004224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800425e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004270:	68f9      	ldr	r1, [r7, #12]
 8004272:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004276:	4313      	orrs	r3, r2
 8004278:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042a2:	f023 0303 	bic.w	r3, r3, #3
 80042a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b6:	f023 0302 	bic.w	r3, r3, #2
 80042ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042e4:	f023 0303 	bic.w	r3, r3, #3
 80042e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042f8:	f043 0302 	orr.w	r3, r3, #2
 80042fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4013      	ands	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004324:	68fb      	ldr	r3, [r7, #12]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004332:	b480      	push	{r7}
 8004334:	b085      	sub	sp, #20
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	4013      	ands	r3, r2
 8004354:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	0c1b      	lsrs	r3, r3, #16
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	4013      	ands	r3, r2
 8004388:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	b29b      	uxth	r3, r3
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	4013      	ands	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043c8:	68bb      	ldr	r3, [r7, #8]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b087      	sub	sp, #28
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	460b      	mov	r3, r1
 80043e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80043fa:	78fb      	ldrb	r3, [r7, #3]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	fa22 f303 	lsr.w	r3, r2, r3
 8004406:	01db      	lsls	r3, r3, #7
 8004408:	b2db      	uxtb	r3, r3
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004424:	68bb      	ldr	r3, [r7, #8]
}
 8004426:	4618      	mov	r0, r3
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0301 	and.w	r3, r3, #1
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004468:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800446c:	f023 0307 	bic.w	r3, r3, #7
 8004470:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004484:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	460b      	mov	r3, r1
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	333c      	adds	r3, #60	; 0x3c
 80044aa:	3304      	adds	r3, #4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	4a26      	ldr	r2, [pc, #152]	; (800454c <USB_EP0_OutStart+0xb8>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d90a      	bls.n	80044ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044c8:	d101      	bne.n	80044ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	e037      	b.n	800453e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d4:	461a      	mov	r2, r3
 80044d6:	2300      	movs	r3, #0
 80044d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fc:	f043 0318 	orr.w	r3, r3, #24
 8004500:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004510:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004514:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004516:	7afb      	ldrb	r3, [r7, #11]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d10f      	bne.n	800453c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004536:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800453a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	4f54300a 	.word	0x4f54300a

08004550 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <USB_CoreReset+0x64>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e01b      	b.n	80045a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	daf2      	bge.n	800455c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f043 0201 	orr.w	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3301      	adds	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4a09      	ldr	r2, [pc, #36]	; (80045b4 <USB_CoreReset+0x64>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d901      	bls.n	8004598 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e006      	b.n	80045a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d0f0      	beq.n	8004586 <USB_CoreReset+0x36>

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	00030d40 	.word	0x00030d40

080045b8 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80045c4:	2010      	movs	r0, #16
 80045c6:	f002 f91b 	bl	8006800 <USBD_static_malloc>
 80045ca:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	32b0      	adds	r2, #176	; 0xb0
 80045dc:	2100      	movs	r1, #0
 80045de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80045e2:	2302      	movs	r3, #2
 80045e4:	e048      	b.n	8004678 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	32b0      	adds	r2, #176	; 0xb0
 80045f0:	68f9      	ldr	r1, [r7, #12]
 80045f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	32b0      	adds	r2, #176	; 0xb0
 8004600:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	7c1b      	ldrb	r3, [r3, #16]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10d      	bne.n	800462e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <USBD_HID_Init+0xc8>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	f003 020f 	and.w	r2, r3, #15
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	3326      	adds	r3, #38	; 0x26
 8004628:	2207      	movs	r2, #7
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	e00c      	b.n	8004648 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <USBD_HID_Init+0xc8>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	f003 020f 	and.w	r2, r3, #15
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	3326      	adds	r3, #38	; 0x26
 8004644:	220a      	movs	r2, #10
 8004646:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004648:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <USBD_HID_Init+0xc8>)
 800464a:	7819      	ldrb	r1, [r3, #0]
 800464c:	2304      	movs	r3, #4
 800464e:	2203      	movs	r2, #3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f001 ffc4 	bl	80065de <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004656:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <USBD_HID_Init+0xc8>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	f003 020f 	and.w	r2, r3, #15
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	3324      	adds	r3, #36	; 0x24
 800466c:	2201      	movs	r2, #1
 800466e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	200000c3 	.word	0x200000c3

08004684 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8004690:	4b1f      	ldr	r3, [pc, #124]	; (8004710 <USBD_HID_DeInit+0x8c>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f001 ffc7 	bl	800662a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800469c:	4b1c      	ldr	r3, [pc, #112]	; (8004710 <USBD_HID_DeInit+0x8c>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	3324      	adds	r3, #36	; 0x24
 80046b2:	2200      	movs	r2, #0
 80046b4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80046b6:	4b16      	ldr	r3, [pc, #88]	; (8004710 <USBD_HID_DeInit+0x8c>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	f003 020f 	and.w	r2, r3, #15
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	440b      	add	r3, r1
 80046ca:	3326      	adds	r3, #38	; 0x26
 80046cc:	2200      	movs	r2, #0
 80046ce:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	32b0      	adds	r2, #176	; 0xb0
 80046da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d011      	beq.n	8004706 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	32b0      	adds	r2, #176	; 0xb0
 80046ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f002 f893 	bl	800681c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	32b0      	adds	r2, #176	; 0xb0
 8004700:	2100      	movs	r1, #0
 8004702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	200000c3 	.word	0x200000c3

08004714 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	32b0      	adds	r2, #176	; 0xb0
 8004728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800472c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800473c:	2303      	movs	r3, #3
 800473e:	e0e8      	b.n	8004912 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004748:	2b00      	cmp	r3, #0
 800474a:	d046      	beq.n	80047da <USBD_HID_Setup+0xc6>
 800474c:	2b20      	cmp	r3, #32
 800474e:	f040 80d8 	bne.w	8004902 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	3b02      	subs	r3, #2
 8004758:	2b09      	cmp	r3, #9
 800475a:	d836      	bhi.n	80047ca <USBD_HID_Setup+0xb6>
 800475c:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <USBD_HID_Setup+0x50>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	080047bb 	.word	0x080047bb
 8004768:	0800479b 	.word	0x0800479b
 800476c:	080047cb 	.word	0x080047cb
 8004770:	080047cb 	.word	0x080047cb
 8004774:	080047cb 	.word	0x080047cb
 8004778:	080047cb 	.word	0x080047cb
 800477c:	080047cb 	.word	0x080047cb
 8004780:	080047cb 	.word	0x080047cb
 8004784:	080047a9 	.word	0x080047a9
 8004788:	0800478d 	.word	0x0800478d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	885b      	ldrh	r3, [r3, #2]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	601a      	str	r2, [r3, #0]
          break;
 8004798:	e01e      	b.n	80047d8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	4619      	mov	r1, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f001 fbd5 	bl	8005f50 <USBD_CtlSendData>
          break;
 80047a6:	e017      	b.n	80047d8 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	885b      	ldrh	r3, [r3, #2]
 80047ac:	0a1b      	lsrs	r3, r3, #8
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	461a      	mov	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	605a      	str	r2, [r3, #4]
          break;
 80047b8:	e00e      	b.n	80047d8 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3304      	adds	r3, #4
 80047be:	2201      	movs	r2, #1
 80047c0:	4619      	mov	r1, r3
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f001 fbc4 	bl	8005f50 <USBD_CtlSendData>
          break;
 80047c8:	e006      	b.n	80047d8 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f001 fb4e 	bl	8005e6e <USBD_CtlError>
          ret = USBD_FAIL;
 80047d2:	2303      	movs	r3, #3
 80047d4:	75fb      	strb	r3, [r7, #23]
          break;
 80047d6:	bf00      	nop
      }
      break;
 80047d8:	e09a      	b.n	8004910 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	785b      	ldrb	r3, [r3, #1]
 80047de:	2b0b      	cmp	r3, #11
 80047e0:	f200 8086 	bhi.w	80048f0 <USBD_HID_Setup+0x1dc>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <USBD_HID_Setup+0xd8>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	0800481d 	.word	0x0800481d
 80047f0:	080048ff 	.word	0x080048ff
 80047f4:	080048f1 	.word	0x080048f1
 80047f8:	080048f1 	.word	0x080048f1
 80047fc:	080048f1 	.word	0x080048f1
 8004800:	080048f1 	.word	0x080048f1
 8004804:	08004847 	.word	0x08004847
 8004808:	080048f1 	.word	0x080048f1
 800480c:	080048f1 	.word	0x080048f1
 8004810:	080048f1 	.word	0x080048f1
 8004814:	0800489f 	.word	0x0800489f
 8004818:	080048c9 	.word	0x080048c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b03      	cmp	r3, #3
 8004826:	d107      	bne.n	8004838 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004828:	f107 030a 	add.w	r3, r7, #10
 800482c:	2202      	movs	r2, #2
 800482e:	4619      	mov	r1, r3
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f001 fb8d 	bl	8005f50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004836:	e063      	b.n	8004900 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f001 fb17 	bl	8005e6e <USBD_CtlError>
            ret = USBD_FAIL;
 8004840:	2303      	movs	r3, #3
 8004842:	75fb      	strb	r3, [r7, #23]
          break;
 8004844:	e05c      	b.n	8004900 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	885b      	ldrh	r3, [r3, #2]
 800484a:	0a1b      	lsrs	r3, r3, #8
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b22      	cmp	r3, #34	; 0x22
 8004850:	d108      	bne.n	8004864 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	88db      	ldrh	r3, [r3, #6]
 8004856:	2b3f      	cmp	r3, #63	; 0x3f
 8004858:	bf28      	it	cs
 800485a:	233f      	movcs	r3, #63	; 0x3f
 800485c:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800485e:	4b2f      	ldr	r3, [pc, #188]	; (800491c <USBD_HID_Setup+0x208>)
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	e015      	b.n	8004890 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	885b      	ldrh	r3, [r3, #2]
 8004868:	0a1b      	lsrs	r3, r3, #8
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b21      	cmp	r3, #33	; 0x21
 800486e:	d108      	bne.n	8004882 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8004870:	4b2b      	ldr	r3, [pc, #172]	; (8004920 <USBD_HID_Setup+0x20c>)
 8004872:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	88db      	ldrh	r3, [r3, #6]
 8004878:	2b09      	cmp	r3, #9
 800487a:	bf28      	it	cs
 800487c:	2309      	movcs	r3, #9
 800487e:	82bb      	strh	r3, [r7, #20]
 8004880:	e006      	b.n	8004890 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004882:	6839      	ldr	r1, [r7, #0]
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f001 faf2 	bl	8005e6e <USBD_CtlError>
            ret = USBD_FAIL;
 800488a:	2303      	movs	r3, #3
 800488c:	75fb      	strb	r3, [r7, #23]
            break;
 800488e:	e037      	b.n	8004900 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004890:	8abb      	ldrh	r3, [r7, #20]
 8004892:	461a      	mov	r2, r3
 8004894:	6939      	ldr	r1, [r7, #16]
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f001 fb5a 	bl	8005f50 <USBD_CtlSendData>
          break;
 800489c:	e030      	b.n	8004900 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d107      	bne.n	80048ba <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3308      	adds	r3, #8
 80048ae:	2201      	movs	r2, #1
 80048b0:	4619      	mov	r1, r3
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f001 fb4c 	bl	8005f50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048b8:	e022      	b.n	8004900 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f001 fad6 	bl	8005e6e <USBD_CtlError>
            ret = USBD_FAIL;
 80048c2:	2303      	movs	r3, #3
 80048c4:	75fb      	strb	r3, [r7, #23]
          break;
 80048c6:	e01b      	b.n	8004900 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d106      	bne.n	80048e2 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	885b      	ldrh	r3, [r3, #2]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	461a      	mov	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80048e0:	e00e      	b.n	8004900 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80048e2:	6839      	ldr	r1, [r7, #0]
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f001 fac2 	bl	8005e6e <USBD_CtlError>
            ret = USBD_FAIL;
 80048ea:	2303      	movs	r3, #3
 80048ec:	75fb      	strb	r3, [r7, #23]
          break;
 80048ee:	e007      	b.n	8004900 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80048f0:	6839      	ldr	r1, [r7, #0]
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f001 fabb 	bl	8005e6e <USBD_CtlError>
          ret = USBD_FAIL;
 80048f8:	2303      	movs	r3, #3
 80048fa:	75fb      	strb	r3, [r7, #23]
          break;
 80048fc:	e000      	b.n	8004900 <USBD_HID_Setup+0x1ec>
          break;
 80048fe:	bf00      	nop
      }
      break;
 8004900:	e006      	b.n	8004910 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8004902:	6839      	ldr	r1, [r7, #0]
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f001 fab2 	bl	8005e6e <USBD_CtlError>
      ret = USBD_FAIL;
 800490a:	2303      	movs	r3, #3
 800490c:	75fb      	strb	r3, [r7, #23]
      break;
 800490e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004910:	7dfb      	ldrb	r3, [r7, #23]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000084 	.word	0x20000084
 8004920:	2000006c 	.word	0x2000006c

08004924 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	4613      	mov	r3, r2
 8004930:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	32b0      	adds	r2, #176	; 0xb0
 800493c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004940:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004948:	2303      	movs	r3, #3
 800494a:	e014      	b.n	8004976 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b03      	cmp	r3, #3
 8004956:	d10d      	bne.n	8004974 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	7b1b      	ldrb	r3, [r3, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2201      	movs	r2, #1
 8004964:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <USBD_HID_SendReport+0x5c>)
 8004968:	7819      	ldrb	r1, [r3, #0]
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f001 ff03 	bl	800677a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	200000c3 	.word	0x200000c3

08004984 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800498c:	2181      	movs	r1, #129	; 0x81
 800498e:	4809      	ldr	r0, [pc, #36]	; (80049b4 <USBD_HID_GetFSCfgDesc+0x30>)
 8004990:	f000 fc35 	bl	80051fe <USBD_GetEpDesc>
 8004994:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	220a      	movs	r2, #10
 80049a0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2222      	movs	r2, #34	; 0x22
 80049a6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80049a8:	4b02      	ldr	r3, [pc, #8]	; (80049b4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000048 	.word	0x20000048

080049b8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80049c0:	2181      	movs	r1, #129	; 0x81
 80049c2:	4809      	ldr	r0, [pc, #36]	; (80049e8 <USBD_HID_GetHSCfgDesc+0x30>)
 80049c4:	f000 fc1b 	bl	80051fe <USBD_GetEpDesc>
 80049c8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2207      	movs	r2, #7
 80049d4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2222      	movs	r2, #34	; 0x22
 80049da:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80049dc:	4b02      	ldr	r3, [pc, #8]	; (80049e8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000048 	.word	0x20000048

080049ec <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80049f4:	2181      	movs	r1, #129	; 0x81
 80049f6:	4809      	ldr	r0, [pc, #36]	; (8004a1c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80049f8:	f000 fc01 	bl	80051fe <USBD_GetEpDesc>
 80049fc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d002      	beq.n	8004a0a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	220a      	movs	r2, #10
 8004a08:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2222      	movs	r2, #34	; 0x22
 8004a0e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004a10:	4b02      	ldr	r3, [pc, #8]	; (8004a1c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000048 	.word	0x20000048

08004a20 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	32b0      	adds	r2, #176	; 0xb0
 8004a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	220a      	movs	r2, #10
 8004a58:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8004a5a:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	20000078 	.word	0x20000078

08004a6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e01f      	b.n	8004ac4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	79fa      	ldrb	r2, [r7, #7]
 8004ab6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f001 fd29 	bl	8006510 <USBD_LL_Init>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e025      	b.n	8004b30 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	32ae      	adds	r2, #174	; 0xae
 8004af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00f      	beq.n	8004b20 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	32ae      	adds	r2, #174	; 0xae
 8004b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b10:	f107 020e 	add.w	r2, r7, #14
 8004b14:	4610      	mov	r0, r2
 8004b16:	4798      	blx	r3
 8004b18:	4602      	mov	r2, r0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f001 fd31 	bl	80065a8 <USBD_LL_Start>
 8004b46:	4603      	mov	r3, r0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004b58:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d009      	beq.n	8004b94 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	78fa      	ldrb	r2, [r7, #3]
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
 8004b90:	4603      	mov	r3, r0
 8004b92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	4611      	mov	r1, r2
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	4798      	blx	r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 f908 	bl	8005dfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d01a      	beq.n	8004c44 <USBD_LL_SetupStage+0x72>
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d822      	bhi.n	8004c58 <USBD_LL_SetupStage+0x86>
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <USBD_LL_SetupStage+0x4a>
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d00a      	beq.n	8004c30 <USBD_LL_SetupStage+0x5e>
 8004c1a:	e01d      	b.n	8004c58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c22:	4619      	mov	r1, r3
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fb5f 	bl	80052e8 <USBD_StdDevReq>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c2e:	e020      	b.n	8004c72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c36:	4619      	mov	r1, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fbc7 	bl	80053cc <USBD_StdItfReq>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	73fb      	strb	r3, [r7, #15]
      break;
 8004c42:	e016      	b.n	8004c72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 fc29 	bl	80054a4 <USBD_StdEPReq>
 8004c52:	4603      	mov	r3, r0
 8004c54:	73fb      	strb	r3, [r7, #15]
      break;
 8004c56:	e00c      	b.n	8004c72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f001 fcfe 	bl	8006668 <USBD_LL_StallEP>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c70:	bf00      	nop
  }

  return ret;
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	460b      	mov	r3, r1
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004c8e:	7afb      	ldrb	r3, [r7, #11]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d16e      	bne.n	8004d72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004c9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	f040 8098 	bne.w	8004dd8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d913      	bls.n	8004cdc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	1ad2      	subs	r2, r2, r3
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	68da      	ldr	r2, [r3, #12]
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	bf28      	it	cs
 8004cce:	4613      	movcs	r3, r2
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f001 f967 	bl	8005fa8 <USBD_CtlContinueRx>
 8004cda:	e07d      	b.n	8004dd8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d014      	beq.n	8004d14 <USBD_LL_DataOutStage+0x98>
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d81d      	bhi.n	8004d2a <USBD_LL_DataOutStage+0xae>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <USBD_LL_DataOutStage+0x7c>
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d003      	beq.n	8004cfe <USBD_LL_DataOutStage+0x82>
 8004cf6:	e018      	b.n	8004d2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	75bb      	strb	r3, [r7, #22]
            break;
 8004cfc:	e018      	b.n	8004d30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	4619      	mov	r1, r3
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 fa5e 	bl	80051ca <USBD_CoreFindIF>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75bb      	strb	r3, [r7, #22]
            break;
 8004d12:	e00d      	b.n	8004d30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 fa60 	bl	80051e4 <USBD_CoreFindEP>
 8004d24:	4603      	mov	r3, r0
 8004d26:	75bb      	strb	r3, [r7, #22]
            break;
 8004d28:	e002      	b.n	8004d30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	75bb      	strb	r3, [r7, #22]
            break;
 8004d2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004d30:	7dbb      	ldrb	r3, [r7, #22]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d119      	bne.n	8004d6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d113      	bne.n	8004d6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004d42:	7dba      	ldrb	r2, [r7, #22]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	32ae      	adds	r2, #174	; 0xae
 8004d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004d52:	7dba      	ldrb	r2, [r7, #22]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004d5a:	7dba      	ldrb	r2, [r7, #22]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	32ae      	adds	r2, #174	; 0xae
 8004d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f001 f92d 	bl	8005fca <USBD_CtlSendStatus>
 8004d70:	e032      	b.n	8004dd8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004d72:	7afb      	ldrb	r3, [r7, #11]
 8004d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fa31 	bl	80051e4 <USBD_CoreFindEP>
 8004d82:	4603      	mov	r3, r0
 8004d84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004d86:	7dbb      	ldrb	r3, [r7, #22]
 8004d88:	2bff      	cmp	r3, #255	; 0xff
 8004d8a:	d025      	beq.n	8004dd8 <USBD_LL_DataOutStage+0x15c>
 8004d8c:	7dbb      	ldrb	r3, [r7, #22]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d122      	bne.n	8004dd8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b03      	cmp	r3, #3
 8004d9c:	d117      	bne.n	8004dce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004d9e:	7dba      	ldrb	r2, [r7, #22]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	32ae      	adds	r2, #174	; 0xae
 8004da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00f      	beq.n	8004dce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004dae:	7dba      	ldrb	r2, [r7, #22]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004db6:	7dba      	ldrb	r2, [r7, #22]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	32ae      	adds	r2, #174	; 0xae
 8004dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	7afa      	ldrb	r2, [r7, #11]
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	4798      	blx	r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004dd4:	7dfb      	ldrb	r3, [r7, #23]
 8004dd6:	e000      	b.n	8004dda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b086      	sub	sp, #24
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	460b      	mov	r3, r1
 8004dec:	607a      	str	r2, [r7, #4]
 8004dee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004df0:	7afb      	ldrb	r3, [r7, #11]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d16f      	bne.n	8004ed6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3314      	adds	r3, #20
 8004dfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d15a      	bne.n	8004ebc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d914      	bls.n	8004e3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	1ad2      	subs	r2, r2, r3
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	461a      	mov	r2, r3
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f001 f8ac 	bl	8005f86 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2200      	movs	r2, #0
 8004e32:	2100      	movs	r1, #0
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f001 fcc1 	bl	80067bc <USBD_LL_PrepareReceive>
 8004e3a:	e03f      	b.n	8004ebc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	68da      	ldr	r2, [r3, #12]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d11c      	bne.n	8004e82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d316      	bcc.n	8004e82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d20f      	bcs.n	8004e82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004e62:	2200      	movs	r2, #0
 8004e64:	2100      	movs	r1, #0
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f001 f88d 	bl	8005f86 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004e74:	2300      	movs	r3, #0
 8004e76:	2200      	movs	r2, #0
 8004e78:	2100      	movs	r1, #0
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f001 fc9e 	bl	80067bc <USBD_LL_PrepareReceive>
 8004e80:	e01c      	b.n	8004ebc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d10f      	bne.n	8004eae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004eae:	2180      	movs	r1, #128	; 0x80
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f001 fbd9 	bl	8006668 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f001 f89a 	bl	8005ff0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d03a      	beq.n	8004f3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7ff fe42 	bl	8004b50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004ed4:	e032      	b.n	8004f3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004ed6:	7afb      	ldrb	r3, [r7, #11]
 8004ed8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	4619      	mov	r1, r3
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f97f 	bl	80051e4 <USBD_CoreFindEP>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
 8004eec:	2bff      	cmp	r3, #255	; 0xff
 8004eee:	d025      	beq.n	8004f3c <USBD_LL_DataInStage+0x15a>
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d122      	bne.n	8004f3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d11c      	bne.n	8004f3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004f02:	7dfa      	ldrb	r2, [r7, #23]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	32ae      	adds	r2, #174	; 0xae
 8004f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d014      	beq.n	8004f3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004f12:	7dfa      	ldrb	r2, [r7, #23]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004f1a:	7dfa      	ldrb	r2, [r7, #23]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	32ae      	adds	r2, #174	; 0xae
 8004f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	7afa      	ldrb	r2, [r7, #11]
 8004f28:	4611      	mov	r1, r2
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	4798      	blx	r3
 8004f2e:	4603      	mov	r3, r0
 8004f30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004f32:	7dbb      	ldrb	r3, [r7, #22]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004f38:	7dbb      	ldrb	r3, [r7, #22]
 8004f3a:	e000      	b.n	8004f3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d014      	beq.n	8004fac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00e      	beq.n	8004fac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6852      	ldr	r2, [r2, #4]
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	4798      	blx	r3
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fac:	2340      	movs	r3, #64	; 0x40
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f001 fb13 	bl	80065de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2240      	movs	r2, #64	; 0x40
 8004fc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fc8:	2340      	movs	r3, #64	; 0x40
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f001 fb05 	bl	80065de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2240      	movs	r2, #64	; 0x40
 8004fde:	621a      	str	r2, [r3, #32]

  return ret;
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005018:	b2da      	uxtb	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2204      	movs	r2, #4
 8005024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b04      	cmp	r3, #4
 8005048:	d106      	bne.n	8005058 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005050:	b2da      	uxtb	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b082      	sub	sp, #8
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b03      	cmp	r3, #3
 8005078:	d110      	bne.n	800509c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00b      	beq.n	800509c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d005      	beq.n	800509c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	32ae      	adds	r2, #174	; 0xae
 80050bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e01c      	b.n	8005102 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d115      	bne.n	8005100 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	32ae      	adds	r2, #174	; 0xae
 80050de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	32ae      	adds	r2, #174	; 0xae
 80050f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	78fa      	ldrb	r2, [r7, #3]
 80050fa:	4611      	mov	r1, r2
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b082      	sub	sp, #8
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	460b      	mov	r3, r1
 8005114:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	32ae      	adds	r2, #174	; 0xae
 8005120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005128:	2303      	movs	r3, #3
 800512a:	e01c      	b.n	8005166 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b03      	cmp	r3, #3
 8005136:	d115      	bne.n	8005164 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	32ae      	adds	r2, #174	; 0xae
 8005142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00b      	beq.n	8005164 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	32ae      	adds	r2, #174	; 0xae
 8005156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	78fa      	ldrb	r2, [r7, #3]
 800515e:	4611      	mov	r1, r2
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00e      	beq.n	80051c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6852      	ldr	r2, [r2, #4]
 80051ae:	b2d2      	uxtb	r2, r2
 80051b0:	4611      	mov	r1, r2
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80051bc:	2303      	movs	r3, #3
 80051be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80051d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80051f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b086      	sub	sp, #24
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	460b      	mov	r3, r1
 8005208:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	885b      	ldrh	r3, [r3, #2]
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	429a      	cmp	r2, r3
 8005224:	d920      	bls.n	8005268 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800522e:	e013      	b.n	8005258 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005230:	f107 030a 	add.w	r3, r7, #10
 8005234:	4619      	mov	r1, r3
 8005236:	6978      	ldr	r0, [r7, #20]
 8005238:	f000 f81b 	bl	8005272 <USBD_GetNextDesc>
 800523c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	2b05      	cmp	r3, #5
 8005244:	d108      	bne.n	8005258 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	789b      	ldrb	r3, [r3, #2]
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	429a      	cmp	r2, r3
 8005252:	d008      	beq.n	8005266 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	885b      	ldrh	r3, [r3, #2]
 800525c:	b29a      	uxth	r2, r3
 800525e:	897b      	ldrh	r3, [r7, #10]
 8005260:	429a      	cmp	r2, r3
 8005262:	d8e5      	bhi.n	8005230 <USBD_GetEpDesc+0x32>
 8005264:	e000      	b.n	8005268 <USBD_GetEpDesc+0x6a>
          break;
 8005266:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005268:	693b      	ldr	r3, [r7, #16]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	881a      	ldrh	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	4413      	add	r3, r2
 800528c:	b29a      	uxth	r2, r3
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4413      	add	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800529e:	68fb      	ldr	r3, [r7, #12]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	3301      	adds	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80052ca:	8a3b      	ldrh	r3, [r7, #16]
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	b21a      	sxth	r2, r3
 80052d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	b21b      	sxth	r3, r3
 80052d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80052da:	89fb      	ldrh	r3, [r7, #14]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052fe:	2b40      	cmp	r3, #64	; 0x40
 8005300:	d005      	beq.n	800530e <USBD_StdDevReq+0x26>
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d857      	bhi.n	80053b6 <USBD_StdDevReq+0xce>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00f      	beq.n	800532a <USBD_StdDevReq+0x42>
 800530a:	2b20      	cmp	r3, #32
 800530c:	d153      	bne.n	80053b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	32ae      	adds	r2, #174	; 0xae
 8005318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	4798      	blx	r3
 8005324:	4603      	mov	r3, r0
 8005326:	73fb      	strb	r3, [r7, #15]
      break;
 8005328:	e04a      	b.n	80053c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	785b      	ldrb	r3, [r3, #1]
 800532e:	2b09      	cmp	r3, #9
 8005330:	d83b      	bhi.n	80053aa <USBD_StdDevReq+0xc2>
 8005332:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <USBD_StdDevReq+0x50>)
 8005334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005338:	0800538d 	.word	0x0800538d
 800533c:	080053a1 	.word	0x080053a1
 8005340:	080053ab 	.word	0x080053ab
 8005344:	08005397 	.word	0x08005397
 8005348:	080053ab 	.word	0x080053ab
 800534c:	0800536b 	.word	0x0800536b
 8005350:	08005361 	.word	0x08005361
 8005354:	080053ab 	.word	0x080053ab
 8005358:	08005383 	.word	0x08005383
 800535c:	08005375 	.word	0x08005375
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005360:	6839      	ldr	r1, [r7, #0]
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 fa3c 	bl	80057e0 <USBD_GetDescriptor>
          break;
 8005368:	e024      	b.n	80053b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fba1 	bl	8005ab4 <USBD_SetAddress>
          break;
 8005372:	e01f      	b.n	80053b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005374:	6839      	ldr	r1, [r7, #0]
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fbe0 	bl	8005b3c <USBD_SetConfig>
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]
          break;
 8005380:	e018      	b.n	80053b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005382:	6839      	ldr	r1, [r7, #0]
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fc83 	bl	8005c90 <USBD_GetConfig>
          break;
 800538a:	e013      	b.n	80053b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fcb4 	bl	8005cfc <USBD_GetStatus>
          break;
 8005394:	e00e      	b.n	80053b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005396:	6839      	ldr	r1, [r7, #0]
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fce3 	bl	8005d64 <USBD_SetFeature>
          break;
 800539e:	e009      	b.n	80053b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fd07 	bl	8005db6 <USBD_ClrFeature>
          break;
 80053a8:	e004      	b.n	80053b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fd5e 	bl	8005e6e <USBD_CtlError>
          break;
 80053b2:	bf00      	nop
      }
      break;
 80053b4:	e004      	b.n	80053c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fd58 	bl	8005e6e <USBD_CtlError>
      break;
 80053be:	bf00      	nop
  }

  return ret;
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop

080053cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053e2:	2b40      	cmp	r3, #64	; 0x40
 80053e4:	d005      	beq.n	80053f2 <USBD_StdItfReq+0x26>
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	d852      	bhi.n	8005490 <USBD_StdItfReq+0xc4>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <USBD_StdItfReq+0x26>
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d14e      	bne.n	8005490 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d840      	bhi.n	8005482 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	889b      	ldrh	r3, [r3, #4]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b01      	cmp	r3, #1
 8005408:	d836      	bhi.n	8005478 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	889b      	ldrh	r3, [r3, #4]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7ff fed9 	bl	80051ca <USBD_CoreFindIF>
 8005418:	4603      	mov	r3, r0
 800541a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800541c:	7bbb      	ldrb	r3, [r7, #14]
 800541e:	2bff      	cmp	r3, #255	; 0xff
 8005420:	d01d      	beq.n	800545e <USBD_StdItfReq+0x92>
 8005422:	7bbb      	ldrb	r3, [r7, #14]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d11a      	bne.n	800545e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005428:	7bba      	ldrb	r2, [r7, #14]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	32ae      	adds	r2, #174	; 0xae
 800542e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00f      	beq.n	8005458 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005438:	7bba      	ldrb	r2, [r7, #14]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005440:	7bba      	ldrb	r2, [r7, #14]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	32ae      	adds	r2, #174	; 0xae
 8005446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	6839      	ldr	r1, [r7, #0]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	4798      	blx	r3
 8005452:	4603      	mov	r3, r0
 8005454:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005456:	e004      	b.n	8005462 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005458:	2303      	movs	r3, #3
 800545a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800545c:	e001      	b.n	8005462 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800545e:	2303      	movs	r3, #3
 8005460:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	88db      	ldrh	r3, [r3, #6]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d110      	bne.n	800548c <USBD_StdItfReq+0xc0>
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10d      	bne.n	800548c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fdaa 	bl	8005fca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005476:	e009      	b.n	800548c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fcf7 	bl	8005e6e <USBD_CtlError>
          break;
 8005480:	e004      	b.n	800548c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fcf2 	bl	8005e6e <USBD_CtlError>
          break;
 800548a:	e000      	b.n	800548e <USBD_StdItfReq+0xc2>
          break;
 800548c:	bf00      	nop
      }
      break;
 800548e:	e004      	b.n	800549a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fceb 	bl	8005e6e <USBD_CtlError>
      break;
 8005498:	bf00      	nop
  }

  return ret;
 800549a:	7bfb      	ldrb	r3, [r7, #15]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	889b      	ldrh	r3, [r3, #4]
 80054b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054c0:	2b40      	cmp	r3, #64	; 0x40
 80054c2:	d007      	beq.n	80054d4 <USBD_StdEPReq+0x30>
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	f200 817f 	bhi.w	80057c8 <USBD_StdEPReq+0x324>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d02a      	beq.n	8005524 <USBD_StdEPReq+0x80>
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	f040 817a 	bne.w	80057c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80054d4:	7bbb      	ldrb	r3, [r7, #14]
 80054d6:	4619      	mov	r1, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff fe83 	bl	80051e4 <USBD_CoreFindEP>
 80054de:	4603      	mov	r3, r0
 80054e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80054e2:	7b7b      	ldrb	r3, [r7, #13]
 80054e4:	2bff      	cmp	r3, #255	; 0xff
 80054e6:	f000 8174 	beq.w	80057d2 <USBD_StdEPReq+0x32e>
 80054ea:	7b7b      	ldrb	r3, [r7, #13]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f040 8170 	bne.w	80057d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80054f2:	7b7a      	ldrb	r2, [r7, #13]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80054fa:	7b7a      	ldrb	r2, [r7, #13]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	32ae      	adds	r2, #174	; 0xae
 8005500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 8163 	beq.w	80057d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800550c:	7b7a      	ldrb	r2, [r7, #13]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	32ae      	adds	r2, #174	; 0xae
 8005512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	4798      	blx	r3
 800551e:	4603      	mov	r3, r0
 8005520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005522:	e156      	b.n	80057d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d008      	beq.n	800553e <USBD_StdEPReq+0x9a>
 800552c:	2b03      	cmp	r3, #3
 800552e:	f300 8145 	bgt.w	80057bc <USBD_StdEPReq+0x318>
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 809b 	beq.w	800566e <USBD_StdEPReq+0x1ca>
 8005538:	2b01      	cmp	r3, #1
 800553a:	d03c      	beq.n	80055b6 <USBD_StdEPReq+0x112>
 800553c:	e13e      	b.n	80057bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d002      	beq.n	8005550 <USBD_StdEPReq+0xac>
 800554a:	2b03      	cmp	r3, #3
 800554c:	d016      	beq.n	800557c <USBD_StdEPReq+0xd8>
 800554e:	e02c      	b.n	80055aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005550:	7bbb      	ldrb	r3, [r7, #14]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00d      	beq.n	8005572 <USBD_StdEPReq+0xce>
 8005556:	7bbb      	ldrb	r3, [r7, #14]
 8005558:	2b80      	cmp	r3, #128	; 0x80
 800555a:	d00a      	beq.n	8005572 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800555c:	7bbb      	ldrb	r3, [r7, #14]
 800555e:	4619      	mov	r1, r3
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f001 f881 	bl	8006668 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005566:	2180      	movs	r1, #128	; 0x80
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 f87d 	bl	8006668 <USBD_LL_StallEP>
 800556e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005570:	e020      	b.n	80055b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005572:	6839      	ldr	r1, [r7, #0]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fc7a 	bl	8005e6e <USBD_CtlError>
              break;
 800557a:	e01b      	b.n	80055b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	885b      	ldrh	r3, [r3, #2]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10e      	bne.n	80055a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005584:	7bbb      	ldrb	r3, [r7, #14]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00b      	beq.n	80055a2 <USBD_StdEPReq+0xfe>
 800558a:	7bbb      	ldrb	r3, [r7, #14]
 800558c:	2b80      	cmp	r3, #128	; 0x80
 800558e:	d008      	beq.n	80055a2 <USBD_StdEPReq+0xfe>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	88db      	ldrh	r3, [r3, #6]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d104      	bne.n	80055a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005598:	7bbb      	ldrb	r3, [r7, #14]
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f001 f863 	bl	8006668 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fd11 	bl	8005fca <USBD_CtlSendStatus>

              break;
 80055a8:	e004      	b.n	80055b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80055aa:	6839      	ldr	r1, [r7, #0]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fc5e 	bl	8005e6e <USBD_CtlError>
              break;
 80055b2:	bf00      	nop
          }
          break;
 80055b4:	e107      	b.n	80057c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d002      	beq.n	80055c8 <USBD_StdEPReq+0x124>
 80055c2:	2b03      	cmp	r3, #3
 80055c4:	d016      	beq.n	80055f4 <USBD_StdEPReq+0x150>
 80055c6:	e04b      	b.n	8005660 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055c8:	7bbb      	ldrb	r3, [r7, #14]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00d      	beq.n	80055ea <USBD_StdEPReq+0x146>
 80055ce:	7bbb      	ldrb	r3, [r7, #14]
 80055d0:	2b80      	cmp	r3, #128	; 0x80
 80055d2:	d00a      	beq.n	80055ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80055d4:	7bbb      	ldrb	r3, [r7, #14]
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f001 f845 	bl	8006668 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80055de:	2180      	movs	r1, #128	; 0x80
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f001 f841 	bl	8006668 <USBD_LL_StallEP>
 80055e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80055e8:	e040      	b.n	800566c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 fc3e 	bl	8005e6e <USBD_CtlError>
              break;
 80055f2:	e03b      	b.n	800566c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	885b      	ldrh	r3, [r3, #2]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d136      	bne.n	800566a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80055fc:	7bbb      	ldrb	r3, [r7, #14]
 80055fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005606:	7bbb      	ldrb	r3, [r7, #14]
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f001 f84b 	bl	80066a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fcda 	bl	8005fca <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005616:	7bbb      	ldrb	r3, [r7, #14]
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff fde2 	bl	80051e4 <USBD_CoreFindEP>
 8005620:	4603      	mov	r3, r0
 8005622:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005624:	7b7b      	ldrb	r3, [r7, #13]
 8005626:	2bff      	cmp	r3, #255	; 0xff
 8005628:	d01f      	beq.n	800566a <USBD_StdEPReq+0x1c6>
 800562a:	7b7b      	ldrb	r3, [r7, #13]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11c      	bne.n	800566a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005630:	7b7a      	ldrb	r2, [r7, #13]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005638:	7b7a      	ldrb	r2, [r7, #13]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	32ae      	adds	r2, #174	; 0xae
 800563e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d010      	beq.n	800566a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005648:	7b7a      	ldrb	r2, [r7, #13]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	32ae      	adds	r2, #174	; 0xae
 800564e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800565e:	e004      	b.n	800566a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fc03 	bl	8005e6e <USBD_CtlError>
              break;
 8005668:	e000      	b.n	800566c <USBD_StdEPReq+0x1c8>
              break;
 800566a:	bf00      	nop
          }
          break;
 800566c:	e0ab      	b.n	80057c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d002      	beq.n	8005680 <USBD_StdEPReq+0x1dc>
 800567a:	2b03      	cmp	r3, #3
 800567c:	d032      	beq.n	80056e4 <USBD_StdEPReq+0x240>
 800567e:	e097      	b.n	80057b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005680:	7bbb      	ldrb	r3, [r7, #14]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <USBD_StdEPReq+0x1f2>
 8005686:	7bbb      	ldrb	r3, [r7, #14]
 8005688:	2b80      	cmp	r3, #128	; 0x80
 800568a:	d004      	beq.n	8005696 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fbed 	bl	8005e6e <USBD_CtlError>
                break;
 8005694:	e091      	b.n	80057ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005696:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800569a:	2b00      	cmp	r3, #0
 800569c:	da0b      	bge.n	80056b6 <USBD_StdEPReq+0x212>
 800569e:	7bbb      	ldrb	r3, [r7, #14]
 80056a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	3310      	adds	r3, #16
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	4413      	add	r3, r2
 80056b2:	3304      	adds	r3, #4
 80056b4:	e00b      	b.n	80056ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80056b6:	7bbb      	ldrb	r3, [r7, #14]
 80056b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	4413      	add	r3, r2
 80056cc:	3304      	adds	r3, #4
 80056ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	2202      	movs	r2, #2
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 fc37 	bl	8005f50 <USBD_CtlSendData>
              break;
 80056e2:	e06a      	b.n	80057ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80056e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	da11      	bge.n	8005710 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80056ec:	7bbb      	ldrb	r3, [r7, #14]
 80056ee:	f003 020f 	and.w	r2, r3, #15
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	3324      	adds	r3, #36	; 0x24
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d117      	bne.n	8005736 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005706:	6839      	ldr	r1, [r7, #0]
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fbb0 	bl	8005e6e <USBD_CtlError>
                  break;
 800570e:	e054      	b.n	80057ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005710:	7bbb      	ldrb	r3, [r7, #14]
 8005712:	f003 020f 	and.w	r2, r3, #15
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005726:	881b      	ldrh	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d104      	bne.n	8005736 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 fb9d 	bl	8005e6e <USBD_CtlError>
                  break;
 8005734:	e041      	b.n	80057ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800573a:	2b00      	cmp	r3, #0
 800573c:	da0b      	bge.n	8005756 <USBD_StdEPReq+0x2b2>
 800573e:	7bbb      	ldrb	r3, [r7, #14]
 8005740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	3310      	adds	r3, #16
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	4413      	add	r3, r2
 8005752:	3304      	adds	r3, #4
 8005754:	e00b      	b.n	800576e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005756:	7bbb      	ldrb	r3, [r7, #14]
 8005758:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	4413      	add	r3, r2
 800576c:	3304      	adds	r3, #4
 800576e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005770:	7bbb      	ldrb	r3, [r7, #14]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <USBD_StdEPReq+0x2d8>
 8005776:	7bbb      	ldrb	r3, [r7, #14]
 8005778:	2b80      	cmp	r3, #128	; 0x80
 800577a:	d103      	bne.n	8005784 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e00e      	b.n	80057a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005784:	7bbb      	ldrb	r3, [r7, #14]
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 ffab 	bl	80066e4 <USBD_LL_IsStallEP>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2201      	movs	r2, #1
 8005798:	601a      	str	r2, [r3, #0]
 800579a:	e002      	b.n	80057a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2202      	movs	r2, #2
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fbd1 	bl	8005f50 <USBD_CtlSendData>
              break;
 80057ae:	e004      	b.n	80057ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fb5b 	bl	8005e6e <USBD_CtlError>
              break;
 80057b8:	bf00      	nop
          }
          break;
 80057ba:	e004      	b.n	80057c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fb55 	bl	8005e6e <USBD_CtlError>
          break;
 80057c4:	bf00      	nop
      }
      break;
 80057c6:	e005      	b.n	80057d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 fb4f 	bl	8005e6e <USBD_CtlError>
      break;
 80057d0:	e000      	b.n	80057d4 <USBD_StdEPReq+0x330>
      break;
 80057d2:	bf00      	nop
  }

  return ret;
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80057f2:	2300      	movs	r3, #0
 80057f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	885b      	ldrh	r3, [r3, #2]
 80057fa:	0a1b      	lsrs	r3, r3, #8
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	2b06      	cmp	r3, #6
 8005802:	f200 8128 	bhi.w	8005a56 <USBD_GetDescriptor+0x276>
 8005806:	a201      	add	r2, pc, #4	; (adr r2, 800580c <USBD_GetDescriptor+0x2c>)
 8005808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580c:	08005829 	.word	0x08005829
 8005810:	08005841 	.word	0x08005841
 8005814:	08005881 	.word	0x08005881
 8005818:	08005a57 	.word	0x08005a57
 800581c:	08005a57 	.word	0x08005a57
 8005820:	080059f7 	.word	0x080059f7
 8005824:	08005a23 	.word	0x08005a23
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	7c12      	ldrb	r2, [r2, #16]
 8005834:	f107 0108 	add.w	r1, r7, #8
 8005838:	4610      	mov	r0, r2
 800583a:	4798      	blx	r3
 800583c:	60f8      	str	r0, [r7, #12]
      break;
 800583e:	e112      	b.n	8005a66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	7c1b      	ldrb	r3, [r3, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10d      	bne.n	8005864 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800584e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005850:	f107 0208 	add.w	r2, r7, #8
 8005854:	4610      	mov	r0, r2
 8005856:	4798      	blx	r3
 8005858:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	2202      	movs	r2, #2
 8005860:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005862:	e100      	b.n	8005a66 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	f107 0208 	add.w	r2, r7, #8
 8005870:	4610      	mov	r0, r2
 8005872:	4798      	blx	r3
 8005874:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3301      	adds	r3, #1
 800587a:	2202      	movs	r2, #2
 800587c:	701a      	strb	r2, [r3, #0]
      break;
 800587e:	e0f2      	b.n	8005a66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	885b      	ldrh	r3, [r3, #2]
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b05      	cmp	r3, #5
 8005888:	f200 80ac 	bhi.w	80059e4 <USBD_GetDescriptor+0x204>
 800588c:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <USBD_GetDescriptor+0xb4>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	080058ad 	.word	0x080058ad
 8005898:	080058e1 	.word	0x080058e1
 800589c:	08005915 	.word	0x08005915
 80058a0:	08005949 	.word	0x08005949
 80058a4:	0800597d 	.word	0x0800597d
 80058a8:	080059b1 	.word	0x080059b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	7c12      	ldrb	r2, [r2, #16]
 80058c4:	f107 0108 	add.w	r1, r7, #8
 80058c8:	4610      	mov	r0, r2
 80058ca:	4798      	blx	r3
 80058cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058ce:	e091      	b.n	80059f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 facb 	bl	8005e6e <USBD_CtlError>
            err++;
 80058d8:	7afb      	ldrb	r3, [r7, #11]
 80058da:	3301      	adds	r3, #1
 80058dc:	72fb      	strb	r3, [r7, #11]
          break;
 80058de:	e089      	b.n	80059f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	7c12      	ldrb	r2, [r2, #16]
 80058f8:	f107 0108 	add.w	r1, r7, #8
 80058fc:	4610      	mov	r0, r2
 80058fe:	4798      	blx	r3
 8005900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005902:	e077      	b.n	80059f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fab1 	bl	8005e6e <USBD_CtlError>
            err++;
 800590c:	7afb      	ldrb	r3, [r7, #11]
 800590e:	3301      	adds	r3, #1
 8005910:	72fb      	strb	r3, [r7, #11]
          break;
 8005912:	e06f      	b.n	80059f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	7c12      	ldrb	r2, [r2, #16]
 800592c:	f107 0108 	add.w	r1, r7, #8
 8005930:	4610      	mov	r0, r2
 8005932:	4798      	blx	r3
 8005934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005936:	e05d      	b.n	80059f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005938:	6839      	ldr	r1, [r7, #0]
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fa97 	bl	8005e6e <USBD_CtlError>
            err++;
 8005940:	7afb      	ldrb	r3, [r7, #11]
 8005942:	3301      	adds	r3, #1
 8005944:	72fb      	strb	r3, [r7, #11]
          break;
 8005946:	e055      	b.n	80059f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00b      	beq.n	800596c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	7c12      	ldrb	r2, [r2, #16]
 8005960:	f107 0108 	add.w	r1, r7, #8
 8005964:	4610      	mov	r0, r2
 8005966:	4798      	blx	r3
 8005968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800596a:	e043      	b.n	80059f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800596c:	6839      	ldr	r1, [r7, #0]
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa7d 	bl	8005e6e <USBD_CtlError>
            err++;
 8005974:	7afb      	ldrb	r3, [r7, #11]
 8005976:	3301      	adds	r3, #1
 8005978:	72fb      	strb	r3, [r7, #11]
          break;
 800597a:	e03b      	b.n	80059f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00b      	beq.n	80059a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	7c12      	ldrb	r2, [r2, #16]
 8005994:	f107 0108 	add.w	r1, r7, #8
 8005998:	4610      	mov	r0, r2
 800599a:	4798      	blx	r3
 800599c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800599e:	e029      	b.n	80059f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa63 	bl	8005e6e <USBD_CtlError>
            err++;
 80059a8:	7afb      	ldrb	r3, [r7, #11]
 80059aa:	3301      	adds	r3, #1
 80059ac:	72fb      	strb	r3, [r7, #11]
          break;
 80059ae:	e021      	b.n	80059f4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00b      	beq.n	80059d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	7c12      	ldrb	r2, [r2, #16]
 80059c8:	f107 0108 	add.w	r1, r7, #8
 80059cc:	4610      	mov	r0, r2
 80059ce:	4798      	blx	r3
 80059d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059d2:	e00f      	b.n	80059f4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fa49 	bl	8005e6e <USBD_CtlError>
            err++;
 80059dc:	7afb      	ldrb	r3, [r7, #11]
 80059de:	3301      	adds	r3, #1
 80059e0:	72fb      	strb	r3, [r7, #11]
          break;
 80059e2:	e007      	b.n	80059f4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80059e4:	6839      	ldr	r1, [r7, #0]
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fa41 	bl	8005e6e <USBD_CtlError>
          err++;
 80059ec:	7afb      	ldrb	r3, [r7, #11]
 80059ee:	3301      	adds	r3, #1
 80059f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80059f2:	bf00      	nop
      }
      break;
 80059f4:	e037      	b.n	8005a66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	7c1b      	ldrb	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a06:	f107 0208 	add.w	r2, r7, #8
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4798      	blx	r3
 8005a0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a10:	e029      	b.n	8005a66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fa2a 	bl	8005e6e <USBD_CtlError>
        err++;
 8005a1a:	7afb      	ldrb	r3, [r7, #11]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	72fb      	strb	r3, [r7, #11]
      break;
 8005a20:	e021      	b.n	8005a66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	7c1b      	ldrb	r3, [r3, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10d      	bne.n	8005a46 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	f107 0208 	add.w	r2, r7, #8
 8005a36:	4610      	mov	r0, r2
 8005a38:	4798      	blx	r3
 8005a3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	2207      	movs	r2, #7
 8005a42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005a44:	e00f      	b.n	8005a66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005a46:	6839      	ldr	r1, [r7, #0]
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 fa10 	bl	8005e6e <USBD_CtlError>
        err++;
 8005a4e:	7afb      	ldrb	r3, [r7, #11]
 8005a50:	3301      	adds	r3, #1
 8005a52:	72fb      	strb	r3, [r7, #11]
      break;
 8005a54:	e007      	b.n	8005a66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fa08 	bl	8005e6e <USBD_CtlError>
      err++;
 8005a5e:	7afb      	ldrb	r3, [r7, #11]
 8005a60:	3301      	adds	r3, #1
 8005a62:	72fb      	strb	r3, [r7, #11]
      break;
 8005a64:	bf00      	nop
  }

  if (err != 0U)
 8005a66:	7afb      	ldrb	r3, [r7, #11]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d11e      	bne.n	8005aaa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	88db      	ldrh	r3, [r3, #6]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d016      	beq.n	8005aa2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005a74:	893b      	ldrh	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00e      	beq.n	8005a98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	88da      	ldrh	r2, [r3, #6]
 8005a7e:	893b      	ldrh	r3, [r7, #8]
 8005a80:	4293      	cmp	r3, r2
 8005a82:	bf28      	it	cs
 8005a84:	4613      	movcs	r3, r2
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005a8a:	893b      	ldrh	r3, [r7, #8]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68f9      	ldr	r1, [r7, #12]
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fa5d 	bl	8005f50 <USBD_CtlSendData>
 8005a96:	e009      	b.n	8005aac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f9e7 	bl	8005e6e <USBD_CtlError>
 8005aa0:	e004      	b.n	8005aac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa91 	bl	8005fca <USBD_CtlSendStatus>
 8005aa8:	e000      	b.n	8005aac <USBD_GetDescriptor+0x2cc>
    return;
 8005aaa:	bf00      	nop
  }
}
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop

08005ab4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	889b      	ldrh	r3, [r3, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d131      	bne.n	8005b2a <USBD_SetAddress+0x76>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	88db      	ldrh	r3, [r3, #6]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d12d      	bne.n	8005b2a <USBD_SetAddress+0x76>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	885b      	ldrh	r3, [r3, #2]
 8005ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ad4:	d829      	bhi.n	8005b2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	885b      	ldrh	r3, [r3, #2]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d104      	bne.n	8005af8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f9bc 	bl	8005e6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af6:	e01d      	b.n	8005b34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	7bfa      	ldrb	r2, [r7, #15]
 8005afc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 fe19 	bl	800673c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fa5d 	bl	8005fca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b1e:	e009      	b.n	8005b34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b28:	e004      	b.n	8005b34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f99e 	bl	8005e6e <USBD_CtlError>
  }
}
 8005b32:	bf00      	nop
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	885b      	ldrh	r3, [r3, #2]
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	4b4e      	ldr	r3, [pc, #312]	; (8005c8c <USBD_SetConfig+0x150>)
 8005b52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005b54:	4b4d      	ldr	r3, [pc, #308]	; (8005c8c <USBD_SetConfig+0x150>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d905      	bls.n	8005b68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005b5c:	6839      	ldr	r1, [r7, #0]
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f985 	bl	8005e6e <USBD_CtlError>
    return USBD_FAIL;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e08c      	b.n	8005c82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d002      	beq.n	8005b7a <USBD_SetConfig+0x3e>
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d029      	beq.n	8005bcc <USBD_SetConfig+0x90>
 8005b78:	e075      	b.n	8005c66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005b7a:	4b44      	ldr	r3, [pc, #272]	; (8005c8c <USBD_SetConfig+0x150>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d020      	beq.n	8005bc4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005b82:	4b42      	ldr	r3, [pc, #264]	; (8005c8c <USBD_SetConfig+0x150>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005b8c:	4b3f      	ldr	r3, [pc, #252]	; (8005c8c <USBD_SetConfig+0x150>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fe ffe7 	bl	8004b66 <USBD_SetClassConfig>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d008      	beq.n	8005bb4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f962 	bl	8005e6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005bb2:	e065      	b.n	8005c80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fa08 	bl	8005fca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005bc2:	e05d      	b.n	8005c80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa00 	bl	8005fca <USBD_CtlSendStatus>
      break;
 8005bca:	e059      	b.n	8005c80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005bcc:	4b2f      	ldr	r3, [pc, #188]	; (8005c8c <USBD_SetConfig+0x150>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d112      	bne.n	8005bfa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005bdc:	4b2b      	ldr	r3, [pc, #172]	; (8005c8c <USBD_SetConfig+0x150>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	461a      	mov	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005be6:	4b29      	ldr	r3, [pc, #164]	; (8005c8c <USBD_SetConfig+0x150>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7fe ffd6 	bl	8004b9e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f9e9 	bl	8005fca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005bf8:	e042      	b.n	8005c80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005bfa:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <USBD_SetConfig+0x150>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d02a      	beq.n	8005c5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fe ffc4 	bl	8004b9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005c16:	4b1d      	ldr	r3, [pc, #116]	; (8005c8c <USBD_SetConfig+0x150>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c20:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <USBD_SetConfig+0x150>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fe ff9d 	bl	8004b66 <USBD_SetClassConfig>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00f      	beq.n	8005c56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f918 	bl	8005e6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fe ffa9 	bl	8004b9e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005c54:	e014      	b.n	8005c80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f9b7 	bl	8005fca <USBD_CtlSendStatus>
      break;
 8005c5c:	e010      	b.n	8005c80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f9b3 	bl	8005fca <USBD_CtlSendStatus>
      break;
 8005c64:	e00c      	b.n	8005c80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f900 	bl	8005e6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005c6e:	4b07      	ldr	r3, [pc, #28]	; (8005c8c <USBD_SetConfig+0x150>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7fe ff92 	bl	8004b9e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7e:	bf00      	nop
  }

  return ret;
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	2000013c 	.word	0x2000013c

08005c90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	88db      	ldrh	r3, [r3, #6]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d004      	beq.n	8005cac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005ca2:	6839      	ldr	r1, [r7, #0]
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f8e2 	bl	8005e6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005caa:	e023      	b.n	8005cf4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	dc02      	bgt.n	8005cbe <USBD_GetConfig+0x2e>
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	dc03      	bgt.n	8005cc4 <USBD_GetConfig+0x34>
 8005cbc:	e015      	b.n	8005cea <USBD_GetConfig+0x5a>
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d00b      	beq.n	8005cda <USBD_GetConfig+0x4a>
 8005cc2:	e012      	b.n	8005cea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f93c 	bl	8005f50 <USBD_CtlSendData>
        break;
 8005cd8:	e00c      	b.n	8005cf4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	2201      	movs	r2, #1
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f934 	bl	8005f50 <USBD_CtlSendData>
        break;
 8005ce8:	e004      	b.n	8005cf4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f8be 	bl	8005e6e <USBD_CtlError>
        break;
 8005cf2:	bf00      	nop
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d81e      	bhi.n	8005d52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	88db      	ldrh	r3, [r3, #6]
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d004      	beq.n	8005d26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f8a5 	bl	8005e6e <USBD_CtlError>
        break;
 8005d24:	e01a      	b.n	8005d5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f043 0202 	orr.w	r2, r3, #2
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	330c      	adds	r3, #12
 8005d46:	2202      	movs	r2, #2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f900 	bl	8005f50 <USBD_CtlSendData>
      break;
 8005d50:	e004      	b.n	8005d5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f88a 	bl	8005e6e <USBD_CtlError>
      break;
 8005d5a:	bf00      	nop
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	885b      	ldrh	r3, [r3, #2]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d107      	bne.n	8005d86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f923 	bl	8005fca <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005d84:	e013      	b.n	8005dae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	885b      	ldrh	r3, [r3, #2]
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d10b      	bne.n	8005da6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	889b      	ldrh	r3, [r3, #4]
 8005d92:	0a1b      	lsrs	r3, r3, #8
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f913 	bl	8005fca <USBD_CtlSendStatus>
}
 8005da4:	e003      	b.n	8005dae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f860 	bl	8005e6e <USBD_CtlError>
}
 8005dae:	bf00      	nop
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d80b      	bhi.n	8005de6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	885b      	ldrh	r3, [r3, #2]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10c      	bne.n	8005df0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f8f3 	bl	8005fca <USBD_CtlSendStatus>
      }
      break;
 8005de4:	e004      	b.n	8005df0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f840 	bl	8005e6e <USBD_CtlError>
      break;
 8005dee:	e000      	b.n	8005df2 <USBD_ClrFeature+0x3c>
      break;
 8005df0:	bf00      	nop
  }
}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	781a      	ldrb	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3301      	adds	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	781a      	ldrb	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3301      	adds	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f7ff fa41 	bl	80052ac <SWAPBYTE>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f7ff fa34 	bl	80052ac <SWAPBYTE>
 8005e44:	4603      	mov	r3, r0
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3301      	adds	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	f7ff fa27 	bl	80052ac <SWAPBYTE>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	461a      	mov	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	80da      	strh	r2, [r3, #6]
}
 8005e66:	bf00      	nop
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e78:	2180      	movs	r1, #128	; 0x80
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fbf4 	bl	8006668 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005e80:	2100      	movs	r1, #0
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fbf0 	bl	8006668 <USBD_LL_StallEP>
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d036      	beq.n	8005f14 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005eaa:	6938      	ldr	r0, [r7, #16]
 8005eac:	f000 f836 	bl	8005f1c <USBD_GetLen>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005ebe:	7dfb      	ldrb	r3, [r7, #23]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	7812      	ldrb	r2, [r2, #0]
 8005ec8:	701a      	strb	r2, [r3, #0]
  idx++;
 8005eca:	7dfb      	ldrb	r3, [r7, #23]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	701a      	strb	r2, [r3, #0]
  idx++;
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
 8005edc:	3301      	adds	r3, #1
 8005ede:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005ee0:	e013      	b.n	8005f0a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	7812      	ldrb	r2, [r2, #0]
 8005eec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	613b      	str	r3, [r7, #16]
    idx++;
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005efa:	7dfb      	ldrb	r3, [r7, #23]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	4413      	add	r3, r2
 8005f00:	2200      	movs	r2, #0
 8005f02:	701a      	strb	r2, [r3, #0]
    idx++;
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
 8005f06:	3301      	adds	r3, #1
 8005f08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e7      	bne.n	8005ee2 <USBD_GetString+0x52>
 8005f12:	e000      	b.n	8005f16 <USBD_GetString+0x86>
    return;
 8005f14:	bf00      	nop
  }
}
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005f2c:	e005      	b.n	8005f3a <USBD_GetLen+0x1e>
  {
    len++;
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	3301      	adds	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	3301      	adds	r3, #1
 8005f38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f5      	bne.n	8005f2e <USBD_GetLen+0x12>
  }

  return len;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	2100      	movs	r1, #0
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fbff 	bl	800677a <USBD_LL_Transmit>

  return USBD_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b084      	sub	sp, #16
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	2100      	movs	r1, #0
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 fbee 	bl	800677a <USBD_LL_Transmit>

  return USBD_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	2100      	movs	r1, #0
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 fbfe 	bl	80067bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b082      	sub	sp, #8
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005fda:	2300      	movs	r3, #0
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2100      	movs	r1, #0
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fbca 	bl	800677a <USBD_LL_Transmit>

  return USBD_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2205      	movs	r2, #5
 8005ffc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006000:	2300      	movs	r3, #0
 8006002:	2200      	movs	r2, #0
 8006004:	2100      	movs	r1, #0
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fbd8 	bl	80067bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3708      	adds	r7, #8
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800601c:	2200      	movs	r2, #0
 800601e:	490e      	ldr	r1, [pc, #56]	; (8006058 <MX_USB_DEVICE_Init+0x40>)
 8006020:	480e      	ldr	r0, [pc, #56]	; (800605c <MX_USB_DEVICE_Init+0x44>)
 8006022:	f7fe fd23 	bl	8004a6c <USBD_Init>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800602c:	f7fa fb8c 	bl	8000748 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006030:	490b      	ldr	r1, [pc, #44]	; (8006060 <MX_USB_DEVICE_Init+0x48>)
 8006032:	480a      	ldr	r0, [pc, #40]	; (800605c <MX_USB_DEVICE_Init+0x44>)
 8006034:	f7fe fd4a 	bl	8004acc <USBD_RegisterClass>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800603e:	f7fa fb83 	bl	8000748 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006042:	4806      	ldr	r0, [pc, #24]	; (800605c <MX_USB_DEVICE_Init+0x44>)
 8006044:	f7fe fd78 	bl	8004b38 <USBD_Start>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800604e:	f7fa fb7b 	bl	8000748 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006052:	bf00      	nop
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	200000c4 	.word	0x200000c4
 800605c:	20000140 	.word	0x20000140
 8006060:	20000010 	.word	0x20000010

08006064 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	4603      	mov	r3, r0
 800606c:	6039      	str	r1, [r7, #0]
 800606e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2212      	movs	r2, #18
 8006074:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006076:	4b03      	ldr	r3, [pc, #12]	; (8006084 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr
 8006084:	200000e0 	.word	0x200000e0

08006088 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	6039      	str	r1, [r7, #0]
 8006092:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2204      	movs	r2, #4
 8006098:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800609a:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800609c:	4618      	mov	r0, r3
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	200000f4 	.word	0x200000f4

080060ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	4603      	mov	r3, r0
 80060b4:	6039      	str	r1, [r7, #0]
 80060b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	4907      	ldr	r1, [pc, #28]	; (80060e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80060c2:	4808      	ldr	r0, [pc, #32]	; (80060e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80060c4:	f7ff fee4 	bl	8005e90 <USBD_GetString>
 80060c8:	e004      	b.n	80060d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	4904      	ldr	r1, [pc, #16]	; (80060e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80060ce:	4805      	ldr	r0, [pc, #20]	; (80060e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80060d0:	f7ff fede 	bl	8005e90 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060d4:	4b02      	ldr	r3, [pc, #8]	; (80060e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	2000041c 	.word	0x2000041c
 80060e4:	080068f8 	.word	0x080068f8

080060e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	6039      	str	r1, [r7, #0]
 80060f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	4904      	ldr	r1, [pc, #16]	; (8006108 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80060f8:	4804      	ldr	r0, [pc, #16]	; (800610c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80060fa:	f7ff fec9 	bl	8005e90 <USBD_GetString>
  return USBD_StrDesc;
 80060fe:	4b02      	ldr	r3, [pc, #8]	; (8006108 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	2000041c 	.word	0x2000041c
 800610c:	08006908 	.word	0x08006908

08006110 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	6039      	str	r1, [r7, #0]
 800611a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	221a      	movs	r2, #26
 8006120:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006122:	f000 f843 	bl	80061ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006126:	4b02      	ldr	r3, [pc, #8]	; (8006130 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	200000f8 	.word	0x200000f8

08006134 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	6039      	str	r1, [r7, #0]
 800613e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d105      	bne.n	8006152 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	4907      	ldr	r1, [pc, #28]	; (8006168 <USBD_FS_ConfigStrDescriptor+0x34>)
 800614a:	4808      	ldr	r0, [pc, #32]	; (800616c <USBD_FS_ConfigStrDescriptor+0x38>)
 800614c:	f7ff fea0 	bl	8005e90 <USBD_GetString>
 8006150:	e004      	b.n	800615c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	4904      	ldr	r1, [pc, #16]	; (8006168 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006156:	4805      	ldr	r0, [pc, #20]	; (800616c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006158:	f7ff fe9a 	bl	8005e90 <USBD_GetString>
  }
  return USBD_StrDesc;
 800615c:	4b02      	ldr	r3, [pc, #8]	; (8006168 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	2000041c 	.word	0x2000041c
 800616c:	0800691c 	.word	0x0800691c

08006170 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	4603      	mov	r3, r0
 8006178:	6039      	str	r1, [r7, #0]
 800617a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d105      	bne.n	800618e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	4907      	ldr	r1, [pc, #28]	; (80061a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006186:	4808      	ldr	r0, [pc, #32]	; (80061a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006188:	f7ff fe82 	bl	8005e90 <USBD_GetString>
 800618c:	e004      	b.n	8006198 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	4904      	ldr	r1, [pc, #16]	; (80061a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006192:	4805      	ldr	r0, [pc, #20]	; (80061a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006194:	f7ff fe7c 	bl	8005e90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006198:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	2000041c 	.word	0x2000041c
 80061a8:	08006928 	.word	0x08006928

080061ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80061b2:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <Get_SerialNum+0x44>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80061b8:	4b0e      	ldr	r3, [pc, #56]	; (80061f4 <Get_SerialNum+0x48>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80061be:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <Get_SerialNum+0x4c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4413      	add	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d009      	beq.n	80061e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80061d2:	2208      	movs	r2, #8
 80061d4:	4909      	ldr	r1, [pc, #36]	; (80061fc <Get_SerialNum+0x50>)
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f814 	bl	8006204 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80061dc:	2204      	movs	r2, #4
 80061de:	4908      	ldr	r1, [pc, #32]	; (8006200 <Get_SerialNum+0x54>)
 80061e0:	68b8      	ldr	r0, [r7, #8]
 80061e2:	f000 f80f 	bl	8006204 <IntToUnicode>
  }
}
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	1fff7a10 	.word	0x1fff7a10
 80061f4:	1fff7a14 	.word	0x1fff7a14
 80061f8:	1fff7a18 	.word	0x1fff7a18
 80061fc:	200000fa 	.word	0x200000fa
 8006200:	2000010a 	.word	0x2000010a

08006204 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006216:	2300      	movs	r3, #0
 8006218:	75fb      	strb	r3, [r7, #23]
 800621a:	e027      	b.n	800626c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	0f1b      	lsrs	r3, r3, #28
 8006220:	2b09      	cmp	r3, #9
 8006222:	d80b      	bhi.n	800623c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	0f1b      	lsrs	r3, r3, #28
 8006228:	b2da      	uxtb	r2, r3
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	4619      	mov	r1, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	440b      	add	r3, r1
 8006234:	3230      	adds	r2, #48	; 0x30
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e00a      	b.n	8006252 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	0f1b      	lsrs	r3, r3, #28
 8006240:	b2da      	uxtb	r2, r3
 8006242:	7dfb      	ldrb	r3, [r7, #23]
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4619      	mov	r1, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	440b      	add	r3, r1
 800624c:	3237      	adds	r2, #55	; 0x37
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	3301      	adds	r3, #1
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	4413      	add	r3, r2
 8006262:	2200      	movs	r2, #0
 8006264:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	3301      	adds	r3, #1
 800626a:	75fb      	strb	r3, [r7, #23]
 800626c:	7dfa      	ldrb	r2, [r7, #23]
 800626e:	79fb      	ldrb	r3, [r7, #7]
 8006270:	429a      	cmp	r2, r3
 8006272:	d3d3      	bcc.n	800621c <IntToUnicode+0x18>
  }
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	371c      	adds	r7, #28
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08a      	sub	sp, #40	; 0x28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800628c:	f107 0314 	add.w	r3, r7, #20
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	605a      	str	r2, [r3, #4]
 8006296:	609a      	str	r2, [r3, #8]
 8006298:	60da      	str	r2, [r3, #12]
 800629a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062a4:	d13a      	bne.n	800631c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062a6:	2300      	movs	r3, #0
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	4a1d      	ldr	r2, [pc, #116]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	6313      	str	r3, [r2, #48]	; 0x30
 80062b6:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	613b      	str	r3, [r7, #16]
 80062c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80062c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80062c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c8:	2302      	movs	r3, #2
 80062ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062d0:	2303      	movs	r3, #3
 80062d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80062d4:	230a      	movs	r3, #10
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	4619      	mov	r1, r3
 80062de:	4812      	ldr	r0, [pc, #72]	; (8006328 <HAL_PCD_MspInit+0xa4>)
 80062e0:	f7fa fc78 	bl	8000bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80062e4:	4b0f      	ldr	r3, [pc, #60]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	4a0e      	ldr	r2, [pc, #56]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ee:	6353      	str	r3, [r2, #52]	; 0x34
 80062f0:	2300      	movs	r3, #0
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	4b0b      	ldr	r3, [pc, #44]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f8:	4a0a      	ldr	r2, [pc, #40]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 80062fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062fe:	6453      	str	r3, [r2, #68]	; 0x44
 8006300:	4b08      	ldr	r3, [pc, #32]	; (8006324 <HAL_PCD_MspInit+0xa0>)
 8006302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800630c:	2200      	movs	r2, #0
 800630e:	2100      	movs	r1, #0
 8006310:	2043      	movs	r0, #67	; 0x43
 8006312:	f7fa fc28 	bl	8000b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006316:	2043      	movs	r0, #67	; 0x43
 8006318:	f7fa fc41 	bl	8000b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800631c:	bf00      	nop
 800631e:	3728      	adds	r7, #40	; 0x28
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	40023800 	.word	0x40023800
 8006328:	40020000 	.word	0x40020000

0800632c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f7fe fc45 	bl	8004bd2 <USBD_LL_SetupStage>
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006362:	78fa      	ldrb	r2, [r7, #3]
 8006364:	6879      	ldr	r1, [r7, #4]
 8006366:	4613      	mov	r3, r2
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	4413      	add	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	440b      	add	r3, r1
 8006370:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	78fb      	ldrb	r3, [r7, #3]
 8006378:	4619      	mov	r1, r3
 800637a:	f7fe fc7f 	bl	8004c7c <USBD_LL_DataOutStage>
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006398:	78fa      	ldrb	r2, [r7, #3]
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	4613      	mov	r3, r2
 800639e:	00db      	lsls	r3, r3, #3
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	440b      	add	r3, r1
 80063a6:	334c      	adds	r3, #76	; 0x4c
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	4619      	mov	r1, r3
 80063ae:	f7fe fd18 	bl	8004de2 <USBD_LL_DataInStage>
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe fe4c 	bl	8005066 <USBD_LL_SOF>
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80063de:	2301      	movs	r3, #1
 80063e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d102      	bne.n	80063f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80063ea:	2300      	movs	r3, #0
 80063ec:	73fb      	strb	r3, [r7, #15]
 80063ee:	e008      	b.n	8006402 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d102      	bne.n	80063fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
 80063fc:	e001      	b.n	8006402 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80063fe:	f7fa f9a3 	bl	8000748 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006408:	7bfa      	ldrb	r2, [r7, #15]
 800640a:	4611      	mov	r1, r2
 800640c:	4618      	mov	r0, r3
 800640e:	f7fe fdec 	bl	8004fea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006418:	4618      	mov	r0, r3
 800641a:	f7fe fd94 	bl	8004f46 <USBD_LL_Reset>
}
 800641e:	bf00      	nop
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe fde7 	bl	800500a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800644e:	f043 0301 	orr.w	r3, r3, #1
 8006452:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800645c:	4b04      	ldr	r3, [pc, #16]	; (8006470 <HAL_PCD_SuspendCallback+0x48>)
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	4a03      	ldr	r2, [pc, #12]	; (8006470 <HAL_PCD_SuspendCallback+0x48>)
 8006462:	f043 0306 	orr.w	r3, r3, #6
 8006466:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006468:	bf00      	nop
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	e000ed00 	.word	0xe000ed00

08006474 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe fdd7 	bl	8005036 <USBD_LL_Resume>
}
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80064a2:	78fa      	ldrb	r2, [r7, #3]
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe fe2f 	bl	800510a <USBD_LL_IsoOUTIncomplete>
}
 80064ac:	bf00      	nop
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80064c6:	78fa      	ldrb	r2, [r7, #3]
 80064c8:	4611      	mov	r1, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe fdeb 	bl	80050a6 <USBD_LL_IsoINIncomplete>
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe fe41 	bl	800516e <USBD_LL_DevConnected>
}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe fe3e 	bl	8005184 <USBD_LL_DevDisconnected>
}
 8006508:	bf00      	nop
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d13c      	bne.n	800659a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006520:	4a20      	ldr	r2, [pc, #128]	; (80065a4 <USBD_LL_Init+0x94>)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a1e      	ldr	r2, [pc, #120]	; (80065a4 <USBD_LL_Init+0x94>)
 800652c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006530:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <USBD_LL_Init+0x94>)
 8006532:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006536:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006538:	4b1a      	ldr	r3, [pc, #104]	; (80065a4 <USBD_LL_Init+0x94>)
 800653a:	2204      	movs	r2, #4
 800653c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800653e:	4b19      	ldr	r3, [pc, #100]	; (80065a4 <USBD_LL_Init+0x94>)
 8006540:	2202      	movs	r2, #2
 8006542:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006544:	4b17      	ldr	r3, [pc, #92]	; (80065a4 <USBD_LL_Init+0x94>)
 8006546:	2200      	movs	r2, #0
 8006548:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800654a:	4b16      	ldr	r3, [pc, #88]	; (80065a4 <USBD_LL_Init+0x94>)
 800654c:	2202      	movs	r2, #2
 800654e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006550:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <USBD_LL_Init+0x94>)
 8006552:	2200      	movs	r2, #0
 8006554:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006556:	4b13      	ldr	r3, [pc, #76]	; (80065a4 <USBD_LL_Init+0x94>)
 8006558:	2200      	movs	r2, #0
 800655a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800655c:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <USBD_LL_Init+0x94>)
 800655e:	2200      	movs	r2, #0
 8006560:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006562:	4b10      	ldr	r3, [pc, #64]	; (80065a4 <USBD_LL_Init+0x94>)
 8006564:	2200      	movs	r2, #0
 8006566:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006568:	4b0e      	ldr	r3, [pc, #56]	; (80065a4 <USBD_LL_Init+0x94>)
 800656a:	2200      	movs	r2, #0
 800656c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800656e:	480d      	ldr	r0, [pc, #52]	; (80065a4 <USBD_LL_Init+0x94>)
 8006570:	f7fa fcff 	bl	8000f72 <HAL_PCD_Init>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800657a:	f7fa f8e5 	bl	8000748 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800657e:	2180      	movs	r1, #128	; 0x80
 8006580:	4808      	ldr	r0, [pc, #32]	; (80065a4 <USBD_LL_Init+0x94>)
 8006582:	f7fb ff3e 	bl	8002402 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006586:	2240      	movs	r2, #64	; 0x40
 8006588:	2100      	movs	r1, #0
 800658a:	4806      	ldr	r0, [pc, #24]	; (80065a4 <USBD_LL_Init+0x94>)
 800658c:	f7fb fef2 	bl	8002374 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006590:	2280      	movs	r2, #128	; 0x80
 8006592:	2101      	movs	r1, #1
 8006594:	4803      	ldr	r0, [pc, #12]	; (80065a4 <USBD_LL_Init+0x94>)
 8006596:	f7fb feed 	bl	8002374 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	2000061c 	.word	0x2000061c

080065a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065b0:	2300      	movs	r3, #0
 80065b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fa fdf4 	bl	80011ac <HAL_PCD_Start>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 f930 	bl	8006830 <USBD_Get_USB_Status>
 80065d0:	4603      	mov	r3, r0
 80065d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	4608      	mov	r0, r1
 80065e8:	4611      	mov	r1, r2
 80065ea:	461a      	mov	r2, r3
 80065ec:	4603      	mov	r3, r0
 80065ee:	70fb      	strb	r3, [r7, #3]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70bb      	strb	r3, [r7, #2]
 80065f4:	4613      	mov	r3, r2
 80065f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006606:	78bb      	ldrb	r3, [r7, #2]
 8006608:	883a      	ldrh	r2, [r7, #0]
 800660a:	78f9      	ldrb	r1, [r7, #3]
 800660c:	f7fb fac5 	bl	8001b9a <HAL_PCD_EP_Open>
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f90a 	bl	8006830 <USBD_Get_USB_Status>
 800661c:	4603      	mov	r3, r0
 800661e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006620:	7bbb      	ldrb	r3, [r7, #14]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b084      	sub	sp, #16
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	460b      	mov	r3, r1
 8006634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006644:	78fa      	ldrb	r2, [r7, #3]
 8006646:	4611      	mov	r1, r2
 8006648:	4618      	mov	r0, r3
 800664a:	f7fb fb0e 	bl	8001c6a <HAL_PCD_EP_Close>
 800664e:	4603      	mov	r3, r0
 8006650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 f8eb 	bl	8006830 <USBD_Get_USB_Status>
 800665a:	4603      	mov	r3, r0
 800665c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800665e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006682:	78fa      	ldrb	r2, [r7, #3]
 8006684:	4611      	mov	r1, r2
 8006686:	4618      	mov	r0, r3
 8006688:	f7fb fbce 	bl	8001e28 <HAL_PCD_EP_SetStall>
 800668c:	4603      	mov	r3, r0
 800668e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 f8cc 	bl	8006830 <USBD_Get_USB_Status>
 8006698:	4603      	mov	r3, r0
 800669a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800669c:	7bbb      	ldrb	r3, [r7, #14]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b084      	sub	sp, #16
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80066c0:	78fa      	ldrb	r2, [r7, #3]
 80066c2:	4611      	mov	r1, r2
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fb fc13 	bl	8001ef0 <HAL_PCD_EP_ClrStall>
 80066ca:	4603      	mov	r3, r0
 80066cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 f8ad 	bl	8006830 <USBD_Get_USB_Status>
 80066d6:	4603      	mov	r3, r0
 80066d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066da:	7bbb      	ldrb	r3, [r7, #14]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	460b      	mov	r3, r1
 80066ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80066f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80066f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	da0b      	bge.n	8006718 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006706:	68f9      	ldr	r1, [r7, #12]
 8006708:	4613      	mov	r3, r2
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	333e      	adds	r3, #62	; 0x3e
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	e00b      	b.n	8006730 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006718:	78fb      	ldrb	r3, [r7, #3]
 800671a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800671e:	68f9      	ldr	r1, [r7, #12]
 8006720:	4613      	mov	r3, r2
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	440b      	add	r3, r1
 800672a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800672e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006756:	78fa      	ldrb	r2, [r7, #3]
 8006758:	4611      	mov	r1, r2
 800675a:	4618      	mov	r0, r3
 800675c:	f7fb f9f8 	bl	8001b50 <HAL_PCD_SetAddress>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	4618      	mov	r0, r3
 8006768:	f000 f862 	bl	8006830 <USBD_Get_USB_Status>
 800676c:	4603      	mov	r3, r0
 800676e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006770:	7bbb      	ldrb	r3, [r7, #14]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b086      	sub	sp, #24
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	607a      	str	r2, [r7, #4]
 8006784:	603b      	str	r3, [r7, #0]
 8006786:	460b      	mov	r3, r1
 8006788:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006798:	7af9      	ldrb	r1, [r7, #11]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	f7fb faf9 	bl	8001d94 <HAL_PCD_EP_Transmit>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 f841 	bl	8006830 <USBD_Get_USB_Status>
 80067ae:	4603      	mov	r3, r0
 80067b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80067b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	607a      	str	r2, [r7, #4]
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	460b      	mov	r3, r1
 80067ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80067da:	7af9      	ldrb	r1, [r7, #11]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	f7fb fa8d 	bl	8001cfe <HAL_PCD_EP_Receive>
 80067e4:	4603      	mov	r3, r0
 80067e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 f820 	bl	8006830 <USBD_Get_USB_Status>
 80067f0:	4603      	mov	r3, r0
 80067f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80067f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006808:	4b03      	ldr	r3, [pc, #12]	; (8006818 <USBD_static_malloc+0x18>)
}
 800680a:	4618      	mov	r0, r3
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	20000b28 	.word	0x20000b28

0800681c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]

}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	4603      	mov	r3, r0
 8006838:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	2b03      	cmp	r3, #3
 8006842:	d817      	bhi.n	8006874 <USBD_Get_USB_Status+0x44>
 8006844:	a201      	add	r2, pc, #4	; (adr r2, 800684c <USBD_Get_USB_Status+0x1c>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	0800685d 	.word	0x0800685d
 8006850:	08006863 	.word	0x08006863
 8006854:	08006869 	.word	0x08006869
 8006858:	0800686f 	.word	0x0800686f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]
    break;
 8006860:	e00b      	b.n	800687a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006862:	2303      	movs	r3, #3
 8006864:	73fb      	strb	r3, [r7, #15]
    break;
 8006866:	e008      	b.n	800687a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006868:	2301      	movs	r3, #1
 800686a:	73fb      	strb	r3, [r7, #15]
    break;
 800686c:	e005      	b.n	800687a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800686e:	2303      	movs	r3, #3
 8006870:	73fb      	strb	r3, [r7, #15]
    break;
 8006872:	e002      	b.n	800687a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006874:	2303      	movs	r3, #3
 8006876:	73fb      	strb	r3, [r7, #15]
    break;
 8006878:	bf00      	nop
  }
  return usb_status;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <memset>:
 8006888:	4402      	add	r2, r0
 800688a:	4603      	mov	r3, r0
 800688c:	4293      	cmp	r3, r2
 800688e:	d100      	bne.n	8006892 <memset+0xa>
 8006890:	4770      	bx	lr
 8006892:	f803 1b01 	strb.w	r1, [r3], #1
 8006896:	e7f9      	b.n	800688c <memset+0x4>

08006898 <__libc_init_array>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	4d0d      	ldr	r5, [pc, #52]	; (80068d0 <__libc_init_array+0x38>)
 800689c:	4c0d      	ldr	r4, [pc, #52]	; (80068d4 <__libc_init_array+0x3c>)
 800689e:	1b64      	subs	r4, r4, r5
 80068a0:	10a4      	asrs	r4, r4, #2
 80068a2:	2600      	movs	r6, #0
 80068a4:	42a6      	cmp	r6, r4
 80068a6:	d109      	bne.n	80068bc <__libc_init_array+0x24>
 80068a8:	4d0b      	ldr	r5, [pc, #44]	; (80068d8 <__libc_init_array+0x40>)
 80068aa:	4c0c      	ldr	r4, [pc, #48]	; (80068dc <__libc_init_array+0x44>)
 80068ac:	f000 f818 	bl	80068e0 <_init>
 80068b0:	1b64      	subs	r4, r4, r5
 80068b2:	10a4      	asrs	r4, r4, #2
 80068b4:	2600      	movs	r6, #0
 80068b6:	42a6      	cmp	r6, r4
 80068b8:	d105      	bne.n	80068c6 <__libc_init_array+0x2e>
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c0:	4798      	blx	r3
 80068c2:	3601      	adds	r6, #1
 80068c4:	e7ee      	b.n	80068a4 <__libc_init_array+0xc>
 80068c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068ca:	4798      	blx	r3
 80068cc:	3601      	adds	r6, #1
 80068ce:	e7f2      	b.n	80068b6 <__libc_init_array+0x1e>
 80068d0:	08006950 	.word	0x08006950
 80068d4:	08006950 	.word	0x08006950
 80068d8:	08006950 	.word	0x08006950
 80068dc:	08006954 	.word	0x08006954

080068e0 <_init>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr

080068ec <_fini>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	bf00      	nop
 80068f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f2:	bc08      	pop	{r3}
 80068f4:	469e      	mov	lr, r3
 80068f6:	4770      	bx	lr
